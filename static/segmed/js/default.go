package controllers
import (
  "github.com/astaxie/beego"
  _ "github.com/denisenkom/go-mssqldb"
  "database/sql"
  //"log"
  "fmt"
  "flag"  
  "bytes"
  "bufio"
  "encoding/base64"
  "crypto/sha512"
  "strconv"
  "sevenplus/models"
  "github.com/jung-kurt/gofpdf"
  "github.com/jung-kurt/gofpdf/contrib/barcode"
  "github.com/boombuler/barcode/qr"
  "math"
  "github.com/dimdin/decimal"
  "time"
  "github.com/leekchan/accounting"
  "encoding/csv"
  "strings"
  "encoding/hex"
  "encoding/json"
  "net/http"
  "net/url"
  "io/ioutil"
  "github.com/tealeg/xlsx"
  "os"
  "gopkg.in/gomail.v2"
  "github.com/UnionMexicanaDelNorte/soapClientGolangForSSC"
  //"github.com/justwatchcom/goat"
  //"encoding/xml"
  //"github.com/fiorix/wsdl2go/soap"
  //"component"
  //"security"
  "encoding/xml"
  "io"
  //"sync"
  //"crypto/md5"
  "path/filepath"
  unicommon "github.com/unidoc/unidoc/common"
  unilicense "github.com/unidoc/unidoc/license"
  unipdf "github.com/unidoc/unidoc/pdf"
  //"github.com/pieroxy/lz-string-go"
  "unicode/utf16"
  "sort"
  "github.com/UnionMexicanaDelNorte/numerosAPalabras"
)



type MainController struct {
  beego.Controller
}
type CargaCosasDeActivoController struct {
  beego.Controller
}
type SubeSSCController struct {
  beego.Controller
}
type DashboardController struct {
  beego.Controller
}
type LoginController struct {
  beego.Controller
}
type SaldoCuentaAPIController struct {
  beego.Controller
}
type DetalleLigadoController struct {
  beego.Controller
}
type GenerarOccidenteDetalleController struct {
  beego.Controller
}
type GenerarInventarioDetalleController struct {
  beego.Controller
}
type ArreglarOccidenteDetalleController struct {
  beego.Controller
}
type SubeLineasDiezmoConceptoController struct {
  beego.Controller
}
type SelectChangeCuentaPropiaController struct {
  beego.Controller
}
type ArreglarOccidenteDetalleIglesiaController struct {
  beego.Controller
}
type GenerarReporteDeIglesiasDiezmosEnExcelController struct {
  beego.Controller
}
type GenerarReporteDeIglesiasDiezmosEnExcelNuevoController struct {
  beego.Controller
}
type GenerarDiarioEnExcelController struct {
  beego.Controller
}
type GenerarExcelTablaController struct {
  beego.Controller
}
type GenerarDiarioSevenController struct {
  beego.Controller
}
type DescargarConcentradoEmpleadosController struct {
  beego.Controller
}
type EliminaConceptoManuntencionController struct {
  beego.Controller
}
type DesligaController struct {
  beego.Controller
}
type ChangeIdBancoController struct {
  beego.Controller
}
type PresupuestoAnioController struct {
  beego.Controller
}
type DameDatosPresupuestoController struct {
  beego.Controller
}
type PresupuestoViajesController struct {
  beego.Controller
}
type PresupuestoEventosController struct {
  beego.Controller
}
type PresupuestoDiezmosDistritosController struct {
  beego.Controller
}
type GrabaPcentDiezmoPresupuestoController struct {
  beego.Controller
}
type GrabaLineaPresupuestoViajesController struct {
  beego.Controller
}
type GrabaLineaPresupuestoEventosController struct {
  beego.Controller
}
type EliminaLineaPresupuestoViajesController struct {
  beego.Controller
}
type EliminaLineaPresupuestoEventosController struct {
  beego.Controller
}
type GrabaViajesPresupuestoController struct {
  beego.Controller
}
type GrabaEventosPresupuestoController struct {
  beego.Controller
}
type GrabaDiezmoPresupuestoController struct {
  beego.Controller
}
type BorraIdBancoController struct {
  beego.Controller
}
type GenerarReciboDiarioEnPDFController struct {
  beego.Controller
}
type GenerarDiarioEnPDFController struct {
  beego.Controller
}
type GenerarBancoEnPDFController struct {
  beego.Controller
}
type DepartamentosSevenController struct {
  beego.Controller
}
type DetalleDepartamentoSevenController struct {
  beego.Controller
}
type SabanaDepartamentoSevenController struct {
  beego.Controller
}
type GenerarPDFconXMLController struct {
  beego.Controller
}
type GenerarPDFController struct {
  beego.Controller
}
type GenerarDiarioController struct {
  beego.Controller
}
type GenerarReporteDeIglesiasDiezmosController struct {
  beego.Controller
}
type GenerarReporteDeIglesiasDiezmosEnPaginaController struct {
  beego.Controller
}
type GenerarReporteDeIglesiasDiezmosEnPaginaDetalleController struct {
  beego.Controller
}
type RegistraDiarioAPIController struct {
  beego.Controller
}
type CargaTiposDeInformeController struct {
  beego.Controller
}
type TablaImpuestosController struct {
  beego.Controller
}
type ArreglarInventarioDetalleController struct {
  beego.Controller
}
type ISRController struct {
  beego.Controller
}
type TimbraNominaController struct {
  beego.Controller
}
type TimbraNomina33Controller struct {
  beego.Controller
}
type TablaImpuestosDetalleController struct {
  beego.Controller
}
type GenerarEstadosDeCuentaController struct {
  beego.Controller
}
type GenerarEstadosDeCuentaPorFNCTyPROJController struct {
  beego.Controller
}
type CambioLocoController struct {
  beego.Controller
}
type CambioLocoTFWWController struct {
  beego.Controller
}
type GenerarEstadosDeCuentaSevenController struct {
  beego.Controller
}
type GenerarEstadosDeCuentaCombinadoSevenController struct {
  beego.Controller
}
type GenerarBalanzaSevenController struct {
  beego.Controller
}
type CuentasSevenController struct {
  beego.Controller
}
type InfoAnticiposController struct {
  beego.Controller
}
type InfoAnticiposMinistrosController struct {
  beego.Controller
}
type MaximoDiarioController struct {
  beego.Controller
}
type EliminarLineaCedulaController struct {
  beego.Controller
}
type EliminarNumCtaPagoController struct {
  beego.Controller
}
type EliminarPalabraController struct {
  beego.Controller
}
type NvoNumCtaPagoController struct {
  beego.Controller
}
type NuevaPalabraEtiquetaController struct {
  beego.Controller
}
type NuevaEtiquetaController struct {
  beego.Controller
}
type Sube1BancoController struct {
  beego.Controller
}
type CambiarUnidadDeNegocioController struct {
  beego.Controller
}
type NuevoUsuarioIglesiaController struct {
  beego.Controller
}
type GuardarBUNITController struct {
  beego.Controller
}
type MandarDimensionesYLibroMayorController struct {
  beego.Controller
}
type ContabilizaALaBravaController struct {
  beego.Controller
}
type ActualizaCuentasController struct {
  beego.Controller
}
type GenerarBUNITController struct {
  beego.Controller
}
type Migrar62Controller struct {
  beego.Controller
}
type Migrar62PresupuestoController struct {
  beego.Controller
}
type EstadosDeCuentaController struct {
  beego.Controller
}
type TipoDeDimensionesController struct {
  beego.Controller
}

type NuevoTipoDeDimensionesController struct {
  beego.Controller
}

type EditarTipoDeDimensionesController struct {
  beego.Controller
}
type NuevaDimensionController struct {
  beego.Controller
}
type DeclareController struct {
  beego.Controller
}
type DimensionesController struct {
  beego.Controller
}
type EditarDimensionController struct {
  beego.Controller
}
type ClasificacionDimensionController struct {
  beego.Controller
}
type ObtieneDimensionController struct {
  beego.Controller
}
type GuardarClasificacionDimensionesController struct {
  beego.Controller
}
type NuevaCuentaController struct {
  beego.Controller
}
type ListaLineasInformeDiezmoController struct {
  beego.Controller
}
type DamePrepolizaDeInformeController struct {
  beego.Controller
}
type RevisaNotificacionesController struct {
  beego.Controller
}
type ListaConceptosCedulasController struct {
  beego.Controller
}
type ListaDiariosRetenidosController struct {
  beego.Controller
}
type ActualizaTablaConceptosDeNominaController struct {
  beego.Controller
}
type DameOptionSegunTipoConceptoSATDeLaBDController struct {
  beego.Controller
}
type VistaPreviaFacturaIngresoController struct {
  beego.Controller
}
type TimbrarFacturaDeIngresoController struct {
  beego.Controller
}
type TimbraIngresosNewController struct {
  beego.Controller
}
type RegeneraXMLDeIngresosController struct {
  beego.Controller
}
type CancelarIngresosNewController struct {
  beego.Controller
}
type DameHashController struct {
  beego.Controller
}
type DamePeriodosController struct {
  beego.Controller
}
type GeneraPretimbradoController struct {
  beego.Controller
}
type ListaLineasCedulasController struct {
  beego.Controller
}
type ChecaOtrosCamposController struct {
  beego.Controller
}
type ListaLineasTiposDeDiarioController struct {
  beego.Controller
}
type BuscarPorReferenciaDiariosController struct {
  beego.Controller
}
type BuscarPorCantidadDiariosController struct {
  beego.Controller
}
type BuscarPorCantidadSumaController struct {
  beego.Controller
}
type ListaDiezmoConceptoController struct {
  beego.Controller
}
type ListaPreviaDeTimbradoController struct {
  beego.Controller
}
type ListaUsuariosIglesiasController struct {
  beego.Controller
}
type ListaCedulasController struct {
  beego.Controller
}
type ISRAnualController struct {
  beego.Controller
}
type ISRAnualExcelController struct {
  beego.Controller
}
type NuevaCedulasController struct {
  beego.Controller
}
type ConfigInicialLineasInformesController struct {
  beego.Controller
}
type ConfigInicialLineasCedulasController struct {
  beego.Controller
}
type ConfigInicialLineasTiposDeDiarioController struct {
  beego.Controller
}
type NuevoDiezmoConceptoController struct {
  beego.Controller
}
type NuevoLineasCedulasController struct {
  beego.Controller
}
type NuevoLineasDiezmoConceptoController struct {
  beego.Controller
}
type NuevoManuntencionPersonaController struct {
  beego.Controller
}
type GuardaClienteController struct {
  beego.Controller
}
type NuevoConceptoManuntencionController struct {
  beego.Controller
}
type CargaManuntencionPersonaController struct {
  beego.Controller
}
type ImprimirRecibosYaTimbradosController struct {
  beego.Controller
}
type NuevoLineasTiposDeDiarioController struct {
  beego.Controller
}
type NuevoLineasDeDiarioController struct {
  beego.Controller
}
type GuardarConfigOpcionesController struct {
  beego.Controller
}
type ContabilizaDiarioController struct {
  beego.Controller
}
type GenerarCedulasController struct {
  beego.Controller
}
type GuardarConceptoCedulasController struct {
  beego.Controller
}
type GenerarCedulaPorConceptoController struct {
  beego.Controller
}
type GenerarCedulaPorLineaController struct {
  beego.Controller
}
type RegistraDiarioController struct {
  beego.Controller
}
type DiariosReversiadosController struct {
  beego.Controller
}
type NoIdentificadosController struct {
  beego.Controller
}
type SubeInformeController struct {
  beego.Controller
}
type NuevoTipoDeDiarioController struct {
  beego.Controller
}
type ListaTiposDeDiarioController struct {
  beego.Controller
}
type ListaDistritosPresupuestoController struct {
  beego.Controller
}
type ListaActivosFijosController struct {
  beego.Controller
}
type DameLineaDelTipoDeDiarioController struct {
  beego.Controller
}
type DameDimensionesDisponiblesSegunLaCuentaController struct {
  beego.Controller
}
type VeDetalleController struct {
  beego.Controller
}
type VeDetallePrimerNivelController struct {
  beego.Controller
}
type VeDetalleSegundoNivelController struct {
  beego.Controller
}
type GetConfigController struct {
  beego.Controller
}
type GenerarReporteDeIglesiasController struct {
  beego.Controller
}
type GenerarReporteDeMATController struct {
  beego.Controller
}
type GenerarCedulaCuentasBancosController struct {
  beego.Controller
}
type DashboardFiscalistaController struct {
  beego.Controller
}
type DameListaDeCamposController struct {
  beego.Controller
}
type GenerarReporteDeMATSabanaController struct {
  beego.Controller
}
type GenerarReporteBalanzaController struct {
  beego.Controller
}
type TablaDiariosDiferenciasController struct {
  beego.Controller
}
type CorrigeDiariosDiferenciasController struct {
  beego.Controller
}
type CambiarContrasenaController struct {
  beego.Controller
}
type DetalleSabanaController struct {
  beego.Controller
}
type DetalleIglesiaSabanaController struct {
  beego.Controller
}
type CargaERController struct {
  beego.Controller
}
type ObtenArchivosBancoController struct {
  beego.Controller
}
type DameEtiquetasController struct {
  beego.Controller
}
type DameCorreoDelTesoreroController struct {
  beego.Controller
}
type CreaDetallesParaViejitosController struct {
  beego.Controller
}
type CambiarCuentaController struct {
  beego.Controller
}
type CambiarFechaController struct {
  beego.Controller
}
type CambiarPeriodoController struct {
  beego.Controller
}
type ModificaPersonaPayrollController struct {
  beego.Controller
}
type ModificaPersonaPayrollEmeritosController struct {
  beego.Controller
}
type InfoLibroController struct {
  beego.Controller
}
type DatosPayrollController struct {
  beego.Controller
}
type InfoLibroDiarioController struct {
  beego.Controller
}
type CambiaEtiquetaController struct {
  beego.Controller
}
type CambiaEtiquetaDeIngresosController struct {
  beego.Controller
}
type InsertaCadNominaController struct {
  beego.Controller
}
type DameDescuentosDelERController struct {
  beego.Controller
}
type ListaDeCuentasController struct {
  beego.Controller
}
type DameCamposDeLaTablasController struct {
  beego.Controller
}
type ConciliacionEdoCuentaController struct {
  beego.Controller
}
type ProcesaArchivosBancoController struct {
  beego.Controller
}
type ProcesaArchivosBancoTipoDeCambioController struct {
  beego.Controller
}
type ProcesaArchivosBancomerController struct {
  beego.Controller
}
type ProcesaArchivosSantanderController struct {
  beego.Controller
}
type NombresCuentasController struct {
  beego.Controller
}
type NombresCuentasGuardarController struct {
  beego.Controller
}
type LigarController struct {
  beego.Controller
}
type PrepolizaFOBONO_INTERESController struct {
  beego.Controller
}
type DameArbolesController struct {
  beego.Controller
}
type VerFacturacionDeIngresosController struct {
  beego.Controller
}
type VerFacturacionDeIngresosRFCController struct {
  beego.Controller
}
type PeriodosDeFacturacionController struct {
  beego.Controller
}
type GenerarAntilavadoraController struct {
  beego.Controller
}
type TransferenciasCuentasPropiasController struct {
  beego.Controller
}
type TECPporCuentaController struct {
  beego.Controller
}
type PendientesCargoAbonoController struct {
  beego.Controller
}
type PosiblesDuplicadosController struct {
  beego.Controller
}
type CuentaPropiaMarcarController struct {
  beego.Controller
}
type AbonoCargoMarcarController struct {
  beego.Controller
}
type ActualizaMesTimbradoController struct {
  beego.Controller
}
type ActualizaMesCuentasController struct {
  beego.Controller
}
type ActualizaMesTimbradoIngresosController struct {
  beego.Controller
}
type ActualizaAnioController struct {
  beego.Controller
}
type ActualizaAnioPendienteDeLigarController struct {
  beego.Controller
}
type ActualizaDiaTimbradoController struct {
  beego.Controller
}
type ActualizaDiaTimbradoIngresosController struct {
  beego.Controller
}
type ActualizaTablaClientesController struct {
  beego.Controller
}
type ActualizaLibroIngresosEgresosAnioController struct {
  beego.Controller
}
type ActualizaLibroIngresosEgresosAnioPendienteDeLigarController struct {
  beego.Controller
}
type DetalleCuentaPorDiaIngresosEgresosController struct {
  beego.Controller
}
type DetalleCuentaPorDiaIngresosEgresosPendienteDeLigarController struct {
  beego.Controller
}
type DetalleCuentaMesIngresoEgresoController struct {
  beego.Controller
}
type DetalleCuentaMesIngresoEgresoPendienteDeLigarController struct {
  beego.Controller
}
type BuscarRFCPorConceptosController struct {
  beego.Controller
}
type Xml2sqlController struct {
  beego.Controller
}
type DueDateArreglarController struct {
  beego.Controller
}
type CargarDeCarpetaXMLBancosController struct {
  beego.Controller
}
type CargarDeCarpetaTXTBancosController struct {
  beego.Controller
}
type CargarDeCarpetaTXTBancosBanorteController struct {
  beego.Controller
}
type CargarDeCarpetaXMLBancosDetalleSPEIController struct {
  beego.Controller
}
type GenerarExcelParaDeclaracionController struct {
  beego.Controller
}
type GenerarExcelTECPController struct {
  beego.Controller
}
type AbrirXMLController struct {
  beego.Controller
}
type DameXMLController struct {
  beego.Controller
}
type GenerarPreContabilizacionController struct {
  beego.Controller
}
type NumCtaPagoDeClientesController struct {
  beego.Controller
}
type CargaLigadoDeDiaController struct {
  beego.Controller
}
type DamePendientesDeLigarController struct {
  beego.Controller
}
type VerDondeSeLigoController struct {
  beego.Controller
}
type VerDondeSeLigoGetController struct {
  beego.Controller
}
type VerDondeSeLigoPost54Controller struct {
  beego.Controller
}
type ConfigInicialDeVerFacturaController struct {
  beego.Controller
}
type ConfigInicialDeNominaCamposController struct {
  beego.Controller
}
type CargaLigadoDeDiaIngresosController struct {
  beego.Controller
}
type CargaTimbradoDeDiaController struct {
  beego.Controller
}
type CargaTimbradoManualController struct {
  beego.Controller
}
type PendienteDeTimbrarEnElMesController struct {
  beego.Controller
}
type VerTimbradoNominaController struct {
  beego.Controller
}
type CancelaTimbradoNominaController struct {
  beego.Controller
}
type CancelaTimbradoNominaMasivoController struct {
  beego.Controller
}
type TimbresUsadosController struct {
  beego.Controller
}
type DameFolioQueSigueController struct {
  beego.Controller
}
type ActivoFijoController struct {
  beego.Controller
}
type TimbresUsadosTODOSController struct {
  beego.Controller
}
type ObtenerDiarioAnteriormentePosteadoController struct {
  beego.Controller
}




var debug = flag.Bool("debug", false, "enable debugging")
var password = flag.String("password", "SunPlus7!", "the database password")
var port *int = flag.Int("port", 1433, "the database port")
var server = flag.String("server", "localhost", "the database server")
var user = flag.String("user", "sa", "the database user")
type MovimientoECB struct {
  Importe   string `xml:"importe,attr"`
    Fecha   string `xml:"fecha,attr"`
    Descripcion   string `xml:"descripcion,attr"`
}
type MovimientoECBFiscal struct {
  Importe   string `xml:"importe,attr"`
    Fecha   string `xml:"fecha,attr"`
    Descripcion   string `xml:"descripcion,attr"`
}

type Movimientos struct {
  MovimientoECBs    []MovimientoECB    `xml:"MovimientoECB"`
  MovimientoECBsFiscal    []MovimientoECBFiscal    `xml:"MovimientoECBFiscal"`
}

type EstadoDeCuentaBancario struct {
  Movimientoss    []Movimientos    `xml:"Movimientos"`
  NombreCliente string   `xml:"nombreCliente,attr"`
  NumeroCuenta string   `xml:"numeroCuenta,attr"`
  Periodo string   `xml:"periodo,attr"`
}

type AddendaECB struct {
  EstadoDeCuentaBancarios    []EstadoDeCuentaBancario    `xml:"EstadoDeCuentaBancario"`
}


type Addenda struct {
  AddendaECBs    []AddendaECB    `xml:"addendaECB"`
  EstadoDeCuentaBancarios    []EstadoDeCuentaBancario    `xml:"EstadoDeCuentaBancario"`
}

type OrdenSPEI struct {
  Fecha string   `xml:"fecha,attr"`
  Nombre string   `xml:"nombre,attr"`
  Banco string   `xml:"banco,attr"`
  Monto string   `xml:"monto,attr"`
  Cuenta string   `xml:"cuenta,attr"`
  Rastreo string   `xml:"rastreo,attr"`
  Referencia string   `xml:"referencia,attr"`
  Concepto string   `xml:"concepto,attr"`
}

type Ordenes struct {
  OrdenSPEIs    []OrdenSPEI    `xml:"OrdenSPEI"`
}

type DetalleSPEI struct {
  Ordeness    []Ordenes    `xml:"Ordenes"`
}

type Addenda2 struct {
  DetalleSPEIs    []DetalleSPEI    `xml:"DetalleSPEI"`
  
}

type Concepto struct {
  Descripcion string   `xml:"descripcion,attr"`
  Unidad string   `xml:"unidad,attr"`
  Descripcion33 string   `xml:"Descripcion,attr"`
  Unidad33 string   `xml:"Unidad,attr"`
  Cantidad string   `xml:"Cantidad,attr"`
  ClaveProdServ string   `xml:"ClaveProdServ,attr"`
  ClaveUnidad string   `xml:"ClaveUnidad,attr"`
  Importe float64   `xml:"Importe,attr"`
  NoIdentificacion string   `xml:"NoIdentificacion,attr"`
  ValorUnitario string   `xml:"ValorUnitario,attr"`
}

type Conceptos struct {
  Conceptos    []Concepto    `xml:"Concepto"`
}
type RegimenFiscal struct {
  Regimen string   `xml:"Regimen,attr"`
}

type Emisor struct {
  NombreRazonSocial string   `xml:"nombre,attr"`
  RFCEmisor string   `xml:"rfc,attr"`
  NombreRazonSocial33 string   `xml:"Nombre,attr"`
  RFCEmisor33 string   `xml:"Rfc,attr"`
  RegimenFiscal33 string   `xml:"RegimenFiscal,attr"`
  RegimenFiscals    []RegimenFiscal    `xml:"RegimenFiscal"`
}
type Receptor struct {
  NombreRazonSocial string   `xml:"nombre,attr"`
  RFCReceptor string   `xml:"rfc,attr"`
  NombreRazonSocial33 string   `xml:"Nombre,attr"`
  RFCReceptor33 string   `xml:"Rfc,attr"`
  UsoCFDI string   `xml:"UsoCFDI,attr"`
}

type Retencion struct {
  Impuesto string   `xml:"impuesto,attr"`
  Importe float64   `xml:"importe,attr"`
  Impuesto33 string   `xml:"Impuesto,attr"`
  Importe33 float64   `xml:"Importe,attr"`
}

type Retenciones struct {
  Retencions    []Retencion    `xml:"Retencion"`
}



type Impuestos struct {
  TotalImpuestosRetenidos float64   `xml:"totalImpuestosRetenidos,attr"`
  TotalImpuestosTrasladados float64   `xml:"TotalImpuestosTrasladados,attr"`
  TotalImpuestosRetenidos33 float64   `xml:"TotalImpuestosRetenidos,attr"`
  TotalImpuestosTrasladados33 float64   `xml:"totalImpuestosTrasladados,attr"`
  Retencioness    []Retenciones    `xml:"Retenciones"`

  
}

type TimbreFiscalDigital struct {
  UUID string   `xml:"UUID,attr"`
  SelloCFD string   `xml:"selloCFD,attr"`
  SelloSAT string   `xml:"selloSAT,attr"`
  SelloCFD33 string   `xml:"SelloCFD,attr"`
  SelloSAT33 string   `xml:"SelloSAT,attr"`
  NoCertificadoSAT string   `xml:"NoCertificadoSAT,attr"`
  RfcProvCertif string   `xml:"RfcProvCertif,attr"`
  FechaTimbrado string   `xml:"FechaTimbrado,attr"`
}

type Donatarias struct {
  NoAutorizacion string   `xml:"noAutorizacion,attr"`
  NoAutorizacion33 string   `xml:"NoAutorizacion,attr"`
}

type Complemento struct {
  TimbreFiscalDigitals    []TimbreFiscalDigital    `xml:"TimbreFiscalDigital"`
  Donatariass    []Donatarias    `xml:"Donatarias"`
}
type CFDI struct {
  Comprobante   xml.Name `xml:"Comprobante"`
  LugarExpedicion string   `xml:"LugarExpedicion,attr"`
  Fecha string   `xml:"fecha,attr"`
  Certificado string   `xml:"Certificado,attr"`
  NoCertificado string   `xml:"NoCertificado,attr"`
  Fecha33 string   `xml:"Fecha,attr"`
  Version string   `xml:"Version,attr"`
  Sello string   `xml:"Sello,attr"`
  TipoDeComprobante string   `xml:"tipoDeComprobante,attr"`
  TipoDeComprobante33 string   `xml:"TipoDeComprobante,attr"`
  MetodoDePago string   `xml:"metodoDePago,attr"`
  MetodoDePago33 string   `xml:"MetodoDePago,attr"`
  FormaDePago33 string   `xml:"FormaPago,attr"`
  NumCtaPago string   `xml:"NumCtaPago,attr"`
  Moneda string   `xml:"Moneda,attr"`
  Folio string   `xml:"Folio,attr"`
  TipoCambio string   `xml:"TipoCambio,attr"`
  Total float64   `xml:"total,attr"`
  SubTotal float64   `xml:"subTotal,attr"`
  Total33 float64   `xml:"Total,attr"`
  SubTotal33 float64   `xml:"SubTotal,attr"`
  Emisors    []Emisor    `xml:"Emisor"`
  Receptors    []Receptor    `xml:"Receptor"`
  Conceptoss    []Conceptos    `xml:"Conceptos"`
  Impuestoss    []Impuestos    `xml:"Impuestos"`
  Complementos    []Complemento    `xml:"Complemento"`
  Addendas    []Addenda    `xml:"Addenda"`
  Addendas2    []Addenda2    `xml:"Addenda2"`
}

func (c *SelectChangeCuentaPropiaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    CuentaPropia := c.GetString("CuentaPropia")
    idBanco := c.GetString("idBanco")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := "UPDATE [Sevenplus].[dbo].["+BUNIT.(string)+"_zBancos] SET CuentaPropia = "+CuentaPropia+"  WHERE idBanco in ("+idBanco+")"
    conn.Exec(queryD)
    example := map[string]interface{}{ "success":1}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}



func (c *AbonoCargoMarcarController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    STATUS := c.GetString("STATUS")
    idBanco := c.GetString("idBanco")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := "UPDATE [Sevenplus].[dbo].["+BUNIT.(string)+"_zBancos] SET STATUS = "+STATUS+"  WHERE idBanco in ("+idBanco+")"
    conn.Exec(queryD)
    example := map[string]interface{}{ "success":1}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *CuentaPropiaMarcarController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    CuentaPropia := c.GetString("CuentaPropia")
    idBanco := c.GetString("idBanco")
    idBancoPrima := c.GetString("idBancoPrima")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := "UPDATE [Sevenplus].[dbo].["+BUNIT.(string)+"_zBancos] SET CuentaPropia = "+CuentaPropia+"  WHERE idBanco in ("+idBanco+","+idBancoPrima+")"
    conn.Exec(queryD)
    example := map[string]interface{}{ "success":1}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *Sube1BancoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    cuenta := c.GetString("cuenta")
    importe := c.GetString("importe")
    fecha := c.GetString("fecha")
    descripcion := c.GetString("descripcion")
    STATUS := c.GetString("STATUS")
    referencia := c.GetString("referencia")
    leyenda1 := c.GetString("leyenda1")
    leyenda2 := c.GetString("leyenda2")
    Saldo := c.GetString("Saldo")
    descripcion = strings.Replace(descripcion, ",", "", -1)
    referencia = strings.Replace(referencia, ",", "", -1)
    leyenda1 = strings.Replace(leyenda1, ",", "", -1)
    leyenda2 = strings.Replace(leyenda2, ",", "", -1)

    descripcion = strings.Replace(descripcion, `"`, "", -1)
    descripcion = strings.Replace(descripcion, `'`, "", -1)

    referencia = strings.Replace(referencia, `"`, "", -1)
    referencia = strings.Replace(referencia, `'`, "", -1)

    leyenda1 = strings.Replace(leyenda1, `"`, "", -1)
    leyenda1 = strings.Replace(leyenda1, `'`, "", -1)
    leyenda2 = strings.Replace(leyenda2, `"`, "", -1)
    leyenda2 = strings.Replace(leyenda2, `'`, "", -1)

    moneda := "MXN"
    mmx := c.GetString("Moneda")
    if mmx != "" {
      moneda = mmx
    }
            
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }

    
    dia := fecha[0:2]
    mes := fecha[3:5]
    //anio := fecha[6:]
              
    if moneda =="USD" {
      queryDeterminarTipoDeCambio := `SELECT tipoDeCambio FROM [Sevenplus].[dbo].[zTipoDeCambio]
      WHERE fecha = '`+fecha+`'`
      rowsD, _ := conn.Query(queryDeterminarTipoDeCambio)
      tipoDeCambio := 0.0
      if rowsD.Next()  {
        rowsD.Scan(&tipoDeCambio)
        cantidadFloat, _ := strconv.ParseFloat(importe, 64)
        auxF := tipoDeCambio * cantidadFloat
        moneda = "MXN"
        tipoDeCambio = 1.0
        importe = fmt.Sprintf("%.2f",auxF)
      } else {
      if dia == "01" {
        dia = "32"
      }
      queryDeterminarTipoDeCambio := `SELECT TOP 1 tipoDeCambio  FROM [Sevenplus].[dbo].[zTipoDeCambio]
      WHERE SUBSTRING(fecha,1,2) < '`+dia+`' AND SUBSTRING(fecha,4,2) <= '`+mes+`' order by fecha desc`
      rowsD, _ := conn.Query(queryDeterminarTipoDeCambio)
      tipoDeCambio := 0.0
      if rowsD.Next()  {
        rowsD.Scan(&tipoDeCambio)
        cantidadFloat, _ := strconv.ParseFloat(importe, 64)
        auxF := tipoDeCambio * cantidadFloat
        moneda = "MXN"
        tipoDeCambio = 1.0
        importe = fmt.Sprintf("%.2f",auxF)
      } 
    }
  } 
    
    queryD := `SELECT idBanco
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] 
        WHERE cuenta = '`+cuenta+`' AND STATUS = '`+STATUS+`'
        AND referencia =  '`+referencia+`' AND fecha = '`+fecha+`'  AND descripcion = '`+descripcion+`' AND saldo = `+Saldo+` AND BUNIT = '`+BUNIT.(string)+`' AND importe = `+importe+``
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println(queryD)
      fmt.Println("que paso ish :"+ errD.Error())
    }
    idBanco := 0.0
    if rowsD.Next()  {
      rowsD.Scan(&idBanco)

      example := map[string]interface{}{ "success":2}
      c.Data["json"] = &example
      c.ServeJSON()
    } else {
        queryLimpio := `INSERT INTO [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] (saldo , BUNIT, CuentaPropia, cuenta, importe, fecha, descripcion, STATUS, timbrado, leyenda1, leyenda2, TREFERENCE, referencia, Moneda ) 
        VALUES(`+Saldo+`, '`+BUNIT.(string)+`',0, '`+cuenta+`',`+importe+`,'`+fecha+`','`+descripcion+`','`+STATUS+`', 0,'`+leyenda1+`','`+leyenda2+`','','`+referencia+`','MXN')`
        fmt.Println(queryLimpio)
        
        conn.Exec(queryLimpio)
        example := map[string]interface{}{ "success":1}
        c.Data["json"] = &example
        c.ServeJSON()
        return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *GenerarAntilavadoraController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    delPeriodo := c.GetString("delPeriodo")
    //alPeriodo := c.GetString("alPeriodo")
    delPeriodoAnio := delPeriodo[0:4]
    delPeriodoMes := delPeriodo[5:]

    anioDelInt , _ := strconv.Atoi(delPeriodoAnio)
      mesDelInt , _ := strconv.Atoi(delPeriodoMes)


  /*  alPeriodoAnio := alPeriodo[0:4]
    alPeriodoMes := alPeriodo[5:]

    anioAlInt , _ := strconv.Atoi(alPeriodoAnio)
      mesAlInt , _ := strconv.Atoi(alPeriodoMes)
*/

    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    rfcEmisor := ""
    
    queryDatos := "SELECT rfc FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '"+BUNIT.(string)+"'"
    rowsDatos, _ := conn.Query(queryDatos)
    for rowsDatos.Next()  {
      rowsDatos.Scan(&rfcEmisor)      
    }

    //WHERE LEN(UUID) = 36  because bugs :D
    queryD := `SELECT  f.xml, f.xmlText, f.pdf, f.UUID, f.cantidad, f.folio, f.BUNIT, b.idBanco, b.fecha
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zFacturas] f
        INNER JOIN [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] b on b.UUID = f.UUID
        WHERE LEN(f.UUID) = 36
        ORDER BY f.idFolio desc  `
       queryD = `SELECT   f.xmlText
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zFacturas] f
        WHERE  (f.cancelada != 1 OR f.cancelada IS NULL)`
        
    /*querySobrantes := `SELECT  f.xml, f.xmlText, f.pdf, f.UUID, f.cantidad, f.folio, f.BUNIT, b.idBanco, b.fecha
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zFacturas] f
        LEFT JOIN [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] b on b.UUID = f.UUID
        WHERE LEN(f.UUID) = 36 AND b.UUID is NULL
        ORDER BY f.idFolio desc  `      */
    rowsD, errD := conn.Query(queryD)
    type FacturacionIngreso struct {
      Rfc string
      Cantidad float64
      RazonSocial string
    }
    var (
      FacturacionIngresoList map[string]*FacturacionIngreso
    )
    FacturacionIngresoList = make(map[string]*FacturacionIngreso)
  
    if errD != nil {
      fmt.Println("que paso ish :", errD.Error())
      fmt.Println(queryD)
    }
    
    xmlText := ""
  //  fechaBanco := ""
    cantidad := 0.0
    entro := 0
    for rowsD.Next()  {
      entro = 0
      rowsD.Scan( &xmlText)
      if xmlText[0:1] == "\"" {
        xmlText = xmlText[1:len(xmlText)-1]
        xmlText = strings.Replace(xmlText, `""`, `"`, -1)
      }
      
      v := new(CFDI)
        err := xml.Unmarshal([]byte(xmlText), v)
        if err != nil {
            fmt.Printf("error: %v", err)
            return
        }
        totalActual := v.Total33
        rfc := v.Receptors[0].RFCReceptor33
        razon := v.Receptors[0].NombreRazonSocial33
        fechaCompleta := v.Fecha33
        if fechaCompleta == "" {
          fechaCompleta = v.Fecha
          if fechaCompleta == "" {
            fmt.Println(v.Complementos[0].TimbreFiscalDigitals[0].UUID)
          }
        }
        fechaMesAnio := fechaCompleta[0:7]
        
        rfcEmisorFactura := v.Emisors[0].RFCEmisor33
        if rfcEmisorFactura == rfcEmisor && fechaMesAnio == delPeriodo {
          entro = 1
        }
        if entro == 1 {
          if _, ok := FacturacionIngresoList[rfc]; ok {
          } else {
          var Liga FacturacionIngreso
          Liga = FacturacionIngreso{rfc,0.0,razon}
          FacturacionIngresoList[rfc] = &Liga
        }
        FacturacionIngresoList[rfc].Cantidad += totalActual 
        }
    }
  
    queryRestar := `SELECT  rfc, periodo, cantidad
        FROM [Sevenplus].[dbo].[zDeclaraciones] 
        WHERE BUNIT = '`+BUNIT.(string)+`'
        ORDER BY rfc asc, periodo asc  `  
    rfc:=""
    periodo:=""
    cantidad=0.0
    rowsD, errD = conn.Query(queryRestar)
    for rowsD.Next()  {
      entro := 0
      rowsD.Scan(&rfc, &periodo, &cantidad)
      anio := periodo[0:4]
      mes := periodo[5:]
      anioInt , _ := strconv.Atoi(anio)
        mesInt , _ := strconv.Atoi(mes)
      if anioInt >= anioDelInt  && mesInt > mesDelInt {
          entro = 1
        }
      if entro ==1 {
        if _, ok := FacturacionIngresoList[rfc]; ok {
          } else {
          var Liga FacturacionIngreso
          Liga = FacturacionIngreso{rfc,0.0,""}
          FacturacionIngresoList[rfc] = &Liga
        }
        FacturacionIngresoList[rfc].Cantidad -= cantidad
        }   
    }




    example := map[string]interface{}{ "success":1, "facturas" : FacturacionIngresoList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *PeriodosDeFacturacionController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    BUNIT := c.GetSession("BUNIT")
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
          querySobrantes := `SELECT   f.xmlText
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zFacturas] f
          WHERE   (f.cancelada != 1 OR f.cancelada IS NULL)`      
  
    type FacturacionIngreso struct {
      Fecha string
    }
    var (
      FacturacionIngresoList map[string]*FacturacionIngreso
    )
    FacturacionIngresoList = make(map[string]*FacturacionIngreso)
  
    xmlText := ""
    rowsD, _ := conn.Query(querySobrantes)
    for rowsD.Next()  {
      rowsD.Scan(&xmlText)
      if xmlText[0:1] == "\"" {
        xmlText = xmlText[1:len(xmlText)-1]
        xmlText = strings.Replace(xmlText, `""`, `"`, -1)
      }
      v := new(CFDI)
        err := xml.Unmarshal([]byte(xmlText), v)
        if err != nil {
          fmt.Println(xmlText)
            
            fmt.Printf("error: %v", err)
            return
        }
        fechaCompleta := v.Fecha33
        if fechaCompleta == "" {
          fechaCompleta = v.Fecha
          if fechaCompleta == "" {
            fechaCompleta = "2019-01-01"
          }
        }
        fechaMesAnio := fechaCompleta[0:7]
        fmt.Println(fechaMesAnio)
        FacturacionIngresoList[fechaMesAnio] = &FacturacionIngreso{fechaMesAnio}
    }
    

    example := map[string]interface{}{ "success":1, "facturas" : FacturacionIngresoList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *VerFacturacionDeIngresosRFCController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    delPeriodo := c.GetString("delPeriodo")
    alPeriodo := c.GetString("alPeriodo")
    rfcPOST := c.GetString("rfc")
    delPeriodoAnio := delPeriodo[0:4]
    delPeriodoMes := delPeriodo[5:]

    anioDelInt , _ := strconv.Atoi(delPeriodoAnio)
      mesDelInt , _ := strconv.Atoi(delPeriodoMes)


    alPeriodoAnio := alPeriodo[0:4]
    alPeriodoMes := alPeriodo[5:]

    anioAlInt , _ := strconv.Atoi(alPeriodoAnio)
      mesAlInt , _ := strconv.Atoi(alPeriodoMes)
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    rfcEmisor := ""
    BUNIT := c.GetSession("BUNIT")
    queryDatos := "SELECT rfc FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '"+BUNIT.(string)+"'"
    rowsDatos, _ := conn.Query(queryDatos)
    for rowsDatos.Next()  {
      rowsDatos.Scan(&rfcEmisor)      
    }
    queryD := `SELECT  f.xml, f.xmlText, f.pdf, f.UUID, f.cantidad, f.folio, f.BUNIT, b.idBanco, b.fecha
        FROM [Sevenplus].[dbo].[zFacturas] f
        INNER JOIN [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] b on b.UUID = f.UUID
        WHERE LEN(f.UUID) = 36
        ORDER BY f.idFolio desc  `
    querySobrantes := `SELECT  f.xml, f.xmlText, f.pdf, f.UUID, f.cantidad, f.folio, f.BUNIT, b.idBanco, b.fecha
        FROM [Sevenplus].[dbo].[zFacturas] f
        LEFT JOIN [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] b on b.UUID = f.UUID
        WHERE LEN(f.UUID) = 36 AND b.UUID is NULL
        ORDER BY f.idFolio desc  `      
    
          
    
    rowsD, errD := conn.Query(queryD)
    type FacturacionIngreso struct {
      XML string 
      PDF string 
      UUID string
      Cantidad float64
      Folio int
      BUNIT string
      Fecha string
      Tipo int
      IdBanco int
    }
    //Tipo, 1 banco, 2 factura de ingresos manual u contabilidad!
    var (
      FacturacionIngresoList map[string]*FacturacionIngreso
    )
    FacturacionIngresoList = make(map[string]*FacturacionIngreso)
  
    if errD != nil {
      fmt.Println("que paso ish :", errD.Error())
      fmt.Println(queryD)
    }
    xmlS := ""
    xmlText := ""
    pdf := ""
    UUID := ""
    cantidad := 0.0
    folio := 0
    bunitLocal := ""
    entro := 0
    idBanco := 0
    fechaBanco := ""
    for rowsD.Next()  {
      entro = 0
      rowsD.Scan(&xmlS, &xmlText, &pdf, &UUID, &cantidad, &folio, &bunitLocal, &idBanco, &fechaBanco)
      v := new(CFDI)
        err := xml.Unmarshal([]byte(xmlText), v)
        if err != nil {
          fmt.Println(folio)
          fmt.Println("")
            fmt.Printf("error: %v", err)
            return
        }
        rfc := v.Receptors[0].RFCReceptor33
        
        fechaCompleta := fechaBanco//v.Fecha
        fechaMesAnio := fechaCompleta[0:] //fechaCompleta[0:7]
        anio := fechaMesAnio[6:]//fechaMesAnio[0:4]
        mes := fechaMesAnio[5:]

        anioInt , _ := strconv.Atoi(anio)
        mesInt , _ := strconv.Atoi(mes)
        rfcEmisorFactura := v.Emisors[0].RFCEmisor33
        //obten anio y mes de banco {
        fechaCompleta = fechaBanco
        anio = fechaCompleta[6:]
        mes = fechaCompleta[3:5]
        dia := fechaCompleta[0:2]
        anioInt , _ = strconv.Atoi(anio)
        mesInt , _  = strconv.Atoi(mes)
        anioInt+=2000
        anio = strconv.Itoa(anioInt)
        mes = strconv.Itoa(mesInt)
        if mesInt < 10 {
          mes = "0"+strconv.Itoa(mesInt)
        }
        fechaCompleta = anio+"-"+mes+"-"+dia
        //obten anio y mes de banco }


        
        if anioInt >= anioDelInt && anioInt <= anioAlInt && mesInt >= mesDelInt && mesInt <= mesAlInt && rfc == rfcPOST && rfcEmisorFactura == rfcEmisor {
          entro = 1
        }
        if entro ==1 {
          FacturacionIngresoList[UUID] = &FacturacionIngreso{xmlS,pdf,UUID,cantidad,folio,bunitLocal,fechaCompleta,1,idBanco}
        }   
      }
      rowsD, errD = conn.Query(querySobrantes)
    for rowsD.Next()  {
      entro = 0
      rowsD.Scan(&xmlS, &xmlText, &pdf, &UUID, &cantidad, &folio, &bunitLocal, &idBanco, &fechaBanco)
      v := new(CFDI)
        err := xml.Unmarshal([]byte(xmlText), v)
        if err != nil {
          fmt.Println(folio)
          fmt.Println("")
            fmt.Printf("error: %v", err)
            return
        }
        rfc := v.Receptors[0].RFCReceptor
        
        fechaCompleta := v.Fecha33
        fechaMesAnio := fechaCompleta[0:7]
        anio := fechaMesAnio[0:4]
        mes := fechaMesAnio[5:]

        anioInt , _ := strconv.Atoi(anio)
        mesInt , _ := strconv.Atoi(mes)
        rfcEmisorFactura := v.Emisors[0].RFCEmisor33
        

        
        if anioInt >= anioDelInt && anioInt <= anioAlInt && mesInt >= mesDelInt && mesInt <= mesAlInt && rfc == rfcPOST && rfcEmisorFactura == rfcEmisor {
          entro = 1
        }
        if entro ==1 {
          FacturacionIngresoList[UUID] = &FacturacionIngreso{xmlS,pdf,UUID,cantidad,folio,bunitLocal,fechaCompleta,2,0}
        }   
      }
    example := map[string]interface{}{ "success":1, "facturas" : FacturacionIngresoList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *VerFacturacionDeIngresosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    BUNIT := c.GetSession("BUNIT")
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT xml, pdf, UUID, cantidad, folio, BUNIT, ISNULL(cancelada,0) as cancelada, xmlText
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zFacturas]

        ORDER BY idFolio desc  `
    rowsD, errD := conn.Query(queryD)
    type FacturacionIngreso struct {
      XML string 
      PDF string 
      UUID string
      Cantidad float64
      Folio int
      BUNIT string
      Fecha string
      Cancelada int
    }
    var (
      FacturacionIngresoList map[string]*FacturacionIngreso
    )
    FacturacionIngresoList = make(map[string]*FacturacionIngreso)
  
    if errD != nil {
      fmt.Println("que paso ish :", errD.Error())
      fmt.Println(queryD)
    }
    xmlS := ""
    pdf := ""
    UUID := ""
    cantidad := 0.0
    folio := 0
    cancelada := 0
    bunitLocal := ""
    xmlText := ""
    for rowsD.Next()  {
      rowsD.Scan(&xmlS, &pdf, &UUID, &cantidad, &folio, &bunitLocal, &cancelada, &xmlText)
      /*content, err := ioutil.ReadFile(xmlS)
      if err != nil {
        fmt.Println(err)
      }*/
      xmlString := string(xmlText)
      xmlString = strings.Replace(xmlString, "\"<?xml", "<?xml", -1)
      xmlString = strings.Replace(xmlString, "</cfdi:Comprobante>\"", "</cfdi:Comprobante>", -1)
            
      v := new(CFDI)
        err := xml.Unmarshal([]byte(xmlString), v)
        if err != nil {
            fmt.Println("error: %v", err)
            fmt.Println(UUID)
            fmt.Println(xmlText)
            //return
        }
        fecha := v.Fecha
        if fecha == "" {
          fecha = v.Fecha33
        }
      FacturacionIngresoList[UUID] =&FacturacionIngreso{xmlS,pdf,UUID,cantidad,folio,bunitLocal,fecha, cancelada}
    }
    example := map[string]interface{}{ "success" : 1, "facturas" : FacturacionIngresoList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *DameArbolesController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    anio := c.GetString("anio")
    subanio := anio[2:]

    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    type Rama4 struct {
      Importe float64
      Descripcion string 
    }
    type Rama3 struct {
      Importe float64
      Descripcion string 
      Rama4 map[string]*Rama4
    }
    type Rama2 struct {
      Importe float64
      Descripcion string 
      Rama3 map[string]*Rama3
    }
    type Rama1 struct {
      Importe float64
      Descripcion string 
      Rama2 map[string]*Rama2
    }
    type Arbol struct {
      Importe float64
      //Ligado float64
      //MisCuentas float64
      //SinLigar float64
      Descripcion string 
      Rama1 map[string]*Rama1
    }
    var (
      ArbolList map[string]*Arbol
    )
    ArbolList = make(map[string]*Arbol)
    importe:=0.0
    importe2:=0.0
    ligado:=0.0
    queryD := `SELECT SUM(importe) as importe
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
      WHERE SUBSTRING(fecha,7,8) = '`+subanio+`'
      AND STATUS = 1 AND BUNIT = '`+BUNIT.(string)+`' AND CuentaPropia != 1`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso ish :", errD.Error())
      fmt.Println(queryD)
    }
    if rowsD.Next()  {
      rowsD.Scan(&importe)
      
      ArbolList["0"]=&Arbol{importe, "Total de gasto anuales",  make(map[string]*Rama1)}
      queryD = `SELECT ISNULL(SUM (b.AMOUNT),0) as importe
      FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] b
      INNER JOIN [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] a on a.idBanco = b.idBanco
        WHERE LEN(b.FOLIO_FISCAL) = 36 AND SUBSTRING(a.fecha,7,8) =  '`+subanio+`'
            AND a.STATUS = 1 AND a.BUNIT = '`+BUNIT.(string)+`'  AND a.CuentaPropia != 1`
      rowsD, _ = conn.Query(queryD)
      if rowsD.Next()  {
        rowsD.Scan(&importe)
        var Rama Rama1
        Rama = Rama1{importe,"Cantidad ligada CFDI",  make(map[string]*Rama2) }
        ArbolList["0"].Rama1["0"] = &Rama
      }
      queryD = `SELECT ISNULL(SUM (b.AMOUNT),0) as importe
      FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] b
      INNER JOIN [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] a on a.idBanco = b.idBanco
        WHERE LEN(b.FOLIO_FISCAL) = 16 AND SUBSTRING(a.fecha,7,8) =  '`+subanio+`'
            AND a.STATUS = 1 AND a.BUNIT = '`+BUNIT.(string)+`' AND a.CuentaPropia != 1`
      rowsD, _ = conn.Query(queryD)
      if rowsD.Next()  {
        rowsD.Scan(&importe)
        var Rama Rama1
        Rama = Rama1{importe,"Cantidad ligada Mis cuentas",  make(map[string]*Rama2) }
        ArbolList["0"].Rama1["1"] = &Rama
      }

      queryD = ` SELECT ISNULL(SUM(a.importe),0) as importe
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] a
      LEFT JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] b on b.idBanco = a.idBanco 
      WHERE b.idBanco IS NULL 
      AND SUBSTRING(a.fecha,7,8) ='`+subanio+`'
      AND a.STATUS = 1 AND a.BUNIT = '`+BUNIT.(string)+`' AND a.CuentaPropia != 1`
      rowsD, _ = conn.Query(queryD)
      if rowsD.Next()  {
        rowsD.Scan(&importe)
        queryD = `SELECT  a.importe - ISNULL((SELECT SUM(f.AMOUNT) FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] f WHERE f.idBanco = a.idBanco),0) 
            FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] a
            WHERE  SUBSTRING(a.fecha,7,8) = '`+subanio+`'
            AND a.STATUS = 1 AND a.BUNIT = '`+BUNIT.(string)+`'
            AND ISNULL((SELECT SUM(f.AMOUNT) FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] f WHERE f.idBanco = a.idBanco),0) > 0
            AND ISNULL((SELECT SUM(f.AMOUNT) FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] f WHERE f.idBanco = a.idBanco),0) < a.importe
            AND a.CuentaPropia != 1`
          rowsDD, _ := conn.Query(queryD)
          for rowsDD.Next() {
            rowsDD.Scan(&importe2,&ligado)
            dif := importe2-ligado
            importe += dif
          }
        var Rama Rama1
        Rama = Rama1{importe,"Cantidad sin ligar",  make(map[string]*Rama2) }
        ArbolList["0"].Rama1["2"] = &Rama
      }
    }
    

    example := map[string]interface{}{ "success":1, "arbol" : ArbolList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}



func (c *PrepolizaFOBONO_INTERESController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    interes := c.GetString("interes")
    BUNIT := c.GetSession("BUNIT")
    capital := c.GetString("capital")
    anio := c.GetString("anio")
    interesFloat, _ := strconv.ParseFloat(interes, 64)
    capitalFloat, _ := strconv.ParseFloat(capital, 64)

    interesPorMil := (interesFloat*1000) /capitalFloat

    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    //1.- primero obtengo los pastores activos a dic 2018
    queryD := `WITH cte as (SELECT  a.ACCNT_CODE,   a.ANAL_T5, a.ANAL_T6, a.ANAL_T8,  b.NAME, SUM(a.AMOUNT) as saldo
      FROM
      [SunSystemsData].[dbo].[M11_A_SALFLDG] a
      INNER JOIN [SunSystemsData].[dbo].[M11_ANL_CODE] b on b.ANL_CODE = a.ANAL_T6
      WHERE
      (a.ACCNT_CODE = '453110' OR a.ACCNT_CODE = '353110')
      AND a.PERIOD <= `+anio+`012
      AND a.ANAL_T5 != '*'
      AND a.ANAL_T6 != '*'
      AND a.ALLOCATION != 'C'
      AND b.ANL_CAT_ID = '07'
      AND a.ANAL_T6 != 'ERARIJO01' AND a.ANAL_T6 != 'ERARAMA01' AND a.ANAL_T6 != 'ERCHAGU01'
      GROUP BY a.ACCNT_CODE,  a.ANAL_T5, a.ANAL_T6, a.ANAL_T8, b.NAME)
      SELECT ACCNT_CODE, ANAL_T5, ANAL_T6, ANAL_T8, NAME, saldo FROM cte
      WHERE saldo != 0
      order by ACCNT_CODE asc`
      //NO TOMES EN CUENTA A ESOS ER ,    JEJE PERDON POR EL HARDCODE
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso ish :", errD.Error())
      fmt.Println(queryD)
    }
    var AMOUNT decimal.Dec
    ACCNT_CODE := ""
    ANAL_T5 := ""
    ANAL_T6 := ""
    ANAL_T8 := ""
    NAME := ""
    type FOBONO struct {
      Persona string
      ER string
      Proyecto string
      Capital float64
      Interes float64
      ACCNT_CODE string
      Campo string
    }
    FOBONOList := make(map[string]*FOBONO)
  
    for rowsD.Next()  {
      rowsD.Scan(&ACCNT_CODE, &ANAL_T5, &ANAL_T6, &ANAL_T8, &NAME, &AMOUNT)
      queryDD := `SELECT SUM(AMOUNT)
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
        WHERE PERIOD <= `+anio+`012
        AND ACCNT_CODE = '`+ACCNT_CODE+`'
        AND ALLOCATION != 'C'
        AND ANAL_T6 = '`+ANAL_T6+`'
        AND ANAL_T8 = '`+ANAL_T8+`'`
      rowsDD, errDD := conn.Query(queryDD)
      if errDD != nil {
        fmt.Println(queryDD)
        fmt.Println("que paso ish :", errDD.Error())
      }
      if rowsDD.Next()  {
        rowsDD.Scan(&AMOUNT)
        interes := (AMOUNT.Float64()/1000.00) * interesPorMil
        interesS := fmt.Sprintf("%.2f",interes)
        cantidadFloat, _ := strconv.ParseFloat(interesS, 64)
        if _, ok := FOBONOList[ANAL_T6]; ok {
          FOBONOList[ACCNT_CODE+"-"+ANAL_T6+"-"+ANAL_T8].Interes+=cantidadFloat
          } else {
          FOBONOList[ACCNT_CODE+"-"+ANAL_T6+"-"+ANAL_T8] = &FOBONO{NAME, ANAL_T6, ANAL_T8, AMOUNT.Float64(), cantidadFloat,ACCNT_CODE,ANAL_T5}
        }
      }   
      // ok en este punto ya sabemos si hay fobono , con saldo a dic, debemos de recalcular intereses
      //for k, _ := range FOBONOList {
      //}
    }
    example := map[string]interface{}{ "success":1, "FOBONO" : FOBONOList, "interesPorMil" : interesPorMil}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *LigarController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    cantidad := c.GetString("cantidad")
    BUNIT := c.GetSession("BUNIT")
    idBanco := c.GetString("idBanco")
    folioFiscal := c.GetString("folioFiscal")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    ligado:=0.0
    total := 0.0
    queryD := `SELECT ISNULL(ligado,0) as ligado, total
        FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_facturacion_XML] 
        WHERE folioFiscal =  '`+folioFiscal+`'`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso ish :", errD.Error())
      fmt.Println(queryD)
    }
    nuevoLigado := 0.0
    if rowsD.Next()  {
      rowsD.Scan(&ligado, &total)
      puedo := total - ligado
      cantidadFloat, _ := strconv.ParseFloat(cantidad, 64)

      if puedo < cantidadFloat {

        queryDD := `SELECT zz.nombre, z.importe, z.fecha, z.descripcion, z.idBanco
            FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] f
            INNER JOIN [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z on z.idBanco = f.idBanco
            INNER JOIN [Sevenplus].[dbo].[zNombreCuentas] zz on zz.cuenta = z.cuenta
            WHERE f.FOLIO_FISCAL =  '`+folioFiscal+`'`
        rowsDD, errDD := conn.Query(queryDD)
        if errDD != nil {
          fmt.Println(queryDD)
          fmt.Println("que paso ish :", errDD.Error())
          
        }
        type PorUUID struct {
          FOLIO_FISCAL string
          AMOUNT float64
          PDF string
          XML string
          Ruta string
        }
        type CuentaBancaria struct {
          IdBanco int
          Importe float64
          Descripcion string 
          Leyenda1 string 
          Leyenda2 string
          CuentaPropia int
          Referencia string
          Fecha string
          Timbrado int 
          UUIDList map[string]*PorUUID
        }
        var (
          CuentaBancariaList map[string]*CuentaBancaria
        )
        CuentaBancariaList = make(map[string]*CuentaBancaria)
      
        //models.ClearCuentaBancaria()
        var idBancoN int
        var importeN float64
        var descripcionN string
        var fechaN string
        var nombreN string
        for rowsDD.Next()  {
          rowsDD.Scan(&nombreN, &importeN, &fechaN, &descripcionN, &idBancoN)
          CuentaBancariaList[strconv.Itoa(idBancoN)]=&CuentaBancaria{idBancoN, importeN, descripcionN, nombreN, "", 0, "", fechaN, 0,  make(map[string]*PorUUID)}
          //cedul = models.CuentaBancaria{idBancoN, importeN, descripcionN, nombreN, "", 0, "", fechaN, 0,  make(map[string]*models.PorUUID)}
          //models.AddCuentaBancaria(cedul, strconv.Itoa(idBancoN))
        }
        example := map[string]interface{}{ "success":2, "ligados" : CuentaBancariaList, "total" : total, "ligado" : ligado}
        c.Data["json"] = &example
        c.ServeJSON()
        return
      }
      nuevoLigado = ligado + cantidadFloat
    }
    nuevoLigadoS := fmt.Sprintf("%.2f",nuevoLigado)
    
    queryD = `INSERT INTO [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] (idBanco,FOLIO_FISCAL,AMOUNT)  VALUES 
    (`+idBanco+`, '`+folioFiscal+`', `+cantidad+`)`
    conn.Exec(queryD)
    queryD = "UPDATE [SU_FISCAL].[dbo].["+BUNIT.(string)+"_facturacion_XML] SET ligado = "+nuevoLigadoS+"  WHERE folioFiscal = '"+folioFiscal+"'"
    conn.Exec(queryD)


    

    example := map[string]interface{}{ "success":1}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *NombresCuentasGuardarController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    cuenta := c.GetString("cuenta")
    nombre := c.GetString("nombre")
    ACNT_CODE := c.GetString("ACNT_CODE")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := "UPDATE [Sevenplus].[dbo].[zNombreCuentas] SET ACNT_CODE = '"+ACNT_CODE+"', nombre = '"+nombre+"'  WHERE BUNIT = '"+BUNIT.(string)+"' AND cuenta = '"+cuenta+"'"
    conn.Exec(queryD)
    example := map[string]interface{}{ "success":1}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}



func (c *PosiblesDuplicadosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT b.cuenta, c.nombre, b.idBanco,b.importe,b.fecha,b.descripcion,b.STATUS,b.referencia,b.saldo,b.leyenda1,b.leyenda2
  FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] b
  INNER JOIN [Sevenplus].[dbo].[zNombreCuentas] c on c.cuenta = b.cuenta
  WHERE b.BUNIT = '`+BUNIT.(string)+`'
  AND b.cuenta = b.cuenta 
  AND b.importe = b.importe 
  AND b.fecha = b.fecha 
  AND b.descripcion = b.descripcion
  AND b.STATUS = b.STATUS  
  order by b.importe asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso1 :", errD.Error())
      fmt.Println(queryD)
    }
    var Nombre string
    var Cuenta string
    var IdBanco int
    var Importe float64
    var Fecha string
    var Descripcion string
    var STATUS string
    var Referencia string
    var Saldo string
    var Leyenda1 string
    var Leyenda2 string

    
    models.ClearCuentasPropiasTransferencia()
    var cedul models.CuentasPropiasTransferencia
    for rowsD.Next()  {
      rowsD.Scan(&Cuenta, &Nombre, &IdBanco, &Importe, &Fecha, &Descripcion, &STATUS, &Referencia, &Saldo, &Leyenda1, &Leyenda2)
      Concentrado := strconv.Itoa(IdBanco)
      amountString := fmt.Sprintf("%.2f",Importe)
        cedul = models.CuentasPropiasTransferencia{Nombre, IdBanco, Importe, Fecha, Descripcion, STATUS, Referencia, Saldo, Leyenda1, Leyenda2, Concentrado}
        models.AddCuentasPropiasTransferencia(cedul, amountString+Concentrado)
       
    }
    example := map[string]interface{}{ "success":1, "cuentas" : models.GetAllCuentasPropiasTransferencia()}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *PendientesCargoAbonoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT b.cuenta, c.nombre, b.idBanco,b.importe,b.fecha,b.descripcion,b.STATUS,b.referencia,b.saldo,b.leyenda1,b.leyenda2
  FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] b
  INNER JOIN [Sevenplus].[dbo].[zNombreCuentas] c on c.cuenta = b.cuenta
  WHERE b.STATUS = -1 AND b.BUNIT = '`+BUNIT.(string)+`'
  order by b.importe asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso1 :", errD.Error())
      fmt.Println(queryD)
    }
    var Nombre string
    var Cuenta string
    var IdBanco int
    var Importe float64
    var Fecha string
    var Descripcion string
    var STATUS string
    var Referencia string
    var Saldo string
    var Leyenda1 string
    var Leyenda2 string

    
    models.ClearCuentasPropiasTransferencia()
    var cedul models.CuentasPropiasTransferencia
    for rowsD.Next()  {
      rowsD.Scan(&Cuenta, &Nombre, &IdBanco, &Importe, &Fecha, &Descripcion, &STATUS, &Referencia, &Saldo, &Leyenda1, &Leyenda2)
      Concentrado := strconv.Itoa(IdBanco)
      amountString := fmt.Sprintf("%.2f",Importe)
        cedul = models.CuentasPropiasTransferencia{Nombre, IdBanco, Importe, Fecha, Descripcion, STATUS, Referencia, Saldo, Leyenda1, Leyenda2, Concentrado}
        models.AddCuentasPropiasTransferencia(cedul, amountString+Concentrado)
       
    }
    example := map[string]interface{}{ "success":1, "cuentas" : models.GetAllCuentasPropiasTransferencia()}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *GenerarExcelTECPController) Get() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    cuenta := c.GetString("cuenta")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT b.cuenta, c.nombre, b.idBanco, b.importe, b.fecha, b.descripcion, b.leyenda1, b.leyenda2, b.STATUS
  FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] b
  INNER JOIN [Sevenplus].[dbo].[zNombreCuentas] c on c.cuenta = b.cuenta
  WHERE b.CuentaPropia = 1 AND b.BUNIT = '`+BUNIT.(string)+`' and b.cuenta = '`+cuenta+`'
  order by b.fecha asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso1 :", errD.Error())
      fmt.Println(queryD)
    }
    var Nombre string
    var Cuenta string
    var IdBanco int
    var Importe float64
    var Fecha string
    var Descripcion string
    var STATUS string
    var Referencia string
    var Saldo string
    var Leyenda1 string
    var Leyenda2 string

    var NombrePrima string
    var IdBancoPrima int
    var ImportePrima float64
    var FechaPrima string
    var DescripcionPrima string
    var STATUSPrima string
    var ReferenciaPrima string
    var SaldoPrima string
    var Leyenda1Prima string
    var Leyenda2Prima string
    models.ClearCuentasPropiasTransferencia()
    var cedul models.CuentasPropiasTransferencia
    var channels []Channel  // an empty list
    i := 0
    for rowsD.Next()  {
      rowsD.Scan(&Cuenta, &Nombre, &IdBanco, &Importe, &Fecha, &Descripcion, &Leyenda1, &Leyenda2, &STATUS)
      STATUS_NUEVO := "2,-1"
      if STATUS == "2" {
        STATUS_NUEVO = "1,-1"
      }
      amountString := fmt.Sprintf("%.2f", Importe)
      //   AND b.cuenta !=  '`+Cuenta+`'
      
      queryE := `SELECT c.nombre, b.idBanco,b.importe,b.fecha,b.descripcion,b.STATUS,b.referencia,b.saldo,b.leyenda1,b.leyenda2
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] b
        INNER JOIN [Sevenplus].[dbo].[zNombreCuentas] c on c.cuenta = b.cuenta
        WHERE b.fecha = '`+Fecha+`' AND b.importe = `+amountString+`
        AND b.STATUS in  (`+STATUS_NUEVO+`) AND b.BUNIT = '`+BUNIT.(string)+`' AND b.CuentaPropia = 1
        order by b.idBanco asc`

      rowsE, errE := conn.Query(queryE)
      if errE != nil {
        fmt.Println("que paso 2:", errE.Error())
        fmt.Println(queryE)
      }
      
      entre := 0
      cuantasVecesAgregue := 0
      

      for rowsE.Next()  {
        entre = 1
        //c.nombre, b.idBanco,b.importe,b.fecha,b.descripcion,b.STATUS,b.referencia,b.saldo,b.leyenda1,b.leyenda2
        rowsE.Scan(&NombrePrima, &IdBancoPrima, &ImportePrima, &FechaPrima, &DescripcionPrima, &STATUSPrima, &ReferenciaPrima, &SaldoPrima, &Leyenda1Prima, &Leyenda2Prima)
        if stringInSlice(strconv.Itoa(IdBancoPrima), channels) {
        } else {
          if entre == 1 {
            entre = 2
            channels = append(channels, Channel{name:strconv.Itoa(IdBancoPrima)})
            Concentrado := strconv.Itoa(IdBanco)+"-"+strconv.Itoa(IdBancoPrima)
            cedul = models.CuentasPropiasTransferencia{Nombre, IdBanco, Importe, Fecha, Descripcion, STATUS, Referencia, Saldo, Leyenda1, Leyenda2, Concentrado}
            models.AddCuentasPropiasTransferencia(cedul, strconv.Itoa(i))
            i++
            cedul = models.CuentasPropiasTransferencia{NombrePrima, IdBancoPrima, ImportePrima, FechaPrima, DescripcionPrima, STATUSPrima, ReferenciaPrima, SaldoPrima, Leyenda1Prima, Leyenda2Prima, Concentrado}
            models.AddCuentasPropiasTransferencia(cedul, strconv.Itoa(i))
            i++
            cuantasVecesAgregue++
            break
          }
        }
      } 
    }
    /*
    k := 0
    for j := 0; j < len(models.CuentasPropiasTransferenciaList)-1; j++ {
      for k = j+1; k < len(models.CuentasPropiasTransferenciaList); k++ {

      }
    }
    */

    c.Ctx.Output.ContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    c.Ctx.Output.Header("Content-Disposition", "attachment; filename="+cuenta+"-TECP.xlsx")
    var file *xlsx.File
      var sheet *xlsx.Sheet
      var row *xlsx.Row
      var cell *xlsx.Cell
      var errEx error
      file = xlsx.NewFile()
      sheet, errEx = file.AddSheet("TECP")
      if errEx != nil {
          fmt.Println(errEx)
      }
   


    //for _, v := range models.CuentasPropiasTransferenciaList {
      for j := 0; j < len(models.CuentasPropiasTransferenciaList); j++ {
      v := models.CuentasPropiasTransferenciaList[strconv.Itoa(j)]

      row = sheet.AddRow()
      cell = row.AddCell()
        font := xlsx.NewFont(14, "Arial Black")
            style := xlsx.NewStyle()
            style.Font = *font                    
            cell.SetStyle(style)  
        cell.Value = v.Nombre

        cell = row.AddCell()
        font = xlsx.NewFont(14, "Arial")
            style = xlsx.NewStyle()
            style.Font = *font                    
            cell.SetStyle(style)  
            cell.SetFloatWithFormat(v.Importe,"0.00")
            //cell.Value = fmt.Sprintf("%.2f",v.Importe)
        
        cell = row.AddCell()
        font = xlsx.NewFont(14, "Arial")
            style = xlsx.NewStyle()
            style.Font = *font                    
            cell.SetStyle(style)  
            cell.Value = v.Fecha

            cell = row.AddCell()
        font = xlsx.NewFont(14, "Arial")
            style = xlsx.NewStyle()
            style.Font = *font                    
            cell.SetStyle(style)  
            cell.Value = v.Descripcion

            cell = row.AddCell()
        font = xlsx.NewFont(14, "Arial")
            style = xlsx.NewStyle()
            style.Font = *font                    
            cell.SetStyle(style)  
            if v.STATUS == "1" {
              cell.Value = "CARGO"
            } else {
              cell.Value = "ABONO"
            }
    }
    row = sheet.AddRow()
    cell = row.AddCell()
    cell = row.AddCell()
      font := xlsx.NewFont(14, "Arial Black")
        style := xlsx.NewStyle()
        style.Font = *font                    
        cell.SetStyle(style)  
      cell.SetFormula("=SUMA(B1:B"+strconv.Itoa(len(models.CuentasPropiasTransferenciaList))+")/2")




    errEx = file.Save(cuenta+"-TECP.xlsx")
      if errEx != nil {
          fmt.Printf(errEx.Error())
      }
      errEx = file.Write(c.Ctx.ResponseWriter)
      if errEx != nil {
          fmt.Printf(errEx.Error())
      }

    
  }
}


func (c *TECPporCuentaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    cuenta := c.GetString("cuenta")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT b.cuenta, c.nombre, b.idBanco, b.importe, b.fecha, b.descripcion, b.leyenda1, b.leyenda2, b.STATUS
  FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] b
  INNER JOIN [Sevenplus].[dbo].[zNombreCuentas] c on c.cuenta = b.cuenta
  WHERE b.CuentaPropia = 1 AND b.BUNIT = '`+BUNIT.(string)+`' and b.cuenta = '`+cuenta+`'
  order by b.fecha asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso1 :", errD.Error())
      fmt.Println(queryD)
    }
    var Nombre string
    var Cuenta string
    var IdBanco int
    var Importe float64
    var Fecha string
    var Descripcion string
    var STATUS string
    var Referencia string
    var Saldo string
    var Leyenda1 string
    var Leyenda2 string

    var NombrePrima string
    var IdBancoPrima int
    var ImportePrima float64
    var FechaPrima string
    var DescripcionPrima string
    var STATUSPrima string
    var ReferenciaPrima string
    var SaldoPrima string
    var Leyenda1Prima string
    var Leyenda2Prima string
    models.ClearCuentasPropiasTransferencia()
    var cedul models.CuentasPropiasTransferencia
    var channels []Channel  // an empty list
    
    for rowsD.Next()  {
      rowsD.Scan(&Cuenta, &Nombre, &IdBanco, &Importe, &Fecha, &Descripcion, &Leyenda1, &Leyenda2, &STATUS)
      STATUS_NUEVO := "2,-1"
      if STATUS == "2" {
        STATUS_NUEVO = "1,-1"
      }
      amountString := fmt.Sprintf("%.2f", Importe)
      //   AND b.cuenta !=  '`+Cuenta+`'
      
      queryE := `SELECT c.nombre, b.idBanco,b.importe,b.fecha,b.descripcion,b.STATUS,b.referencia,b.saldo,b.leyenda1,b.leyenda2
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] b
        INNER JOIN [Sevenplus].[dbo].[zNombreCuentas] c on c.cuenta = b.cuenta
        WHERE b.fecha = '`+Fecha+`' AND b.importe = `+amountString+`
        AND b.STATUS in  (`+STATUS_NUEVO+`) AND b.BUNIT = '`+BUNIT.(string)+`' AND b.CuentaPropia = 1
        order by b.idBanco asc`

      rowsE, errE := conn.Query(queryE)
      if errE != nil {
        fmt.Println("que paso 2:", errE.Error())
        fmt.Println(queryE)
      }
      
      entre := 0
      cuantasVecesAgregue := 0
      

      for rowsE.Next()  {
        entre = 1
        //c.nombre, b.idBanco,b.importe,b.fecha,b.descripcion,b.STATUS,b.referencia,b.saldo,b.leyenda1,b.leyenda2
        rowsE.Scan(&NombrePrima, &IdBancoPrima, &ImportePrima, &FechaPrima, &DescripcionPrima, &STATUSPrima, &ReferenciaPrima, &SaldoPrima, &Leyenda1Prima, &Leyenda2Prima)
        if stringInSlice(strconv.Itoa(IdBancoPrima), channels) {
        } else {
          if entre == 1 {
            entre = 2
            channels = append(channels, Channel{name:strconv.Itoa(IdBancoPrima)})
            Concentrado := strconv.Itoa(IdBanco)+"-"+strconv.Itoa(IdBancoPrima)
            cedul = models.CuentasPropiasTransferencia{Nombre, IdBanco, Importe, Fecha, Descripcion, STATUS, Referencia, Saldo, Leyenda1, Leyenda2, Concentrado}
            models.AddCuentasPropiasTransferencia(cedul, Concentrado+"-1")
            cedul = models.CuentasPropiasTransferencia{NombrePrima, IdBancoPrima, ImportePrima, FechaPrima, DescripcionPrima, STATUSPrima, ReferenciaPrima, SaldoPrima, Leyenda1Prima, Leyenda2Prima, Concentrado}
            models.AddCuentasPropiasTransferencia(cedul, Concentrado+"-2")
            cuantasVecesAgregue++
            break
          }
        }

      } 
    }
    example := map[string]interface{}{ "success":1, "cuentas" : models.GetAllCuentasPropiasTransferencia()}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *TransferenciasCuentasPropiasController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT b.cuenta, c.nombre, b.idBanco,b.importe,b.fecha,b.descripcion,b.STATUS,b.referencia,b.saldo,b.leyenda1,b.leyenda2
  FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] b
  INNER JOIN [Sevenplus].[dbo].[zNombreCuentas] c on c.cuenta = b.cuenta
  WHERE b.CuentaPropia = 0 AND b.BUNIT = '`+BUNIT.(string)+`'
  order by b.idBanco asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso1 :", errD.Error())
      fmt.Println(queryD)
    }
    var Nombre string
    var Cuenta string
    var IdBanco int
    var Importe float64
    var Fecha string
    var Descripcion string
    var STATUS string
    var Referencia string
    var Saldo string
    var Leyenda1 string
    var Leyenda2 string

    var NombrePrima string
    var IdBancoPrima int
    var ImportePrima float64
    var FechaPrima string
    var DescripcionPrima string
    var STATUSPrima string
    var ReferenciaPrima string
    var SaldoPrima string
    var Leyenda1Prima string
    var Leyenda2Prima string
    models.ClearCuentasPropiasTransferencia()
    var cedul models.CuentasPropiasTransferencia
    var channels []Channel  // an empty list
    
    for rowsD.Next()  {
      rowsD.Scan(&Cuenta, &Nombre, &IdBanco, &Importe, &Fecha, &Descripcion, &STATUS, &Referencia, &Saldo, &Leyenda1, &Leyenda2)
      STATUS_NUEVO := "2,-1"
      if STATUS == "2" {
        STATUS_NUEVO = "1,-1"
      }
      amountString := fmt.Sprintf("%.2f", Importe)
      //   AND b.cuenta !=  '`+Cuenta+`'
      
      queryE := `SELECT c.nombre, b.idBanco,b.importe,b.fecha,b.descripcion,b.STATUS,b.referencia,b.saldo,b.leyenda1,b.leyenda2
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] b
        INNER JOIN [Sevenplus].[dbo].[zNombreCuentas] c on c.cuenta = b.cuenta
        WHERE b.fecha = '`+Fecha+`' AND b.importe = `+amountString+`
          AND b.STATUS in  (`+STATUS_NUEVO+`) AND b.BUNIT = '`+BUNIT.(string)+`'
        order by b.idBanco asc`

      rowsE, errE := conn.Query(queryE)
      if errE != nil {
        fmt.Println("que paso 2:", errE.Error())
        fmt.Println(queryE)
      }
      
      entre := 0
      cuantasVecesAgregue := 0
      

      for rowsE.Next()  {
        entre = 1
        rowsE.Scan(&NombrePrima, &IdBancoPrima, &ImportePrima, &FechaPrima, &DescripcionPrima, &STATUSPrima, &ReferenciaPrima, &SaldoPrima, &Leyenda1Prima, &Leyenda2Prima)
        if stringInSlice(strconv.Itoa(IdBancoPrima), channels) {
        } else {
          if entre == 1 {
            entre = 2
            channels = append(channels, Channel{name:strconv.Itoa(IdBancoPrima)})
            Concentrado := strconv.Itoa(IdBanco)+"-"+strconv.Itoa(IdBancoPrima)
            cedul = models.CuentasPropiasTransferencia{Nombre, IdBanco, Importe, Fecha, Descripcion, STATUS, Referencia, Saldo, Leyenda1, Leyenda2, Concentrado}
            models.AddCuentasPropiasTransferencia(cedul, Concentrado+"-1")
            cedul = models.CuentasPropiasTransferencia{NombrePrima, IdBancoPrima, ImportePrima, FechaPrima, DescripcionPrima, STATUSPrima, ReferenciaPrima, SaldoPrima, Leyenda1Prima, Leyenda2Prima, Concentrado}
            models.AddCuentasPropiasTransferencia(cedul, Concentrado+"-2")
            cuantasVecesAgregue++
            break
          }
        }

      } 
    }
    example := map[string]interface{}{ "success":1, "cuentas" : models.GetAllCuentasPropiasTransferencia()}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *ActivoFijoController) Get() {
  codigo := c.GetString("c")
  BUNIT := c.GetString("bunit")
  
  connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
  conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
  if errS != nil {
    fmt.Println("Perdon! Open connection failed:", errS.Error())
  }
  var STATUS int
  var DESCR string
  var START_PERD int
  var LAST_PERD int

  var BASE_GROSS decimal.Dec
  var BASE_DEP decimal.Dec
  var BASE_NET decimal.Dec
  var BASE_PCENT decimal.Dec

  queryD := `SELECT STATUS, DESCR, START_PERD, LAST_PERD, BASE_GROSS, BASE_DEP, BASE_NET, BASE_PCENT
  FROM [SunSystemsData].[dbo].[`+BUNIT+`_ASSET]
  WHERE ASSET_CODE = '`+codigo+`'`
  rowsD, errD := conn.Query(queryD)
  if errD != nil {
    fmt.Println("que paso:", errD.Error())
    example := map[string]interface{}{ "success":-1}
    c.Data["json"] = &example
    c.ServeJSON()
  }
  if rowsD.Next()  {

    rowsD.Scan(&STATUS, &DESCR, &START_PERD, &LAST_PERD, &BASE_GROSS, &BASE_DEP, &BASE_NET, &BASE_PCENT)
    example := map[string]interface{}{ "success":1, "STATUS" : STATUS,"DESCR" : DESCR, "START_PERD" : START_PERD, "LAST_PERD" : LAST_PERD,"BASE_GROSS" : BASE_GROSS.Float64(),"BASE_DEP" : BASE_DEP.Float64(),"BASE_NET" : BASE_NET.Float64(),"BASE_PCENT" : BASE_PCENT.Float64()}
    c.Data["json"] = &example
    c.ServeJSON()
  }
  example := map[string]interface{}{ "success":0}
  c.Data["json"] = &example
  c.ServeJSON()
    
}


func (c *DameFolioQueSigueController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT  (COUNT(*)+1) as folio
      FROM [Sevenplus].[dbo].[zNominaFacturas]
      WHERE BUNIT = '`+BUNIT.(string)+`' AND timbrado = 1`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    folioQueSigue:=1
    for rowsD.Next()  {
      rowsD.Scan(&folioQueSigue)
    }
    example := map[string]interface{}{ "success":1, "folio" : folioQueSigue}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *PendienteDeTimbrarEnElMesController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    mes := c.GetString("mes")
    cuenta := c.GetString("cuenta")

    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT idCliente, rfc, razonSocial, NumCtaPago, correo
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zClientes]
      WHERE BUNIT = '`+BUNIT.(string)+`' 
      order by idCliente asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    rfc:=""
    razonSocial:=""
    NumCtaPago:=""
    correo:=""
    idCliente:=0
    idNumCtaPago:=0
    models.ClearClientes()
    var cedulCliente models.Clientes
    type Archivos struct {
      Nombre string
      Completo string
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)

//    models.ClearArchivos()
//    var archi models.Archivos
    primero := 1
    for rowsD.Next()  {
      rowsD.Scan(&idCliente, &rfc, &razonSocial, &NumCtaPago, &correo)
      if primero == 1 {
        primero = 0
        queryE := `SELECT NumCtaPago
          FROM [Sevenplus].[dbo].[zNumCtaPago]
          WHERE idCliente = '`+strconv.Itoa(idCliente)+`' 
          order by idNumCtaPago asc`
        rowsE, errE := conn.Query(queryE)
        if errE != nil {
          fmt.Println("que paso:", errE.Error())
        }
        NumCtaPago := ""
        for rowsE.Next()  {
          rowsE.Scan(&NumCtaPago)
          ArchivosList[NumCtaPago] = &Archivos{NumCtaPago, NumCtaPago}
          //archi = models.Archivos{NumCtaPago, NumCtaPago}
          //models.AddArchivos(archi, NumCtaPago)
        }
      }
      cedulCliente = models.Clientes{rfc, razonSocial, correo, idCliente ,  make(map[string]*models.NumCtaPago)}
      models.AddClientes(cedulCliente, strconv.Itoa(idCliente))
      queryDD := `SELECT idNumCtaPago, NumCtaPago
        FROM [Sevenplus].[dbo].[zNumCtaPago]
        WHERE idCliente = `+strconv.Itoa(idCliente)+`
        order by idNumCtaPago asc`
      rowsDD, errDD := conn.Query(queryDD)
      if errDD != nil {
        fmt.Println("que paso DD:", errDD.Error())
      }
      var clienteActual models.Clientes
      clienteActual = models.DameClientePorIdCLiente(strconv.Itoa(idCliente))
      for rowsDD.Next()  {
        rowsDD.Scan(&idNumCtaPago, &NumCtaPago)
        if _, ok := clienteActual.NumCtaPagoList[strconv.Itoa(idNumCtaPago)]; ok {
          } else {
          var Liga models.NumCtaPago
          Liga = models.NumCtaPago{idNumCtaPago,NumCtaPago}
          clienteActual.NumCtaPagoList[strconv.Itoa(idNumCtaPago)] = &Liga
        }
      }
    }
  //  timbrado := 0
  //  UUID := ""

    queryD = `SELECT  SUM(z.importe) as gasto
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
      INNER JOIN [Sevenplus].[dbo].[zNombreCuentas] n on n.cuenta = z.cuenta
      WHERE z.BUNIT = '`+BUNIT.(string)+`' AND
      SUBSTRING(z.fecha,4,8) = '`+mes+`' AND z.CuentaPropia != 1 AND z.STATUS = 2 AND z.cuenta = '`+cuenta+`'
      AND z.timbrado = 0`
      fmt.Println(queryD)
    rowsD, errD = conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    importe:=0.0
    models.ClearTimbradoDia()
    var cedul models.TimbradoDia
    for rowsD.Next()  {
      rowsD.Scan(&importe)
      cedul = models.TimbradoDia{"", -1, importe, "",  0, ""}
      models.AddTimbradoDia(cedul, "-1")
    }
    example := map[string]interface{}{ "success":1, "NumCtaPago" : ArchivosList, "liga" : models.GetAllTimbradoDia(), "clientes" : models.GetAllClientes()}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}



func (c *CargaTimbradoManualController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD2 := "UPDATE [Sevenplus].[dbo].["+BUNIT.(string)+"_zBancos] set timbrado = 0 WHERE timbrado is NULL"
    conn.Exec(queryD2)
  
    queryD := `SELECT idCliente, rfc, razonSocial, NumCtaPago, correo
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zClientes]
      WHERE BUNIT = '`+BUNIT.(string)+`' 
      order by idCliente asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    rfc:=""
    razonSocial:=""
    NumCtaPago:=""
    correo:=""
    idCliente:=0
    idNumCtaPago:=0
    models.ClearClientes()
    var cedulCliente models.Clientes
    type Archivos struct {
      Nombre string
      Completo string
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)

//    models.ClearArchivos()
//    var archi models.Archivos
    primero := 1
    for rowsD.Next()  {
      rowsD.Scan(&idCliente, &rfc, &razonSocial, &NumCtaPago, &correo)
      if primero == 1 {
        primero = 0
        queryE := `SELECT NumCtaPago
          FROM [Sevenplus].[dbo].[zNumCtaPago]
          WHERE idCliente = '`+strconv.Itoa(idCliente)+`' 
          order by idNumCtaPago asc`
        rowsE, errE := conn.Query(queryE)
        if errE != nil {
          fmt.Println("que paso:", errE.Error())
        }
        NumCtaPago := ""
        for rowsE.Next()  {
          rowsE.Scan(&NumCtaPago)
          ArchivosList[NumCtaPago] = &Archivos{NumCtaPago, NumCtaPago}
          //archi = models.Archivos{NumCtaPago, NumCtaPago}
          //models.AddArchivos(archi, NumCtaPago)
        }
      }
      cedulCliente = models.Clientes{rfc, razonSocial, correo, idCliente ,  make(map[string]*models.NumCtaPago)}
      models.AddClientes(cedulCliente, strconv.Itoa(idCliente))
      queryDD := `SELECT idNumCtaPago, NumCtaPago
        FROM [Sevenplus].[dbo].[zNumCtaPago]
        WHERE idCliente = `+strconv.Itoa(idCliente)+`
        order by idNumCtaPago asc`
      rowsDD, errDD := conn.Query(queryDD)
      if errDD != nil {
        fmt.Println("que paso DD:", errDD.Error())
      }
      var clienteActual models.Clientes
      clienteActual = models.DameClientePorIdCLiente(strconv.Itoa(idCliente))
      for rowsDD.Next()  {
        rowsDD.Scan(&idNumCtaPago, &NumCtaPago)
        if _, ok := clienteActual.NumCtaPagoList[strconv.Itoa(idNumCtaPago)]; ok {
          } else {
          var Liga models.NumCtaPago
          Liga = models.NumCtaPago{idNumCtaPago,NumCtaPago}
          clienteActual.NumCtaPagoList[strconv.Itoa(idNumCtaPago)] = &Liga
        }
      }
    }
    example := map[string]interface{}{ "success":1, "NumCtaPago" : ArchivosList, "clientes" : models.GetAllClientes()}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *CargaTimbradoDeDiaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    Fecha := c.GetString("Fecha")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD2 := "UPDATE [Sevenplus].[dbo].["+BUNIT.(string)+"_zBancos] set timbrado = 0 WHERE timbrado is NULL"
    conn.Exec(queryD2)
  
    queryD := `SELECT idCliente, rfc, razonSocial, NumCtaPago, correo
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zClientes]
      WHERE BUNIT = '`+BUNIT.(string)+`' 
      order by idCliente asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    rfc:=""
    razonSocial:=""
    NumCtaPago:=""
    correo:=""
    idCliente:=0
    idNumCtaPago:=0
    models.ClearClientes()
    var cedulCliente models.Clientes
    type Archivos struct {
      Nombre string
      Completo string
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)

//    models.ClearArchivos()
//    var archi models.Archivos
    primero := 1
    for rowsD.Next()  {
      rowsD.Scan(&idCliente, &rfc, &razonSocial, &NumCtaPago, &correo)
      if primero == 1 {
        primero = 0
        queryE := `SELECT NumCtaPago
          FROM [Sevenplus].[dbo].[zNumCtaPago]
          WHERE idCliente = '`+strconv.Itoa(idCliente)+`' 
          order by idNumCtaPago asc`
        rowsE, errE := conn.Query(queryE)
        if errE != nil {
          fmt.Println("que paso:", errE.Error())
        }
        NumCtaPago := ""
        for rowsE.Next()  {
          rowsE.Scan(&NumCtaPago)
          ArchivosList[NumCtaPago] = &Archivos{NumCtaPago, NumCtaPago}
          //archi = models.Archivos{NumCtaPago, NumCtaPago}
          //models.AddArchivos(archi, NumCtaPago)
        }
      }
      cedulCliente = models.Clientes{rfc, razonSocial, correo, idCliente ,  make(map[string]*models.NumCtaPago)}
      models.AddClientes(cedulCliente, strconv.Itoa(idCliente))
      queryDD := `SELECT idNumCtaPago, NumCtaPago
        FROM [Sevenplus].[dbo].[zNumCtaPago]
        WHERE idCliente = `+strconv.Itoa(idCliente)+`
        order by idNumCtaPago asc`
      rowsDD, errDD := conn.Query(queryDD)
      if errDD != nil {
        fmt.Println("que paso DD:", errDD.Error())
      }
      var clienteActual models.Clientes
      clienteActual = models.DameClientePorIdCLiente(strconv.Itoa(idCliente))
      for rowsDD.Next()  {
        rowsDD.Scan(&idNumCtaPago, &NumCtaPago)
        if _, ok := clienteActual.NumCtaPagoList[strconv.Itoa(idNumCtaPago)]; ok {
          } else {
          var Liga models.NumCtaPago
          Liga = models.NumCtaPago{idNumCtaPago,NumCtaPago}
          clienteActual.NumCtaPagoList[strconv.Itoa(idNumCtaPago)] = &Liga
        }
      }
    }
    timbrado := 0
    UUID := ""

    queryD = `SELECT n.nombre, z.idBanco, z.importe, z.descripcion, ISNULL(z.timbrado,0) as timbrado, ISNULL(z.UUID,'') as UUID
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
      INNER JOIN [Sevenplus].[dbo].[zNombreCuentas] n on n.cuenta = z.cuenta
      WHERE z.BUNIT = '`+BUNIT.(string)+`' AND
      z.fecha = '`+Fecha+`' AND z.CuentaPropia != 1 AND z.STATUS = 2
      order by z.idBanco asc`
      fmt.Println(queryD)
    rowsD, errD = conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    nombre:=""
    idBanco:=0
    importe:=0.0
    descripcion:=""
    models.ClearTimbradoDia()
    var cedul models.TimbradoDia
    for rowsD.Next()  {
      rowsD.Scan(&nombre, &idBanco, &importe, &descripcion, &timbrado, &UUID)
      cedul = models.TimbradoDia{nombre, idBanco, importe, descripcion,  timbrado, UUID}
      models.AddTimbradoDia(cedul, strconv.Itoa(idBanco))
    }
    example := map[string]interface{}{ "success":1, "NumCtaPago" : ArchivosList, "liga" : models.GetAllTimbradoDia(), "clientes" : models.GetAllClientes()}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *CargaLigadoDeDiaIngresosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    Fecha := c.GetString("Fecha")
    //anio := "20"+Fecha[6:8]
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryDDD := `SELECT e.idEtiqueta, e.etiqueta
    FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zEtiquetas_INGRESO]  e
    WHERE e.BUNIT = '`+BUNIT.(string)+`' order by e.idEtiqueta asc`
    rowsDDD, errDDD := conn.Query(queryDDD)
    if errDDD != nil {
      fmt.Println("que paso:", errDDD.Error())
    }
    idEtiqueta := 0
    etiqueta := ""
    type Palabras struct {
      IdLigadoRFC string
      Palabra string
    }
    type Etiquetas struct {
      IdEtiqueta string
      Etiqueta string
      PalabrasList  map[string]*Palabras
    }
    var (
      EtiquetasList map[string]*Etiquetas
    )
    EtiquetasList = make(map[string]*Etiquetas)
    //models.ClearEtiquetas()
    //var cedul22 models.Etiquetas
    for rowsDDD.Next()  {
      rowsDDD.Scan(&idEtiqueta, &etiqueta)
      if _, ok := EtiquetasList[strconv.Itoa(idEtiqueta)]; ok {
      } else {
        EtiquetasList[strconv.Itoa(idEtiqueta)] = &Etiquetas{ strconv.Itoa(idEtiqueta), etiqueta, make(map[string]*Palabras)}
//        cedul22 = models.Etiquetas{ strconv.Itoa(idEtiqueta), etiqueta, make(map[string]*models.Palabras)}
//        models.AddEtiquetas(cedul22, strconv.Itoa(idEtiqueta))
      }
    }
    rfcEmisor := ""
    rfcAnterior := ""
    razonSocialOrigen := ""
    lugarExpedicion := ""
    regimen := ""
    queryF := "SELECT rfc, rfcAnterior, razonSocial, lugarExpedicion, regimen FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '"+BUNIT.(string)+"'"
    rowsF, _ := conn.Query(queryF)
    if rowsF.Next()  {
      rowsF.Scan(&rfcEmisor, &rfcAnterior, &razonSocialOrigen, &lugarExpedicion, &regimen)
    }
    rfc := ""
    razonSocial := ""
    total := 0.0
    folioFiscal := ""
    var TRANS_DATETIME time.Time
    queryF = `SELECT f.fechaExpedicion, f.rfc,f.razonSocial,f.total,f.folioFiscal
FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_facturacion_XML] f
WHERE f.STATUS = '2' AND f.rfcRaiz in ('`+rfcEmisor+`', '`+rfcAnterior+`')
AND (f.ligado<f.total OR f.ligado IS NULL)
order by f.idXML asc`

// AND SUBSTRING(CAST(f.fechaExpedicion  AS VARCHAR(11)),1,4) = '`+anio+`'
    rowsF, errF := conn.Query(queryF)
    if errF != nil {
      fmt.Println("que pasoF:", errF.Error())
    }
    type Archivos struct {
      Nombre string
      Completo string
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)

//    models.ClearArchivos()
//    var archivo models.Archivos 
    for rowsF.Next()  {
      rowsF.Scan(&TRANS_DATETIME, &rfc, &razonSocial, &total, &folioFiscal)
      fechaReal := ""
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          }
        }
      }
      
      //if total > 0.009 {
        todo := fechaReal+" "+rfc+" "+razonSocial+"|"+fmt.Sprintf("%.2f", total)+"|"+folioFiscal
        ArchivosList[folioFiscal] =&Archivos{todo, todo}
        //archivo = models.Archivos{todo, todo}
        //models.AddArchivos(archivo, folioFiscal)
      //}
    }



    queryD := `SELECT n.nombre, z.idBanco, z.importe, z.descripcion
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
      INNER JOIN [Sevenplus].[dbo].[zNombreCuentas] n on n.cuenta = z.cuenta
      WHERE z.BUNIT = '`+BUNIT.(string)+`' AND
      z.fecha = '`+Fecha+`' AND z.CuentaPropia != 1 AND z.STATUS = 2
      order by z.idBanco asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    nombre:=""
    idBanco:=0
    importe:=0.0
    descripcion:=""
    models.ClearLigadoDia()
    var cedul models.LigadoDia
    var bancoActual models.LigadoDia
    var idLigado int
    for rowsD.Next()  {
      rowsD.Scan(&nombre, &idBanco, &importe, &descripcion)
      cedul = models.LigadoDia{nombre, idBanco, importe, descripcion,  make(map[string]*models.Ligado)}
      models.AddLigadoDia(cedul, strconv.Itoa(idBanco))
      bancoActual = models.DameLigadoDiaPorCodigo(strconv.Itoa(idBanco))
      queryE := `SELECT f.FOLIO_FISCAL, f.AMOUNT, ISNULL(x.nombreArchivoPDF, '') as pdf, ISNULL(x.nombreArchivoXML,'') as xml , ISNULL(x.ruta,'') as ruta , f.idLigado, ISNULL(f.idEtiquetaIngreso,0) as idEtiquetaIngreso
        FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] f
        LEFT JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_facturacion_XML] x on x.folioFiscal = f.FOLIO_FISCAL
        WHERE f.idBanco = `+strconv.Itoa(idBanco)+` 
        order by f.idLigado asc`
      rowsE, errE := conn.Query(queryE)
      if errE != nil {
        fmt.Println("que pasoE:", errE.Error())
      }
      FOLIO_FISCAL := ""
      AMOUNT := 0.0
      nombreArchivoPDF := ""
      nombreArchivoXML := ""
      ruta := ""
      
      for rowsE.Next()  {
        rowsE.Scan(&FOLIO_FISCAL, &AMOUNT, &nombreArchivoPDF, &nombreArchivoXML, &ruta, &idLigado, &idEtiqueta)
        if idBanco == 393 {
          fmt.Println(idLigado)
        }
        if _, ok := bancoActual.LigadoList[strconv.Itoa(idLigado)]; ok {
          } else {
          var Liga models.Ligado
          Liga = models.Ligado{FOLIO_FISCAL,AMOUNT, nombreArchivoPDF, nombreArchivoXML, ruta, idEtiqueta }
          bancoActual.LigadoList[strconv.Itoa(idLigado)] = &Liga
        }
      }
    }
    example := map[string]interface{}{ "success":1, "liga" : models.GetAllLigadoDia(), "facturas" : ArchivosList, "etiquetas" : EtiquetasList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}



func (c *ConfigInicialDeNominaCamposController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    BUNIT := ""
    periodo := 0
    cuanto := 0.0
    queryF := `SELECT n.BUNIT, n.periodo, SUM(n.cantidad) as cuanto
      FROM [Sevenplus].[dbo].[zNominaFacturas] n
      GROUP BY n.BUNIT, n.periodo
      ORDER BY n.BUNIT asc, n.periodo asc`
    rowsF, errF := conn.Query(queryF)
    if errF != nil {
      fmt.Println("que pasoF:", errF.Error())
    }
    type Archivos struct {
      BUNIT string
      Periodo int
      Cuanto float64  
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)
    for rowsF.Next()  {
      rowsF.Scan(&BUNIT, &periodo, &cuanto)
      llave := BUNIT + strconv.Itoa(periodo)
      ArchivosList[llave] = &Archivos{BUNIT, periodo, cuanto}
    }
    example := map[string]interface{}{ "success":1, "facturas" : ArchivosList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *ConfigInicialDeVerFacturaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    BUNIT := c.GetSession("BUNIT")
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    rfc := ""
    razonSocial := ""
    total := 0.0
    folioFiscal := ""
    //var TRANS_DATETIME time.Time
    queryF := `SELECT DISTINCT f.fechaExpedicion, f.rfc,f.razonSocial,f.total,f.folioFiscal
FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_facturacion_XML] f
INNER JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] ff on ff.FOLIO_FISCAL = f.folioFiscal
INNER JOIN [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] b on b.idBanco = ff.idBanco`
// AND SUBSTRING(CAST(f.fechaExpedicion  AS VARCHAR(11)),1,4) = '`+anio+`'
    rowsF, errF := conn.Query(queryF)
    if errF != nil {
      fmt.Println("que pasoF:", errF.Error())
    }
    type Archivos struct {
      Nombre string
      Completo string
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)

//    models.ClearArchivos()
//    var archivo models.Archivos 
    stringAux := ""
    for rowsF.Next()  {
      rowsF.Scan(&stringAux, &rfc, &razonSocial, &total, &folioFiscal)
      fechaReal := ""
      if len(stringAux) == 10 {
        diaUno := stringAux[0:2]
        mesUno := stringAux[3:5]
        anioUno := stringAux[6:]
        stringAux = anioUno+"-"+mesUno+"-"+diaUno
      } else {
        stringAux = stringAux[0:10]
      }
      TRANS_DATETIME, _ := time.Parse("2006-01-02", stringAux)
      
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          }
        }
      }
      
      todo := fechaReal+" "+rfc+" "+razonSocial+"|"+fmt.Sprintf("%.2f", total)+"|"+folioFiscal
      ArchivosList[folioFiscal] =&Archivos{todo, todo}
      //archivo = models.Archivos{todo, todo}
      //models.AddArchivos(archivo, folioFiscal)
    }
    example := map[string]interface{}{ "success":1, "facturas" : ArchivosList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
func (c *VerDondeSeLigoPost54Controller) Post() {
  folioFiscal := c.GetString("folioFiscal")
  connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
  conn, errS := sql.Open("mssql", connString2) 
  defer conn.Close()
  if errS != nil {
    fmt.Println("Perdon! Open connection failed:", errS.Error())
  }
  rfc := ""
  razonSocial := ""
  total := 0.0
  nombreCuenta := ""
  var TRANS_DATETIME time.Time
  importeBanco := 0.0
  ligado := 0.0
  BUNIT := ""
  
  fechaBanco := ""
  descripcionBanco := ""
  queryF := `SELECT f.fechaExpedicion, f.rfc,f.razonSocial,f.total,ff.AMOUNT, b.importe, b.BUNIT, b.fecha, b.descripcion
  FROM [SU_FISCAL].[dbo].[facturacion_XML] f
  INNER JOIN [SU_FISCAL].[dbo].[FISCAL_banco] ff on ff.FOLIO_FISCAL = f.folioFiscal
  INNER JOIN [Sevenplus].[dbo].[zBancos] b on b.idBanco = ff.idBanco
  WHERE f.folioFiscal = '`+folioFiscal+`'`
  fmt.Println(queryF)
  rowsF, errF := conn.Query(queryF)
  if errF != nil {
    fmt.Println("que pasoF:", errF.Error())
  }
  models.ClearVerLigado()
  var archivo models.VerLigado  
  i := 0
  for rowsF.Next()  {
    rowsF.Scan(&nombreCuenta, &TRANS_DATETIME, &rfc, &razonSocial, &total, &ligado, &importeBanco,&BUNIT, &fechaBanco, &descripcionBanco)
    fechaReal := ""
    mes := int(TRANS_DATETIME.Month())
    dia :=  TRANS_DATETIME.Day()
    if mes > 9 && dia > 9 {
      fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
    } else {
      if mes > 9 && dia < 10 {
        fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes < 10 && dia > 9 {
          fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        }
      }
    }
    iS := strconv.Itoa(i)
    archivo = models.VerLigado{nombreCuenta, fechaReal, rfc, razonSocial, total, ligado, importeBanco, BUNIT, fechaBanco, descripcionBanco}
    models.AddVerLigado(archivo, iS)
    i++
  }
  example := map[string]interface{}{ "success":1, "ligado" : models.GetAllVerLigado()}
  c.Data["json"] = &example
  c.ServeJSON()
}
func (c *VerDondeSeLigoGetController) Get() {
  folioFiscal := c.GetString("folioFiscal")
  BUNITS := c.GetString("BUNIT")
  connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
  conn, errS := sql.Open("mssql", connString2) 
  defer conn.Close()
  if errS != nil {
    fmt.Println("Perdon! Open connection failed:", errS.Error())
  }
  rfc := ""
  razonSocial := ""
  total := 0.0
  nombreCuenta := ""
  var TRANS_DATETIME time.Time
  importeBanco := 0.0
  ligado := 0.0
  BUNIT := ""
  
  fechaBanco := ""
  descripcionBanco := ""
  queryF := `SELECT f.fechaExpedicion, f.rfc,f.razonSocial,f.total,ff.AMOUNT, b.importe, b.BUNIT, b.fecha, b.descripcion
  FROM [SU_FISCAL].[dbo].[`+BUNITS+`_facturacion_XML] f
  INNER JOIN [SU_FISCAL].[dbo].[`+BUNITS+`_FISCAL_banco] ff on ff.FOLIO_FISCAL = f.folioFiscal
  INNER JOIN [Sevenplus].[dbo].[`+BUNITS+`_zBancos] b on b.idBanco = ff.idBanco
  WHERE f.folioFiscal = '`+folioFiscal+`'`
  fmt.Println(queryF)
  rowsF, errF := conn.Query(queryF)
  if errF != nil {
    fmt.Println("que pasoF:", errF.Error())
  }
  models.ClearVerLigado()
  var archivo models.VerLigado  
  i := 0
  for rowsF.Next()  {
    rowsF.Scan(&nombreCuenta, &TRANS_DATETIME, &rfc, &razonSocial, &total, &ligado, &importeBanco,&BUNIT, &fechaBanco, &descripcionBanco)
    fechaReal := ""
    mes := int(TRANS_DATETIME.Month())
    dia :=  TRANS_DATETIME.Day()
    if mes > 9 && dia > 9 {
      fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
    } else {
      if mes > 9 && dia < 10 {
        fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes < 10 && dia > 9 {
          fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        }
      }
    }
    iS := strconv.Itoa(i)
    archivo = models.VerLigado{nombreCuenta, fechaReal, rfc, razonSocial, total, ligado, importeBanco, BUNIT, fechaBanco, descripcionBanco}
    models.AddVerLigado(archivo, iS)
    i++
  }
  example := map[string]interface{}{ "success":1, "ligado" : models.GetAllVerLigado()}
  c.Data["json"] = &example
  c.ServeJSON()
}

func (c *VerDondeSeLigoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    folioFiscal := c.GetString("folioFiscal")
    //anio := "20"+Fecha[6:8]
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    rfc := ""
    razonSocial := ""
    total := 0.0
    nombreCuenta := ""
    //var TRANS_DATETIME time.Time
    importeBanco := 0.0
    ligado := 0.0
    BUNIT := ""
    BUNITS := c.GetSession("BUNIT")
    fechaBanco := ""
    descripcionBanco := ""
    queryF := `SELECT n.nombre, f.fechaExpedicion, f.rfc,f.razonSocial,f.total,ff.AMOUNT, b.importe, b.BUNIT, b.fecha, b.descripcion
    FROM [SU_FISCAL].[dbo].[`+BUNITS.(string)+`_facturacion_XML] f
    INNER JOIN [SU_FISCAL].[dbo].[`+BUNITS.(string)+`_FISCAL_banco] ff on ff.FOLIO_FISCAL = f.folioFiscal
    INNER JOIN [Sevenplus].[dbo].[`+BUNITS.(string)+`_zBancos] b on b.idBanco = ff.idBanco
    INNER JOIN [Sevenplus].[dbo].[zNombreCuentas] n on n.cuenta = b.cuenta
    WHERE f.folioFiscal = '`+folioFiscal+`'`
    rowsF, errF := conn.Query(queryF)
    if errF != nil {
      fmt.Println("que pasoF:", errF.Error())
    }
    models.ClearVerLigado()
    var archivo models.VerLigado  
    i := 0
    stringAux := ""
    for rowsF.Next()  {
      rowsF.Scan(&nombreCuenta, &stringAux, &rfc, &razonSocial, &total, &ligado, &importeBanco,&BUNIT, &fechaBanco, &descripcionBanco)
      fechaReal := ""
      if len(stringAux) == 10 {
        diaUno := stringAux[0:2]
        mesUno := stringAux[3:5]
        anioUno := stringAux[6:]
        stringAux = anioUno+"-"+mesUno+"-"+diaUno
      } else {
        stringAux = stringAux[0:10]
      }
      TRANS_DATETIME, _ := time.Parse("2006-01-02", stringAux)
      
      
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          }
        }
      }
      iS := strconv.Itoa(i)
      archivo = models.VerLigado{nombreCuenta, fechaReal, rfc, razonSocial, total, ligado, importeBanco, BUNIT, fechaBanco, descripcionBanco}
      models.AddVerLigado(archivo, iS)
      i++
    }
    example := map[string]interface{}{ "success":1, "ligado" : models.GetAllVerLigado()}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *DamePendientesDeLigarController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    //anio := "20"+Fecha[6:8]
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryDDD := `SELECT b.idBanco, b.descripcion, b.importe, b.fecha, b.cuenta, n.nombre, ISNULL((SELECT SUM(f.AMOUNT) FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] f WHERE f.idBanco = b.idBanco),0) as ligado
    FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] b
    INNER JOIN [Sevenplus].[dbo].[zNombreCuentas] n on n.cuenta = b.cuenta
    WHERE b.BUNIT = '`+BUNIT.(string)+`' AND n.BUNIT = '`+BUNIT.(string)+`'
    AND b.CuentaPropia = 0
    AND SUBSTRING(b.fecha,7,8) != '16'
    order by b.idBanco desc, b.fecha desc, b.cuenta desc`
    rowsDDD, errDDD := conn.Query(queryDDD)
    if errDDD != nil {
      fmt.Println("que paso:", errDDD.Error())
    }
    idBanco := 0
    descripcion := ""
    importe := 0.0
    fecha := ""
    cuenta := ""
    nombre := ""
    ligado := 0.0
    
    type PendientesDeLigar struct {
      IdBanco int
      Descripcion string
      Importe float64
      Fecha string
      Cuenta string
      Nombre string
      Ligado float64
    }
    var (
      PendientesDeLigarList map[string]*PendientesDeLigar
    )
    PendientesDeLigarList = make(map[string]*PendientesDeLigar)
    for rowsDDD.Next()  {
      rowsDDD.Scan(&idBanco, &descripcion, &importe, &fecha, &cuenta, &nombre, &ligado)
      if _, ok := PendientesDeLigarList[strconv.Itoa(idBanco)]; ok {
      } else {
        PendientesDeLigarList[strconv.Itoa(idBanco)] = &PendientesDeLigar{ idBanco, descripcion, importe, fecha, cuenta, nombre , ligado}
      }
    }   
    example := map[string]interface{}{ "success":1, "reporte" : PendientesDeLigarList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *CargaLigadoDeDiaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    Fecha := c.GetString("Fecha")
    cuenta := c.GetString("cuenta")
    //anio := "20"+Fecha[6:8]
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryDDD := `SELECT e.idEtiqueta, e.etiqueta
    FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zEtiquetas]  e
    WHERE e.BUNIT = '`+BUNIT.(string)+`' order by e.idEtiqueta asc`
    rowsDDD, errDDD := conn.Query(queryDDD)
    if errDDD != nil {
      fmt.Println("que paso:", errDDD.Error())
    }
    idEtiqueta := 0
    etiqueta := ""
    type Palabras struct {
      IdLigadoRFC string
      Palabra string
    }
    type Etiquetas struct {
      IdEtiqueta string
      Etiqueta string
      PalabrasList  map[string]*Palabras
    }
    var (
      EtiquetasList map[string]*Etiquetas
    )
    EtiquetasList = make(map[string]*Etiquetas)

    //models.ClearEtiquetas()
    //var cedul22 models.Etiquetas
    for rowsDDD.Next()  {
      rowsDDD.Scan(&idEtiqueta, &etiqueta)
      if _, ok := EtiquetasList[strconv.Itoa(idEtiqueta)]; ok {
      } else {
        EtiquetasList[strconv.Itoa(idEtiqueta)] = &Etiquetas{ strconv.Itoa(idEtiqueta), etiqueta, make(map[string]*Palabras)}
        //models.AddEtiquetas(cedul22, strconv.Itoa(idEtiqueta))
      }
    }
    



    ////////////////////////////////


    rfcEmisor := ""
    rfcAnterior := ""
    razonSocialOrigen := ""
    lugarExpedicion := ""
    regimen := ""
    queryF := "SELECT rfc, rfcAnterior, razonSocial, lugarExpedicion, regimen FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '"+BUNIT.(string)+"'"
    rowsF, _ := conn.Query(queryF)
    if rowsF.Next()  {
      rowsF.Scan(&rfcEmisor, &rfcAnterior, &razonSocialOrigen, &lugarExpedicion, &regimen)
    }
    rfc := ""
    razonSocial := ""
    total := 0.0
    folioFiscal := ""
    //var TRANS_DATETIME time.Time
    queryF = `SELECT f.fechaExpedicion, f.rfc,f.razonSocial,f.total,f.folioFiscal
    FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_facturacion_XML] f
    WHERE f.STATUS = '1' AND f.rfcRaiz in ('`+rfcEmisor+`','`+rfcAnterior+`')
    AND (f.ligado<f.total OR f.ligado IS NULL)
    order by f.idXML asc`
    
// AND SUBSTRING(CAST(f.fechaExpedicion  AS VARCHAR(11)),1,4) = '`+anio+`'
    rowsF, errF := conn.Query(queryF)
    if errF != nil {
      fmt.Println("que pasoF:", errF.Error())
    }
    type Archivos struct {
      Nombre string
      Completo string
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)

    //models.ClearArchivos()
    //var archivo models.Archivos 
    var stringAux string
    for rowsF.Next()  {
      rowsF.Scan(&stringAux, &rfc, &razonSocial, &total, &folioFiscal)
      fechaReal := ""
      if len(stringAux) == 10 {
        diaUno := stringAux[0:2]
        mesUno := stringAux[3:5]
        anioUno := stringAux[6:]
        stringAux = anioUno+"-"+mesUno+"-"+diaUno
      } else {
        stringAux = stringAux[0:10]
      }
      TRANS_DATETIME, _ := time.Parse("2006-01-02", stringAux)
      
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          }
        }
      }
      
      //if total > 0.009 {
        todo := fechaReal+" "+rfc+" "+razonSocial+"|"+fmt.Sprintf("%.2f", total)+"|"+folioFiscal
        ArchivosList[folioFiscal] = &Archivos{todo, todo}
        //archivo = models.Archivos{todo, todo}
        //models.AddArchivos(archivo, folioFiscal)
      //}
    }



    queryD := `SELECT z.cuenta as nombre, z.idBanco, z.importe, z.descripcion
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
      WHERE z.BUNIT = '`+BUNIT.(string)+`' AND
      z.fecha = '`+Fecha+`' AND z.cuenta = '`+cuenta+`' AND z.CuentaPropia != 1 AND z.STATUS = 1
      order by z.idBanco asc`
      fmt.Println(queryD)
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    nombre:=""
    idBanco:=0
    importe:=0.0
    descripcion:=""
    type Ligado struct {
      FOLIO_FISCAL string
      AMOUNT float64
      PDF string
      XML string
      Ruta string
      IdEtiqueta int
    }
    type LigadoDia struct {
      Nombre string
      IdBanco int
      Importe float64
      Descripcion string
      LigadoList map[string]*Ligado
    }
    var (
      LigadoDiaList map[string]*LigadoDia
    )
    LigadoDiaList = make(map[string]*LigadoDia)
    //models.ClearLigadoDia()
    //var cedul models.LigadoDia
    var bancoActual *LigadoDia
    for rowsD.Next()  {
      rowsD.Scan(&nombre, &idBanco, &importe, &descripcion)
      LigadoDiaList[strconv.Itoa(idBanco)] = &LigadoDia{nombre, idBanco, importe, descripcion,  make(map[string]*Ligado)}
//      cedul = models.LigadoDia{nombre, idBanco, importe, descripcion,  make(map[string]*models.Ligado)}
//      models.AddLigadoDia(cedul, strconv.Itoa(idBanco))
      bancoActual = LigadoDiaList[strconv.Itoa(idBanco)]
      queryE := ` SELECT f.FOLIO_FISCAL, f.AMOUNT, ISNULL(x.nombreArchivoPDF,'') as nombreArchivoPDF, ISNULL(x.nombreArchivoXML,'') as nombreArchivoXML, ISNULL(x.ruta,'') as ruta, f.idLigado, ISNULL(f.idEtiqueta,0) as idEtiqueta
        FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] f
        LEFT JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_facturacion_XML] x on x.folioFiscal = f.FOLIO_FISCAL
        WHERE f.idBanco = `+strconv.Itoa(idBanco)+` 
        order by f.idLigado asc`
      rowsE, errE := conn.Query(queryE)
      if errE != nil {
        fmt.Println("que pasoE:", errE.Error())
      }
      FOLIO_FISCAL := ""
      AMOUNT := 0.0
      nombreArchivoPDF := ""
      nombreArchivoXML := ""
      ruta := ""
      idLigado := 0
      for rowsE.Next()  {
        rowsE.Scan(&FOLIO_FISCAL, &AMOUNT, &nombreArchivoPDF, &nombreArchivoXML, &ruta, &idLigado, &idEtiqueta)
        if _, ok := bancoActual.LigadoList[strconv.Itoa(idLigado)]; ok {
          } else {
          var Liga Ligado
          Liga = Ligado{FOLIO_FISCAL,AMOUNT, nombreArchivoPDF, nombreArchivoXML, ruta, idEtiqueta }
          bancoActual.LigadoList[strconv.Itoa(idLigado)] = &Liga
        }
      }
    }
    example := map[string]interface{}{ "success":1, "liga" : LigadoDiaList, "facturas" : ArchivosList, "etiquetas" : EtiquetasList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func LimiteInferior(a float64) (float64, float64, float64) {
  if a < 5952.85 {
    return 0.01, 0.0, 1.92
  }
  if a < 50524.93 {
    return 5952.85, 114.29, 6.4
  }
  if a < 88793.05 {
    return 50524.93, 2966.91, 10.88
  }
  if a < 103218.01 {
    return 88793.05,7130.48, 16
  }
  if a < 123580.21 {
    return 103218.01,9438.47,17.92
  }
  if a < 249243.49 {
    return 123580.21,13087.37,21.36
  }
  if a < 392841.97 {
    return 249243.49,39929.05,23.52
  }
  if a < 750000.01 {
    return 392841.97,73703.41,30
  }
  return -1.0, -1.0, -1.0
}
func Round(val float64, roundOn float64, places int ) (newVal float64) {
  var round float64
  pow := math.Pow(10, float64(places))
  digit := pow * val
  _, div := math.Modf(digit)
  if div >= roundOn {
    round = math.Ceil(digit)
  } else {
    round = math.Floor(digit)
  }
  newVal = round / pow
  return
}

func (c *GenerarPreContabilizacionController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    DB := c.GetSession("DB")
    delPeriodo := c.GetString("delPeriodo")
    anio := delPeriodo[0:4]
    mes := delPeriodo[5:7]
    fecha := anio+"-"+mes+"-25"
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    //14500
    //2.75%  antes 2.6
    //5.5%
    //6884.0
    query := `SELECT base, PCENT_AFROUMN, PCENT_SALUD, Parte_Exenta
      FROM [`+DB.(string)+`].[dbo].[zConfig]
      WHERE BUNIT = '`+BUNIT.(string)+`'`
      rowsD, errD:= conn.Query(query)
    if errD != nil {
      fmt.Println("que pasho:", errD.Error())
    }
    base := 0.0
    PCENT_AFROUMN := 0.0
    PCENT_SALUD := 0.0
    Parte_Exenta := 0.0
    for rowsD.Next()  {
      rowsD.Scan(&base, &PCENT_AFROUMN, &PCENT_SALUD, &Parte_Exenta)
    }
    Parte_Exenta = 7355.0
    query = `SELECT TOP 1 ACNT_CODE, Concepto
      FROM [`+DB.(string)+`].[dbo].[nominaConceptos]
      WHERE BUNIT = '`+BUNIT.(string)+`' AND tipo = 1 AND TipoSAT = '046'
      AND GravadoExcento = 2`
      rowsD, errD = conn.Query(query)
    if errD != nil {
      fmt.Println("que pasho:", errD.Error())
    }
    cuentaExenta := ""
    cuentaExentaConcepto := ""
    if rowsD.Next()  {
      rowsD.Scan(&cuentaExenta, &cuentaExentaConcepto)
    }
    query = `SELECT TOP 1 ACNT_CODE, Concepto
      FROM [`+DB.(string)+`].[dbo].[nominaConceptos]
      WHERE BUNIT = '`+BUNIT.(string)+`' AND tipo = 1 AND TipoSAT = '046'
      AND GravadoExcento = 1`
      rowsD, errD = conn.Query(query)
    if errD != nil {
      fmt.Println("que pasho:", errD.Error())
    }
    cuentaGravada := ""
    cuentaGravadaConcepto := ""
    if rowsD.Next()  {
      rowsD.Scan(&cuentaGravada, &cuentaGravadaConcepto)
    }
    cuentaISR := "338ISRRE01"
    conceptoISR := "ISR"
    
    queryDDD := `SELECT ER, nombre,
    ISNULL(PCENT_Manutencion,0),
    ISNULL(PCENT_Posgrado,0),
    ISNULL(PCENT_Ministerial,0),
    ISNULL(PCENT_Pulpito,0),
    ISNULL(PCENT_Extraordinaria,0),
    ISNULL(ayuda_renta,0),
    ISNULL(unidades_seguro,0),
    ISNULL(proyecto,''),
    ISNULL(Departamento,'')
      FROM [`+DB.(string)+`].[dbo].[nomina]
      WHERE BUNIT = '`+BUNIT.(string)+`'`
    rowsDDD, errDDD := conn.Query(queryDDD)
    if errDDD != nil {
      fmt.Println("que paso:", errDDD.Error())
    }
    PCENT_Manutencion := 0.0
    PCENT_Posgrado := 0.0
    PCENT_Ministerial := 0.0
    PCENT_Pulpito := 0.0
    PCENT_Extraordinaria := 0.0
    ayuda_renta := 0.0
    unidades_seguro := 0.0
    proyecto := ""
    ER := ""
    nombre := ""
    departamento := ""
    type Prepoliza struct {
      ACCNT_CODE string
      PERIOD string
      TRANS_DATETIME string
      AMOUNT float64
      D_C string
      TREFERENCE string
      DESCRIPTN string
      ANAL_T1 string
      ANAL_T2 string
      ANAL_T3 string
      ANAL_T4 string
      ANAL_T5 string
      ANAL_T6 string
      ANAL_T7 string
      ANAL_T8 string
      ANAL_T9 string
    }
    var (
      PrepolizaList map[string]*Prepoliza
    )
    PrepolizaList = make(map[string]*Prepoliza)
    type Calculo struct {
      S float64
      MD float64
      SS float64
      D float64
      TotalIngresos float64
      Diezmo float64
      DiezmoRenta float64
      Afroumn float64
      Salud float64
      TotalDescuentos float64
      Neto float64
      Exenta float64
      Gravada float64
      GravadaAnual float64
      LimiteInferior float64
      ExedenteLimiteInferior float64
      PcentImpuesto float64
      ImpuestoMarginal float64
      CuotaFija float64
      ImpuestoAnual float64
      ImpuestoMensual float64
      ER string
      Nombre string
      Proyecto string
      Departamento string
    }
    var (
      CalculoList map[string]*Calculo
    )
    CalculoList = make(map[string]*Calculo)
    for rowsDDD.Next()  {
      rowsDDD.Scan(&ER, &nombre, &PCENT_Manutencion, &PCENT_Posgrado, &PCENT_Ministerial,&PCENT_Pulpito,&PCENT_Extraordinaria, &ayuda_renta, &unidades_seguro, &proyecto, &departamento)
      PCENT_Manutencion /= 100
      PCENT_Posgrado /= 100
      PCENT_Ministerial /= 100
      PCENT_Pulpito /= 100
      PCENT_Extraordinaria /= 100

      s := Round(base * PCENT_Manutencion, 0.5, 2)
      md := Round(base * PCENT_Posgrado, 0.5, 2)
      ss := Round(base *  PCENT_Ministerial, 0.5, 2)
      d := Round(base * PCENT_Pulpito, 0.5, 2)
      total := Round(s + md +ss + d, 0.5, 2)
      unBono := Round(base*(PCENT_Manutencion+PCENT_Ministerial+PCENT_Posgrado)*PCENT_Extraordinaria, 0.5, 2)
      dosBonos := Round(unBono * 2.0, 0.5, 2)
      diezmoBonos := Round(dosBonos * 0.1, 0.5, 2)
      diezmoMensualDeBonos := Round(diezmoBonos / 12.0, 0.5, 2)
    //  ingresoMensualDeBonos := Round(dosBonos / 12.0, 0.5, 2)
      diezmo := Round((total*0.1)+diezmoMensualDeBonos, 0.5, 2)
      diezmoRenta := Round(ayuda_renta * 0.1, 0.5, 2)
      afroumn := Round(s * PCENT_AFROUMN, 0.5, 2)
      salud := Round(((s+ss) * PCENT_SALUD) *0.25, 0.5, 2) //hardcode
      descuentos := Round(diezmo + diezmoRenta + afroumn + salud, 0.5, 2)
      neto := Round(total - descuentos, 0.5, 2)
      gravado := Round(neto - Parte_Exenta, 0.5, 2)
      gravadoAnual := Round(gravado * 12.0, 0.5, 2)
      limInferior, cuotaFija, percentImpuesto := LimiteInferior(gravadoAnual)
      exedenteLimInferior := Round(gravadoAnual - limInferior, 0.5, 2)
      impuestoMarginal := Round( exedenteLimInferior * (percentImpuesto/100), 0.5, 2)
      impuestoTotal := Round(impuestoMarginal+cuotaFija, 0.5, 2)
      impuestoMensual := Round(impuestoTotal / 12, 0.5, 2)
      if s > 0 {
        if departamento == "MINISTROS DE CULTO" {
          PrepolizaList[ER+"-1"] = &Prepoliza{cuentaExenta,delPeriodo,fecha, Parte_Exenta,"D", fecha,nombre,"","10", proyecto, "31", "", ER, "", "", ""}        
          PrepolizaList[ER+"-2"] = &Prepoliza{ER,delPeriodo,fecha, Parte_Exenta,"C", fecha,cuentaExentaConcepto,"","10", "", "", "", "", "", "", ""}        
          PrepolizaList[ER+"-3"] = &Prepoliza{cuentaGravada,delPeriodo,fecha, gravado,"D", fecha,nombre,"","10", proyecto, "31", "", ER, "", "", ""}        
          PrepolizaList[ER+"-4"] = &Prepoliza{ER,delPeriodo,fecha, gravado,"C", fecha,cuentaGravadaConcepto,"","10", "", "", "", "", "", "", ""}
          PrepolizaList[ER+"-5"] = &Prepoliza{ER,delPeriodo,fecha, impuestoMensual,"D", fecha,conceptoISR,"","10", "", "", "", "", "", "", ""}
          PrepolizaList[ER+"-6"] = &Prepoliza{cuentaISR,delPeriodo,fecha, impuestoMensual,"C", fecha,nombre,"","10", "", "", "", "", "", "", ""}
        }
        CalculoList[ER] = &Calculo{s,md,ss,d,total,diezmo,diezmoRenta,afroumn,salud,descuentos,neto,Parte_Exenta,gravado,gravadoAnual,limInferior,exedenteLimInferior,percentImpuesto,impuestoMarginal,cuotaFija,impuestoTotal,impuestoMensual,ER,nombre, proyecto, departamento}
      }   
    } 
    example := map[string]interface{}{ "success":1, "calculo" :CalculoList, "prepoliza" : PrepolizaList}
    c.Data["json"] = &example
    c.ServeJSON()   
  }
}



func (c *DameXMLController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    uuid := c.GetString("uuid")

    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    //14500
    //2.75%  antes 2.6
    //5.5%
    //6884.0
    query := `SELECT xmlText
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zFacturas]
      WHERE UUID = '`+uuid+`'`
      rowsD, errD:= conn.Query(query)
    if errD != nil {
      fmt.Println("que pasho:", errD.Error())
    }
    xmlText :=""
    for rowsD.Next()  {
      rowsD.Scan(&xmlText)
    }
    

    example := map[string]interface{}{ "success":1, "xml" :xmlText}
    c.Data["json"] = &example
    c.ServeJSON()   
  }
}


func (c *AbrirXMLController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    xml := c.GetString("xml")
    BUNIT := c.GetSession("BUNIT")
    content, err := ioutil.ReadFile(xml)
    if err != nil {
      fmt.Println(err)
    }
    xmlString := string(content)
    if _, err := os.Stat("static/xml/"); os.IsNotExist(err) {
        os.MkdirAll("static/xml/", 0777)
    }
    nombreXML := "static/xml/temp_"+BUNIT.(string)+".xml"
    f, err := os.Create(nombreXML)
    check(err)
    n3, errF := f.WriteString(xmlString)
      fmt.Printf("wrote %d bytes\n", n3)
    check(errF)
      f.Sync()
    f.Close()
    example := map[string]interface{}{ "success":1, "xml" :nombreXML}
    c.Data["json"] = &example
    c.ServeJSON()   
  }
}


func (c *GenerarExcelParaDeclaracionController) Get() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    idEtiqueta := c.GetString("idEtiqueta")
    unidad := c.GetString("unidad")
    anio := c.GetString("anio")
    metodoDePago := c.GetString("metodoDePago")
    metodoDePagoList := []string{}
    arreglo := strings.Split(metodoDePago, "|")
    for _, m := range arreglo {
      metodoDePagoList = append(metodoDePagoList, m)
    }
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    rfcMIO := ""
    queryD := `SELECT rfc
      FROM [Sevenplus].[dbo].[zConfig]
      WHERE BUNIT = '`+BUNIT.(string)+`'`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println(queryD)
      fmt.Println("que paso ish:", errD.Error())
    }
    if rowsD.Next()  {
      rowsD.Scan(&rfcMIO)
    }
    palabrasList := []string{}
    palabra := ""

    queryD = `SELECT RFC
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zLigadoRFC]
      WHERE idEtiqueta = `+idEtiqueta+``
    rowsD, errD = conn.Query(queryD)
    if errD != nil {
      fmt.Println(queryD)
      fmt.Println("que paso ish D:", errD.Error())
    }
    for rowsD.Next()  {
      rowsD.Scan(&palabra)
      palabrasList = append(palabrasList, strings.ToUpper(palabra))
    }
          
    


    searchDir := unidad+":\\_FACTURAS\\"+rfcMIO+"\\Recibidos\\"+anio
    fileList := []string{}
      err := filepath.Walk(searchDir, func(path string, f os.FileInfo, err error) error {
          fileList = append(fileList, path)
          return nil
      })
      if err != nil{
        fmt.Println(err)
      }
      searchDir = unidad+":\\_FACTURAS\\"+rfcMIO+"\\Emitidos\\"+anio
      err = filepath.Walk(searchDir, func(path string, f os.FileInfo, err error) error {
          fileList = append(fileList, path)
          return nil
      })
      if err != nil{
        fmt.Println(err)
      }
      
      totalTotal := 0.0
      subTotalTotal := 0.0
      totalImpuestosRetenidos := 0.0
      totalImpuestosTrasladados := 0.0
    models.ClearRFCCFDI()
    var RFCCFDIactual models.RFCCFDI
    //var cedul models.RFCCFDI
    noEntres := 1
    c.Ctx.Output.ContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    c.Ctx.Output.Header("Content-Disposition", "attachment; filename=Informacion.xlsx")
    var file *xlsx.File
      var sheet *xlsx.Sheet
      var row *xlsx.Row
      var cell *xlsx.Cell
      var errEx error
      file = xlsx.NewFile()
      sheet, errEx = file.AddSheet("Informacion")
      if errEx != nil {
          fmt.Println(errEx)
      }
   
      for _, file := range fileList {
          if strings.Contains(file, ".xml") {
            content, err := ioutil.ReadFile(file)
        if err != nil {
          fmt.Println(err)
        }
        xmlString := string(content)
          v := new(CFDI)
          err = xml.Unmarshal([]byte(xmlString), v)
          if err != nil {
              fmt.Printf("error: %v", err)
              return
          }
          noEntres = 1
          RFC := v.Emisors[0].RFCEmisor
          RazonSocial := v.Emisors[0].NombreRazonSocial
          Regimen := v.Emisors[0].RegimenFiscals[0].Regimen
          Fecha := v.Fecha
          RFCReceptor := v.Receptors[0].RFCReceptor
          if RFC == rfcMIO {
            noEntres = 0
          } else {
            if RFCReceptor == rfcMIO {
              noEntres = 0
            }
          }
        //  RazonSocialReceptor := v.Emisors[0].NombreRazonSocial

          MetodoDePago := v.MetodoDePago
            metodo := false

          for _, word := range metodoDePagoList {
            if strings.Contains(MetodoDePago, word) {
                      metodo = true
                      break
                    }
        }
          TipoDeComprobante := strings.ToUpper(v.TipoDeComprobante)

          esGasto := 0
          if TipoDeComprobante != "EGRESO" && RFCReceptor == rfcMIO {
            esGasto = 1
          }
          if TipoDeComprobante == "EGRESO" && RFC == rfcMIO {
            esGasto = 1
          }
          



          totalActual := v.Total
          subTotal := v.SubTotal
          impRetenidos := v.Impuestoss[0].TotalImpuestosRetenidos
          impTrasladados := v.Impuestoss[0].TotalImpuestosTrasladados
        UUID := v.Complementos[0].TimbreFiscalDigitals[0].UUID
          for _, record := range v.Conceptoss[0].Conceptos {
            record.Descripcion = strings.ToUpper(record.Descripcion)
          result:= false
       
            for _, word := range palabrasList {
                    if strings.Contains(record.Descripcion, word) {
                          result = true
                          break
                        }
                        if strings.Contains(record.Unidad, word) {
                          result = true
                          break
                        }
                    }
                    if idEtiqueta == "-3" {
                      NoAutorizacion := len(v.Complementos[0].Donatariass)
                      if NoAutorizacion > 0 {
                        result = true
                      }
                    }
                    IVARetenido := 0.0
                    ISRRetenido := 0.0
                    if idEtiqueta == "-4" {//IVA
            if impRetenidos > 0 {
              for _, impuesto := range v.Impuestoss[0].Retencioness[0].Retencions {
                if impuesto.Impuesto == "IVA" {
                  result = true
                  IVARetenido +=  impuesto.Importe
                }
                if impuesto.Impuesto == "ISR" {
                  ISRRetenido +=  impuesto.Importe
                }
                }
            }
                    } 
                    
                    if idEtiqueta == "-5" {//ISR
            if impRetenidos > 0 {
              for _, impuesto := range v.Impuestoss[0].Retencioness[0].Retencions {
                if impuesto.Impuesto == "ISR" {
                  result = true
                  ISRRetenido +=  impuesto.Importe
                }
                if impuesto.Impuesto == "IVA" {
                  IVARetenido +=  impuesto.Importe
                }
                }
            }
                    } 
            if result && metodo && noEntres == 0 {
              if esGasto == 1 {
                if _, ok := models.RFCCFDIList[RFC]; ok {
              } else {
                RFCCFDIactual = models.RFCCFDI{RFC, RazonSocial, 0.0, 0.0, 0.0, 0.0, make(map[string]*models.CFDIDatos)}
                models.AddRFCCFDI(RFCCFDIactual, RFC)
              }
                RFCCFDIactualModificacion := models.DameRFCCFDI(RFC)
                if _, ok := RFCCFDIactualModificacion.CFDIDatosList[UUID]; ok {
              } else {
                var factura models.CFDIDatos
                factura = models.CFDIDatos{file,UUID, totalActual, subTotal, impRetenidos, impTrasladados, IVARetenido, ISRRetenido, Regimen, Fecha}
                RFCCFDIactualModificacion.CFDIDatosList[UUID] = &factura
                totalTotal += totalActual
                  subTotalTotal += subTotal
                  totalImpuestosRetenidos += impRetenidos
                  totalImpuestosTrasladados += impTrasladados
                models.RFCCFDIList[RFC].Total += totalActual
                models.RFCCFDIList[RFC].SubTotal += subTotal
                models.RFCCFDIList[RFC].TotalImpuestosRetenidos += impRetenidos
                models.RFCCFDIList[RFC].TotalImpuestosTrasladados += impTrasladados
              }
              }
            }
        }
      }
      }    
      m := models.GetAllRFCCFDI()
      primero := 1
    for k, _ := range m {
      RFCCFDIactual = models.DameRFCCFDI(k)
        if primero == 1 {
          row = sheet.AddRow()
        cell = row.AddCell()
          font := xlsx.NewFont(16, "Arial Black")
              style := xlsx.NewStyle()
              style.Font = *font                    
              cell.SetStyle(style)  
          cell.Value = "Archivo"
          cell = row.AddCell()
          cell = row.AddCell()
      cell = row.AddCell()
      cell = row.AddCell()
      cell = row.AddCell()
      cell = row.AddCell()
      cell = row.AddCell()
      cell = row.AddCell()
      
          font = xlsx.NewFont(16, "Arial Black")
              style = xlsx.NewStyle()
              style.Font = *font                    
              cell.SetStyle(style)  
          cell.Value = "Total"
          cell = row.AddCell()
          font = xlsx.NewFont(16, "Arial Black")
              style = xlsx.NewStyle()
              style.Font = *font                    
              cell.SetStyle(style)  
          cell.Value = "Subtotal"
          cell = row.AddCell()
          font = xlsx.NewFont(16, "Arial Black")
              style = xlsx.NewStyle()
              style.Font = *font                    
              cell.SetStyle(style)  
          cell.Value = "IVA Retenido"

          cell = row.AddCell()
          font = xlsx.NewFont(16, "Arial Black")
              style = xlsx.NewStyle()
              style.Font = *font                    
              cell.SetStyle(style)  
          cell.Value = "ISR Retenido"

          cell = row.AddCell()
          font = xlsx.NewFont(16, "Arial Black")
              style = xlsx.NewStyle()
              style.Font = *font                    
              cell.SetStyle(style)  
          cell.Value = "Regimen"

          cell = row.AddCell()
          font = xlsx.NewFont(16, "Arial Black")
              style = xlsx.NewStyle()
              style.Font = *font                    
              cell.SetStyle(style)  
          cell.Value = "Fecha"

          primero = 0
        }
      


      row = sheet.AddRow()
      row = sheet.AddRow()
       
        cell = row.AddCell()
        font := xlsx.NewFont(14, "Arial Black")
            style := xlsx.NewStyle()
            style.Font = *font                    
            cell.SetStyle(style)  
        cell.Value = "RFC: "+RFCCFDIactual.RFC

        cell = row.AddCell()
        font = xlsx.NewFont(14, "Arial Black")
            style = xlsx.NewStyle()
            style.Font = *font                    
            cell.SetStyle(style)  
      cell.Value = "Razon Social: "+RFCCFDIactual.RazonSocial
      
      cell = row.AddCell()
      
        font = xlsx.NewFont(14, "Arial Black")
            style = xlsx.NewStyle()
            style.Font = *font                    
            cell.SetStyle(style)  
      cell.Value = fmt.Sprintf("%.2f", RFCCFDIactual.Total)

      cell = row.AddCell()
        font = xlsx.NewFont(14, "Arial Black")
            style = xlsx.NewStyle()
            style.Font = *font                    
            cell.SetStyle(style)  
            cell.Value = fmt.Sprintf("%.2f", RFCCFDIactual.SubTotal)

      cell = row.AddCell()
        font = xlsx.NewFont(14, "Arial Black")
            style = xlsx.NewStyle()
            style.Font = *font                    
            cell.SetStyle(style)  
            cell.Value = fmt.Sprintf("%.2f", RFCCFDIactual.TotalImpuestosTrasladados)

      cell = row.AddCell()
        font = xlsx.NewFont(14, "Arial Black")
            style = xlsx.NewStyle()
            style.Font = *font                    
            cell.SetStyle(style)  
            cell.Value = fmt.Sprintf("%.2f", RFCCFDIactual.TotalImpuestosRetenidos)

      //row = sheet.AddRow()
       


        for kk, _ := range RFCCFDIactual.CFDIDatosList {
          row = sheet.AddRow()
          row = sheet.AddRow()
          cell = row.AddCell()
          font = xlsx.NewFont(14, "Arial Black")
              style = xlsx.NewStyle()
              style.Font = *font                    
              cell.SetStyle(style)  
          cell.Value = RFCCFDIactual.CFDIDatosList[kk].XML 
          cell.SetFormula(`=HIPERVINCULO("`+RFCCFDIactual.CFDIDatosList[kk].XML+`","XML")`)
        
        cell = row.AddCell()
          cell = row.AddCell()
          cell = row.AddCell()
          cell = row.AddCell()
          cell = row.AddCell()
          cell = row.AddCell()
          cell = row.AddCell()
          cell = row.AddCell()
          font = xlsx.NewFont(12, "Arial")
              style = xlsx.NewStyle()
              style.Font = *font                    
              cell.SetStyle(style)  
      //        cantidadFloat, _ := strconv.ParseFloat(RFCCFDIactual.CFDIDatosList[kk].Total, 64)
              cell.SetFloatWithFormat(RFCCFDIactual.CFDIDatosList[kk].Total,"0.00")

              cell = row.AddCell()
          font = xlsx.NewFont(12, "Arial")
              style = xlsx.NewStyle()
              style.Font = *font                    
              cell.SetStyle(style)  
              cell.SetFloatWithFormat(RFCCFDIactual.CFDIDatosList[kk].SubTotal,"0.00")

          cell = row.AddCell()
          font = xlsx.NewFont(12, "Arial")
              style = xlsx.NewStyle()
              style.Font = *font                    
              cell.SetStyle(style)  
              cell.SetFloatWithFormat(RFCCFDIactual.CFDIDatosList[kk].IVARetenido,"0.00")
              
          cell = row.AddCell()
          font = xlsx.NewFont(12, "Arial")
              style = xlsx.NewStyle()
              style.Font = *font                    
              cell.SetStyle(style)  
              cell.SetFloatWithFormat(RFCCFDIactual.CFDIDatosList[kk].ISRRetenido,"0.00")
              
              

              cell = row.AddCell()
          font = xlsx.NewFont(12, "Arial")
              style = xlsx.NewStyle()
              style.Font = *font                    
              cell.SetStyle(style)  
              cell.Value = RFCCFDIactual.CFDIDatosList[kk].Regimen

              cell = row.AddCell()
          font = xlsx.NewFont(12, "Arial")
              style = xlsx.NewStyle()
              style.Font = *font                    
              cell.SetStyle(style)  
              cell.Value = RFCCFDIactual.CFDIDatosList[kk].Fecha
        }
    }
    errEx = file.Save("Informacion que cura.xlsx")
      if errEx != nil {
          fmt.Printf(errEx.Error())
      }
      errEx = file.Write(c.Ctx.ResponseWriter)
      if errEx != nil {
          fmt.Printf(errEx.Error())
      }
    return
    example := map[string]interface{}{ "success":1, "rfc" : models.GetAllRFCCFDI(), "total" : totalTotal, "subTotal" : subTotalTotal, "impRetenidos" : totalImpuestosRetenidos, "impTrasladados" : totalImpuestosTrasladados}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}




func (c *CargarDeCarpetaXMLBancosDetalleSPEIController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    rfcMIO := ""
    queryD := `SELECT rfc
      FROM [Sevenplus].[dbo].[zConfig]
      WHERE BUNIT = '`+BUNIT.(string)+`'`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println(queryD)
      fmt.Println("que paso ish:", errD.Error())
    }
    if rowsD.Next()  {
      rowsD.Scan(&rfcMIO)
    }
    files, _ := ioutil.ReadDir("static/bancos/xml")
    cuantosRegistros := 0
      cuantosErrores := 0
      cuantosNoEncontre :=0
      STATUS := "1"
      archivosProcesados := 0
      for _, f := range files {
          if strings.Contains(f.Name(), ".xml") {
            content, err := ioutil.ReadFile("static/bancos/xml/"+f.Name())
        if err != nil {
        }
        xmlString := string(content)
          v := new(CFDI)
          err = xml.Unmarshal([]byte(xmlString), v)
          if err != nil {
              fmt.Printf("error: %v", err)
              return
          }

          tieneAddenda := len(v.Addendas)
          if tieneAddenda == 0 {
            fmt.Println("este xml no tiene nada: static/bancos/xml/"+f.Name())
            return
          }
          

          tieneAddendaECB := len(v.Addendas[0].AddendaECBs)
          NumeroCuenta := ""
          if tieneAddendaECB > 0 {
            NumeroCuenta = v.Addendas[0].AddendaECBs[0].EstadoDeCuentaBancarios[0].NumeroCuenta 
            
          } else {
            NumeroCuenta = v.Addendas[0].EstadoDeCuentaBancarios[0].NumeroCuenta
          }

        tieneAddenda2:= len(v.Addendas2)
        if tieneAddenda2 > 0 {
            miRango := v.Addendas2[0].DetalleSPEIs[0].Ordeness[0].OrdenSPEIs
            primeraVez := 1
            for _, record := range miRango {
              
              fechaSinTratar := strings.Split(record.Fecha, "T")[0]
              anio := fechaSinTratar[2:4]
              mes := fechaSinTratar[5:7]
                dia := fechaSinTratar[8:10]
                fechaNueva := dia+"/"+mes+"/"+anio          
            importe := record.Monto
            importe = strings.Replace(importe, ",", "", -1)
            importe = strings.Replace(importe, "$", "", -1)
      
              idBanco := 0
            queryDD := `SELECT TOP 1 idBanco
              FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
              WHERE BUNIT = '`+BUNIT.(string)+`' AND cuenta = '`+NumeroCuenta+`' 
              AND fecha = '`+fechaNueva+`'
              AND importe = `+importe+`
              AND descripcion like '%SPEI%'
              `
              fmt.Println(queryDD)
            rowsDD, errDD := conn.Query(queryDD)
            if errDD != nil {
              fmt.Println(queryDD)
              fmt.Println("que paso ish:", errDD.Error())
            }
            if rowsDD.Next()  {
              rowsDD.Scan(&idBanco)
              STATUS = "-1"
                Descripcion :=  strings.ToUpper(record.Concepto)
                if strings.Contains(Descripcion, "DIEZMO") || strings.Contains(Descripcion, "OFRENDA") ||
                strings.Contains(Descripcion, "PRIMICIAS" ) || strings.Contains(Descripcion, "FAM" ) {
                  STATUS = "1"
                  }else{
                    fmt.Println(Descripcion+" "+NumeroCuenta+" "+f.Name())
                  }
                        
              query := `UPDATE [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] SET STATUS = '`+STATUS+`' WHERE idBanco = `+strconv.Itoa(idBanco)
                fmt.Println(query)
                _ , err1 := conn.Exec(query)
              if err1 != nil {
                cuantosErrores++
                fmt.Println(query)
              } else {
                if primeraVez == 1 {
                  primeraVez = 0
                  archivosProcesados++
                }
                cuantosRegistros++
              }
            } else {
              cuantosNoEncontre++
            }
          }
          err = os.Remove("static/bancos/xml/"+f.Name())
              if err != nil {
                  fmt.Println(err)
                  return
              }
          }//if tiene addenda2
        }
      }
    
      

    example := map[string]interface{}{ "success":1, "archivosProcesados" : archivosProcesados, "cuantosRegistros" : cuantosRegistros, "cuantosErrores" : cuantosErrores, "cuantosNoEncontre" : cuantosNoEncontre}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *CargarDeCarpetaTXTBancosBanorteController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    rfcMIO := ""
    queryD := `SELECT rfc
      FROM [Sevenplus].[dbo].[zConfig]
      WHERE BUNIT = '`+BUNIT.(string)+`'`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println(queryD)
      fmt.Println("que paso ish:", errD.Error())
    }
    if rowsD.Next()  {
      rowsD.Scan(&rfcMIO)
    }
    files, _ := ioutil.ReadDir("static/bancos/txt")
    cuantosRegistros := 0
      cuantosErrores := 0
      archivosProcesados := 0
      cuantosYaExistian := 0
      primeraVez := 1
      for _, f := range files {
          if strings.Contains(f.Name(), ".txt") {
            content, err := ioutil.ReadFile("static/bancos/txt/"+f.Name())
        if err != nil {
        }
        primeraVez = 1
        xmlString := string(content)
        lineas := strings.Split(xmlString, "\n")
        fmt.Println(len(lineas))
        STATUS := "1"//cargo
        for _, linea := range lineas[1:] {
          lineaSplit := strings.Split(linea, "|")
          cuenta := lineaSplit[0]
          fechaNueva := lineaSplit[1]
          referencia := lineaSplit[3]
          transaccion := lineaSplit[4]
          
          depositos := lineaSplit[7]
          creditos := lineaSplit[8]

          depositos = strings.Replace(depositos, "$", "", -1)
          depositos = strings.Replace(depositos, ",", "", -1)

          creditos = strings.Replace(creditos, "$", "", -1)
          creditos = strings.Replace(creditos, ",", "", -1)

          saldo := lineaSplit[9]

          saldo = strings.Replace(saldo, "$", "", -1)
          saldo = strings.Replace(saldo, ",", "", -1)


          leyenda1 := lineaSplit[10]
          leyenda2 := ""
          moneda := "MXN"
          STATUS = "1"  
          depositosFloat, _ := strconv.ParseFloat(depositos, 64)
          //creditosFloat, _ := strconv.ParseFloat(creditos, 64)
          importe := creditos
          if depositosFloat > 0.0 {
                STATUS = "2"
                importe = depositos
              }
            
              queryD := `SELECT idBanco
            FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
            WHERE BUNIT = '`+BUNIT.(string)+`'
            AND cuenta = '`+cuenta+`'
            AND importe = `+importe+`
            AND fecha = '`+fechaNueva+`'
            AND descripcion = '`+transaccion+`'
            AND STATUS = '`+STATUS+`'
            AND referencia = '`+referencia+`'
            AND Moneda = '`+moneda+`'
            AND saldo = `+saldo+`
          `
          rowsD, errD := conn.Query(queryD)
          if errD != nil {
            fmt.Println(queryD)
            fmt.Println("que paso ish:", errD.Error())
          }
          idBancoNuevo := 0
          if rowsD.Next()  {
            rowsD.Scan(&idBancoNuevo)
            fmt.Println(idBancoNuevo)
            query := `UPDATE [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] set STATUS = '`+STATUS+`' WHERE idBanco =  `+strconv.Itoa(idBancoNuevo)+``
              conn.Exec(query)
            cuantosYaExistian++
            fmt.Println(queryD)
          } else {
            if moneda =="USD" {
              queryDeterminarTipoDeCambio := `SELECT tipoDeCambio FROM [Sevenplus].[dbo].[zTipoDeCambio]
              WHERE fecha = '`+fechaNueva+`'`
              rowsD, _ := conn.Query(queryDeterminarTipoDeCambio)
              tipoDeCambio := 0.0
              if rowsD.Next()  {
                rowsD.Scan(&tipoDeCambio)
                cantidadFloat, _ := strconv.ParseFloat(importe, 64)
                auxF := tipoDeCambio * cantidadFloat
                moneda = "MXN"
                tipoDeCambio = 1.0
                importe = fmt.Sprintf("%.2f",auxF)
              }
            }
            query := `INSERT INTO [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] (BUNIT, CuentaPropia, cuenta, importe, fecha, descripcion, STATUS, timbrado, leyenda1, leyenda2, TREFERENCE, saldo, referencia, Moneda ) 
            VALUES('`+BUNIT.(string)+`',0, '`+cuenta+`',`+importe+`,'`+fechaNueva+`','`+transaccion+`','`+STATUS+`', 0,'`+leyenda1+`','`+leyenda2+`','`+referencia+`',`+saldo+`,'`+referencia+`','`+moneda+`')`
              _ , err1 := conn.Exec(query)
            if err1 != nil {
              fmt.Println(err1.Error())
              cuantosErrores++
              fmt.Println(query)
            } else {
              if primeraVez == 1 {
                primeraVez = 0
                archivosProcesados++
              }
              cuantosRegistros++
            }
          }
        
        }
        err = os.Remove("static/bancos/txt/"+f.Name())
            if err != nil {
                fmt.Println(err)
                return
            }
        }
      }
    example := map[string]interface{}{ "success":1, "archivosProcesados" : archivosProcesados, "cuantosRegistros" : cuantosRegistros, "cuantosErrores" : cuantosErrores, "cuantosYaExistian" : cuantosYaExistian}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *CargarDeCarpetaTXTBancosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    rfcMIO := ""
    queryD := `SELECT rfc
      FROM [Sevenplus].[dbo].[zConfig]
      WHERE BUNIT = '`+BUNIT.(string)+`'`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println(queryD)
      fmt.Println("que paso ish:", errD.Error())
    }
    if rowsD.Next()  {
      rowsD.Scan(&rfcMIO)
    }
    files, _ := ioutil.ReadDir("static/bancos/txt")
    cuantosRegistros := 0
      cuantosErrores := 0
      archivosProcesados := 0
      cuantosYaExistian := 0
      primeraVez := 1
      for _, f := range files {
          if strings.Contains(f.Name(), ".txt") {
            content, err := ioutil.ReadFile("static/bancos/txt/"+f.Name())
        if err != nil {
        }
        primeraVez = 1
        xmlString := string(content)
        lineas := strings.Split(xmlString, "\n")
        fmt.Println(len(lineas))
        STATUS := "1"//cargo
        for _, linea := range lineas {
          if len (linea) > 200 {
            moneda := linea[3:6]
            cuenta := linea[6:9] + linea[18:26]
            fecha := linea[26:36]
            referencia := linea[36:46]
            importe := linea[46:63]
            tipo := linea[63:68]
            saldo := linea[68:85]
            transaccion := linea[85:135]
            leyenda1 := linea[135:165]
            leyenda2 := linea[165:195]
            //consecutivo := linea[195:198]
            adicional := linea[198:]
            adicional = adicional[0:49]
            anio := fecha[2:4]
                mes := fecha[5:7]
                dia := fecha[8:10]
                fechaNueva := dia+"/"+mes+"/"+anio  
                STATUS = "1"  
                if strings.ToUpper(tipo) == "ABONO" {
                  STATUS = "2"
                }
                transaccion = strings.TrimSpace(transaccion)
                leyenda1 = strings.TrimSpace(leyenda1)
                leyenda2 = strings.TrimSpace(leyenda2)    
                adicional = strings.TrimSpace(adicional)
            transaccion = strings.Replace(transaccion, "'", "", -1)
            leyenda1 = strings.Replace(leyenda1, "'", "", -1)
            leyenda2 = strings.Replace(leyenda2, "'", "", -1)
            adicional = strings.Replace(adicional, "'", "", -1)
        
                queryD := `SELECT idBanco
              FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
              WHERE BUNIT = '`+BUNIT.(string)+`'
              AND cuenta = '`+cuenta+`'
              AND importe = `+importe+`
              AND fecha = '`+fechaNueva+`'
              AND descripcion = '`+transaccion+`'
              AND STATUS = '`+STATUS+`'
              AND referencia = '`+referencia+`'
              AND Moneda = '`+moneda+`'
              AND saldo = `+saldo+`
              `
            rowsD, errD := conn.Query(queryD)
            if errD != nil {
              fmt.Println(queryD)
              fmt.Println("que paso ish:", errD.Error())
            }
            idBancoNuevo := 0
            if rowsD.Next()  {
              rowsD.Scan(&idBancoNuevo)
              fmt.Println(idBancoNuevo)
              query := `UPDATE [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] set STATUS = '`+STATUS+`' WHERE idBanco =  `+strconv.Itoa(idBancoNuevo)+``
                conn.Exec(query)
              cuantosYaExistian++
              fmt.Println(queryD)
            } else {
              if moneda =="USD" {
                queryDeterminarTipoDeCambio := `SELECT tipoDeCambio FROM [Sevenplus].[dbo].[zTipoDeCambio]
                WHERE fecha = '`+fecha+`'`
                rowsD, _ := conn.Query(queryDeterminarTipoDeCambio)
                tipoDeCambio := 0.0
                if rowsD.Next()  {
                  rowsD.Scan(&tipoDeCambio)
                  cantidadFloat, _ := strconv.ParseFloat(importe, 64)
                  auxF := tipoDeCambio * cantidadFloat
                  moneda = "MXN"
                  tipoDeCambio = 1.0
                  importe = fmt.Sprintf("%.2f",auxF)
                }
              }
              query := `INSERT INTO [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] (BUNIT, CuentaPropia, cuenta, importe, fecha, descripcion, STATUS, timbrado, leyenda1, leyenda2, TREFERENCE, saldo, referencia, Moneda ) 
              VALUES('`+BUNIT.(string)+`',0, '`+cuenta+`',`+importe+`,'`+fechaNueva+`','`+transaccion+`','`+STATUS+`', 0,'`+leyenda1+`','`+leyenda2+`','`+adicional+`',`+saldo+`,'`+referencia+`','`+moneda+`')`
                _ , err1 := conn.Exec(query)
              if err1 != nil {
                fmt.Println(err1.Error())
                cuantosErrores++
                fmt.Println(query)
              } else {
                if primeraVez == 1 {
                  primeraVez = 0
                  archivosProcesados++
                }
                cuantosRegistros++
              }
            }
          } else {
            fmt.Println(linea)
          }
        }
        err = os.Remove("static/bancos/txt/"+f.Name())
            if err != nil {
                fmt.Println(err)
                return
            }
        }
      }
    example := map[string]interface{}{ "success":1, "archivosProcesados" : archivosProcesados, "cuantosRegistros" : cuantosRegistros, "cuantosErrores" : cuantosErrores, "cuantosYaExistian" : cuantosYaExistian}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *CargarDeCarpetaXMLBancosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    //statusDelParam := c.GetString("status")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    rfcMIO := ""
    queryD := `SELECT rfc
      FROM [Sevenplus].[dbo].[zConfig]
      WHERE BUNIT = '`+BUNIT.(string)+`'`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println(queryD)
      fmt.Println("que paso ish:", errD.Error())
    }
    if rowsD.Next()  {
      rowsD.Scan(&rfcMIO)
    }
    files, _ := ioutil.ReadDir("static/bancos/xml")
    cuantosRegistros := 0
      cuantosErrores := 0
      STATUS := "1"
      archivosProcesados := 0
      for _, f := range files {
          if strings.Contains(f.Name(), ".xml") {
            content, err := ioutil.ReadFile("static/bancos/xml/"+f.Name())
        if err != nil {
        }
        xmlString := string(content)
          v := new(CFDI)
          err = xml.Unmarshal([]byte(xmlString), v)
          if err != nil {
              fmt.Printf("error: %v", err)
              return
          }

          tieneAddenda := len(v.Addendas)
          if tieneAddenda == 0 {
            fmt.Println("este xml no tiene nada: static/bancos/xml/"+f.Name())
            return
          }
          

          tieneAddendaECB := len(v.Addendas[0].AddendaECBs)
          NumeroCuenta := ""
          var miRango []MovimientoECB
          var miRangoFiscal []MovimientoECBFiscal

          RazonSocial := v.Emisors[0].NombreRazonSocial
          
          if tieneAddendaECB > 0 {
            NumeroCuenta = v.Addendas[0].AddendaECBs[0].EstadoDeCuentaBancarios[0].NumeroCuenta 
            miRango = v.Addendas[0].AddendaECBs[0].EstadoDeCuentaBancarios[0].Movimientoss[0].MovimientoECBs
            miRangoFiscal = v.Addendas[0].AddendaECBs[0].EstadoDeCuentaBancarios[0].Movimientoss[0].MovimientoECBsFiscal
          } else {
            NumeroCuenta = v.Addendas[0].EstadoDeCuentaBancarios[0].NumeroCuenta
            miRango = v.Addendas[0].EstadoDeCuentaBancarios[0].Movimientoss[0].MovimientoECBs
            miRangoFiscal = v.Addendas[0].EstadoDeCuentaBancarios[0].Movimientoss[0].MovimientoECBsFiscal
          }
          if NumeroCuenta == "14502280019" {
            fmt.Println(f.Name())
          }
          moneda := v.Moneda
          primeraVez := 1
          for _, record := range miRango {
            STATUS = "-1"
            moneda = v.Moneda
          record.Descripcion = strings.ToUpper(record.Descripcion)
            if strings.Contains(record.Descripcion, "CHEQUE") || strings.Contains(record.Descripcion, "IVA") || strings.Contains(record.Descripcion, "APORT") || strings.Contains(record.Descripcion, "CGO")|| strings.Contains(record.Descripcion, "CARGO") || strings.Contains(record.Descripcion, "PAGO")|| strings.Contains(record.Descripcion, "PGO") || strings.Contains(record.Descripcion, "ISR") ||
              strings.Contains(record.Descripcion, "COMISION" ) || strings.Contains(record.Descripcion, "RETENCION") || strings.Contains(record.Descripcion, "COM MEMBRESIA CUENTA") || strings.Contains(record.Descripcion, "COMISIÓN" ) || strings.Contains(record.Descripcion, "COM TRANSF" )   {
              STATUS = "1"
              }else{
                if strings.Contains(record.Descripcion, "SPEI COMPENSACION")  || strings.Contains(record.Descripcion, "DEP.EFECTIVO")  || strings.Contains(record.Descripcion, "DEPOSITO")  || strings.Contains(record.Descripcion, "ABONO")  || strings.Contains(record.Descripcion, "ABO POR INTERESES") || strings.Contains(record.Descripcion, "DEV CH DEPOSITADO") || strings.Contains(record.Descripcion, "RENDIMIENTO") || strings.Contains(record.Descripcion, "COMPENSACION SPEI") {
                  STATUS = "2"
                }
              }
              if strings.Contains(record.Descripcion, "DEPOSITO CON CHEQUE"){
                STATUS = "2"//ingreso
              }

              
              anio := record.Fecha[2:4]
              mes := record.Fecha[5:7]
              dia := record.Fecha[8:10]
              fechaNueva := dia+"/"+mes+"/"+anio  
              if strings.Contains(RazonSocial,"BANORTE") {
                cantidadFloat, _ := strconv.ParseFloat(record.Importe, 64)
            if cantidadFloat < 0 {
              cantidadFloat = math.Abs(cantidadFloat)
              record.Importe = fmt.Sprintf("%.2f",cantidadFloat)
              STATUS = "1"//gasto
            } else {
              STATUS = "2"//ingreso
            } 
              }  
              if moneda == "USD" {
                queryDeterminarTipoDeCambio := `SELECT tipoDeCambio FROM [Sevenplus].[dbo].[zTipoDeCambio] WHERE fecha = '`+fechaNueva+`'`
            rowsD, _ := conn.Query(queryDeterminarTipoDeCambio)
            tipoDeCambio := 0.0
            if rowsD.Next()  {
              rowsD.Scan(&tipoDeCambio)
              cantidadFloat, _ := strconv.ParseFloat(record.Importe, 64)
              auxF := tipoDeCambio * cantidadFloat
              moneda = "MXN"
              tipoDeCambio = 1.0
              record.Importe = fmt.Sprintf("%.2f",auxF)
            } else {
              if dia == "01" {
                dia = "32"
              }
              queryDeterminarTipoDeCambio := `SELECT TOP 1 tipoDeCambio  FROM [Sevenplus].[dbo].[zTipoDeCambio]
  WHERE SUBSTRING(fecha,1,2) < '`+dia+`' AND SUBSTRING(fecha,4,2) <= '`+mes+`' order by fecha desc`
              rowsD, _ := conn.Query(queryDeterminarTipoDeCambio)
              tipoDeCambio := 0.0
              if rowsD.Next()  {
                rowsD.Scan(&tipoDeCambio)
                cantidadFloat, _ := strconv.ParseFloat(record.Importe, 64)
                auxF := tipoDeCambio * cantidadFloat
                moneda = "MXN"
                tipoDeCambio = 1.0
                record.Importe = fmt.Sprintf("%.2f",auxF)
              } 

            }
              }      
              
              query := `INSERT INTO [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] (BUNIT, CuentaPropia, cuenta, importe, fecha, descripcion, STATUS, timbrado, Moneda ) 
          VALUES('`+BUNIT.(string)+`',0, `+NumeroCuenta+`,`+record.Importe+`,'`+fechaNueva+`','`+record.Descripcion+`','`+STATUS+`', 0,'`+moneda+`')`
            _ , err1 := conn.Exec(query)
          if err1 != nil {
            cuantosErrores++
            fmt.Println(query)
          } else {
            if primeraVez == 1 {
              primeraVez = 0
              archivosProcesados++
            }
            cuantosRegistros++
          }
        }
        for _, record := range miRangoFiscal {
            STATUS = "1"
          record.Descripcion = strings.ToUpper(record.Descripcion)
            anio := record.Fecha[2:4]
              mes := record.Fecha[5:7]
              dia := record.Fecha[8:10]
              //subnio :=
              fechaNueva := dia+"/"+mes+"/"+anio    
              if strings.Contains(RazonSocial,"BANORTE") {
                cantidadFloat, _ := strconv.ParseFloat(record.Importe, 64)
            if cantidadFloat < 0 {
              cantidadFloat = math.Abs(cantidadFloat)
              record.Importe = fmt.Sprintf("%.2f",cantidadFloat)
              STATUS = "1"//gasto
            } else {
              STATUS = "2"//ingreso
            } 
              } 
              if moneda == "USD" {
                queryDeterminarTipoDeCambio := `SELECT tipoDeCambio FROM [Sevenplus].[dbo].[zTipoDeCambio] WHERE fecha = '`+fechaNueva+`'`
            rowsD, _ := conn.Query(queryDeterminarTipoDeCambio)
            tipoDeCambio := 0.0
            if rowsD.Next()  {
              rowsD.Scan(&tipoDeCambio)
              cantidadFloat, _ := strconv.ParseFloat(record.Importe, 64)
              auxF := tipoDeCambio * cantidadFloat
              moneda = "MXN"
              tipoDeCambio = 1.0
              record.Importe = fmt.Sprintf("%.2f",auxF)
            } else {
              if dia == "01" {
                dia = "32"
              }
              queryDeterminarTipoDeCambio := `SELECT TOP 1 tipoDeCambio  FROM [Sevenplus].[dbo].[zTipoDeCambio]
  WHERE SUBSTRING(fecha,1,2) < '`+dia+`' AND SUBSTRING(fecha,4,2) <= '`+mes+`' order by fecha desc`
              rowsD, _ := conn.Query(queryDeterminarTipoDeCambio)
              tipoDeCambio := 0.0
              if rowsD.Next()  {
                rowsD.Scan(&tipoDeCambio)
                cantidadFloat, _ := strconv.ParseFloat(record.Importe, 64)
                auxF := tipoDeCambio * cantidadFloat
                moneda = "MXN"
                tipoDeCambio = 1.0
                record.Importe = fmt.Sprintf("%.2f",auxF)
              } 

            }
              }     
          query := `INSERT INTO [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] (BUNIT, CuentaPropia, cuenta, importe, fecha, descripcion, STATUS, timbrado, Moneda ) 
          VALUES('`+BUNIT.(string)+`',0, `+NumeroCuenta+`,`+record.Importe+`,'`+fechaNueva+`','`+record.Descripcion+`','`+STATUS+`', 0,'`+moneda+`')`
            _ , err1 := conn.Exec(query)
          if err1 != nil {
            cuantosErrores++
            fmt.Println(query)
          } else {
            if primeraVez == 1 {
              primeraVez = 0
              archivosProcesados++
            }
            cuantosRegistros++
          }
        }
        //2 ingreso
        //1 gasto
        err = os.Remove("static/bancos/xml/"+f.Name())
            if err != nil {
                fmt.Println(err)
                return
            }
        }
      }
    
      

    example := map[string]interface{}{ "success":1, "archivosProcesados" : archivosProcesados, "cuantosRegistros" : cuantosRegistros, "cuantosErrores" : cuantosErrores}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *Xml2sqlController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    xmlString := c.GetString("xml")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    rfcMIO := ""
    queryD := `SELECT rfc
      FROM [Sevenplus].[dbo].[zConfig]
      WHERE BUNIT = '`+BUNIT.(string)+`'`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println(queryD)
      fmt.Println("que paso ish:", errD.Error())
    }
    if rowsD.Next()  {
      rowsD.Scan(&rfcMIO)
    }
    v := new(CFDI)
    err := xml.Unmarshal([]byte(xmlString), v)
      if err != nil {
          fmt.Printf("error: %v", err)
          return
      }
      cuantosRegistros := 0
      cuantosErrores := 0
      STATUS := "1"
      tieneAddendaECB := len(v.Addendas[0].AddendaECBs)
      NumeroCuenta := ""
      var miRango []MovimientoECB
      if tieneAddendaECB > 0 {
        NumeroCuenta = v.Addendas[0].AddendaECBs[0].EstadoDeCuentaBancarios[0].NumeroCuenta 
        miRango = v.Addendas[0].AddendaECBs[0].EstadoDeCuentaBancarios[0].Movimientoss[0].MovimientoECBs
      } else {
        NumeroCuenta = v.Addendas[0].EstadoDeCuentaBancarios[0].NumeroCuenta
        miRango = v.Addendas[0].EstadoDeCuentaBancarios[0].Movimientoss[0].MovimientoECBs
      }
      moneda := v.Moneda
      
      for _, record := range miRango {
        STATUS = "-1"
        if strings.Contains(record.Descripcion, "CHEQUE") || strings.Contains(record.Descripcion, "IVA") ||
         strings.Contains(record.Descripcion, "COMISION" ) {
          STATUS = "1"
          }else{
            if strings.Contains(record.Descripcion, "DEPOSITO") {
              STATUS = "2"
            }
          }
          anio := record.Fecha[2:4]
          mes := record.Fecha[5:7]
          dia := record.Fecha[8:10]
          fechaNueva := dia+"/"+mes+"/"+anio          
      query := `INSERT INTO [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] (BUNIT, CuentaPropia, cuenta, importe, fecha, descripcion, STATUS, timbrado, Moneda ) 
      VALUES('`+BUNIT.(string)+`', 0,`+NumeroCuenta+`,`+record.Importe+`,'`+fechaNueva+`','`+record.Descripcion+`','`+STATUS+`', 0,'`+moneda+`')`
        _ , err1 := conn.Exec(query)
      if err1 != nil {
        cuantosErrores++
        fmt.Println(query)
      } else {
        cuantosRegistros++
      }
    }

    example := map[string]interface{}{ "success":1, "cuantosRegistros" : cuantosRegistros, "cuantosErrores" : cuantosErrores}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *BuscarRFCPorConceptosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    idEtiqueta := c.GetString("idEtiqueta")
    unidad := c.GetString("unidad")
    anio := c.GetString("anio")
    metodoDePago := c.GetString("metodoDePago")
    metodoDePagoList := []string{}
    arreglo := strings.Split(metodoDePago, "|")
    for _, m := range arreglo {
      metodoDePagoList = append(metodoDePagoList, m)
    }
  
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    rfcMIO := ""
    queryD := `SELECT rfc
      FROM [Sevenplus].[dbo].[zConfig]
      WHERE BUNIT = '`+BUNIT.(string)+`'`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println(queryD)
      fmt.Println("que paso ish:", errD.Error())
    }
    if rowsD.Next()  {
      rowsD.Scan(&rfcMIO)
    }
    palabrasList := []string{}
    palabra := ""

    queryD = `SELECT RFC
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zLigadoRFC]
      WHERE idEtiqueta = `+idEtiqueta+``
    rowsD, errD = conn.Query(queryD)
    if errD != nil {
      fmt.Println(queryD)
      fmt.Println("que paso ish D:", errD.Error())
    }
    for rowsD.Next()  {
      rowsD.Scan(&palabra)
      palabrasList = append(palabrasList, strings.ToUpper(palabra))
    }
          
    


    searchDir := unidad+":\\_FACTURAS\\"+rfcMIO+"\\Recibidos\\"+anio
    fileList := []string{}
      err := filepath.Walk(searchDir, func(path string, f os.FileInfo, err error) error {
          fileList = append(fileList, path)
          return nil
      })
      if err != nil{
        fmt.Println(err)
      }
      
      searchDir = unidad+":\\_FACTURAS\\"+rfcMIO+"\\Emitidos\\"+anio
      err = filepath.Walk(searchDir, func(path string, f os.FileInfo, err error) error {
          fileList = append(fileList, path)
          return nil
      })
      if err != nil{
        fmt.Println(err)
      }

      
      totalTotal := 0.0
      subTotalTotal := 0.0
      totalImpuestosRetenidos := 0.0
      totalImpuestosTrasladados := 0.0
    models.ClearRFCCFDI()
    var RFCCFDIactual models.RFCCFDI
    //var cedul models.RFCCFDI
    noEntres := 1
      for _, file := range fileList {
          if strings.Contains(file, ".xml") {
            content, err := ioutil.ReadFile(file)
        if err != nil {
          fmt.Println(file)
          fmt.Println(err)
        }
        xmlString := string(content)
        //xmlString = strings.Replace(xmlString, "=\" ", `=\"`, -1)
          v := new(CFDI)


          err = xml.Unmarshal([]byte(xmlString), v)
          

          if err != nil {
            fmt.Println(file)
              fmt.Printf("error: %v", err)
              return
          }
          noEntres = 1
          RFC := v.Emisors[0].RFCEmisor
          if RFC == "" {
            RFC = v.Emisors[0].RFCEmisor33
          }
          RazonSocial := v.Emisors[0].NombreRazonSocial
          if RazonSocial == "" {
            RazonSocial = v.Emisors[0].NombreRazonSocial33
          }
          RFCReceptor := v.Receptors[0].RFCReceptor
          if RFCReceptor == "" {
            RFCReceptor = v.Receptors[0].RFCReceptor33
          }
          Regimen := v.Emisors[0].RegimenFiscal33
          if Regimen == "" {
            Regimen = v.Emisors[0].RegimenFiscals[0].Regimen
          }
          Fecha := v.Fecha
          if Fecha == "" {
          Fecha = v.Fecha33
          }
          
          if RFC == rfcMIO {
            noEntres = 0
          } else {
            if RFCReceptor == rfcMIO {
              noEntres = 0
            }
          }
        //  RazonSocialReceptor := v.Emisors[0].NombreRazonSocial

          MetodoDePago := v.MetodoDePago
          if MetodoDePago == "" {
            MetodoDePago = v.FormaDePago33
          }

          TipoDeComprobante := v.TipoDeComprobante
          if TipoDeComprobante == "" {
            TipoDeComprobante = v.TipoDeComprobante33
          }
          TipoDeComprobante = strings.ToUpper(TipoDeComprobante)
          TipoDeComprobante = TipoDeComprobante[0:1]


          esGasto := 0
          if TipoDeComprobante != "E" && RFCReceptor == rfcMIO {
            esGasto = 1
          }
          if TipoDeComprobante == "E" && RFC == rfcMIO {
            esGasto = 1
          }
          



          totalActual := v.Total
          if totalActual == 0 {
            totalActual = v.Total33
          }
          subTotal := v.SubTotal
          if subTotal == 0 {
            subTotal = v.SubTotal33
          }


          impRetenidos := 0.0
          impTrasladados := 0.0
          if len(v.Impuestoss) > 0 {
            impRetenidos = v.Impuestoss[0].TotalImpuestosRetenidos
            if impRetenidos == 0 {
              impRetenidos = v.Impuestoss[0].TotalImpuestosRetenidos33
            } 
            impTrasladados = v.Impuestoss[0].TotalImpuestosTrasladados
            if impRetenidos == 0 {
              impTrasladados = v.Impuestoss[0].TotalImpuestosTrasladados33
            }
          }
          
        UUID := v.Complementos[0].TimbreFiscalDigitals[0].UUID


        metodo := false

          for _, word := range metodoDePagoList {
            if strings.Contains(MetodoDePago, word) {
                      metodo = true
                      break
                    }
                    if word == "no" {
                      metodo = true
                    }
        }


          for _, record := range v.Conceptoss[0].Conceptos {
            record.Descripcion = strings.ToUpper(record.Descripcion)
          result:= false

       
            for _, word := range palabrasList {
              word = strings.ToUpper(word)
                    if strings.Contains(record.Descripcion, word) {
                          result = true
                          break
                        }
                        if strings.Contains(record.Unidad, word) {
                          result = true
                          break
                        }
                        if strings.Contains(record.Descripcion33, word) {
                          result = true
                          break
                        }
                        if strings.Contains(record.Unidad33, word) {
                          result = true
                          break
                        }
                    }
                    if idEtiqueta == "-3" {
                      NoAutorizacion := len(v.Complementos[0].Donatariass)
                      if NoAutorizacion > 0 {
                        result = true
                      }
                    }
                    if idEtiqueta == "-4" {//IVA
            if impRetenidos > 0 {
              for _, impuesto := range v.Impuestoss[0].Retencioness[0].Retencions {
                if impuesto.Impuesto == "IVA" || impuesto.Impuesto33 == "002" {
                  result = true
                  break   
                }
                }
            }
                    } 
                    
                    if idEtiqueta == "-5" {//ISR
            if impRetenidos > 0 {
              for _, impuesto := range v.Impuestoss[0].Retencioness[0].Retencions {
                if impuesto.Impuesto == "ISR" || impuesto.Impuesto33 == "001" {
                  result = true
                  break   
                }
                }
            }
                    } 
            if result && metodo && noEntres == 0 {
              if esGasto == 1 {
                if _, ok := models.RFCCFDIList[RFC]; ok {
              } else {
                RFCCFDIactual = models.RFCCFDI{RFC, RazonSocial, 0.0, 0.0, 0.0, 0.0, make(map[string]*models.CFDIDatos)}
                models.AddRFCCFDI(RFCCFDIactual, RFC)
              }
                RFCCFDIactualModificacion := models.DameRFCCFDI(RFC)
                if _, ok := RFCCFDIactualModificacion.CFDIDatosList[UUID]; ok {
              } else {
                var factura models.CFDIDatos
                factura = models.CFDIDatos{file,UUID, totalActual, subTotal, impRetenidos, impTrasladados, 0.0, 0.0, Regimen, Fecha}
                RFCCFDIactualModificacion.CFDIDatosList[UUID] = &factura
                totalTotal += totalActual
                  subTotalTotal += subTotal
                  totalImpuestosRetenidos += impRetenidos
                  totalImpuestosTrasladados += impTrasladados
                models.RFCCFDIList[RFC].Total += totalActual
                models.RFCCFDIList[RFC].SubTotal += subTotal
                models.RFCCFDIList[RFC].TotalImpuestosRetenidos += impRetenidos
                models.RFCCFDIList[RFC].TotalImpuestosTrasladados += impTrasladados
              }
              }
            }
        }

      }
          
      }    
    example := map[string]interface{}{ "success":1, "rfc" : models.GetAllRFCCFDI(), "total" : totalTotal, "subTotal" : subTotalTotal, "impRetenidos" : totalImpuestosRetenidos, "impTrasladados" : totalImpuestosTrasladados}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *NumCtaPagoDeClientesController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    idCliente := c.GetString("idCliente")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT rfc, razonSocial, NumCtaPago, correo
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zClientes]
      WHERE BUNIT = '`+BUNIT.(string)+`' AND idCliente = `+idCliente+``
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println(queryD)
      fmt.Println("que paso ish:", errD.Error())
    }
    rfc:=""
    razonSocial:=""
    NumCtaPago:=""
    correo:=""
    idClienteInt, _ := strconv.Atoi(idCliente)
    idNumCtaPago:=0
    models.ClearClientes()
    var cedul models.Clientes
    for rowsD.Next()  {
      rowsD.Scan(&rfc, &razonSocial, &NumCtaPago, &correo)
      cedul = models.Clientes{rfc, razonSocial,  correo, idClienteInt,  make(map[string]*models.NumCtaPago)}
      models.AddClientes(cedul, strconv.Itoa(idClienteInt))

      queryDD := `SELECT idNumCtaPago, NumCtaPago
        FROM [Sevenplus].[dbo].[zNumCtaPago]
        WHERE idCliente = `+strconv.Itoa(idClienteInt)+`
        order by idNumCtaPago asc`
      rowsDD, errDD := conn.Query(queryDD)
      if errDD != nil {
        fmt.Println("que paso DD:", errDD.Error())
      }
      var clienteActual models.Clientes
      clienteActual = models.DameClientePorIdCLiente(strconv.Itoa(idClienteInt))
      for rowsDD.Next()  {
        rowsDD.Scan(&idNumCtaPago, &NumCtaPago)
        if _, ok := clienteActual.NumCtaPagoList[strconv.Itoa(idNumCtaPago)]; ok {
          } else {
          var Liga models.NumCtaPago
          Liga = models.NumCtaPago{idNumCtaPago,NumCtaPago}
          clienteActual.NumCtaPagoList[strconv.Itoa(idNumCtaPago)] = &Liga
        }
      }

    }
    example := map[string]interface{}{ "success":1, "clientes" : models.GetAllClientes()}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *DetalleCuentaMesIngresoEgresoPendienteDeLigarController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    Anio := c.GetString("anio")
    cuenta := c.GetString("cuenta")
    status := c.GetString("status")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryDD := `SELECT ISNULL(SUM(z.importe),0) as importe, ISNULL(SUM(b.AMOUNT),0) as ligado
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
      LEFT JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] b on b.idBanco = z.idBanco
      WHERE z.BUNIT = '`+BUNIT.(string)+`'
      AND z.STATUS = '`+status+`' AND z.cuenta = '`+cuenta+`'
      AND z.CuentaPropia != 1
       AND SUBSTRING(z.fecha,4,8) = '01/`+Anio+`'`
    rowsDD, errDD := conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    enero := 0.0
    ligadoEnero := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&enero, &ligadoEnero)
    }
    queryDD = `SELECT ISNULL(SUM(z.importe),0) as importe, ISNULL(SUM(b.AMOUNT),0) as ligado
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
      LEFT JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] b on b.idBanco = z.idBanco
      WHERE z.BUNIT = '`+BUNIT.(string)+`'
      AND z.STATUS = '`+status+`' AND z.cuenta = '`+cuenta+`'
      AND z.CuentaPropia != 1
       AND SUBSTRING(z.fecha,4,8) = '02/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    febrero := 0.0
    febreroLigado := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&febrero, &febreroLigado)
    }
    queryDD = `SELECT ISNULL(SUM(z.importe),0) as importe, ISNULL(SUM(b.AMOUNT),0) as ligado
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
      LEFT JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] b on b.idBanco = z.idBanco
      WHERE z.BUNIT = '`+BUNIT.(string)+`'
      AND z.STATUS = '`+status+`' AND z.cuenta = '`+cuenta+`'
      AND z.CuentaPropia != 1
       AND SUBSTRING(z.fecha,4,8) = '03/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    marzo := 0.0
    marzoLigado := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&marzo, &marzoLigado)
    }
    queryDD = `SELECT ISNULL(SUM(z.importe),0) as importe, ISNULL(SUM(b.AMOUNT),0) as ligado
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
      LEFT JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] b on b.idBanco = z.idBanco
      WHERE z.BUNIT = '`+BUNIT.(string)+`'
      AND z.STATUS = '`+status+`' AND z.cuenta = '`+cuenta+`'
      AND z.CuentaPropia != 1
       AND SUBSTRING(z.fecha,4,8) = '04/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    abril := 0.0
    abrilLigado := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&abril, &abrilLigado)
    }
    queryDD = `SELECT ISNULL(SUM(z.importe),0) as importe, ISNULL(SUM(b.AMOUNT),0) as ligado
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
      LEFT JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] b on b.idBanco = z.idBanco
      WHERE z.BUNIT = '`+BUNIT.(string)+`'
      AND z.STATUS = '`+status+`' AND z.cuenta = '`+cuenta+`'
      AND z.CuentaPropia != 1
       AND SUBSTRING(z.fecha,4,8) = '05/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    mayo := 0.0
    mayoLigado := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&mayo, &mayoLigado)
    }
    queryDD = `SELECT ISNULL(SUM(z.importe),0) as importe, ISNULL(SUM(b.AMOUNT),0) as ligado
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
      LEFT JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] b on b.idBanco = z.idBanco
      WHERE z.BUNIT = '`+BUNIT.(string)+`'
      AND z.STATUS = '`+status+`' AND z.cuenta = '`+cuenta+`'
      AND z.CuentaPropia != 1
       AND SUBSTRING(z.fecha,4,8) = '06/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    junio := 0.0
    junioLigado := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&junio, &junioLigado)
    }
    queryDD = `SELECT ISNULL(SUM(z.importe),0) as importe, ISNULL(SUM(b.AMOUNT),0) as ligado
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
      LEFT JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] b on b.idBanco = z.idBanco
      WHERE z.BUNIT = '`+BUNIT.(string)+`'
      AND z.STATUS = '`+status+`' AND z.cuenta = '`+cuenta+`'
      AND z.CuentaPropia != 1
       AND SUBSTRING(z.fecha,4,8) = '07/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    julio := 0.0
    julioLigado := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&julio, &julioLigado)
    }
    queryDD = `SELECT ISNULL(SUM(z.importe),0) as importe, ISNULL(SUM(b.AMOUNT),0) as ligado
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
      LEFT JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] b on b.idBanco = z.idBanco
      WHERE z.BUNIT = '`+BUNIT.(string)+`'
      AND z.STATUS = '`+status+`' AND z.cuenta = '`+cuenta+`'
      AND z.CuentaPropia != 1
       AND SUBSTRING(z.fecha,4,8) = '08/`+Anio+`'`
      rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    agosto := 0.0
    agostoLigado := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&agosto, &agostoLigado)
    }
    queryDD = `SELECT ISNULL(SUM(z.importe),0) as importe, ISNULL(SUM(b.AMOUNT),0) as ligado
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
      LEFT JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] b on b.idBanco = z.idBanco
      WHERE z.BUNIT = '`+BUNIT.(string)+`'
      AND z.STATUS = '`+status+`' AND z.cuenta = '`+cuenta+`'
      AND z.CuentaPropia != 1
       AND SUBSTRING(z.fecha,4,8) = '09/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    septiembre := 0.0
    septiembreLigado := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&septiembre, &septiembreLigado)
    }
    queryDD = `SELECT ISNULL(SUM(z.importe),0) as importe, ISNULL(SUM(b.AMOUNT),0) as ligado
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
      LEFT JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] b on b.idBanco = z.idBanco
      WHERE z.BUNIT = '`+BUNIT.(string)+`'
      AND z.STATUS = '`+status+`' AND z.cuenta = '`+cuenta+`'
      AND z.CuentaPropia != 1
       AND SUBSTRING(z.fecha,4,8) = '10/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    octubre := 0.0
    octubreLigado := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&octubre, &octubreLigado)
    }
    queryDD = `SELECT ISNULL(SUM(z.importe),0) as importe, ISNULL(SUM(b.AMOUNT),0) as ligado
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
      LEFT JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] b on b.idBanco = z.idBanco
      WHERE z.BUNIT = '`+BUNIT.(string)+`'
      AND z.STATUS = '`+status+`' AND z.cuenta = '`+cuenta+`'
      AND z.CuentaPropia != 1
       AND SUBSTRING(z.fecha,4,8) = '11/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    noviembre := 0.0
    noviembreLigado := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&noviembre, &noviembreLigado)
    }
    queryDD = `SELECT ISNULL(SUM(z.importe),0) as importe, ISNULL(SUM(b.AMOUNT),0) as ligado
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
      LEFT JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] b on b.idBanco = z.idBanco
      WHERE z.BUNIT = '`+BUNIT.(string)+`'
      AND z.STATUS = '`+status+`' AND z.cuenta = '`+cuenta+`'
      AND z.CuentaPropia != 1
       AND SUBSTRING(z.fecha,4,8) = '12/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    diciembre := 0.0
    diciembreLigado := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&diciembre, &diciembreLigado)
    }

    example := map[string]interface{}{ "success":1, "enero" : enero, "febrero" : febrero, "marzo" : marzo, "abril" : abril, "mayo" : mayo, "junio" : junio, "julio" : julio, "agosto" : agosto, "septiembre" : septiembre, "octubre" : octubre, "noviembre" : noviembre, "diciembre" : diciembre, "eneroLigado" : ligadoEnero, "febreroLigado" : febreroLigado, "marzoLigado" : marzoLigado, "abrilLigado" : abrilLigado, "mayoLigado" : mayoLigado, "junioLigado" : junioLigado, "julioLigado" : julioLigado, "agostoLigado" : agostoLigado, "septiembreLigado" : septiembreLigado, "octubreLigado" : octubreLigado, "noviembreLigado" : noviembreLigado, "diciembreLigado" : diciembreLigado}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}



func (c *DetalleCuentaMesIngresoEgresoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    Anio := c.GetString("anio")
    cuenta := c.GetString("cuenta")
    status := c.GetString("status")
    propias := c.GetString("propias")
    signo := "="
    if propias == "0" {
      signo = "!="
    }

    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    eneroTimbrado := 0.0
    febreroTimbrado := 0.0
    marzoTimbrado := 0.0
    abrilTimbrado := 0.0
    mayoTimbrado := 0.0
    junioTimbrado := 0.0
    julioTimbrado := 0.0
    agostoTimbrado := 0.0
    septiembreTimbrado := 0.0
    octubreTimbrado := 0.0
    noviembreTimbrado := 0.0
    diciembreTimbrado := 0.0
    if status == "2" {
      queryDD := `SELECT ISNULL(SUM(importe),0) as importe
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
        WHERE BUNIT = '`+BUNIT.(string)+`'
        AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
        AND timbrado = 1
         AND SUBSTRING(fecha,4,8) = '01/`+Anio+`'`
      rowsDD, _ := conn.Query(queryDD)
      if rowsDD.Next()  {
        rowsDD.Scan(&eneroTimbrado)
      }
      queryDD = `SELECT ISNULL(SUM(importe),0) as importe
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
        WHERE BUNIT = '`+BUNIT.(string)+`'
        AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
        AND timbrado = 1
         AND SUBSTRING(fecha,4,8) = '02/`+Anio+`'`
      rowsDD, _ = conn.Query(queryDD)
      if rowsDD.Next()  {
        rowsDD.Scan(&febreroTimbrado)
      }
      queryDD = `SELECT ISNULL(SUM(importe),0) as importe
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
        WHERE BUNIT = '`+BUNIT.(string)+`'
        AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
        AND timbrado = 1
         AND SUBSTRING(fecha,4,8) = '03/`+Anio+`'`
      rowsDD, _ = conn.Query(queryDD)
      if rowsDD.Next()  {
        rowsDD.Scan(&marzoTimbrado)
      }
      queryDD = `SELECT ISNULL(SUM(importe),0) as importe
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
        WHERE BUNIT = '`+BUNIT.(string)+`'
        AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
        AND timbrado = 1
         AND SUBSTRING(fecha,4,8) = '04/`+Anio+`'`
      rowsDD, _ = conn.Query(queryDD)
      if rowsDD.Next()  {
        rowsDD.Scan(&abrilTimbrado)
      }
      queryDD = `SELECT ISNULL(SUM(importe),0) as importe
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
        WHERE BUNIT = '`+BUNIT.(string)+`'
        AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
        AND timbrado = 1
         AND SUBSTRING(fecha,4,8) = '05/`+Anio+`'`
      rowsDD, _ = conn.Query(queryDD)
      if rowsDD.Next()  {
        rowsDD.Scan(&mayoTimbrado)
      }
      queryDD = `SELECT ISNULL(SUM(importe),0) as importe
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
        WHERE BUNIT = '`+BUNIT.(string)+`'
        AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
        AND timbrado = 1
         AND SUBSTRING(fecha,4,8) = '06/`+Anio+`'`
      rowsDD, _ = conn.Query(queryDD)
      if rowsDD.Next()  {
        rowsDD.Scan(&junioTimbrado)
      }
      queryDD = `SELECT ISNULL(SUM(importe),0) as importe
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
        WHERE BUNIT = '`+BUNIT.(string)+`'
        AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
        AND timbrado = 1
         AND SUBSTRING(fecha,4,8) = '07/`+Anio+`'`
      rowsDD, _ = conn.Query(queryDD)
      if rowsDD.Next()  {
        rowsDD.Scan(&julioTimbrado)
      }
      queryDD = `SELECT ISNULL(SUM(importe),0) as importe
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
        WHERE BUNIT = '`+BUNIT.(string)+`'
        AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
        AND timbrado = 1
         AND SUBSTRING(fecha,4,8) = '08/`+Anio+`'`
      rowsDD, _ = conn.Query(queryDD)
      if rowsDD.Next()  {
        rowsDD.Scan(&agostoTimbrado)
      }
      queryDD = `SELECT ISNULL(SUM(importe),0) as importe
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
        WHERE BUNIT = '`+BUNIT.(string)+`'
        AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
        AND timbrado = 1
         AND SUBSTRING(fecha,4,8) = '09/`+Anio+`'`
      rowsDD, _ = conn.Query(queryDD)
      if rowsDD.Next()  {
        rowsDD.Scan(&septiembreTimbrado)
      }
      queryDD = `SELECT ISNULL(SUM(importe),0) as importe
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
        WHERE BUNIT = '`+BUNIT.(string)+`'
        AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
        AND timbrado = 1
         AND SUBSTRING(fecha,4,8) = '10/`+Anio+`'`
      rowsDD, _ = conn.Query(queryDD)
      if rowsDD.Next()  {
        rowsDD.Scan(&octubreTimbrado)
      }
      queryDD = `SELECT ISNULL(SUM(importe),0) as importe
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
        WHERE BUNIT = '`+BUNIT.(string)+`'
        AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
        AND timbrado = 1
         AND SUBSTRING(fecha,4,8) = '11/`+Anio+`'`
      rowsDD, _ = conn.Query(queryDD)
      if rowsDD.Next()  {
        rowsDD.Scan(&noviembreTimbrado)
      }
      queryDD = `SELECT ISNULL(SUM(importe),0) as importe
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
        WHERE BUNIT = '`+BUNIT.(string)+`'
        AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
        AND timbrado = 1
         AND SUBSTRING(fecha,4,8) = '12/`+Anio+`'`
      rowsDD, _ = conn.Query(queryDD)
      if rowsDD.Next()  {
        rowsDD.Scan(&diciembreTimbrado)
      }
    }

    
    


    queryDD := `SELECT ISNULL(SUM(importe),0) as importe
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
      WHERE BUNIT = '`+BUNIT.(string)+`'
      AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
      AND CuentaPropia `+signo+` 1
       AND SUBSTRING(fecha,4,8) = '01/`+Anio+`'`
    rowsDD, errDD := conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    enero := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&enero)
    }
    queryDD = `SELECT ISNULL(SUM(importe),0) as importe
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
      WHERE BUNIT = '`+BUNIT.(string)+`'
      AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
      AND CuentaPropia `+signo+` 1
       AND SUBSTRING(fecha,4,8) = '02/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    febrero := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&febrero)
    }
    queryDD = `SELECT ISNULL(SUM(importe),0) as importe
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
      WHERE BUNIT = '`+BUNIT.(string)+`'
      AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
      AND CuentaPropia `+signo+` 1
       AND SUBSTRING(fecha,4,8) = '03/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    marzo := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&marzo)
    }
    queryDD = `SELECT ISNULL(SUM(importe),0) as importe
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
      WHERE BUNIT = '`+BUNIT.(string)+`'
      AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
      AND CuentaPropia `+signo+` 1
       AND SUBSTRING(fecha,4,8) = '04/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    abril := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&abril)
    }
    queryDD = `SELECT ISNULL(SUM(importe),0) as importe
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
      WHERE BUNIT = '`+BUNIT.(string)+`'
      AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
      AND CuentaPropia `+signo+` 1
       AND SUBSTRING(fecha,4,8) = '05/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    mayo := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&mayo)
    }
    queryDD = `SELECT ISNULL(SUM(importe),0) as importe
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
      WHERE BUNIT = '`+BUNIT.(string)+`'
      AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
      AND CuentaPropia `+signo+` 1
       AND SUBSTRING(fecha,4,8) = '06/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    junio := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&junio)
    }
    queryDD = `SELECT ISNULL(SUM(importe),0) as importe
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
      WHERE BUNIT = '`+BUNIT.(string)+`'
      AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
      AND CuentaPropia `+signo+` 1
       AND SUBSTRING(fecha,4,8) = '07/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    julio := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&julio)
    }
    queryDD = `SELECT ISNULL(SUM(importe),0) as importe
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
      WHERE BUNIT = '`+BUNIT.(string)+`'
      AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
      AND CuentaPropia `+signo+` 1
       AND SUBSTRING(fecha,4,8) = '08/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    agosto := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&agosto)
    }
    queryDD = `SELECT ISNULL(SUM(importe),0) as importe
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
      WHERE BUNIT = '`+BUNIT.(string)+`'
      AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
      AND CuentaPropia `+signo+` 1
       AND SUBSTRING(fecha,4,8) = '09/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    septiembre := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&septiembre)
    }
    queryDD = `SELECT ISNULL(SUM(importe),0) as importe
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
      WHERE BUNIT = '`+BUNIT.(string)+`'
      AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
      AND CuentaPropia `+signo+` 1
       AND SUBSTRING(fecha,4,8) = '10/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    octubre := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&octubre)
    }
    queryDD = `SELECT ISNULL(SUM(importe),0) as importe
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
      WHERE BUNIT = '`+BUNIT.(string)+`'
      AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
      AND CuentaPropia `+signo+` 1
       AND SUBSTRING(fecha,4,8) = '11/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    noviembre := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&noviembre)
    }
    queryDD = `SELECT ISNULL(SUM(importe),0) as importe
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
      WHERE BUNIT = '`+BUNIT.(string)+`'
      AND STATUS = '`+status+`' AND cuenta = '`+cuenta+`'
      AND CuentaPropia `+signo+` 1
       AND SUBSTRING(fecha,4,8) = '12/`+Anio+`'`
    rowsDD, errDD = conn.Query(queryDD)
    if errDD != nil {
      fmt.Println("que paso DD gasto:", errDD.Error())
    }
    diciembre := 0.0
    if rowsDD.Next()  {
      rowsDD.Scan(&diciembre)
    }
    

    example := map[string]interface{}{ "success":1, "eneroTimbrado" : eneroTimbrado, "enero" : enero, "febrero" : febrero, "marzo" : marzo, "abril" : abril, "mayo" : mayo, "junio" : junio, "julio" : julio, "agosto" : agosto, "septiembre" : septiembre, "octubre" : octubre, "noviembre" : noviembre, "diciembre" : diciembre, "febreroTimbrado" : febreroTimbrado,"marzoTimbrado" : marzoTimbrado,"abrilTimbrado" : abrilTimbrado,"mayoTimbrado" : mayoTimbrado,"junioTimbrado" : junioTimbrado,"julioTimbrado" : julioTimbrado,"agostoTimbrado" : agostoTimbrado,"septiembreTimbrado" : septiembreTimbrado,"octubreTimbrado" : octubreTimbrado,"noviembreTimbrado" : noviembreTimbrado,"diciembreTimbrado" : diciembreTimbrado}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *DetalleCuentaPorDiaIngresosEgresosPendienteDeLigarController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    mesanio := c.GetString("mesanio")
    status := c.GetString("status")
    cuenta := c.GetString("cuenta")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT  idBanco, importe, descripcion, ISNULL(leyenda1,'') as leyenda1, ISNULL(leyenda2,'') as leyenda2, CuentaPropia,ISNULL(referencia,'') as referencia , fecha, timbrado,  ISNULL(UUID,'') as UUID
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
      WHERE BUNIT = '`+BUNIT.(string)+`' 
      AND cuenta = '`+cuenta+`'
      AND STATUS = '`+status+`'
      AND  SUBSTRING(z.fecha,4,8) = '`+mesanio+`'
      order by fecha asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    idBanco:=0
    descripcion:=""
    leyenda1 := ""
    leyenda2:=""
    importe := 0.0
    CuentaPropia := 0
    timbrado := 0
    UUID := ""
    referencia := ""
    fecha := ""
    type PorUUID struct {
          FOLIO_FISCAL string
          AMOUNT float64
          PDF string
          XML string
          Ruta string
        }
        type CuentaBancaria struct {
          IdBanco int
          Importe float64
          Descripcion string 
          Leyenda1 string 
          Leyenda2 string
          CuentaPropia int
          Referencia string
          Fecha string
          Timbrado int 
          UUIDList map[string]*PorUUID
        }
    var (
          CuentaBancariaList map[string]*CuentaBancaria
        )
        CuentaBancariaList = make(map[string]*CuentaBancaria)
        
    //models.ClearCuentaBancaria()
    for rowsD.Next()  {
      rowsD.Scan(&idBanco, &importe, &descripcion, &leyenda1, &leyenda2, &CuentaPropia, &referencia, &fecha, &timbrado, &UUID)
      CuentaBancariaList[strconv.Itoa(idBanco)] = &CuentaBancaria{idBanco, importe, descripcion, leyenda1, leyenda2, CuentaPropia, referencia, fecha, timbrado,  make(map[string]*PorUUID)}
      //cedul = models.CuentaBancaria{idBanco, importe, descripcion, leyenda1, leyenda2, CuentaPropia, referencia, fecha, timbrado,  make(map[string]*models.PorUUID)}
      queryE := `SELECT f.FOLIO_FISCAL, f.AMOUNT, x.nombreArchivoPDF, x.nombreArchivoXML, x.ruta, f.idLigado
        FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] f
        INNER JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_facturacion_XML] x on x.folioFiscal = f.FOLIO_FISCAL
        WHERE f.idBanco = `+strconv.Itoa(idBanco)+` 
        order by f.idLigado asc`
       rowsE, errE := conn.Query(queryE)
      if errE != nil {
        fmt.Println("que pasoE:", errE.Error())
      }
      FOLIO_FISCAL := ""
      AMOUNT := 0.0
      nombreArchivoPDF := ""
      nombreArchivoXML := ""
      ruta := ""
      idLigado := 0
      for rowsE.Next()  {
        rowsE.Scan(&FOLIO_FISCAL, &AMOUNT, &nombreArchivoPDF, &nombreArchivoXML, &ruta, &idLigado)
        if _, ok := CuentaBancariaList[strconv.Itoa(idBanco)].UUIDList[strconv.Itoa(idLigado)]; ok {
          } else {
          var Liga PorUUID
          Liga = PorUUID{FOLIO_FISCAL,AMOUNT, nombreArchivoPDF, nombreArchivoXML, ruta }
          CuentaBancariaList[strconv.Itoa(idBanco)].UUIDList[strconv.Itoa(idLigado)] = &Liga
        }
      }     
      
    }
    example := map[string]interface{}{ "success":1, "ingresoEgreso" : CuentaBancariaList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *DetalleCuentaPorDiaIngresosEgresosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    mesanio := c.GetString("mesanio")
    status := c.GetString("status")
    cuenta := c.GetString("cuenta")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT  idBanco, importe, descripcion, ISNULL(leyenda1,'') as leyenda1, ISNULL(leyenda2,'') as leyenda2, CuentaPropia,ISNULL(referencia,'') as referencia , fecha, timbrado,  ISNULL(UUID,'') as UUID
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
      WHERE BUNIT = '`+BUNIT.(string)+`' 
      AND cuenta = '`+cuenta+`'
      AND STATUS = '`+status+`'
      AND  SUBSTRING(z.fecha,4,8) = '`+mesanio+`'
      order by fecha asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    idBanco:=0
    descripcion:=""
    leyenda1 := ""
    leyenda2:=""
    importe := 0.0
    CuentaPropia := 0
    timbrado := 0
    UUID := ""
    referencia := ""
    fecha := ""
    type PorUUID struct {
          FOLIO_FISCAL string
          AMOUNT float64
          PDF string
          XML string
          Ruta string
        }
        type CuentaBancaria struct {
          IdBanco int
          Importe float64
          Descripcion string 
          Leyenda1 string 
          Leyenda2 string
          CuentaPropia int
          Referencia string
          Fecha string
          Timbrado int 
          UUIDList map[string]*PorUUID
        }
        var (
          CuentaBancariaList map[string]*CuentaBancaria
        )
        CuentaBancariaList = make(map[string]*CuentaBancaria)
      
    //var cedul models.CuentaBancaria
    //models.ClearCuentaBancaria()
    for rowsD.Next()  {
      rowsD.Scan(&idBanco, &importe, &descripcion, &leyenda1, &leyenda2, &CuentaPropia, &referencia, &fecha, &timbrado, &UUID)
      algo :=  make(map[string]*PorUUID)

      if UUID!="" && status =="2" && timbrado == 1 {
        algo[UUID] = &PorUUID{UUID, -1, "" , "", ""}  
      }
      if status == "1" && timbrado == 1 {
        query := `SELECT FOLIO_FISCAL, AMOUNT
        FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco]
        WHERE idBanco = `+strconv.Itoa(idBanco)+``
        rows, _ := conn.Query(query)
        FOLIO_FISCAL := ""
        AMOUNT := 0.0
        for rows.Next()  {
          rows.Scan(&FOLIO_FISCAL, &AMOUNT)
          algo[FOLIO_FISCAL] = &PorUUID{FOLIO_FISCAL, AMOUNT, "" , "", ""}  
        }
    
      }
      
      CuentaBancariaList[strconv.Itoa(idBanco)] = &CuentaBancaria{idBanco, importe, descripcion, leyenda1, leyenda2, CuentaPropia, referencia, fecha, timbrado,  algo}
//      cedul = models.CuentaBancaria{idBanco, importe, descripcion, leyenda1, leyenda2, CuentaPropia, referencia, fecha, timbrado,  make(map[string]*models.PorUUID)}
//      models.AddCuentaBancaria(cedul, strconv.Itoa(idBanco))
    }
    example := map[string]interface{}{ "success":1, "ingresoEgreso" : CuentaBancariaList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *ActualizaLibroIngresosEgresosAnioPendienteDeLigarController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    Anio := c.GetString("anio")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT DISTINCT z.cuenta, n.nombre
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
        INNER JOIN [Sevenplus].[dbo].[zNombreCuentas] n on n.cuenta = z.cuenta
      WHERE z.BUNIT = '`+BUNIT.(string)+`' 
      AND  SUBSTRING(z.fecha,7,8) = '`+Anio+`'
      order by n.nombre asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    cuenta:=""
    nombre:=""
    var cedul models.IngresoEgresoLigado
    ingreso := 0.0
    egreso := 0.0
    ligadoIngreso := 0.0
    ligadoGasto := 0.0
    models.ClearIngresoEgresoLigado()
    for rowsD.Next()  {
      rowsD.Scan(&cuenta, &nombre)
      cuenta = strings.TrimSpace(cuenta)
      queryDD := `  SELECT  ISNULL(SUM(z.importe),0) as importe,  ISNULL(SUM(b.AMOUNT),0) as ligado
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
        LEFT JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] b on b.idBanco = z.idBanco
        WHERE  z.BUNIT = '`+BUNIT.(string)+`'
        AND z.STATUS = '1' AND z.cuenta = '`+cuenta+`'
         AND z.CuentaPropia != 1 
        AND SUBSTRING(z.fecha,7,8) = '`+Anio+`'`
      rowsDD, errDD := conn.Query(queryDD)
      if errDD != nil {
        fmt.Println("que paso DD gasto:", errDD.Error())
      }
      if rowsDD.Next()  {
        rowsDD.Scan(&egreso, &ligadoGasto)
      }
      queryDD = `SELECT ISNULL(SUM(importe),0) as importe,  ISNULL(SUM(b.AMOUNT),0) as ligado
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
        LEFT JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] b on b.idBanco = z.idBanco
        WHERE z.BUNIT = '`+BUNIT.(string)+`'
        AND z.STATUS = '2' AND z.cuenta = '`+cuenta+`'
        AND z.CuentaPropia != 1 
        AND SUBSTRING(z.fecha,7,8) = '`+Anio+`'`
      rowsDD, errDD = conn.Query(queryDD)
      if errDD != nil {
        fmt.Println("que paso DD ingreso:", errDD.Error())
      }
      if rowsDD.Next()  {
        rowsDD.Scan(&ingreso, &ligadoIngreso)
      }

      cedul = models.IngresoEgresoLigado{cuenta, nombre, ingreso, egreso, ligadoIngreso, ligadoGasto}
      models.AddIngresoEgresoLigado(cedul, cuenta)
    }
    example := map[string]interface{}{ "success":1, "ingresoEgreso" : models.GetAllIngresoEgresoLigado()}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}



func (c *ActualizaLibroIngresosEgresosAnioController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    Anio := c.GetString("anio")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT SUBSTRING(fecha,4,8) as periodo,  SUM(importe) as importe, SUM(ligado) as ligado FROM (SELECT fecha,b.importe, 
ISNULL((SELECT SUM(bb.AMOUNT) FROM  [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] bb WHERE bb.idBanco=b.idBanco),0) as ligado
  FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] b
  WHERE SUBSTRING(b.fecha,7,8)='`+Anio+`' AND b.CuentaPropia = 0 AND b.STATUS = '1') as tabla1
  GROUP BY SUBSTRING(fecha,4,8)
  order by periodo asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println(queryD)
      fmt.Println("que paso:", errD.Error())
    }
    type LigadoS struct {
      Mes string
      Importe float64
      Ligado float64
    }
    var (
      LigadoList map[string]*LigadoS
      ReporteList map[string]*LigadoS
    )
    LigadoList = make(map[string]*LigadoS)
    ReporteList = make(map[string]*LigadoS)
    //TimbradoList = make(map[string]*LigadoS)
    Mes := ""
    imp := 0.0

    liga := 0.0
    for rowsD.Next()  {
      rowsD.Scan(&Mes, &imp, &liga)
      LigadoList[Mes] = &LigadoS{Mes, imp, liga}
    }


    
    queryD = `SELECT SUM(f.AMOUNT) as suma, ISNULL(e.etiqueta,'SIN LIGAR') , ISNULL(e.idEtiqueta,0)
  FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] b
  LEFT JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] f on f.idBanco = b.idBanco
  LEFT JOIN [Sevenplus].[dbo].[`+BUNIT.(string)+`_zEtiquetas] e on e.idEtiqueta = f.idEtiqueta
  WHERE b.STATUS = '1' AND  SUBSTRING(b.fecha,7,8) = '`+Anio+`'
  GROUP BY e.idEtiqueta, e.etiqueta`
    rowsD, errD = conn.Query(queryD)
    if errD != nil {
      fmt.Println(queryD)
      fmt.Println("que paso:", errD.Error())
    }
    for rowsD.Next()  {
      rowsD.Scan(&imp, &Mes, &liga)
      ReporteList[Mes] = &LigadoS{Mes, imp, liga}
    }

    

  queryD = `UPDATE [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
SET fecha = CONCAT(SUBSTRING(fecha,1,6),'20',SUBSTRING(fecha,7,8))
WHERE LEN(fecha) = 8`
    conn.Exec(queryD)
    

    queryD = `SELECT DISTINCT z.cuenta, n.nombre
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
        INNER JOIN [Sevenplus].[dbo].[zNombreCuentas] n on n.cuenta = z.cuenta
      WHERE z.BUNIT = '`+BUNIT.(string)+`' 
      AND  SUBSTRING(z.fecha,7,8) = '`+Anio+`'
      order by n.nombre asc`
    rowsD, errD = conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    cuenta:=""
    nombre:=""
    type IngresoEgreso struct {
      Cuenta string
      Nombre string
      Ingreso float64
      Egreso float64
      IngresoTPropias float64
      EgresoTPropias float64
      Timbrado float64
      Ligado float64
    }
    var (
      IngresoEgresoList map[string]*IngresoEgreso
    )
    IngresoEgresoList = make(map[string]*IngresoEgreso)
    


    ingreso := 0.0
    egreso := 0.0
    timbrado := 0.0
    ingresoTPropias := 0.0
    egresoTPropias := 0.0
    for rowsD.Next()  {
      rowsD.Scan(&cuenta, &nombre)
      cuenta = strings.TrimSpace(cuenta)
      queryDD := `SELECT ISNULL(SUM(importe),0) as importe
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
        WHERE BUNIT = '`+BUNIT.(string)+`'
        AND STATUS = '1' AND cuenta = '`+cuenta+`'
         AND CuentaPropia != 1 
        AND SUBSTRING(fecha,7,8) = '`+Anio+`'`
      rowsDD, errDD := conn.Query(queryDD)
      if errDD != nil {
        fmt.Println("que paso DD gasto:", errDD.Error())
      }
      if rowsDD.Next()  {
        rowsDD.Scan(&egreso)
      }
      queryDD = `SELECT ISNULL(SUM(importe),0) as importe
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
        WHERE BUNIT = '`+BUNIT.(string)+`'
        AND STATUS = '2' AND cuenta = '`+cuenta+`'
        AND CuentaPropia != 1 
        AND SUBSTRING(fecha,7,8) = '`+Anio+`'`
      rowsDD, errDD = conn.Query(queryDD)
      if errDD != nil {
        fmt.Println("que paso DD ingreso:", errDD.Error())
      }
      if rowsDD.Next()  {
        rowsDD.Scan(&ingreso)
      }

      queryDD = `SELECT ISNULL(SUM(importe),0) as importe
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
        WHERE BUNIT = '`+BUNIT.(string)+`'
        AND STATUS = '2' AND cuenta = '`+cuenta+`'
        AND CuentaPropia = 1 
        AND SUBSTRING(fecha,7,8) = '`+Anio+`'`
      rowsDD, errDD = conn.Query(queryDD)
      if errDD != nil {
        fmt.Println("que paso DD ingreso:", errDD.Error())
      }
      if rowsDD.Next()  {
        rowsDD.Scan(&ingresoTPropias)
      }

      queryDD = `SELECT ISNULL(SUM(importe),0) as importe
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
        WHERE BUNIT = '`+BUNIT.(string)+`'
        AND STATUS = '1' AND cuenta = '`+cuenta+`'
        AND CuentaPropia = 1 
        AND SUBSTRING(fecha,7,8) = '`+Anio+`'`
      rowsDD, errDD = conn.Query(queryDD)
      if errDD != nil {
        fmt.Println("que paso DD ingreso:", errDD.Error())
      }
      if rowsDD.Next()  {
        rowsDD.Scan(&egresoTPropias)
      }

      queryDD = `SELECT ISNULL(SUM(importe),0) as importe
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
        WHERE BUNIT = '`+BUNIT.(string)+`'
        AND STATUS = '2' AND cuenta = '`+cuenta+`'
        AND CuentaPropia != 1 AND timbrado = 1
        AND SUBSTRING(fecha,7,8) = '`+Anio+`'`
      rowsDD, errDD = conn.Query(queryDD)
      if errDD != nil {
        fmt.Println("que paso DD ingreso:", errDD.Error())
      }
      if rowsDD.Next()  {
        rowsDD.Scan(&timbrado)
      }

      ligadoGastos := 0.0
      idBancosString := ""

      queryDD = `SELECT idBanco
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
        WHERE BUNIT = '`+BUNIT.(string)+`'
        AND STATUS = '1' AND cuenta = '`+cuenta+`'
        AND CuentaPropia != 1 
        AND SUBSTRING(fecha,7,8) = '`+Anio+`'`
      rowsDD, _ = conn.Query(queryDD)
      idB := 0
      ff := true
      for rowsDD.Next()  {
        rowsDD.Scan(&idB)
        if ff {
          ff = false
          idBancosString = strconv.Itoa(idB)
        } else {
          idBancosString = idBancosString + "," + strconv.Itoa(idB)
        }
      }
      queryDD = `SELECT ISNULL(SUM(AMOUNT),0) as importe
        FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco]
        WHERE idBanco in  ('`+idBancosString+`')`
      rowsDD, _ = conn.Query(queryDD)
      if rowsDD.Next()  {
        rowsDD.Scan(&ligadoGastos)
      }
      





      IngresoEgresoList[cuenta] = &IngresoEgreso{cuenta, nombre, ingreso, egreso,ingresoTPropias,egresoTPropias, timbrado, ligadoGastos}

    }
    manualTimbrado := 0.00
    queryDD := `SELECT SUM(cantidad) as cantidad
  FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zFacturas]
  WHERE (cancelada != 1 OR cancelada IS NULL)
  AND( 
  CHARINDEX('-2',xml) > 0 AND
   CHARINDEX('Fecha="2019',xmlText) > 0 )`
      rowsDD, errDD := conn.Query(queryDD)
      if errDD != nil {
        fmt.Println("que paso DD ingreso:", errDD.Error())
      }
      if rowsDD.Next()  {
        rowsDD.Scan(&manualTimbrado)
      }

    

    example := map[string]interface{}{ "success":1, "manualTimbrado" : manualTimbrado, "ingresoEgreso" : IngresoEgresoList, "LigadoList" : LigadoList, "ReporteList" : ReporteList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *ActualizaTablaClientesController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT idCliente, rfc, razonSocial, ISNULL(NumCtaPago,'') as NumCtaPago, correo
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zClientes]
      WHERE BUNIT = '`+BUNIT.(string)+`' 
      order by idCliente asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    rfc:=""
    razonSocial:=""
    NumCtaPago:=""
    correo:=""
    idCliente:=0
    idNumCtaPago:=0
    models.ClearClientes()
    var cedul models.Clientes
    for rowsD.Next()  {
      rowsD.Scan(&idCliente, &rfc, &razonSocial, &NumCtaPago, &correo)
      cedul = models.Clientes{rfc, razonSocial,  correo, idCliente,  make(map[string]*models.NumCtaPago)}
      models.AddClientes(cedul, strconv.Itoa(idCliente))

      queryDD := `SELECT idNumCtaPago, NumCtaPago
        FROM [Sevenplus].[dbo].[zNumCtaPago]
        WHERE idCliente = `+strconv.Itoa(idCliente)+`
        order by idNumCtaPago asc`
      rowsDD, errDD := conn.Query(queryDD)
      if errDD != nil {
        fmt.Println("que paso DD:", errDD.Error())
      }
      var clienteActual models.Clientes
      clienteActual = models.DameClientePorIdCLiente(strconv.Itoa(idCliente))
      for rowsDD.Next()  {
        rowsDD.Scan(&idNumCtaPago, &NumCtaPago)
        if _, ok := clienteActual.NumCtaPagoList[strconv.Itoa(idNumCtaPago)]; ok {
          } else {
          var Liga models.NumCtaPago
          Liga = models.NumCtaPago{idNumCtaPago,NumCtaPago}
          clienteActual.NumCtaPagoList[strconv.Itoa(idNumCtaPago)] = &Liga
        }
      }

    }
    example := map[string]interface{}{ "success":1, "clientes" : models.GetAllClientes()}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *ActualizaDiaTimbradoIngresosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    Mes := c.GetString("mes")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT DISTINCT fecha
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
      WHERE BUNIT = '`+BUNIT.(string)+`' AND
      SUBSTRING(fecha,4,5) = '`+Mes+`'
      order by fecha asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    fecha:=""
    type Archivos struct {
      Nombre string
      Completo string
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)
//    models.ClearArchivos()
//    var cedul models.Archivos
    for rowsD.Next()  {
      rowsD.Scan(&fecha)
      ArchivosList[fecha] = &Archivos{fecha, fecha}
      //cedul = models.Archivos{fecha, fecha}
      //models.AddArchivos(cedul, fecha)
    }
    example := map[string]interface{}{ "success":1, "fechas" : ArchivosList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *ActualizaDiaTimbradoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    Mes := c.GetString("mes")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT DISTINCT fecha
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
      WHERE BUNIT = '`+BUNIT.(string)+`' AND
      SUBSTRING(fecha,4,LEN(fecha)-3) = '`+Mes+`'
      order by fecha asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    fecha:=""
    type Archivos struct {
      Nombre string
      Completo string
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)
    //models.ClearArchivos()
    //var cedul models.Archivos
    for rowsD.Next()  {
      rowsD.Scan(&fecha)
      ArchivosList[fecha] = &Archivos{fecha, fecha}
      //cedul = models.Archivos{fecha, fecha}
      //models.AddArchivos(cedul, fecha)
    }
    example := map[string]interface{}{ "success":1, "fechas" : ArchivosList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}




func (c *DetalleLigadoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    nombre := c.GetString("nombre")
    //anio := "20"+Fecha[6:8]
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    fecha := ""
    cuenta := ""
    importe := 0.0
    descripcion := ""
    queryF := `SELECT z.fecha, z.cuenta, z.descripcion, f.AMOUNT
  FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zEtiquetas] e
  LEFT JOIN [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] f on f.idEtiqueta = e.idEtiqueta
  LEFT JOIN [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z on z.idBanco = f.idBanco
  WHERE e.etiqueta = '`+nombre+`'`
    rowsF, errF := conn.Query(queryF)
    if errF != nil {
      fmt.Println("que pasoF:", errF.Error())
    }
    type Ligado struct {
      Fecha string
      Cuenta string
      Descripcion string
      Importe float64
    }
    LigadoList := make(map[string]*Ligado)
    i:=0

    for rowsF.Next()  {
      rowsF.Scan(&fecha, &cuenta, &descripcion, &importe)
      LigadoList[strconv.Itoa(i)] = &Ligado{fecha,cuenta,descripcion,importe}
      i++
    }
    example := map[string]interface{}{ "success":1, "ligado" :LigadoList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *ActualizaAnioPendienteDeLigarController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT DISTINCT SUBSTRING(fecha,7,8) as fecha
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
      WHERE BUNIT = '`+BUNIT.(string)+`'
      order by SUBSTRING(fecha,7,8) asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    fecha:=""
    type Archivos struct {
      Nombre string
      Completo string
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)
    
    //models.ClearArchivos()
    //var cedul models.Archivos
    for rowsD.Next()  {
      rowsD.Scan(&fecha)
      ArchivosList[fecha] = &Archivos{fecha, fecha}
      //cedul = models.Archivos{fecha, fecha}
      //models.AddArchivos(cedul, fecha)
    }
    example := map[string]interface{}{ "success":1, "fechas" : ArchivosList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *ActualizaAnioController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT DISTINCT SUBSTRING(fecha,7,8) as fecha
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
      WHERE BUNIT = '`+BUNIT.(string)+`'
      order by SUBSTRING(fecha,7,8) asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    fecha:=""
    type Archivos struct {
      Nombre string
      Completo string
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)
    
    //models.ClearArchivos()
    //var cedul models.Archivos
    for rowsD.Next()  {
      rowsD.Scan(&fecha)
      ArchivosList[fecha] = &Archivos{fecha, fecha}
      //cedul = models.Archivos{fecha, fecha}
      //models.AddArchivos(cedul, fecha)
    }
    example := map[string]interface{}{ "success":1, "fechas" : ArchivosList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}



func (c *ActualizaMesTimbradoIngresosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT DISTINCT SUBSTRING(fecha,4,5) as fecha
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
      WHERE BUNIT = '`+BUNIT.(string)+`'
      order by fecha asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    fecha:=""
    type Archivos struct {
      Nombre string
      Completo string
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)
    
    //models.ClearArchivos()
    //var cedul models.Archivos
    for rowsD.Next()  {
      rowsD.Scan(&fecha)
      ArchivosList[fecha] = &Archivos{fecha, fecha}
      //cedul = models.Archivos{fecha, fecha}
      //models.AddArchivos(cedul, fecha)
    }
    example := map[string]interface{}{ "success":1, "fechas" : ArchivosList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}



func (c *ActualizaMesCuentasController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    cuenta := c.GetString("cuenta")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT DISTINCT SUBSTRING(fecha,4,5) as fecha
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
      WHERE BUNIT = '`+BUNIT.(string)+`'
      AND cuenta = '`+cuenta+`'
      order by fecha asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    fecha:=""
    type Archivos struct {
      Nombre string
      Completo string
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)
    //models.ClearArchivos()
    //var cedul models.Archivos
    for rowsD.Next()  {
      rowsD.Scan(&fecha)
      ArchivosList[fecha] =&Archivos{fecha, fecha}
      //cedul = models.Archivos{fecha, fecha}
      //models.AddArchivos(cedul, fecha)
    }
    example := map[string]interface{}{ "success":1, "fechas" : ArchivosList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *ActualizaMesTimbradoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT DISTINCT SUBSTRING(fecha,4, LEN(fecha)-3) as fecha
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
      WHERE BUNIT = '`+BUNIT.(string)+`'
      order by fecha asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    fecha:=""
    type Archivos struct {
      Nombre string
      Completo string
    }
    var (
      ArchivosList map[string]*Archivos
      CuentasList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)
    CuentasList = make(map[string]*Archivos)
    
    for rowsD.Next()  {
      rowsD.Scan(&fecha)
      ArchivosList[fecha] = &Archivos{fecha, fecha}
    }
    queryD = `SELECT DISTINCT z.cuenta, n.nombre
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
        INNER JOIN [Sevenplus].[dbo].[zNombreCuentas] n on n.cuenta = z.cuenta
      WHERE z.BUNIT = '`+BUNIT.(string)+`'`
    rowsD, errD = conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    cuenta := ""
    nombre := ""
    for rowsD.Next()  {
      rowsD.Scan(&cuenta, &nombre)
      CuentasList[cuenta] = &Archivos{nombre, cuenta}
    }
    example := map[string]interface{}{ "success":1, "fechas" : ArchivosList, "cuentas" : CuentasList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}



func (c *ActualizaCuentasController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := "SELECT idCuenta, cuenta, nombre, ACNT_CODE FROM [Sevenplus].[dbo].[zNombreCuentas]  WHERE BUNIT = '"+BUNIT.(string)+"' AND ACNT_CODE != ''"
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    idCuenta := 0
    cuenta:= ""
    nombre := ""
    ACNT_CODE := ""
    models.ClearNombreCuentas()
    var cedul models.NombreCuentas
    for rowsD.Next()  {
      rowsD.Scan(&idCuenta, &cuenta, &nombre, &ACNT_CODE)
      cedul = models.NombreCuentas{nombre, cuenta, ACNT_CODE}
      models.AddNombreCuentas(cedul, cuenta)
    }
    example := map[string]interface{}{ "success":1, "cuentas" : models.GetAllNombreCuentas()}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *NombresCuentasController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := "SELECT DISTINCT cuenta FROM [Sevenplus].[dbo].["+BUNIT.(string)+"_zBancos]  WHERE BUNIT = '"+BUNIT.(string)+"' order by cuenta asc"
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    cuenta:= ""
    nombre := ""
    ACNT_CODE := ""
    models.ClearNombreCuentas()
    var cedul models.NombreCuentas
    for rowsD.Next()  {
      rowsD.Scan(&cuenta)
      queryE := "SELECT nombre, ACNT_CODE FROM [Sevenplus].[dbo].[zNombreCuentas]  WHERE BUNIT = '"+BUNIT.(string)+"' AND cuenta = '"+cuenta+"'"
      rowsE, errE := conn.Query(queryE)
      if errE != nil {
        fmt.Println("que paso:", errE.Error())
      }
      nombre = ""
      ACNT_CODE = ""
      if rowsE.Next()  {
        rowsE.Scan(&nombre, &ACNT_CODE)
      } else {
        query := `INSERT INTO [Sevenplus].[dbo].[zNombreCuentas]
        ( cuenta, nombre, BUNIT, ACNT_CODE)
        VALUES('`+cuenta+`','`+nombre+`','`+BUNIT.(string)+`', '')`
        conn.Exec(query)        
      }
      cedul = models.NombreCuentas{nombre, cuenta, ACNT_CODE}
      models.AddNombreCuentas(cedul, cuenta)
    }
    example := map[string]interface{}{ "success":1, "cuentas" : models.GetAllNombreCuentas()}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
type Channel struct {
        name string
    }
func stringInSlice(a string, list []Channel) bool {
    for _, b := range list {
        if b.name == a {
            return true
        }
    }
    return false
}

func concatSlice( list []Channel) string {
  
  var cadOriginal bytes.Buffer
  first := 1
    for _, b := range list {
      if first == 1 {
        first = 0
        cadOriginal.WriteString(b.name) 
      } else {
        cadOriginal.WriteString(","+b.name) 
      }
    }
    return cadOriginal.String()
}


func (c *ConciliacionEdoCuentaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    period := c.GetString("period")
    cuenta := c.GetString("cuenta")
    ACNT_CODE := c.GetString("ACNT_CODE")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT JRNAL_NO, JRNAL_LINE, AMOUNT, D_C, DESCRIPTN, TRANS_DATETIME
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE PERIOD = '`+period+`'
      AND ACCNT_CODE = '`+ACNT_CODE+`'
      AND ALLOCATION != 'C'
      order by TRANS_DATETIME asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    JRNAL_NO := 0
    JRNAL_LINE := 0
    var AMOUNT decimal.Dec
    D_C := ""
    DESCRIPTN := ""
    idBanco := 0
    var TRANS_DATETIME time.Time
    models.ClearConciliacion()
    /*type TypeBancos struct{
      IdBanco int 
    }*/
    
    var channels []Channel  // an empty list
    var channels2 []Channel  // an empty list
    
    //channels = append(channels, Channel{name:"some channel name"})
    //var idBancos  [10000]int
  //  index := 0
      //DocumentObject
    var cedul models.Conciliacion
    yearS := ""
      descripcion :=""
    fechaQuery := ""
    for rowsD.Next()  {
      rowsD.Scan(&JRNAL_NO, &JRNAL_LINE, &AMOUNT, &D_C, &DESCRIPTN, &TRANS_DATETIME)
      amountString := fmt.Sprintf("%.2f", math.Abs(AMOUNT.Float64()))
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      year :=TRANS_DATETIME.Year()-2000//hardcode
      fechaReal := ""
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d/%d/%d", dia, mes, year)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("0%d/%d/%d", dia, mes, year)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d/0%d/%d",  dia, mes, year)
          } else {
            fechaReal = fmt.Sprintf("0%d/0%d/%d",  dia, mes, year)
          }
        }
      }
      fechaQuery = fechaReal[3:8]
      descripcion =""
      /// AND fecha = '`+fechaReal+`'
       // AND SUBSTRING(fecha,4,8) = '`+fechaQuery+`'
      yearS = strconv.Itoa(year)
      queryDD := `SELECT descripcion, idBanco
        FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
        WHERE BUNIT = '`+BUNIT.(string)+`'
        AND cuenta = '`+cuenta+`'
        AND SUBSTRING(fecha,7,8) = '`+yearS+`'
        AND importe = '`+amountString+`'
        AND SUBSTRING(fecha,4,8) = '`+fechaQuery+`'
        `
      rowsDD, errDD := conn.Query(queryDD)
      if errDD != nil {
        fmt.Println(queryDD)
        fmt.Println("que paso:", errDD.Error())
      }
      entre := 0
      cuantasVecesAgregue := 0
      for rowsDD.Next() {
        entre = 1
        rowsDD.Scan(&descripcion, &idBanco)
        //fmt.Println(strconv.Itoa(idBanco)+" "+ strconv.FormatBool(stringInSlice(strconv.Itoa(idBanco), channels)))
        if stringInSlice(strconv.Itoa(idBanco), channels) {
        //  fmt.Println(idBanco)
//          cedul = models.Conciliacion{JRNAL_NO, JRNAL_LINE, math.Abs(AMOUNT.Float64()), D_C, fechaReal, DESCRIPTN, ""}
        } else {
          if entre == 1 {
            entre = 2
            channels = append(channels, Channel{name:strconv.Itoa(idBanco)})
            cedul = models.Conciliacion{JRNAL_NO, JRNAL_LINE, math.Abs(AMOUNT.Float64()), D_C, fechaReal, DESCRIPTN, descripcion, idBanco}  
            cuantasVecesAgregue++
            break
          }
          
        }
        
      } 
      if entre == 0 && cuantasVecesAgregue == 0 {
        queryDD := `SELECT descripcion, idBanco
          FROM [Sevenplus].[dbo].[zBancos]
          WHERE BUNIT = '`+BUNIT.(string)+`'
          AND cuenta = '`+cuenta+`'
          AND SUBSTRING(fecha,7,8) = '`+yearS+`'
          AND importe = '`+amountString+`'
          AND SUBSTRING(fecha,4,8) != '`+fechaQuery+`'
          `
        rowsDD, errDD := conn.Query(queryDD)
        if errDD != nil {
          fmt.Println(queryDD)
          fmt.Println("que paso:", errDD.Error())
        }
        for rowsDD.Next() {
          entre = 1
          rowsDD.Scan(&descripcion, &idBanco)
          //fmt.Println(strconv.Itoa(idBanco)+" "+ strconv.FormatBool(stringInSlice(strconv.Itoa(idBanco), channels)))
          if stringInSlice(strconv.Itoa(idBanco), channels) {
          //  fmt.Println(idBanco)
  //          cedul = models.Conciliacion{JRNAL_NO, JRNAL_LINE, math.Abs(AMOUNT.Float64()), D_C, fechaReal, DESCRIPTN, ""}
          } else {
            if entre == 1 {
              entre = 2
              channels = append(channels, Channel{name:strconv.Itoa(idBanco)})
              cedul = models.Conciliacion{JRNAL_NO, JRNAL_LINE, math.Abs(AMOUNT.Float64()), D_C, fechaReal, DESCRIPTN, descripcion, idBanco}  
              cuantasVecesAgregue++
              break
            }
            
          }
          
        } 
      }
      if entre != 2 {
        cedul = models.Conciliacion{JRNAL_NO, JRNAL_LINE, math.Abs(AMOUNT.Float64()), D_C, fechaReal, DESCRIPTN, "",-1}
        cuantasVecesAgregue++
      }
      llave := strconv.Itoa(JRNAL_NO)+"-"+strconv.Itoa(JRNAL_LINE)
    
      if cuantasVecesAgregue == 3 {
        fmt.Println(llave)
      }
      if cuantasVecesAgregue == 0 || cuantasVecesAgregue > 1 {
        fmt.Println(strconv.Itoa(cuantasVecesAgregue)+" "+strconv.Itoa(entre))
      }
      
      models.AddConciliacion(cedul, llave)    
      
      
      
    }
    importe := 0.0
    fecha := ""
    queryDD := `SELECT descripcion, idBanco, importe, fecha
      FROM [Sevenplus].[dbo].[zBancos]
      WHERE BUNIT = '`+BUNIT.(string)+`'
      AND cuenta = '`+cuenta+`'
      AND SUBSTRING(fecha,4,8) = '`+fechaQuery+`'
      AND idBanco not in (`+concatSlice(channels)+`)
      `
    rowsDD, errDD := conn.Query(queryDD)
    if errDD != nil {
      fmt.Println(queryDD)
      fmt.Println("que paso:", errDD.Error())
    }
    for rowsDD.Next() {
      rowsDD.Scan(&descripcion, &idBanco, &importe, &fecha)
      importeString := fmt.Sprintf("%.2f",importe)
      importeStringNegativo := fmt.Sprintf("%.2f",importe*-1)
      
      queryD := `SELECT JRNAL_NO, JRNAL_LINE, AMOUNT, D_C, DESCRIPTN, TRANS_DATETIME
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
        WHERE  ACCNT_CODE = '`+ACNT_CODE+`'
        AND ALLOCATION != 'C'
        AND AMOUNT in (`+importeString+`, `+importeStringNegativo+` )
        order by TRANS_DATETIME asc`
        rowsD, errD := conn.Query(queryD)
      if errD != nil {
        fmt.Println("que paso:", errD.Error())
      }
      entre := 0
      cuantasVecesAgregue := 0
      for rowsD.Next() {
        entre = 1
        rowsD.Scan(&JRNAL_NO, &JRNAL_LINE, &AMOUNT, &D_C, &DESCRIPTN, &TRANS_DATETIME)
        mes := int(TRANS_DATETIME.Month())
        dia :=  TRANS_DATETIME.Day()
        year :=TRANS_DATETIME.Year()-2000//hardcode
        fechaReal := ""
        if mes > 9 && dia > 9 {
          fechaReal = fmt.Sprintf("%d/%d/%d", dia, mes, year)
        } else {
          if mes > 9 && dia < 10 {
            fechaReal = fmt.Sprintf("0%d/%d/%d", dia, mes, year)
          } else {
            if mes < 10 && dia > 9 {
              fechaReal = fmt.Sprintf("%d/0%d/%d",  dia, mes, year)
            } else {
              fechaReal = fmt.Sprintf("0%d/0%d/%d",  dia, mes, year)
            }
          }
        }

        llave := strconv.Itoa(JRNAL_NO)+"-"+strconv.Itoa(JRNAL_LINE)
        if stringInSlice(llave, channels2) {
        } else {
          if entre == 1 {
            entre = 2
            channels2 = append(channels2, Channel{name:llave})
            cedul = models.Conciliacion{JRNAL_NO, JRNAL_LINE, math.Abs(AMOUNT.Float64()), D_C, fechaReal, DESCRIPTN, descripcion, idBanco}  
            cuantasVecesAgregue++
            break
          }
        }
      }
        
        
      if entre != 2 {
        cedul = models.Conciliacion{-1, -1, importe, "", fecha, "", descripcion,idBanco}
        cuantasVecesAgregue++
      }
        
      

      
      //cedul = models.Conciliacion{-1, -1, importe, "", fecha, "", descripcion,idBanco}
      models.AddConciliacion(cedul, strconv.Itoa(idBanco))
    
    }
    example := map[string]interface{}{ "success":1, "cuentas" : models.GetAllConciliacion()}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *CambioLocoTFWWController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    cuentaVieja := c.GetString("cuentaVieja")
    cuentaNueva := c.GetString("cuentaNueva")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }

    //  queryD = `ALTER TABLE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLEX] DROP CONSTRAINT FK_`+BUNIT.(string)+`_0900_01_0901;`
  //    conn.Exec(queryD) 
  //    queryD = `ALTER TABLE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG_LAD] DROP CONSTRAINT FK_`+BUNIT.(string)+`_0887_01_0901;`
  //    conn.Exec(queryD) 
    queryD := `UPDATE [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
        SET ANAL_T1 = '`+cuentaNueva+`'
        WHERE ANAL_T1 = '`+cuentaVieja+`'`
        fmt.Println(queryD)
    conn.Exec(queryD)

    example := map[string]interface{}{ "success":1}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  } else {
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *CambioLocoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    cuentaVieja := c.GetString("cuentaVieja")
    cuentaNueva := c.GetString("cuentaNueva")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }

    //  queryD = `ALTER TABLE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLEX] DROP CONSTRAINT FK_`+BUNIT.(string)+`_0900_01_0901;`
  //    conn.Exec(queryD) 
  //    queryD = `ALTER TABLE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG_LAD] DROP CONSTRAINT FK_`+BUNIT.(string)+`_0887_01_0901;`
  //    conn.Exec(queryD) 
    queryD := `UPDATE [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
        SET ACCNT_CODE = '`+cuentaNueva+`'
        WHERE ACCNT_CODE = '`+cuentaVieja+`'`
        fmt.Println(queryD)
    conn.Exec(queryD)

    example := map[string]interface{}{ "success":1}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  } else {
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *DameCamposDeLaTablasController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    //BUNIT := c.GetSession("BUNIT")
    DB := c.GetSession("DB")
    tabla := c.GetString("tabla")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE,ISNULL(CHARACTER_MAXIMUM_LENGTH,0) AS CHARACTER_MAXIMUM_LENGTH, ISNULL( NUMERIC_PRECISION,0) AS NUMERIC_PRECISION
    FROM `+DB.(string)+`.INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = N'`+tabla+`'
    ORDER BY ORDINAL_POSITION ASC`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    COLUMN_NAME := ""
    ORDINAL_POSITION := 0
    DATA_TYPE := ""
    CHARACTER_MAXIMUM_LENGTH := 0
    NUMERIC_PRECISION := 0
    type Archivos struct {
      COLUMN_NAME string
      ORDINAL_POSITION int
      DATA_TYPE string
      CHARACTER_MAXIMUM_LENGTH int
      NUMERIC_PRECISION int
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)
    for rowsD.Next()  {
      rowsD.Scan(&COLUMN_NAME, &ORDINAL_POSITION, &DATA_TYPE, &CHARACTER_MAXIMUM_LENGTH, &NUMERIC_PRECISION )
      ArchivosList[strconv.Itoa(ORDINAL_POSITION)] = &Archivos{COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION }
    }
    example := map[string]interface{}{ "success":1, "columnas" : ArchivosList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *ListaDeCuentasController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT DISTINCT b.cuenta, UPPER(c.nombre)
      FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] b
      INNER JOIN [Sevenplus].[dbo].[zNombreCuentas] c on c.cuenta = b.cuenta
      WHERE b.BUNIT = '`+BUNIT.(string)+`'
      order by UPPER(c.nombre) asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    cuenta := ""
    nombre := ""
    type Archivos struct {
      Nombre string
      Completo string
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)

    //models.ClearArchivos()
    //var cedul models.Archivos
    for rowsD.Next()  {
      rowsD.Scan(&cuenta, &nombre)
      ArchivosList[nombre] = &Archivos{cuenta, nombre}
    //  cedul = models.Archivos{cuenta, nombre}
    //  models.AddArchivos(cedul, nombre)
    }
    example := map[string]interface{}{ "success":1, "cuentas" : ArchivosList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *DameDescuentosDelERController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := ""
    BUNITx := c.GetSession("BUNIT")
    BUNIT = BUNITx.(string)
    BTemp := c.GetString("BUNITViejito")
    if BTemp == "" {
    } else {
      BUNIT = c.GetString("BUNITViejito")
    }
    DB := c.GetSession("DB")
    PERIOD := c.GetString("PERIOD")
    ER := c.GetString("ER")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    
    queryD := `SELECT ISNULL(DESCRIPTN,'') as DESCRIPTN, AMOUNT, D_C
      FROM  [`+DB.(string)+`].[dbo].[`+BUNIT+`_A_SALFLDG] 
      WHERE PERIOD = `+PERIOD+` AND ACCNT_CODE = '`+ER+`' AND ALLOCATION != 'C'
      order by JRNAL_NO asc`
    rowsD, errDD := conn.Query(queryD)
    if errDD != nil {
      fmt.Println("que paso:", errDD.Error())
    }
    DESCRIPTN := ""
    D_C := ""
    var AMOUNT decimal.Dec
    type Archivos struct {
      DESCRIPTN string
      Cantidad float64
    }
    var (
      DescuentosList map[string]*Archivos
    )
    DescuentosList = make(map[string]*Archivos)
    var (
      OtrosDescuentosList map[string]*Archivos
    )
    OtrosDescuentosList = make(map[string]*Archivos)
    var (
      INFONAVITDescuentosList map[string]*Archivos
    )
    INFONAVITDescuentosList = make(map[string]*Archivos)
    
    var (
      PercepcionesList map[string]*Archivos
    )
    PercepcionesList = make(map[string]*Archivos)
    for rowsD.Next()  {
      rowsD.Scan(&DESCRIPTN, &AMOUNT, &D_C)
      DESCRIPTN = strings.ToUpper(strings.TrimSpace(DESCRIPTN))
      amountAbs := math.Abs(AMOUNT.Float64())
      if D_C == "D" {
        if strings.Contains(DESCRIPTN, "DEPRECIACI") || strings.Contains(DESCRIPTN, "OTROS") {
          if _, ok := DescuentosList["0"]; ok {
            DescuentosList["0"].Cantidad += amountAbs
          } else {
            DescuentosList["0"] = &Archivos{DESCRIPTN, amountAbs}
          }
        } else {
          //ANTICIPOS
          if strings.Contains(DESCRIPTN, "INFONAVIT")  {
            if _, ok := INFONAVITDescuentosList["0"]; ok {
              INFONAVITDescuentosList["0"].Cantidad += amountAbs
            } else {
              INFONAVITDescuentosList["0"] = &Archivos{DESCRIPTN, amountAbs}
            }
          } else {
            if strings.Contains(DESCRIPTN, "ESPECIAL") || strings.Contains(DESCRIPTN, "PROPIEDAD PERSONAL") || strings.Contains(DESCRIPTN, "FOPROUM") || strings.Contains(DESCRIPTN, "CARGO") || strings.Contains(DESCRIPTN, "SEGURO") || strings.Contains(DESCRIPTN, "FEUM") || strings.Contains(DESCRIPTN, "GASTO") || strings.Contains(DESCRIPTN, "ANTICIPO") || strings.Contains(DESCRIPTN, "MEDICO") || strings.Contains(DESCRIPTN, "MÉDICO") || strings.Contains(DESCRIPTN, "AHORRO") || strings.Contains(DESCRIPTN, "BOLETOS") || strings.Contains(DESCRIPTN, "ALMACEN") || strings.Contains(DESCRIPTN, "SIEMA") || strings.Contains(DESCRIPTN, "MATERIAL") || strings.Contains(DESCRIPTN, "PRESTAMO") {
              if strings.Contains(DESCRIPTN, "SEGURO DE SOBREVIVIENTE") {
              } else {
                if _, ok := OtrosDescuentosList["0"]; ok {
                  OtrosDescuentosList["0"].Cantidad += amountAbs
                } else {
                  OtrosDescuentosList["0"] = &Archivos{DESCRIPTN, amountAbs}
                }
              }
            }
          } 
        }
      } else {
        if D_C == "C" {
          //ANTICIPOS
          if strings.Contains(DESCRIPTN, "RECLASIFICACION"){
            if _, ok := OtrosDescuentosList["0"]; ok {
              OtrosDescuentosList["0"].Cantidad -= amountAbs
            } else {
              OtrosDescuentosList["0"] = &Archivos{DESCRIPTN, amountAbs}
            }
          }
        }
      }
    }
    queryD = `SELECT ISNULL(DESCRIPTN,'') as DESCRIPTN, AMOUNT, D_C
      FROM  [`+DB.(string)+`].[dbo].[`+BUNIT+`_A_SALFLDG] 
      WHERE PERIOD = `+PERIOD+` AND ACCNT_CODE = '1781800' AND D_C = 'D' AND ALLOCATION != 'C' AND ANAL_T6 = '`+ER+`'
      order by JRNAL_NO asc`
      if PERIOD == "2019001" || PERIOD == "2019002" || PERIOD == "2019003" {
    queryD = `SELECT ISNULL(DESCRIPTN,'') as DESCRIPTN, AMOUNT, D_C
      FROM  [`+DB.(string)+`].[dbo].[`+BUNIT+`_A_SALFLDG] 
      WHERE PERIOD = `+PERIOD+` AND ACCNT_CODE = '178180' AND D_C = 'D' AND ALLOCATION != 'C' AND ANAL_T6 = '`+ER+`'
      order by JRNAL_NO asc`
        
      }
      if BUNIT == "MR1" {
    queryD = `SELECT ISNULL(DESCRIPTN,'') as DESCRIPTN, AMOUNT, D_C
      FROM  [`+DB.(string)+`].[dbo].[`+BUNIT+`_A_SALFLDG] 
      WHERE PERIOD = `+PERIOD+` AND ACCNT_CODE = '178220' AND D_C = 'D' AND ALLOCATION != 'C' AND ANAL_T6 = '`+ER+`'
      order by JRNAL_NO asc`
        
      }
    rowsD, errDD = conn.Query(queryD)
    if errDD != nil {
      fmt.Println("que paso:", errDD.Error())
    }
    for rowsD.Next()  {
      rowsD.Scan(&DESCRIPTN, &AMOUNT, &D_C)
      DESCRIPTN = strings.ToUpper(strings.TrimSpace(DESCRIPTN))
      amountAbs := math.Abs(AMOUNT.Float64())
      if _, ok := PercepcionesList["0"]; ok {
        PercepcionesList["0"].Cantidad += amountAbs
      } else {
        PercepcionesList["0"] = &Archivos{DESCRIPTN, amountAbs}
      }
    }

    queryD = `SELECT ISNULL(DESCRIPTN,'') as DESCRIPTN, AMOUNT, D_C
      FROM  [`+DB.(string)+`].[dbo].[`+BUNIT+`_A_SALFLDG] 
      WHERE PERIOD = `+PERIOD+` AND ACCNT_CODE = '811610' AND D_C = 'D' AND ALLOCATION != 'C' AND ANAL_T6 = '`+ER+`' AND ANAL_T9 = 'ASIFIS01'
      order by JRNAL_NO asc`
    rowsD, errDD = conn.Query(queryD)
    if errDD != nil {
      fmt.Println("que paso:", errDD.Error())
    }
    for rowsD.Next()  {
      rowsD.Scan(&DESCRIPTN, &AMOUNT, &D_C)
      DESCRIPTN = strings.ToUpper(strings.TrimSpace(DESCRIPTN))
      amountAbs := math.Abs(AMOUNT.Float64())
      if _, ok := PercepcionesList["1"]; ok {
        PercepcionesList["1"].Cantidad += amountAbs //prima
      } else {
        PercepcionesList["1"] = &Archivos{DESCRIPTN, amountAbs}
      }
    }

    queryD = `SELECT ISNULL(DESCRIPTN,'') as DESCRIPTN, AMOUNT, D_C
      FROM  [`+DB.(string)+`].[dbo].[`+BUNIT+`_A_SALFLDG] 
      WHERE PERIOD = `+PERIOD+` AND ACCNT_CODE = '811620' AND D_C = 'D' AND ALLOCATION != 'C' AND ANAL_T6 = '`+ER+`' AND ANAL_T9 = 'ASIFIS01'
      order by JRNAL_NO asc`
    rowsD, errDD = conn.Query(queryD)
    if errDD != nil {
      fmt.Println("que paso:", errDD.Error())
    }
    for rowsD.Next()  {
      rowsD.Scan(&DESCRIPTN, &AMOUNT, &D_C)
      DESCRIPTN = strings.ToUpper(strings.TrimSpace(DESCRIPTN))
      amountAbs := math.Abs(AMOUNT.Float64())
      if _, ok := PercepcionesList["2"]; ok {
        PercepcionesList["2"].Cantidad += amountAbs //aguinaldo
      } else {
        PercepcionesList["2"] = &Archivos{DESCRIPTN, amountAbs}
      }
    }
    
    example := map[string]interface{}{ "success":1, "infonavit" : INFONAVITDescuentosList, "anticipo" : OtrosDescuentosList, "otros" : DescuentosList, "percepcionesDepre" : PercepcionesList}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
}

func (c *InsertaCadNominaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    //DB := c.GetSession("DB")
    cad := c.GetString("cad")
    periodo := c.GetString("periodo")
    cantidad := c.GetString("cantidad")
    ER := c.GetString("ER")
    currentTime := c.GetString("currentTime")
    cuantasPercepciones := c.GetString("cuantasPercepciones")
    cuantasDeducciones := c.GetString("cuantasDeducciones")
    cuantasOtrosPagos := c.GetString("cuantasOtrosPagos")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `INSERT INTO [Sevenplus].[dbo].[zNominaFacturas] (manual, ER, cadOriginal,timestamp,periodo,timbrado,cantidad,BUNIT, cuantasPercepciones, cuantasDeducciones, cuantasOtrosPagos)
    VALUES (0,'`+ER+`','`+cad+`',`+currentTime+`,`+periodo+`,0,`+cantidad+`, '`+BUNIT.(string)+`', `+cuantasPercepciones+`, `+cuantasDeducciones+`, `+cuantasOtrosPagos+`)`
    _, errD := conn.Exec(queryD)
    if errD != nil {
      fmt.Println(queryD)
      fmt.Println("que paso ish:", errD.Error())
    }
    queryD = `SELECT UUID, cantidad
      FROM  [Sevenplus].[dbo].[zNominaFacturas] 
      WHERE BUNIT = '`+BUNIT.(string)+`' AND ER = '`+ER+`' AND periodo = `+periodo+` AND timbrado = 1
      order by timestamp asc`
    rowsD, errDD := conn.Query(queryD)
    if errDD != nil {
      fmt.Println("que paso:", errDD.Error())
    }
    uuid := ""
    can := 0.0
    type Archivos struct {
      UUID string
      Cantidad float64
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)
    for rowsD.Next()  {
      rowsD.Scan(&uuid, &can)
      ArchivosList[uuid] = &Archivos{uuid, can}
    }
    example := map[string]interface{}{ "success":1, "facturado" : ArchivosList}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
}



func (c *CambiaEtiquetaDeIngresosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    idLigado := c.GetString("idLigado")
    idEtiqueta := c.GetString("idEtiqueta")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `UPDATE [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco]  
    SET idEtiquetaIngreso = `+idEtiqueta+`
    WHERE idLigado = `+idLigado
    _, errD := conn.Exec(queryD)
    if errD != nil {
      fmt.Println(queryD)
      fmt.Println("que paso ish:", errD.Error())
    }
    example := map[string]interface{}{ "success":1}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
}

func (c *CambiaEtiquetaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    idLigado := c.GetString("idLigado")
    idEtiqueta := c.GetString("idEtiqueta")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `UPDATE [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco]  
    SET idEtiqueta = `+idEtiqueta+`
    WHERE idLigado = `+idLigado
    _, errD := conn.Exec(queryD)
    if errD != nil {
      fmt.Println(queryD)
      fmt.Println("que paso ish:", errD.Error())
    }
    example := map[string]interface{}{ "success":1}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
}


func (c *InfoLibroDiarioController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    DB := c.GetSession("DB")
    diario := c.GetString("diario")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT JRNAL_NO, JRNAL_LINE, ACCNT_CODE, PERIOD, TRANS_DATETIME, AMOUNT, D_C, DESCRIPTN, TREFERENCE
    FROM [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]  
    WHERE JRNAL_NO = `+diario+` order by JRNAL_LINE  asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println(queryD)
      fmt.Println("que paso:", errD.Error())
    }
    JRNAL_NO := 0
    JRNAL_LINE := 0
    ACCNT_CODE := ""
    PERIOD := 0
    var TRANS_DATETIME time.Time
    var AMOUNT decimal.Dec
    DESCRIPTN := ""
    D_C := ""
    TREFERENCE := ""
    models.ClearDiarioBuscarCantidad()
    var cedul  models.DiarioBuscarCantidad
  
    for rowsD.Next()  {
      rowsD.Scan(&JRNAL_NO, &JRNAL_LINE, &ACCNT_CODE, &PERIOD, &TRANS_DATETIME, &AMOUNT, &D_C, &DESCRIPTN, &TREFERENCE)
      fechaReal := ""
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          }
        }
      }
      cedul = models.DiarioBuscarCantidad{JRNAL_NO, JRNAL_LINE, AMOUNT.Float64(), ACCNT_CODE, fechaReal, PERIOD, DESCRIPTN, TREFERENCE}
      llave := strconv.Itoa(JRNAL_NO)+"-"+strconv.Itoa(JRNAL_LINE)
      models.AddDiarioBuscarCantidad(cedul, llave )
    }
    example := map[string]interface{}{ "success":1, "diarios" : models.GetAllDiarioBuscarCantidad()}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func Compare2NoMeAcuerdoParaQue(a, b string) int {
  if a == b {
    return 0
  }
  if a < b {
    return -1
  }
  return +1
} 

func (c *DatosPayrollController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := ""
    BUNITx := c.GetSession("BUNIT")
    BUNIT = BUNITx.(string)
    BTemp := c.GetString("BUNITViejito")
    if BTemp == "" {
    } else {
      BUNIT = c.GetString("BUNITViejito")
    }
    DB := c.GetSession("DB")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryX := `DELETE FROM [Sevenplus].[dbo].[zNominaFacturas] WHERE timbrado = 0 AND BUNIT = '`+BUNIT+`'`
    conn.Exec(queryX)
    
    queryD := `SELECT base
    FROM [Sevenplus].[dbo].[zConfig]  
    WHERE BUNIT = '`+BUNIT+`'`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println(queryD)
      fmt.Println("que paso:", errD.Error())
    }
    base := 0.0
    if rowsD.Next()  {
      rowsD.Scan(&base)
    }
      ///query := "SELECT NAME, ANL_CODE  FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_ANL_CODE] WHERE ANL_CAT_ID = '07' AND (ANL_CODE like 'ER%' OR ANL_CODE like 'R%' OR ANL_CODE like 'ES%') AND PROHIBIT_POSTING = 0 order by ANL_CODE asc"
  //queryXML = "SELECT c.codigoAgrupador, a.ACNT_CODE , a.DESCR, b.ANL_CODE as sub, bb.ANL_CODE as natur FROM [" + Properties.Settings.Default.sunDatabase + "].[dbo].[" + Login.unidadDeNegocioGlobal+ "_ACNT] a INNER JOIN  [" + Properties.Settings.Default.sunDatabase + "].[dbo].[" + Login.unidadDeNegocioGlobal + "_ACNT_ANL_CAT] b on b.ACNT_CODE = a.ACNT_CODE INNER JOIN [" + Properties.Settings.Default.databaseFiscal + "].[dbo].[codigoAgrupadorCuentaSunplus] c on c.ACNT_CODE COLLATE SQL_Latin1_General_CP1_CI_AS  = a.ACNT_CODE INNER JOIN  [" + Properties.Settings.Default.sunDatabase + "].[dbo].[" + Login.unidadDeNegocioGlobal+ "_ACNT_ANL_CAT] bb on bb.ACNT_CODE = a.ACNT_CODE WHERE b.ANL_CAT_ID = 12 AND bb.ANL_CAT_ID = 14";
    
    queryD = `SELECT n.ER, n.correo, n.nombre, n.rfc, n.curp, n.Departamento, ISNULL(n.SDI,0), ISNULL(n.PCENT_Manutencion,0), 
    ISNULL(n.PCENT_Posgrado,0), ISNULL(n.PCENT_Ministerial,0), ISNULL(n.PCENT_Pulpito,0), ISNULL(n.PCENT_Extraordinaria,0), 
    ISNULL(n.ayuda_renta,0), ISNULL(n.unidades_seguro,0),
    ISNULL(n.Renta_Integrada,0), ISNULL(n.Diezmo_Renta,0), ISNULL(n.Casa_Campo,0), ISNULL(n.Renta_Adelantada,0),
    ISNULL(n.PCENT_tiempolabor,0), ISNULL(n.DescontarDiezmoDeRentaAntesDeLaBaseGravable,0) ,  ISNULL(n.PCENT_Extraordinaria_Prima,0),
    ISNULL(n.PCENT_Descuento_Renta,10), ISNULL(n.proyecto,''), n.numEmpleado, n.c_Banco, n.CuentaBancaria, n.c_Estado, ISNULL(n.FechaInicioRelLaboral,''), ISNULL(n.NumSeguridadSocial,'')   
    , ISNULL(n.viajesRegular,0)   
    , ISNULL(n.viajesEspecial,0)   
    , ISNULL(n.viajesEsposa,0)   
    FROM [Sevenplus].[dbo].[nomina]  n
    INNER JOIN [`+DB.(string)+`].[dbo].[`+BUNIT+`_ANL_CODE] a on a.ANL_CODE = n.ER COLLATE SQL_Latin1_General_CP1_CI_AS
    WHERE n.BUNIT = '`+BUNIT+`' AND a.ANL_CAT_ID = '07' AND a.PROHIBIT_POSTING = 0 order by n.ER asc`
/*    if BUNIT == "MG1" {
      queryD = `SELECT n.ER, n.correo, n.nombre, n.rfc, n.curp, n.Departamento, ISNULL(n.SDI,0), ISNULL(n.PCENT_Manutencion,0), 
      ISNULL(n.PCENT_Posgrado,0), ISNULL(n.PCENT_Ministerial,0), ISNULL(n.PCENT_Pulpito,0), ISNULL(n.PCENT_Extraordinaria,0), 
      ISNULL(n.ayuda_renta,0), ISNULL(n.unidades_seguro,0),
      ISNULL(n.Renta_Integrada,0), ISNULL(n.Diezmo_Renta,0), ISNULL(n.Casa_Campo,0), ISNULL(n.Renta_Adelantada,0),
      ISNULL(n.PCENT_tiempolabor,0), ISNULL(n.DescontarDiezmoDeRentaAntesDeLaBaseGravable,0) ,  ISNULL(n.PCENT_Extraordinaria_Prima,0),
      ISNULL(n.PCENT_Descuento_Renta,10), ISNULL(n.proyecto,''), n.numEmpleado, n.c_Banco, n.CuentaBancaria, n.c_Estado, ISNULL(n.FechaInicioRelLaboral,''), ISNULL(n.NumSeguridadSocial,'')   
      FROM [Sevenplus].[dbo].[nomina]  n
      LEFT JOIN [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_ANL_CODE] a on a.ANL_CODE = n.ER COLLATE SQL_Latin1_General_CP1_CI_AS
      WHERE n.BUNIT = '`+BUNIT.(string)+`' order by n.ER asc `
    }
*/    rowsD, errD = conn.Query(queryD)

    if errD != nil {
      fmt.Println(queryD)
      fmt.Println("que paso:", errD.Error())
    }
    Renta_Adelantada := 0
    Casa_Campo := 0
    Diezmo_Renta := 0
    Renta_Integrada := 0
    unidades_seguro := 0
    ayuda_renta := 0.0
    PCENT_Extraordinaria := 0.0
    PCENT_Extraordinaria_Prima := 0.0
    PCENT_Pulpito := 0.0
    PCENT_Ministerial := 0.0
    PCENT_Posgrado := 0.0
    PCENT_tiempolabor := 0.0
    viajesRegular := 0.0
    viajesEspecial := 0.0
    viajesEsposa := 0.0
    ER := ""
    correo := ""
    nombre := ""
    rfc := ""
    curp := ""
    Departamento := ""
    SDI := 0.0
    PCENT_Manutencion := 0.0
    dDDRADLBG := 0
    PCENT_Descuento_Renta := 0
    Proyecto := ""
    num := ""
    Banco := ""
    Estado := ""
    CuentaBancaria := ""
    FechaInicioRelLaboral := ""
    NumSeguridadSocial := ""
    type Payroll struct {
      ER string
      Correo string
      Nombre string
      Rfc string
      Curp string
      Departamento string
      SDI float64
      PCENT_Manutencion  float64
      PCENT_Posgrado float64
      PCENT_Ministerial float64
      PCENT_Pulpito float64
      PCENT_Extraordinaria float64
      Ayuda_renta float64
      Unidades_seguro int
      Renta_Integrada int
      Diezmo_Renta int
      Casa_Campo string
      Renta_Adelantada string
      PCENT_tiempolabor float64
      DescontarDiezmoDeRentaAntesDeLaBaseGravable string
      PCENT_Extraordinaria_Prima float64
      PCENT_Descuento_Renta  int
      Proyecto string
      Num string
      Banco string
      CuentaBancaria string
      Estado string
      FechaInicioRelLaboral string
      NumSeguridadSocial string
      PERIOD int
      ViajesRegular float64
      ViajesEspecial float64
      ViajesEsposa float64
    }
    var (
      PayrollList map[string]*Payroll
    )
    PayrollList = make(map[string]*Payroll)
    var PERIOD int
    for rowsD.Next()  {
      rowsD.Scan(&ER, &correo, &nombre, &rfc, &curp, &Departamento, &SDI, &PCENT_Manutencion,&PCENT_Posgrado, &PCENT_Ministerial, &PCENT_Pulpito, &PCENT_Extraordinaria, &ayuda_renta, &unidades_seguro,&Renta_Integrada, &Diezmo_Renta, &Casa_Campo, &Renta_Adelantada, &PCENT_tiempolabor, &dDDRADLBG, &PCENT_Extraordinaria_Prima, &PCENT_Descuento_Renta, &Proyecto, &num, &Banco, &CuentaBancaria, &Estado, &FechaInicioRelLaboral, &NumSeguridadSocial, &viajesRegular, &viajesEspecial, &viajesEsposa)
      queryX := `SELECT TOP 1 PERIOD FROM
      [`+DB.(string)+`].[dbo].[`+BUNIT+`_A_SALFLDG]
      WHERE ANAL_T6 = '`+ER+`'
      order by PERIOD asc`
      rowsX, errX := conn.Query(queryX)
      if errX != nil {
        fmt.Println(errX) 
        fmt.Println(queryX) 
      }
      
      if rowsX.Next()  {
        rowsX.Scan(&PERIOD)
      }


      DescontarDiezmoDeRentaAntesDeLaBaseGravable := "SI"
      if dDDRADLBG == 0 {
        DescontarDiezmoDeRentaAntesDeLaBaseGravable = "NO"
      }
      casaCampoUnion := "SI"
      if Casa_Campo == 0 {
        casaCampoUnion = "NO"
      }
      rentaA := "SI"
      if Renta_Adelantada == 0 {
        rentaA = "NO"
      }
      PayrollList[ER] = &Payroll{ER, correo, nombre, rfc, curp, Departamento, SDI, PCENT_Manutencion, PCENT_Posgrado, PCENT_Ministerial, PCENT_Pulpito, PCENT_Extraordinaria, ayuda_renta, unidades_seguro,Renta_Integrada, Diezmo_Renta, casaCampoUnion, rentaA, PCENT_tiempolabor, DescontarDiezmoDeRentaAntesDeLaBaseGravable, PCENT_Extraordinaria_Prima, PCENT_Descuento_Renta, Proyecto, num, Banco, CuentaBancaria, Estado, FechaInicioRelLaboral, NumSeguridadSocial, PERIOD, viajesRegular, viajesEspecial, viajesEsposa}
    }

    example := map[string]interface{}{ "success":1, "payroll" : PayrollList, "base" : base}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
func (c *InfoLibroController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    DB := c.GetSession("DB")
    diario := c.GetString("diario")
    linea := c.GetString("linea")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT ACCNT_CODE, PERIOD, TRANS_DATETIME, AMOUNT, D_C, DESCRIPTN, ASSET_IND, ASSET_CODE
    FROM [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]  
    WHERE JRNAL_NO = `+diario+` AND JRNAL_LINE = `+linea
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println(queryD)
      fmt.Println("que paso:", errD.Error())
    }
    ACCNT_CODE := ""
    PERIOD := 0
    var TRANS_DATETIME time.Time
    var AMOUNT decimal.Dec
    DESCRIPTN := ""
    D_C := ""
    ASSET_IND := ""
    ASSET_CODE := ""
    if rowsD.Next()  {
      rowsD.Scan(&ACCNT_CODE, &PERIOD, &TRANS_DATETIME, &AMOUNT, &D_C, &DESCRIPTN, &ASSET_IND, &ASSET_CODE)
      fechaReal := ""
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          }
        }
      }
      example := map[string]interface{}{ "success":1, "ACCNT_CODE" : ACCNT_CODE, "PERIOD" : PERIOD, "fecha" : fechaReal, "cantidad" : AMOUNT.Float64(), "D_C" : D_C, "DESCRIPTN" : DESCRIPTN, "ASSET_IND" : ASSET_IND, "ASSET_CODE" : ASSET_CODE }
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
 
func (c *ModificaPersonaPayrollEmeritosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    
    
    BUNIT := ""
    BUNITx := c.GetSession("BUNIT")

    BUNIT = BUNITx.(string)
    BTemp := c.GetString("BUNITViejito")
    if BTemp == "" {
    } else {
      BUNIT = c.GetString("BUNITViejito")
    }
    



    ER := c.GetString("ER")
    Pension := c.GetString("Pension")
    BonoCondicional := c.GetString("BonoCondicional")
    AyudaDeRenta := c.GetString("AyudaDeRenta")
    BonoDeConyugue := c.GetString("BonoDeConyugue")
    BonoDeNavidad := c.GetString("BonoDeNavidad")
    SeguroDeSobreviviente := c.GetString("SeguroDeSobreviviente")
    Funcion := c.GetString("Funcion")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `UPDATE [Sevenplus].[dbo].[nomina]
      SET PCENT_Manutencion = `+Pension+`,
      PCENT_Posgrado = `+BonoCondicional+`,
      PCENT_Ministerial = `+AyudaDeRenta+`,
      PCENT_Pulpito = `+BonoDeConyugue+`,
      PCENT_Extraordinaria = `+BonoDeNavidad+`,
      ayuda_renta = `+SeguroDeSobreviviente+`,
      proyecto = '`+Funcion+`'
      WHERE ER = '`+ER+`' AND BUNIT = '`+BUNIT+`'`
    conn.Exec(queryD) 
    example := map[string]interface{}{ "success":1}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *ModificaPersonaPayrollController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    ER := c.GetString("ER")
    sueldoPCent := c.GetString("sueldoPCent")
    posgradoPCent := c.GetString("posgradoPCent")
    sobrePcent := c.GetString("sobrePcent")
    deprePcent := c.GetString("deprePcent")
    aguinaldoPcent := c.GetString("aguinaldoPcent")
    RentaIntegrada := c.GetString("RentaIntegrada")
    CasaDeGobierno := c.GetString("CasaDeGobierno")
    CasaAsociacionUnion := c.GetString("CasaAsociacionUnion")
    RentaAdelantada := c.GetString("RentaAdelantada")
    PcentDescRenta := c.GetString("PcentDescRenta")
    Proyecto := c.GetString("Proyecto")

    ViajesRegular := c.GetString("ViajesRegular")
    ViajesEspecial := c.GetString("ViajesEspecial")
    ViajesEsposa := c.GetString("ViajesEsposa")
    casaCampo := "1"
    if CasaAsociacionUnion == "NO" {
      casaCampo = "0"
    }
    rentaA := "1"
    if RentaAdelantada == "NO" {
      rentaA = "0"
    }
    
    descontarDiezmoDeRentaAntesDeLaBaseGravable := c.GetString("descontarDiezmoDeRentaAntesDeLaBaseGravable")
    dDDRADLBG := "1"
    if descontarDiezmoDeRentaAntesDeLaBaseGravable == "NO" {
      dDDRADLBG = "0"
    }
    primaPcent := c.GetString("primaPcent")
    tiempoDeLabor := c.GetString("tiempoDeLabor")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `UPDATE [Sevenplus].[dbo].[nomina]
      SET PCENT_Manutencion = `+sueldoPCent+`, PCENT_Posgrado = `+posgradoPCent+`,
      PCENT_Ministerial = `+sobrePcent+`, PCENT_Pulpito = `+deprePcent+`,
      PCENT_Extraordinaria = `+aguinaldoPcent+`, PCENT_Extraordinaria_Prima  = `+primaPcent+`, PCENT_tiempolabor = `+tiempoDeLabor+`,
      DescontarDiezmoDeRentaAntesDeLaBaseGravable = `+dDDRADLBG+`, Renta_Integrada = `+RentaIntegrada+`,
      ayuda_renta = `+CasaDeGobierno+`, Casa_Campo = `+casaCampo+`, Renta_Adelantada =  `+rentaA+`,
      PCENT_Descuento_Renta = `+PcentDescRenta+`, proyecto = '`+Proyecto+`'
      , viajesRegular = `+ViajesRegular+`
      , viajesEspecial = `+ViajesEspecial+`
      , viajesEsposa = `+ViajesEsposa+`
      WHERE ER = '`+ER+`' AND BUNIT = '`+BUNIT.(string)+`'`
      fmt.Println(queryD)
    conn.Exec(queryD) 
    example := map[string]interface{}{ "success":1}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *CambiarPeriodoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    DB := c.GetSession("DB")
    diario := c.GetString("diario")
    periodoAnterior := c.GetString("periodoAnterior")
    PeriodoNuevo := c.GetString("PeriodoNuevo")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT correoTesorero
    FROM [Sevenplus].[dbo].[zConfig]  
    WHERE BUNIT = '`+BUNIT.(string)+`'`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    correoTesorero := ""
    for rowsD.Next()  {
      rowsD.Scan(&correoTesorero)
      d := gomail.NewDialer("smtp.gmail.com", 587, "alonsopf@gmail.com", "dank_Gott1863")
        m := gomail.NewMessage()
      m.SetHeader("From", "alonsopf@gmail.com")
      correo := c.GetSession("usuario")
      m.SetHeader("To", correo.(string), correoTesorero)
      m.SetHeader("Subject", "Cambio de periodo en el libro mayor, diario: "+diario)
      m.SetBody("text/html", `Estimado Sr. Tesorero.<br><br>
        <br>El diario: `+diario+`, tenia el periodo: <b>`+periodoAnterior+`</b> y ahora tiene el periodo: <b>`+PeriodoNuevo+`</b><br><br>
        <br><br>Favor de no responder este correo.`)
      if err := d.DialAndSend(m); err != nil {
        d = gomail.NewDialer("smtp.gmail.com", 587, "f.pecina@unav.edu.mx", "thanks_God1888")
        m.SetHeader("From", "f.pecina@unav.edu.mx")
        if err := d.DialAndSend(m); err != nil {
          fmt.Println(err.Error())
            example := map[string]interface{}{ "success":-1}
          c.Data["json"] = &example
          c.ServeJSON()
          return
        }
      }
      queryD = `ALTER TABLE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLEX] DROP CONSTRAINT FK_`+BUNIT.(string)+`_0900_01_0901;`
      conn.Exec(queryD) 
      queryD = `ALTER TABLE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG_LAD] DROP CONSTRAINT FK_`+BUNIT.(string)+`_0887_01_0901;`
      conn.Exec(queryD) 
      queryD = `UPDATE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
        SET PERIOD = '`+PeriodoNuevo+`'
        WHERE JRNAL_NO = `+diario
      conn.Exec(queryD)

      queryD = `UPDATE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLEX]
        SET PERIOD = '`+PeriodoNuevo+`'
        WHERE JRNAL_NO = `+diario
      conn.Exec(queryD) 

      queryD = `UPDATE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG_LAD]
        SET PERIOD = '`+PeriodoNuevo+`'
        WHERE JRNAL_NO = `+diario
      conn.Exec(queryD)

      queryD = `ALTER TABLE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLEX] WITH NOCHECK
      ADD CONSTRAINT FK_`+BUNIT.(string)+`_0900_01_0901
      FOREIGN KEY (ACCNT_CODE,PERIOD, TRANS_DATETIME, JRNAL_NO, JRNAL_LINE) REFERENCES  
      [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] (ACCNT_CODE,PERIOD, TRANS_DATETIME, JRNAL_NO, JRNAL_LINE);`
      conn.Exec(queryD) 

      queryD = `ALTER TABLE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG_LAD] WITH NOCHECK
      ADD CONSTRAINT FK_`+BUNIT.(string)+`_0887_01_0901
      FOREIGN KEY (ACCNT_CODE,PERIOD, TRANS_DATETIME, JRNAL_NO, JRNAL_LINE) REFERENCES  
      [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] (ACCNT_CODE,PERIOD, TRANS_DATETIME, JRNAL_NO, JRNAL_LINE);`
      conn.Exec(queryD) 
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *CambiarFechaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    DB := c.GetSession("DB")
    diario := c.GetString("diario")
    fechaAnterior := c.GetString("fechaAnterior")
    FechaNueva := c.GetString("FechaNueva")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT correoTesorero
    FROM [Sevenplus].[dbo].[zConfig]  
    WHERE BUNIT = '`+BUNIT.(string)+`'`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    correoTesorero := ""
    for rowsD.Next()  {
      rowsD.Scan(&correoTesorero)
      d := gomail.NewDialer("smtp.gmail.com", 587, "alonsopf@gmail.com", "dank_Gott1863")
        m := gomail.NewMessage()
      m.SetHeader("From", "alonsopf@gmail.com")
      correo := c.GetSession("usuario")
      m.SetHeader("To", correo.(string), correoTesorero)
      m.SetHeader("Subject", "Cambio de fecha en el libro mayor, diario: "+diario)
      m.SetBody("text/html", `Estimado Sr. Tesorero.<br><br>
        <br>El diario: `+diario+`, tenia la fecha: <b>`+fechaAnterior+`</b> y ahora tiene la cuenta: <b>`+FechaNueva+`</b><br><br>
        <br><br>Favor de no responder este correo.`)
      if err := d.DialAndSend(m); err != nil {
        d = gomail.NewDialer("smtp.gmail.com", 587, "f.pecina@unav.edu.mx", "thanks_God1888")
        m.SetHeader("From", "f.pecina@unav.edu.mx")
        if err := d.DialAndSend(m); err != nil {
          fmt.Println(err.Error())
            example := map[string]interface{}{ "success":-1}
          c.Data["json"] = &example
          c.ServeJSON()
          return
        }
      }
      queryD = `ALTER TABLE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLEX] DROP CONSTRAINT FK_`+BUNIT.(string)+`_0900_01_0901;`
      conn.Exec(queryD) 
      queryD = `ALTER TABLE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG_LAD] DROP CONSTRAINT FK_`+BUNIT.(string)+`_0887_01_0901;`
      conn.Exec(queryD) 
      queryD = `UPDATE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
        SET TRANS_DATETIME = '`+FechaNueva+`'
        WHERE JRNAL_NO = `+diario
      conn.Exec(queryD)

      queryD = `UPDATE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLEX]
        SET TRANS_DATETIME = '`+FechaNueva+`'
        WHERE JRNAL_NO = `+diario
      conn.Exec(queryD) 

      queryD = `UPDATE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG_LAD]
        SET TRANS_DATETIME = '`+FechaNueva+`'
        WHERE JRNAL_NO = `+diario
      conn.Exec(queryD)

      queryD = `ALTER TABLE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLEX] WITH NOCHECK
      ADD CONSTRAINT FK_`+BUNIT.(string)+`_0900_01_0901
      FOREIGN KEY (ACCNT_CODE,PERIOD, TRANS_DATETIME, JRNAL_NO, JRNAL_LINE) REFERENCES  
      [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] (ACCNT_CODE,PERIOD, TRANS_DATETIME, JRNAL_NO, JRNAL_LINE);`
      conn.Exec(queryD) 

      queryD = `ALTER TABLE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG_LAD] WITH NOCHECK
      ADD CONSTRAINT FK_`+BUNIT.(string)+`_0887_01_0901
      FOREIGN KEY (ACCNT_CODE,PERIOD, TRANS_DATETIME, JRNAL_NO, JRNAL_LINE) REFERENCES  
      [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] (ACCNT_CODE,PERIOD, TRANS_DATETIME, JRNAL_NO, JRNAL_LINE);`
      conn.Exec(queryD) 
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *CambiarCuentaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    DB := c.GetSession("DB")
    diario := c.GetString("diario")
    linea := c.GetString("linea")
    cuentaAnterior := c.GetString("cuentaAnterior")
    CuentaNueva := c.GetString("CuentaNueva")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT correoTesorero
    FROM [Sevenplus].[dbo].[zConfig]  
    WHERE BUNIT = '`+BUNIT.(string)+`'`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    correoTesorero := ""
    for rowsD.Next()  {
      rowsD.Scan(&correoTesorero)
      d := gomail.NewDialer("smtp.gmail.com", 587, "alonsopf@gmail.com", "dank_Gott1863")
      m := gomail.NewMessage()
      m.SetHeader("From", "alonsopf@gmail.com")
      correo := c.GetSession("usuario")
      m.SetHeader("To", correo.(string), correoTesorero)
      m.SetHeader("Subject", "Cambio de cuenta en el libro mayor, diario: "+diario+"-"+linea)
      m.SetBody("text/html", `Estimado Sr. Tesorero.<br><br>
        <br>El diario: `+diario+`, linea: `+linea+` tenia la cuenta: <b>`+cuentaAnterior+`</b> y ahora tiene la cuenta: <b>`+CuentaNueva+`</b><br><br>
        <br><br>Favor de no responder este correo.`)
      if err := d.DialAndSend(m); err != nil {
        d = gomail.NewDialer("smtp.gmail.com", 587, "f.pecina@unav.edu.mx", "thanks_God1888")
        m.SetHeader("From", "f.pecina@unav.edu.mx")
        if err := d.DialAndSend(m); err != nil {
          fmt.Println(err.Error())
            example := map[string]interface{}{ "success":-1}
          c.Data["json"] = &example
          c.ServeJSON()
          return
        }
      }
      queryD = `ALTER TABLE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLEX] DROP CONSTRAINT FK_`+BUNIT.(string)+`_0900_01_0901;`
      conn.Exec(queryD) 
      queryD = `ALTER TABLE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG_LAD] DROP CONSTRAINT FK_`+BUNIT.(string)+`_0887_01_0901;`
      conn.Exec(queryD) 
      queryD = `UPDATE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
        SET ACCNT_CODE = '`+CuentaNueva+`'
        WHERE JRNAL_NO = `+diario+` AND JRNAL_LINE = `+linea
      conn.Exec(queryD)

      queryD = `UPDATE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLEX]
        SET ACCNT_CODE = '`+CuentaNueva+`'
        WHERE JRNAL_NO = `+diario+` AND JRNAL_LINE = `+linea
      conn.Exec(queryD) 

      queryD = `UPDATE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG_LAD]
        SET ACCNT_CODE = '`+CuentaNueva+`'
        WHERE JRNAL_NO = `+diario+` AND JRNAL_LINE = `+linea
      conn.Exec(queryD)

      queryD = `ALTER TABLE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLEX] WITH NOCHECK
      ADD CONSTRAINT FK_`+BUNIT.(string)+`_0900_01_0901
      FOREIGN KEY (ACCNT_CODE,PERIOD, TRANS_DATETIME, JRNAL_NO, JRNAL_LINE) REFERENCES  
      [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] (ACCNT_CODE,PERIOD, TRANS_DATETIME, JRNAL_NO, JRNAL_LINE);`
      conn.Exec(queryD) 

      queryD = `ALTER TABLE [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG_LAD] WITH NOCHECK
      ADD CONSTRAINT FK_`+BUNIT.(string)+`_0887_01_0901
      FOREIGN KEY (ACCNT_CODE,PERIOD, TRANS_DATETIME, JRNAL_NO, JRNAL_LINE) REFERENCES  
      [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] (ACCNT_CODE,PERIOD, TRANS_DATETIME, JRNAL_NO, JRNAL_LINE);`
      conn.Exec(queryD) 
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *CreaDetallesParaViejitosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetString("BUNIT")
    //<?xml version="1.0" encoding="UTF-8"?>
    cad := `<SSC><User><Name>ZC1</Name></User><SunSystemsContext><BusinessUnit>`+BUNIT+`</BusinessUnit></SunSystemsContext><Payload>
<AnalysisCodes><AnalysisCode>JPENSI01</AnalysisCode><Name>Pensión de Jubilados</Name><LookupCode>P.Jubila2</LookupCode><ProhibitPosting>0</ProhibitPosting><Status>0</Status><AnalysisCatID><AnlCat_SHead>DTLS</AnlCat_SHead></AnalysisCatID></AnalysisCodes>
<AnalysisCodes><AnalysisCode>JBOCON01</AnalysisCode><Name>Bono condicional de Jubilados</Name><LookupCode>BonoC.Jubila2</LookupCode><ProhibitPosting>0</ProhibitPosting><Status>0</Status><AnalysisCatID><AnlCat_SHead>DTLS</AnlCat_SHead></AnalysisCatID></AnalysisCodes>
<AnalysisCodes><AnalysisCode>JRENTA01</AnalysisCode><Name>Ayuda de renta de Jubilados</Name><LookupCode>A.RentaJubila2</LookupCode><ProhibitPosting>0</ProhibitPosting><Status>0</Status><AnalysisCatID><AnlCat_SHead>DTLS</AnlCat_SHead></AnalysisCatID></AnalysisCodes>
<AnalysisCodes><AnalysisCode>JCONYU01</AnalysisCode><Name>Bono de conyugue de Jubilados</Name><LookupCode>B.CYJubila2</LookupCode><ProhibitPosting>0</ProhibitPosting><Status>0</Status><AnalysisCatID><AnlCat_SHead>DTLS</AnlCat_SHead></AnalysisCatID></AnalysisCodes>
<AnalysisCodes><AnalysisCode>JBONAV01</AnalysisCode><Name>Bono de navidad de Jubilados</Name><LookupCode>BonoNaviJubila2</LookupCode><ProhibitPosting>0</ProhibitPosting><Status>0</Status><AnalysisCatID><AnlCat_SHead>DTLS</AnlCat_SHead></AnalysisCatID></AnalysisCodes>
<AnalysisCodes><AnalysisCode>JSEGVI01</AnalysisCode><Name>Seguro de vida de Jubilados</Name><LookupCode>S.VidaJubila2</LookupCode><ProhibitPosting>0</ProhibitPosting><Status>0</Status><AnalysisCatID><AnlCat_SHead>DTLS</AnlCat_SHead></AnalysisCatID></AnalysisCodes>
<AnalysisCodes><AnalysisCode>JDIEZM01</AnalysisCode><Name>Diezmo de Jubilados</Name><LookupCode>DiezmoJubila2</LookupCode><ProhibitPosting>0</ProhibitPosting><Status>0</Status><AnalysisCatID><AnlCat_SHead>DTLS</AnlCat_SHead></AnalysisCatID></AnalysisCodes>
<AnalysisCodes><AnalysisCode>JISRVI01</AnalysisCode><Name>ISR de Jubilados</Name><LookupCode>ISRJubila2</LookupCode><ProhibitPosting>0</ProhibitPosting><Status>0</Status><AnalysisCatID><AnlCat_SHead>DTLS</AnlCat_SHead></AnalysisCatID></AnalysisCodes>
<AnalysisCodes><AnalysisCode>AUEMERI01</AnalysisCode><Name>AU EMERI Jubilados</Name><LookupCode>AUJubila2</LookupCode><ProhibitPosting>0</ProhibitPosting><Status>0</Status><AnalysisCatID><AnlCat_SHead>FNCT</AnlCat_SHead></AnalysisCatID></AnalysisCodes>
</Payload></SSC>`
    soap, err := gosoap.SoapClient("http://localhost:8080/connect/wsdl/SecurityProvider?wsdl","http://localhost:8080/connect/soap/SecurityProvider")
    if err != nil {
      fmt.Errorf("error not expected: %s", err)
    }
    params := gosoap.Params{
      "name": "ZC1",
      "password" : "",
    }
    err = soap.Call("Authenticate", "SecurityProviderAuthenticateRequest", params)
    if err != nil {
      fmt.Println("Error: corre en circulos")
    }
    vaucher := soap.GetResponse()
    fmt.Println(vaucher)
    soapJournal, err := gosoap.SoapClient("http://localhost:8080/connect/wsdl/ComponentExecutor?wsdl","http://localhost:8080/connect/soap/ComponentExecutor")
    if err != nil {
      fmt.Errorf("error not expected: %s", err)
    }
    params = gosoap.Params{
      "authentication": vaucher,
      "licensing" : "",
      "component" : "AnalysisCodes",
      "method" : "CreateOrAmend",
      "group" : "",
      "payload" : cad,
    }
    err = soapJournal.Call("Execute", "ComponentExecutorExecuteRequest", params)
    if err != nil {
      fmt.Errorf("error in soap call: %s", err)
    }
    diarioContabilizado := soapJournal.GetResponse()
    fmt.Println(diarioContabilizado)  

    example := map[string]interface{}{ "success":1, "resultado" : diarioContabilizado}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *DameCorreoDelTesoreroController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT correoTesorero
    FROM [Sevenplus].[dbo].[zConfig]  
    WHERE BUNIT = '`+BUNIT.(string)+`'`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    correoTesorero := ""
    for rowsD.Next()  {
      rowsD.Scan(&correoTesorero)
    }
    example := map[string]interface{}{ "success":1, "correoTesorero" : correoTesorero}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *DameEtiquetasController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := `SELECT e.idEtiqueta, e.etiqueta, ISNULL(l.RFC,''), ISNULL(l.idLigadoRFC,0)
    FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zEtiquetas]  e
    LEFT JOIN [Sevenplus].[dbo].[`+BUNIT.(string)+`_zLigadoRFC]  l on l.idEtiqueta = e.idEtiqueta
    WHERE e.BUNIT = '`+BUNIT.(string)+`' order by e.idEtiqueta asc`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    idLigadoRFC := 0
    idEtiqueta := 0
    etiqueta := ""
    palabra := ""
    //models.ClearEtiquetas()
    //var cedul models.Etiquetas
    type Palabras struct {
      IdLigadoRFC string
      Palabra string
    }
    type Etiquetas struct {
      IdEtiqueta string
      Etiqueta string
      PalabrasList  map[string]*Palabras
    }
    var (
      EtiquetasList map[string]*Etiquetas
    )
    EtiquetasList = make(map[string]*Etiquetas)
    var etiquetaActual *Etiquetas
    for rowsD.Next()  {
      rowsD.Scan(&idEtiqueta, &etiqueta, &palabra, &idLigadoRFC)
      if _, ok := EtiquetasList[strconv.Itoa(idEtiqueta)]; ok {
      } else {
        EtiquetasList[strconv.Itoa(idEtiqueta)] = &Etiquetas{ strconv.Itoa(idEtiqueta), etiqueta, make(map[string]*Palabras)}
        //cedul = models.Etiquetas{ strconv.Itoa(idEtiqueta), etiqueta, make(map[string]*models.Palabras)}
        //models.AddEtiquetas(cedul, strconv.Itoa(idEtiqueta))
      }
      etiquetaActual = EtiquetasList[strconv.Itoa(idEtiqueta)]
      if _, ok := etiquetaActual.PalabrasList[strconv.Itoa(idLigadoRFC)]; ok {
        } else {
        var Liga Palabras
        Liga = Palabras{strconv.Itoa(idLigadoRFC),palabra}
        etiquetaActual.PalabrasList[strconv.Itoa(idLigadoRFC)] = &Liga
      }
    }
    example := map[string]interface{}{ "success":1, "etiquetas" : EtiquetasList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *ObtenArchivosBancoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    files, _ := ioutil.ReadDir("static/bancos/csv")
    //models.ClearArchivos()
    //var cedul models.Archivos
    type Archivos struct {
      Nombre string
      Completo string
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)

      for _, f := range files {
          Nombre := f.Name()
          Completo := "static/bancos/csv/"+f.Name()
          ArchivosList[Nombre] = &Archivos{Nombre, Completo}
          //cedul = models.Archivos{Nombre, Completo}
      //models.AddArchivos(cedul, Nombre)
    }
    example := map[string]interface{}{ "success":1, "archivos" : ArchivosList}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
func Subsana(a string) string {
  b := []byte(a)
  b = bytes.Trim(b, "\x00")
  n:=len(b)
  cuantosCaracteres := len(b)
  for i := 0; i < cuantosCaracteres; i++ {
    byteA := string(b[i])
    if byteA!="0" && byteA!="1" && byteA!="2" && byteA!="3" && byteA!="4" && byteA!="5" && byteA!="6" && byteA!="7" && byteA!="8" && byteA!="9" && byteA!="." && byteA!="-"{
      n = i
      break
    }
  }
  s := string(b[:n])
  bb := []byte(s)
  bb = bytes.Trim(bb, "\x00")
  n = 0
  cuantosCaracteres = len(bb)-1
  for i := cuantosCaracteres; i > 0; i-- {
    byteA := string(bb[i])
    if byteA!="0" && byteA!="1" && byteA!="2" && byteA!="3" && byteA!="4" && byteA!="5" && byteA!="6" && byteA!="7" && byteA!="8" && byteA!="9" && byteA!="." && byteA!="-" {
      n = i
      break
    }
  }
  ss := string(bb[n:])
  if ss=="-" {
    ss = "0"
  }
  return ss
}

func (c *ProcesaArchivosBancomerController) Post() {
  //santander
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    Archivo := "C:/csv/"+c.GetString("archivo")
    arreglo := strings.Split(c.GetString("archivo"), ".")
    cuenta := arreglo[0]
    monedaGlobal := "MXN"
    if strings.Contains(cuenta, "_USD") {
      monedaGlobal = "USD"
      arreglo = strings.Split(cuenta, "_USD")
      cuenta = arreglo[0]
    }


    queryDeterminarCuenta := `SELECT cuenta FROM [Sevenplus].[dbo].[zNombreCuentas]
    WHERE nombre like '%`+cuenta+`%'`
    rowsD, _ := conn.Query(queryDeterminarCuenta)
    if rowsD.Next()  {
      rowsD.Scan(&cuenta)
    }

    f, _ := os.Open(Archivo)
    r := csv.NewReader(bufio.NewReader(f))
    r.TrimLeadingSpace = true
    r.LazyQuotes = true
      STATUS := "1"
      cuantosExitosos := 0
      //cuantosExistian := 0
      cuantosFecha := 0
      cuantosErrores := 0
      I:=0
      r.Read()
       for {
      record, err := r.Read()
      // Stop at EOF.
      if err == io.EOF {
          break
      }
      STATUS = "1"//gastos
      cuantasColumnas:= len(record)
      if cuantasColumnas < 4 {
        cuantosErrores++
        fmt.Println(strconv.Itoa(cuantasColumnas)+"-"+strconv.Itoa(I))
      }     
      I++
      fecha := strings.TrimSpace(record[0])
      referencia := ""

      cargo := record[2]
      cargo = strings.Replace(cargo, ",", "", -1)
      cargo = strings.Replace(cargo, `"`, "", -1)
      cargo = strings.Replace(cargo, "'", "", -1)
      cargo = strings.Replace(cargo, "?", "", -1)
      cargo = strings.TrimSpace(cargo)
      cargo = Subsana(cargo)

      abono := record[3]
      abono = strings.Replace(abono, ",", "", -1)
      abono = strings.Replace(abono, `"`, "", -1)
      abono = strings.Replace(abono, "'", "", -1)
      abono = strings.Replace(abono, "?", "", -1)
      abono = strings.TrimSpace(abono)
      abono = Subsana(abono)
      importe := ""
      if cargo == "" {
        STATUS = "2" // ingreso
        importe = abono
      } else {
        STATUS = "1" // egreso
        importe = cargo
      }

      
      saldo := record[4]
      saldo = strings.Replace(saldo, ",", "", -1)
      saldo = strings.Replace(saldo, "\"", "", -1)
      saldo = fmt.Sprintf("%s", saldo)
      saldo = strings.Replace(saldo, "?", "", -1)
      saldo = strings.TrimSpace(saldo)
      saldo = Subsana(saldo)
      if saldo == "" {
        saldo = "0"
      }
            
      descripcion := strings.TrimSpace(record[1])
      descripcion = strings.Replace(descripcion, ",", "", -1)
      descripcion = strings.Replace(descripcion, "'", "", -1)
      cuantosLen := len(record)
      leyenda1 := ""
      leyenda2 := ""
      if cuantosLen > 8 {
        leyenda1 = strings.TrimSpace(record[7])
        leyenda1 = strings.Replace(leyenda1, ",", "", -1)
        leyenda1 = strings.Replace(leyenda1, "'", "", -1)
        leyenda2 = strings.TrimSpace(record[8])
        leyenda2 = strings.Replace(leyenda2, ",", "", -1)
        leyenda2 = strings.Replace(leyenda2, "'", "", -1)
      } 
      if Compare(fecha,"") != 0 {
        caracteres := len(fecha)
        
        if caracteres == 10 {
          aux := fecha[0:6]
          aux2 := fecha[8:10]
          fecha = aux+aux2
          caracteres = len(fecha)
        }
        
        query := `INSERT INTO [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancosPrima]
            (CuentaPropia, fecha, descripcion, cuenta, importe, STATUS, referencia, saldo, leyenda1, leyenda2, BUNIT, timbrado)
            VALUES(0, '`+fecha+`','`+descripcion+`','`+cuenta+`',`+importe+`,'`+STATUS+`','`+referencia+`',`+saldo+`,'`+leyenda1+`','`+leyenda2+`','`+BUNIT.(string)+`', 0)`
        if caracteres == 8 {
          if strings.Contains(fecha, "/") {
            _ , err1 := conn.Exec(query)
            if err1 != nil {
              cuantosErrores++
              fmt.Println(query)
            } else {
              cuantosExitosos++
            }
          } else {
            cuantosFecha++
            fmt.Println(query)
          }
        } else {
          cuantosFecha++
          fmt.Println(query)
        }
          
      }
      }
      f.Close()
     /* err := os.Remove(Archivo)
      if err != nil {
          fmt.Println(err)
          return
        }*/
        if cuantosErrores == 0 && cuantosFecha == 0 && cuantosExitosos > 0 {
          cuantosExitosos = 0
          ff, _ := os.Open(Archivo)
      rr := csv.NewReader(bufio.NewReader(ff))
      rr.TrimLeadingSpace = true
      rr.LazyQuotes = true
      rr.Read()
      for {
        record, err := rr.Read()
        // Stop at EOF.
        if err == io.EOF {
            break
        }
        fecha := strings.TrimSpace(record[0])
        referencia := ""
        cargo := record[2]
        cargo = strings.Replace(cargo, ",", "", -1)
        cargo = strings.Replace(cargo, `"`, "", -1)
        cargo = strings.Replace(cargo, "'", "", -1)
        cargo = strings.Replace(cargo, "?", "", -1)
        cargo = strings.TrimSpace(cargo)
        cargo = Subsana(cargo)

        abono := record[3]
        abono = strings.Replace(abono, ",", "", -1)
        abono = strings.Replace(abono, `"`, "", -1)
        abono = strings.Replace(abono, "'", "", -1)
        abono = strings.Replace(abono, "?", "", -1)
        abono = strings.TrimSpace(abono)
        abono = Subsana(abono)
        importe := ""
        if cargo == "" {
          STATUS = "2" // ingreso
          importe = abono
        } else {
          STATUS = "1" // egreso
          importe = cargo
        }

        
        saldo := record[4]
        saldo = strings.Replace(saldo, ",", "", -1)
        saldo = strings.Replace(saldo, "\"", "", -1)
        saldo = fmt.Sprintf("%s", saldo)
        saldo = strings.Replace(saldo, "?", "", -1)
        saldo = strings.TrimSpace(saldo)
        saldo = Subsana(saldo)
        if saldo == "" {
          saldo = "0"
        }
        
        descripcion := strings.TrimSpace(record[1])
        descripcion = strings.Replace(descripcion, ",", "", -1)
        descripcion = strings.Replace(descripcion, "'", "", -1)
        leyenda1 := ""
        leyenda2 := ""
        cuantosLen := len(record)
      
        if cuantosLen > 8 {
          leyenda1 = strings.TrimSpace(record[7])
          leyenda1 = strings.Replace(leyenda1, ",", "", -1)
          leyenda1 = strings.Replace(leyenda1, "'", "", -1)
          leyenda2 = strings.TrimSpace(record[8])
          leyenda2 = strings.Replace(leyenda2, ",", "", -1)
          leyenda2 = strings.Replace(leyenda2, "'", "", -1)
        }
        if Compare(fecha,"") != 0 {
          caracteres := len(fecha)
          dia := fecha[0:2]
        mes := fecha[3:5]
          if caracteres == 10 {
            aux := fecha[0:6]
            aux2 := fecha[8:10]
            fecha = aux+aux2
            caracteres = len(fecha)
          }
          moneda := monedaGlobal
        if moneda == "USD" {
          queryDeterminarTipoDeCambio := `SELECT tipoDeCambio FROM [Sevenplus].[dbo].[zTipoDeCambio]
          WHERE fecha = '`+fecha+`'`
          fmt.Println(queryDeterminarTipoDeCambio)
          rowsD, _ := conn.Query(queryDeterminarTipoDeCambio)
          tipoDeCambio := 0.0
          if rowsD.Next()  {
            rowsD.Scan(&tipoDeCambio)
            cantidadFloat, _ := strconv.ParseFloat(importe, 64)
            auxF := tipoDeCambio * cantidadFloat
            moneda = "MXN"
            tipoDeCambio = 1.0
            importe = fmt.Sprintf("%.2f",auxF)
          } else {
            if dia == "01" {
              dia = "32"
            }
            queryDeterminarTipoDeCambio := `SELECT TOP 1 tipoDeCambio  FROM [Sevenplus].[dbo].[zTipoDeCambio]
WHERE SUBSTRING(fecha,1,2) < '`+dia+`' AND SUBSTRING(fecha,4,2) <= '`+mes+`' order by fecha desc`
fmt.Println(queryDeterminarTipoDeCambio)
            rowsD, _ := conn.Query(queryDeterminarTipoDeCambio)
            tipoDeCambio := 0.0
            if rowsD.Next()  {
              rowsD.Scan(&tipoDeCambio)
              cantidadFloat, _ := strconv.ParseFloat(importe, 64)
              auxF := tipoDeCambio * cantidadFloat
              moneda = "MXN"
              tipoDeCambio = 1.0
              importe = fmt.Sprintf("%.2f",auxF)
            } 
          }
        }
          query := `INSERT INTO [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
              (CuentaPropia, fecha, descripcion, cuenta, importe, STATUS, referencia, saldo, leyenda1, leyenda2, BUNIT, timbrado, Moneda)
              VALUES(0, '`+fecha+`','`+descripcion+`','`+cuenta+`',`+importe+`,'`+STATUS+`','`+referencia+`',`+saldo+`,'`+leyenda1+`','`+leyenda2+`','`+BUNIT.(string)+`', 0, '`+moneda+`')`
          if caracteres == 8 {
            if strings.Contains(fecha, "/") {
              _ , err1 := conn.Exec(query)
              if err1 != nil {
                cuantosErrores++
                fmt.Println(query)
              } else {
                cuantosExitosos++
              }
            } else {
              cuantosFecha++
              fmt.Println(query)
            }
          } else {
            cuantosFecha++
            fmt.Println(query)
          }
            
        }
        }
        ff.Close()
        example := map[string]interface{}{ "success":1, "errores" : cuantosErrores, "exitosos" : cuantosExitosos, "fecha" : cuantosFecha}
      c.Data["json"] = &example
      c.ServeJSON() 
      } else {
        example := map[string]interface{}{ "success":2, "errores" : cuantosErrores, "exitosos" : cuantosExitosos, "fecha" : cuantosFecha}
      c.Data["json"] = &example
      c.ServeJSON() 
      }
    
  }
}

func (c *ProcesaArchivosSantanderController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    Archivo := "C:/csv/"+c.GetString("archivo")
    arreglo := strings.Split(c.GetString("archivo"), ".")
    cuenta := arreglo[0]


    monedaGlobal := "MXN"
    if strings.Contains(cuenta, "_USD") {
      monedaGlobal = "USD"
      arreglo = strings.Split(cuenta, "_USD")
      cuenta = arreglo[0]
    }

    f, _ := os.Open(Archivo)
    r := csv.NewReader(bufio.NewReader(f))
    r.TrimLeadingSpace = true
    r.LazyQuotes = true
      STATUS := "1"
      cuantosExitosos := 0
      //cuantosExistian := 0
      cuantosFecha := 0
      cuantosErrores := 0
      I:=0
      for {
      record, err := r.Read()
      // Stop at EOF.
      if I == 0 {
        record, err = r.Read()
      }
      if err == io.EOF {
          break
      }
      STATUS = "1"//gastos
      cuantasColumnas:= len(record)
      if cuantasColumnas < 6 {
        cuantosErrores++
        fmt.Println(strconv.Itoa(cuantasColumnas)+"-"+strconv.Itoa(I))
      }     
      I++
      cuenta := strings.TrimSpace(record[0])
      cuenta = strings.Replace(cuenta, ",", "", -1)
      fecha := strings.TrimSpace(record[1])
      referencia := strings.TrimSpace(record[8])
      referencia = strings.Replace(referencia, ",", "", -1)
      importe := record[6]
      importe = strings.Replace(importe, ",", "", -1)
      importe = strings.Replace(importe, `"`, "", -1)
      importe = strings.Replace(importe, "'", "", -1)
      importe = strings.Replace(importe, "?", "", -1)
      importe = strings.TrimSpace(importe)
      importe = Subsana(importe)

      
      saldo := record[7]
      saldo = strings.Replace(saldo, ",", "", -1)
      saldo = strings.Replace(saldo, "\"", "", -1)
      saldo = fmt.Sprintf("%s", saldo)
      saldo = strings.Replace(saldo, "?", "", -1)
      saldo = strings.TrimSpace(saldo)
      saldo = Subsana(saldo)
      if saldo == "" {
        saldo = "0"
      }
            
      descripcion := strings.TrimSpace(record[4])
      descripcion = strings.Replace(descripcion, ",", "", -1)
      descripcion = strings.Replace(descripcion, "'", "", -1)
      cuantosLen := len(record)
      leyenda1 := ""
      leyenda2 := ""
      if cuantosLen > 8 {
        leyenda1 = strings.TrimSpace(record[9])
        leyenda1 = strings.Replace(leyenda1, ",", "", -1)
        leyenda1 = strings.Replace(leyenda1, "'", "", -1)
      } 
      if Compare(strings.TrimSpace(record[5]),"+") == 0 {
        STATUS = "2"//ingresos
      }
      if Compare(cuenta,"") != 0 {
        caracteres := len(fecha)
        
        if caracteres == 8 {
          dia := fecha[0:2]
          mes := fecha[2:4]
          anio := fecha[6:]
          fecha = dia+"/"+mes+"/"+anio
          caracteres = len(fecha)
        }
        
        
        query := `INSERT INTO [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancosPrima]
            (CuentaPropia, fecha, descripcion, cuenta, importe, STATUS, referencia, saldo, leyenda1, leyenda2, BUNIT, timbrado)
            VALUES(0, '`+fecha+`','`+descripcion+`','`+cuenta+`',`+importe+`,'`+STATUS+`','`+referencia+`',`+saldo+`,'`+leyenda1+`','`+leyenda2+`','`+BUNIT.(string)+`', 0)`
        if caracteres == 8 {
          if strings.Contains(fecha, "/") {
            _ , err1 := conn.Exec(query)
            if err1 != nil {
              cuantosErrores++
              fmt.Println(query)
            } else {
              cuantosExitosos++
            }
          } else {
            cuantosFecha++
            fmt.Println(query)
          }
        } else {
          cuantosFecha++
          fmt.Println(query)
        }
          
      }
      }
      f.Close()
     /* err := os.Remove(Archivo)
      if err != nil {
          fmt.Println(err)
          return
        }*/
        if cuantosErrores == 0 && cuantosFecha == 0 && cuantosExitosos > 0 {
          cuantosExitosos = 0
          ff, _ := os.Open(Archivo)
      rr := csv.NewReader(bufio.NewReader(ff))
      rr.TrimLeadingSpace = true
      rr.LazyQuotes = true
      I := 0
      for {
        record, err := rr.Read()
        // Stop at EOF.
        if I == 0 {
          record, err = rr.Read()
        }
        if err == io.EOF {
            break
        }
        I++
        STATUS = "1"//gastos
        cuenta := strings.TrimSpace(record[0])
        cuenta = strings.Replace(cuenta, ",", "", -1)
        fecha := strings.TrimSpace(record[1])
        referencia := strings.TrimSpace(record[8])
        referencia = strings.Replace(referencia, ",", "", -1)
        importe := record[6]
        importe = strings.Replace(importe, ",", "", -1)
        importe = strings.Replace(importe, `"`, "", -1)
        importe = strings.Replace(importe, "'", "", -1)
        importe = strings.Replace(importe, "?", "", -1)
        importe = strings.TrimSpace(importe)
        importe = Subsana(importe)

        
        saldo := record[7]
        saldo = strings.Replace(saldo, ",", "", -1)
        saldo = strings.Replace(saldo, "\"", "", -1)
        saldo = fmt.Sprintf("%s", saldo)
        saldo = strings.Replace(saldo, "?", "", -1)
        saldo = strings.TrimSpace(saldo)
        saldo = Subsana(saldo)
        if saldo == "" {
          saldo = "0"
        }
        
        descripcion := strings.TrimSpace(record[4])
        descripcion = strings.Replace(descripcion, ",", "", -1)
        descripcion = strings.Replace(descripcion, "'", "", -1)
        leyenda1 := ""
        leyenda2 := ""
        cuantosLen := len(record)
      
        if cuantosLen > 8 {
          leyenda1 = strings.TrimSpace(record[9])
          leyenda1 = strings.Replace(leyenda1, ",", "", -1)
          leyenda1 = strings.Replace(leyenda1, "'", "", -1)
        }
        if Compare(strings.TrimSpace(record[5]),"+") == 0  {
          STATUS = "2"//ingresos
        }
        if Compare(cuenta,"") != 0 {
          caracteres := len(fecha)
          dia := ""
          mes := ""
          if caracteres == 8 {
            dia = fecha[0:2]
            mes = fecha[2:4]
            anio := fecha[6:]
            fecha = dia+"/"+mes+"/"+anio
            caracteres = len(fecha)
          }
          moneda := monedaGlobal
        if moneda == "USD" {
          queryDeterminarTipoDeCambio := `SELECT tipoDeCambio FROM [Sevenplus].[dbo].[zTipoDeCambio]
          WHERE fecha = '`+fecha+`'`
          rowsD, _ := conn.Query(queryDeterminarTipoDeCambio)
          tipoDeCambio := 0.0
          if rowsD.Next()  {
            rowsD.Scan(&tipoDeCambio)
            cantidadFloat, _ := strconv.ParseFloat(importe, 64)
            auxF := tipoDeCambio * cantidadFloat
            moneda = "MXN"
            tipoDeCambio = 1.0
            importe = fmt.Sprintf("%.2f",auxF)
          } else {
            if dia == "01" {
              dia = "32"
            }
            queryDeterminarTipoDeCambio := `SELECT TOP 1 tipoDeCambio  FROM [Sevenplus].[dbo].[zTipoDeCambio]
WHERE SUBSTRING(fecha,1,2) < '`+dia+`' AND SUBSTRING(fecha,4,2) <= '`+mes+`' order by fecha desc`
            rowsD, _ := conn.Query(queryDeterminarTipoDeCambio)
            tipoDeCambio := 0.0
            if rowsD.Next()  {
              rowsD.Scan(&tipoDeCambio)
              cantidadFloat, _ := strconv.ParseFloat(importe, 64)
              auxF := tipoDeCambio * cantidadFloat
              moneda = "MXN"
              tipoDeCambio = 1.0
              importe = fmt.Sprintf("%.2f",auxF)
            } 

          }
        }
          query := `INSERT INTO [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
              (CuentaPropia, fecha, descripcion, cuenta, importe, STATUS, referencia, saldo, leyenda1, leyenda2, BUNIT, timbrado, Moneda)
              VALUES(0, '`+fecha+`','`+descripcion+`','`+cuenta+`',`+importe+`,'`+STATUS+`','`+referencia+`',`+saldo+`,'`+leyenda1+`','`+leyenda2+`','`+BUNIT.(string)+`', 0, '`+moneda+`')`
          if caracteres == 8 {
            if strings.Contains(fecha, "/") {
              _ , err1 := conn.Exec(query)
              if err1 != nil {
                cuantosErrores++
                fmt.Println(query)
              } else {
                cuantosExitosos++
              }
            } else {
              cuantosFecha++
              fmt.Println(query)
            }
          } else {
            cuantosFecha++
            fmt.Println(query)
          }
            
        }
        }
        ff.Close()
        example := map[string]interface{}{ "success":1, "errores" : cuantosErrores, "exitosos" : cuantosExitosos, "fecha" : cuantosFecha}
      c.Data["json"] = &example
      c.ServeJSON() 
      } else {
        example := map[string]interface{}{ "success":2, "errores" : cuantosErrores, "exitosos" : cuantosExitosos, "fecha" : cuantosFecha}
      c.Data["json"] = &example
      c.ServeJSON() 
      }
    
  }
}

func (c *ProcesaArchivosBancoTipoDeCambioController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    Archivo := "C:/csv/"+c.GetString("archivo")
    f, _ := os.Open(Archivo)
    r := csv.NewReader(bufio.NewReader(f))
    r.TrimLeadingSpace = true
    r.LazyQuotes = true
      I:=0
      queryReciclado := ""
      anioS := "" // no determinado
      for {
      record, err := r.Read()
      // Stop at EOF.
      if err == io.EOF {
          break
      }
      I++
      if I == 1 {
        aux1 := strings.TrimSpace(record[1])
        arreglo := strings.Split(aux1, " ")
        cuantos := len(arreglo)
        anioS = arreglo[cuantos-1]
        //anioS = anioS[2:]
      }
      if I >= 3 {
        dia, _ := strconv.Atoi(record[0])
        if dia > 0 {
          enero := record[1]
          febrero := record[2]
          marzo := record[3]
          abril := record[4]
          mayo := record[5]
          junio := record[6]
          julio := record[7]
          agosto := record[8]
          septiembre := record[9]
          octubre := record[10]
          noviembre := record[11]
          diciembre := record[12]
          diaS := strconv.Itoa(dia)
          if dia < 10 {
            diaS = "0"+diaS
          }
          if enero != "" {
            fecha := diaS + "/01/" + anioS
            queryReciclado = `INSERT INTO [Sevenplus].[dbo].[zTipoDeCambio] (fecha, tipoDeCambio)
            VALUES ('`+fecha+`', `+enero+`)`
            conn.Exec(queryReciclado)
          }
          if febrero != "" {
            fecha := diaS + "/02/" + anioS
            queryReciclado = `INSERT INTO [Sevenplus].[dbo].[zTipoDeCambio] (fecha, tipoDeCambio)
            VALUES ('`+fecha+`', `+febrero+`)`
            conn.Exec(queryReciclado)
          }
          if marzo != "" {
            fecha := diaS + "/03/" + anioS
            queryReciclado = `INSERT INTO [Sevenplus].[dbo].[zTipoDeCambio] (fecha, tipoDeCambio)
            VALUES ('`+fecha+`', `+marzo+`)`
            conn.Exec(queryReciclado)
          }
          if abril != "" {
            fecha := diaS + "/04/" + anioS
            queryReciclado = `INSERT INTO [Sevenplus].[dbo].[zTipoDeCambio] (fecha, tipoDeCambio)
            VALUES ('`+fecha+`', `+abril+`)`
            conn.Exec(queryReciclado)
          }
          if mayo != "" {
            fecha := diaS + "/05/" + anioS
            queryReciclado = `INSERT INTO [Sevenplus].[dbo].[zTipoDeCambio] (fecha, tipoDeCambio)
            VALUES ('`+fecha+`', `+mayo+`)`
            conn.Exec(queryReciclado)
          }
          if junio != "" {
            fecha := diaS + "/06/" + anioS
            queryReciclado = `INSERT INTO [Sevenplus].[dbo].[zTipoDeCambio] (fecha, tipoDeCambio)
            VALUES ('`+fecha+`', `+junio+`)`
            conn.Exec(queryReciclado)
          }
          if julio != "" {
            fecha := diaS + "/07/" + anioS
            queryReciclado = `INSERT INTO [Sevenplus].[dbo].[zTipoDeCambio] (fecha, tipoDeCambio)
            VALUES ('`+fecha+`', `+julio+`)`
            conn.Exec(queryReciclado)
          }
          if agosto != "" {
            fecha := diaS + "/08/" + anioS
            queryReciclado = `INSERT INTO [Sevenplus].[dbo].[zTipoDeCambio] (fecha, tipoDeCambio)
            VALUES ('`+fecha+`', `+agosto+`)`
            conn.Exec(queryReciclado)
          }
          if septiembre != "" {
            fecha := diaS + "/09/" + anioS
            queryReciclado = `INSERT INTO [Sevenplus].[dbo].[zTipoDeCambio] (fecha, tipoDeCambio)
            VALUES ('`+fecha+`', `+septiembre+`)`
            conn.Exec(queryReciclado)
          }
          if octubre != "" {
            fecha := diaS + "/10/" + anioS
            queryReciclado = `INSERT INTO [Sevenplus].[dbo].[zTipoDeCambio] (fecha, tipoDeCambio)
            VALUES ('`+fecha+`', `+octubre+`)`
            conn.Exec(queryReciclado)
          }
          if noviembre != "" {
            fecha := diaS + "/11/" + anioS
            queryReciclado = `INSERT INTO [Sevenplus].[dbo].[zTipoDeCambio] (fecha, tipoDeCambio)
            VALUES ('`+fecha+`', `+noviembre+`)`
            conn.Exec(queryReciclado)
          }
          if diciembre != "" {
            fecha := diaS + "/12/" + anioS
            queryReciclado = `INSERT INTO [Sevenplus].[dbo].[zTipoDeCambio] (fecha, tipoDeCambio)
            VALUES ('`+fecha+`', `+diciembre+`)`
            conn.Exec(queryReciclado)
          }
        }
      }
      }
      f.Close()
    example := map[string]interface{}{ "success":1}
    c.Data["json"] = &example
    c.ServeJSON() 
    } else {
      example := map[string]interface{}{ "success":2}
    c.Data["json"] = &example
    c.ServeJSON() 
    }
}

func (c *ProcesaArchivosBancoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    Archivo := "C:/csv/"+c.GetString("archivo")
    f, _ := os.Open(Archivo)
    r := csv.NewReader(bufio.NewReader(f))
    r.TrimLeadingSpace = true
    r.LazyQuotes = true
      STATUS := "1"
      cuantosExitosos := 0
      //cuantosExistian := 0
      cuantosFecha := 0
      cuantosErrores := 0
      I:=0
      for {
      record, err := r.Read()
      // Stop at EOF.
      if err == io.EOF {
          break
      }
      STATUS = "1"//gastos
      cuantasColumnas:= len(record)
      if cuantasColumnas < 6 {
        cuantosErrores++
        fmt.Println(strconv.Itoa(cuantasColumnas)+"-"+strconv.Itoa(I))
      }     
      I++
      cuenta := strings.TrimSpace(record[0])
      cuenta = strings.Replace(cuenta, ",", "", -1)
      fecha := strings.TrimSpace(record[1])
      referencia := strings.TrimSpace(record[2])
      referencia = strings.Replace(referencia, ",", "", -1)
      importe := record[3]
      importe = strings.Replace(importe, ",", "", -1)
      importe = strings.Replace(importe, `"`, "", -1)
      importe = strings.Replace(importe, "'", "", -1)
      importe = strings.Replace(importe, "?", "", -1)
      importe = strings.TrimSpace(importe)
      importe = Subsana(importe)

      
      saldo := record[5]
      saldo = strings.Replace(saldo, ",", "", -1)
      saldo = strings.Replace(saldo, "\"", "", -1)
      saldo = fmt.Sprintf("%s", saldo)
      saldo = strings.Replace(saldo, "?", "", -1)
      saldo = strings.TrimSpace(saldo)
      saldo = Subsana(saldo)
      if saldo == "" {
        saldo = "0"
      }
            
      descripcion := strings.TrimSpace(record[6])
      descripcion = strings.Replace(descripcion, ",", "", -1)
      descripcion = strings.Replace(descripcion, "'", "", -1)
      cuantosLen := len(record)
      leyenda1 := ""
      leyenda2 := ""
      if cuantosLen > 8 {
        leyenda1 = strings.TrimSpace(record[7])
        leyenda1 = strings.Replace(leyenda1, ",", "", -1)
        leyenda1 = strings.Replace(leyenda1, "'", "", -1)
        leyenda2 = strings.TrimSpace(record[8])
        leyenda2 = strings.Replace(leyenda2, ",", "", -1)
        leyenda2 = strings.Replace(leyenda2, "'", "", -1)
      } 
      if Compare(strings.TrimSpace(record[4]),"ABONO") == 0 ||  Compare(strings.TrimSpace(record[4]),"Abono") == 0{
        STATUS = "2"//ingresos
      }
      if Compare(cuenta,"") != 0 {
        caracteres := len(fecha)
        if caracteres == 10 {
          aux := fecha[0:6]
          aux2 := fecha[8:10]
          fecha = aux+aux2
          caracteres = len(fecha)
        }
        query := `INSERT INTO [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancosPrima]
            (CuentaPropia, fecha, descripcion, cuenta, importe, STATUS, referencia, saldo, leyenda1, leyenda2, BUNIT, timbrado)
            VALUES(0, '`+fecha+`','`+descripcion+`','`+cuenta+`',`+importe+`,'`+STATUS+`','`+referencia+`',`+saldo+`,'`+leyenda1+`','`+leyenda2+`','`+BUNIT.(string)+`', 0)`
        if caracteres == 8 {
          if strings.Contains(fecha, "/") {
            _ , err1 := conn.Exec(query)
            if err1 != nil {
              cuantosErrores++
              fmt.Println(query)
            } else {
              cuantosExitosos++
            }
          } else {
            cuantosFecha++
            fmt.Println(query)
          }
        } else {
          cuantosFecha++
          fmt.Println(query)
        }
          
      }
      }
      f.Close()
     /* err := os.Remove(Archivo)
      if err != nil {
          fmt.Println(err)
          return
        }*/
        if cuantosErrores == 0 && cuantosFecha == 0 && cuantosExitosos > 0 {
          cuantosExitosos = 0
          ff, _ := os.Open(Archivo)
      rr := csv.NewReader(bufio.NewReader(ff))
      rr.TrimLeadingSpace = true
      rr.LazyQuotes = true
      for {
        record, err := rr.Read()
        // Stop at EOF.
        if err == io.EOF {
            break
        }
        STATUS = "1"//gastos
        cuenta := strings.TrimSpace(record[0])
        cuenta = strings.Replace(cuenta, ",", "", -1)
        fecha := strings.TrimSpace(record[1])
        referencia := strings.TrimSpace(record[2])
        referencia = strings.Replace(referencia, ",", "", -1)
        importe := record[3]
        importe = strings.Replace(importe, ",", "", -1)
        importe = strings.Replace(importe, `"`, "", -1)
        importe = strings.Replace(importe, "'", "", -1)
        importe = strings.Replace(importe, "?", "", -1)
        importe = strings.TrimSpace(importe)
        importe = Subsana(importe)

        
        saldo := record[5]
        saldo = strings.Replace(saldo, ",", "", -1)
        saldo = strings.Replace(saldo, "\"", "", -1)
        saldo = fmt.Sprintf("%s", saldo)
        saldo = strings.Replace(saldo, "?", "", -1)
        saldo = strings.TrimSpace(saldo)
        saldo = Subsana(saldo)
        if saldo == "" {
          saldo = "0"
        }
        
        descripcion := strings.TrimSpace(record[6])
        descripcion = strings.Replace(descripcion, ",", "", -1)
        descripcion = strings.Replace(descripcion, "'", "", -1)
        leyenda1 := ""
        leyenda2 := ""
        cuantosLen := len(record)
      
        if cuantosLen > 8 {
          leyenda1 = strings.TrimSpace(record[7])
          leyenda1 = strings.Replace(leyenda1, ",", "", -1)
          leyenda1 = strings.Replace(leyenda1, "'", "", -1)
          leyenda2 = strings.TrimSpace(record[8])
          leyenda2 = strings.Replace(leyenda2, ",", "", -1)
          leyenda2 = strings.Replace(leyenda2, "'", "", -1)
        }
        if Compare(strings.TrimSpace(record[4]),"ABONO") == 0  ||  Compare(strings.TrimSpace(record[4]),"Abono") == 0 {
          STATUS = "2"//ingresos
        }
        if Compare(cuenta,"") != 0 {
          caracteres := len(fecha)
          dia := fecha[0:2]
          mes := fecha[3:5]
          if caracteres == 10 {
            aux := fecha[0:6]
            aux2 := fecha[8:10]
            fecha = aux+aux2
            caracteres = len(fecha)
          }
          moneda := ""
          queryDeterminarTipoDeCambio := ""
          if cuantosLen > 9 {
            moneda = strings.TrimSpace(record[9])
            if moneda =="USD" {
              queryDeterminarTipoDeCambio = `SELECT tipoDeCambio FROM [Sevenplus].[dbo].[zTipoDeCambio]
              WHERE fecha = '`+fecha+`'`
              rowsD, _ := conn.Query(queryDeterminarTipoDeCambio)
              tipoDeCambio := 0.0
              if rowsD.Next()  {
                rowsD.Scan(&tipoDeCambio)
                cantidadFloat, _ := strconv.ParseFloat(importe, 64)
                auxF := tipoDeCambio * cantidadFloat
                moneda = "MXN"
                tipoDeCambio = 1.0
                importe = fmt.Sprintf("%.2f",auxF)
              } else {
                if dia == "01" {
                  dia = "32"
                }
                queryDeterminarTipoDeCambio = `SELECT TOP 1 tipoDeCambio  FROM [Sevenplus].[dbo].[zTipoDeCambio]
                WHERE SUBSTRING(fecha,1,2) < '`+dia+`' AND SUBSTRING(fecha,4,2) <= '`+mes+`' order by fecha desc`
                rowsD, _ := conn.Query(queryDeterminarTipoDeCambio)
                tipoDeCambio := 0.0
                if rowsD.Next()  {
                  rowsD.Scan(&tipoDeCambio)
                  cantidadFloat, _ := strconv.ParseFloat(importe, 64)
                  auxF := tipoDeCambio * cantidadFloat
                  moneda = "MXN"
                  tipoDeCambio = 1.0
                  importe = fmt.Sprintf("%.2f",auxF)
                } 
              }
            } 
          }
        if moneda == "USD" {
          fmt.Println(queryDeterminarTipoDeCambio)
        }
          query := `INSERT INTO [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
              (CuentaPropia, fecha, descripcion, cuenta, importe, STATUS, referencia, saldo, leyenda1, leyenda2, BUNIT, timbrado, Moneda)
              VALUES(0, '`+fecha+`','`+descripcion+`','`+cuenta+`',`+importe+`,'`+STATUS+`','`+referencia+`',`+saldo+`,'`+leyenda1+`','`+leyenda2+`','`+BUNIT.(string)+`', 0, '`+moneda+`')`
          if caracteres == 8 {
            if strings.Contains(fecha, "/") {
              _ , err1 := conn.Exec(query)
              if err1 != nil {
                cuantosErrores++
                fmt.Println(query)
              } else {
                cuantosExitosos++
              }
            } else {
              cuantosFecha++
              fmt.Println(query)
            }
          } else {
            cuantosFecha++
            fmt.Println(query)
          }
            
        }
        }
        ff.Close()
        example := map[string]interface{}{ "success":1, "errores" : cuantosErrores, "exitosos" : cuantosExitosos, "fecha" : cuantosFecha}
      c.Data["json"] = &example
      c.ServeJSON() 
      } else {
        example := map[string]interface{}{ "success":2, "errores" : cuantosErrores, "exitosos" : cuantosExitosos, "fecha" : cuantosFecha}
      c.Data["json"] = &example
      c.ServeJSON() 
      }
    
  }
}
func utf16toString(b []uint8) (string, string) {
        if len(b)&1 != 0 {
                return "", "len(b) must be even"
        }

        // Check BOM
        var bom int
        if len(b) >= 2 {
                switch n := int(b[0])<<8 | int(b[1]); n {
                case 0xfffe:
                        bom = 1
                        fallthrough
                case 0xfeff:
                        b = b[2:]
                }
        }

        w := make([]uint16, len(b)/2)
        for i := range w {
                w[i] = uint16(b[2*i+bom&1])<<8 | uint16(b[2*i+(bom+1)&1])
        }
        return string(utf16.Decode(w)), ""
}
func (c *MainController) Get() {
  /*soap, err := gosoap.SoapClient("http://localhost:8080/connect/wsdl/SecurityProvider?wsdl","http://localhost:8080/connect/soap/SecurityProvider")
  if err != nil {
    fmt.Errorf("error not expected: %s", err)
  }
  params := gosoap.Params{
    "name": "AOK",
    "password" : "",
  }
  err = soap.Call("Authenticate", "SecurityProviderAuthenticateRequest", params)
  if err != nil {
    fmt.Errorf("error in soap call: %s", err)
  }
  vaucher := soap.GetResponse()
  fmt.Println(vaucher)
  soapJournal, err := gosoap.SoapClient("http://localhost:8080/connect/wsdl/ComponentExecutor?wsdl","http://localhost:8080/connect/soap/ComponentExecutor")
  if err != nil {
    fmt.Errorf("error not expected: %s", err)
  }

  params = gosoap.Params{
    "authentication": vaucher,
    "licensing" : "",
    "component" : "Journal",
    "method" : "Import",
    "group" : "",
    "payload" : `<SSC>
  <SunSystemsContext>
    <BusinessUnit>CEA</BusinessUnit>
    <BudgetCode>A</BudgetCode>
  </SunSystemsContext>
  <MethodContext>
    <LedgerPostingParameters>
      <JournalType>JV</JournalType>
      <PostingType>2</PostingType>
      <PostProvisional>N</PostProvisional>
      <PostToHold>N</PostToHold>
      <BalancingOptions>T2</BalancingOptions>
      <SuspenseAccount>338100</SuspenseAccount>
      <TransactionAmountAccount>338100</TransactionAmountAccount>
      <ReportingAccount>338100</ReportingAccount>
      <SupressSubstitutedMessages>N</SupressSubstitutedMessages>
      <ReportErrorsOnly>Y</ReportErrorsOnly>
    </LedgerPostingParameters>
  </MethodContext>
  <Payload>
    <Ledger>
      <Line>
        <TransactionReference>651C</TransactionReference>
        <AccountingPeriod>0052017</AccountingPeriod>
        <TransactionDate>07052017</TransactionDate>
        <AccountCode>ERROJAB01</AccountCode>
        <AnalysisCode2/>
        <AnalysisCode3>10</AnalysisCode3>
        <AnalysisCode4/>
        <AnalysisCode5/>
        <AnalysisCode6/>
        <AnalysisCode7/>
        <AnalysisCode8/>
        <AnalysisCode9/>
        <AnalysisCode10/>
        <Description>GONZALEZ ALCUDIA HUMBERTO</Description>
        <Value4Amount>3500</Value4Amount>
        <DebitCredit>D</DebitCredit>
        <Value4CurrencyCode>MXP1</Value4CurrencyCode>
        <DueDate>07052017</DueDate>
      </Line>
      <Line>
        <TransactionReference>651C</TransactionReference>
        <AccountingPeriod>0052017</AccountingPeriod>
        <TransactionDate>07052017</TransactionDate>
        <AccountCode>ERROJAB01</AccountCode>
        <AnalysisCode2/>
        <AnalysisCode3>10</AnalysisCode3>
        <AnalysisCode4/>
        <AnalysisCode5/>
        <AnalysisCode6/>
        <AnalysisCode7/>
        <AnalysisCode8/>
        <AnalysisCode9/>
        <AnalysisCode10/>
        <Description>GONZALEZ ALCUDIA HUMBERTO</Description>
        <Value4Amount>3500</Value4Amount>
        <DebitCredit>C</DebitCredit>
        <Value4CurrencyCode>MXP1</Value4CurrencyCode>
        <DueDate>07052017</DueDate>
      </Line>
    </Ledger>
  </Payload>
</SSC>
`,
  }
  err = soapJournal.Call("Execute", "ComponentExecutorExecuteRequest", params)
  if err != nil {
    fmt.Errorf("error in soap call: %s", err)
  }
  diario := soapJournal.GetResponse()
  fmt.Println(diario)
  */


  

  c.Data["Website"] = "beego.me"
  c.Data["Email"] = "astaxie@gmail.com"
  c.Data["mensaje"] = "Sevenplus"
  c.TplName = "index.tpl"
}
    
func (c *GenerarDiarioController) Get() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    //BUNIT := c.GetSession("BUNIT")
  //  diario := c.GetString("diario") 
  }
}
type respuesta struct {
     hash string 
     poliza []linea
}
type linea struct {
     PERIOD string 
     treference string
     Fecha string 
     cuenta string
     fondo string
     funcion string
     reestriccion string
     orgid string
     who string
     detalle string
     proyecto string 
     descripcion string
     cantidad float64
}

func (c * RegistraDiarioController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    var JRNAL_NO int64
    query1 := "SELECT ISNULL((MAX(JRNAL_NO)+1),1) as JRNAL_NO FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG]"
      rows1, err1 := conn.Query(query1)
      if err1 != nil {
        defer conn.Close()
      fmt.Println("Perdon! Error en querys hardcodeados: ", err1.Error())
    }
      for rows1.Next()  {
      rows1.Scan(&JRNAL_NO)
    }
    jsonVariable := c.GetString("lineas")
    b := []byte(jsonVariable)
    var m map[string]interface{}
    err := json.Unmarshal(b, &m)
    if err != nil {
      fmt.Println("JSON Parse failed (perdon):", err.Error())
    }
    //var poliza PairList 
    //poliza =sortMapByValue(m)
    //generar un array map asociativo, ponerle los keys, values como vayan llegando y luego iterarlo en orden!
    var linea map[string]interface{}
    var D_C string
    D_C="C"
      for k, v := range m { 
      JRNAL_LINE,error1:=strconv.Atoi(k);
      if error1 != nil {
        defer conn.Close()
        fmt.Println("Perdon! : ", error1.Error())
      }
      JRNAL_LINE=JRNAL_LINE+1
      linea = v.(map[string]interface{});
      cantidad := linea["cantidad"].(float64)
      if cantidad < 0 {
        D_C="D";
      } else {
        D_C="C";
      }
      amountString := fmt.Sprintf("%.2f", cantidad)
      diario := strconv.FormatInt(JRNAL_NO, 10)
      lineaDelDiario := strconv.Itoa(JRNAL_LINE)
      treference := linea["treference"]
      cuenta := linea["cuenta"]
      query := "INSERT INTO [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] (TREFERENCE, ACCNT_CODE, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, DESCRIPTN, AMOUNT, OTHER_AMT, CONV_CODE, D_C, PERIOD, TRANS_DATETIME, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, ENTRY_DATETIME, ENTRY_PRD, DUE_DATETIME, CONV_RATE, POSTING_DATETIME, CV4_CONV_CODE, CV4_AMT, CV4_CONV_RATE, CV4_OPERATOR, ORIGINATOR_ID, POSTER_ID, JNL_REVERSAL_TYPE, SPLIT_IN_PROGRESS, AUTHORISTN_IN_PROGRESS, MAN_PAY_OVER, APRVLS_EXTSN, SUPPLMNTRY_EXTSN, TRUE_RATED, AGREED_STATUS, BINDER_STATUS, PRINCIPAL_REQD, SPLIT_ORIG_LINE, CV5_DP, CV5_OPERATOR, CV5_CONV_RATE, CV5_AMT, CV5_CONV_CODE, CV4_DP, CONSUMED_BDGT_ID, LE_DETAILS_IND, EXCLUDE_BAL, MEMO_AMT, REPORT_AMT, REPORT_OPERATOR, REPORT_RATE, CONV_OPERATOR, BASE_OPERATOR, BASE_RATE, HOLD_OP_ID, HOLD_REF, ALLOC_IN_PROGRESS, ALLOCATION, ALLOC_REF, ALLOC_PERIOD, ASSET_IND, ASSET_CODE, ASSET_SUB, OTHER_DP, CLEARDOWN, REVERSAL, LOSS_GAIN, ROUGH_FLAG, IN_USE_FLAG, ORIGINATED_DATETIME) VALUES ('"+treference.(string)+"','"+cuenta.(string)+"', '', '', '"+linea["fondo"].(string)+"', '"+linea["funcion"].(string)+"', '"+linea["reestriccion"].(string)+"', '"+linea["orgid"].(string)+"', '"+linea["who"].(string)+"', '', '"+linea["proyecto"].(string)+"', '"+linea["detalle"].(string)+"', '"+linea["descripcion"].(string)+"', "+amountString+", "+amountString+", 'MXP1', '"+D_C+"', "+linea["PERIOD"].(string)+", '"+linea["fecha"].(string)+"', "+diario+", "+lineaDelDiario+", 'JV', 'MPJ', '"+linea["fecha"].(string)+"', "+linea["PERIOD"].(string)+", '"+linea["fecha"].(string)+"', 1.0000000, '"+linea["fecha"].(string)+"', 'MXP1', "+amountString+", 1.0000000, '*', 'MPJ', 'MPJ', 0, 0, 0, 0 ,0 ,0, 0, 0, '', 0, 0, '2', '*', 0.00, 0.00, '', '2', 0, '', '', 0.0, 0.0, '*', 0.0, '*', '*', 1.0000, '', 0, '', '', 0, 0, '', '', '', '2', '00000', '', '', '', '', '"+linea["fecha"].(string)+"')"
        _ , err2 := conn.Exec(query)
      if err2 != nil {
          defer conn.Close()
        fmt.Println("Perdon 5! : ", err2.Error())
      }
    }
    example := map[string]interface{}{ "success":1, "diario" : JRNAL_NO}
    c.Data["json"] = &example
    c.ServeJSON()
    defer conn.Close()
  }
}


func (c * SaldoCuentaAPIController) Get() {
  hash := c.GetString("hash")
  currentTime := int64(time.Now().Unix())
  tm := time.Unix(currentTime, 0)
  dateString := tm.String() 
  substring := string(dateString[0:10])
    byteArray := []byte(substring)
  hasher := sha512.New()
    hasher.Write(byteArray)
  cryptoText := base64.StdEncoding.EncodeToString(  []byte(hex.EncodeToString(hasher.Sum(nil))))
  if Compare(cryptoText,hash)==0 {
    BUNIT := c.GetString("BUNIT")
    DB := c.GetString("DB")
    Cuenta := c.GetString("cuenta")
    Fecha := c.GetString("fecha")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    var AMOUNT decimal.Dec
    query1 := `SELECT SUM(AMOUNT) as saldo
      FROM
      [`+DB+`].[dbo].[`+BUNIT+`_A_SALFLDG]
      WHERE ACCNT_CODE = '`+Cuenta+`'
      AND TRANS_DATETIME <= '`+Fecha+`'`
      rows1, err1 := conn.Query(query1)
      if err1 != nil {
        defer conn.Close()
        fmt.Println(query1)
      fmt.Println("Perdon! Error en querys hardcodeados: ", err1.Error())
    }
      for rows1.Next()  {
      rows1.Scan(&AMOUNT)
    }

    example := map[string]interface{}{ "success":1, "saldo" : AMOUNT.Float64()}
    

    c.Data["jsonp"] = &example
    c.ServeJSONP()
    
  }
  example := map[string]interface{}{ "success":0}
  c.Data["jsonp"] = &example
  c.ServeJSONP()
  
}

func (c * RegistraDiarioAPIController) Post() {
  hash := c.GetString("hash")
  currentTime := int64(time.Now().Unix())
  tm := time.Unix(currentTime, 0)
  dateString := tm.String() 
  substring := string(dateString[0:10])
    byteArray := []byte(substring)
  hasher := sha512.New()
    hasher.Write(byteArray)
  cryptoText := base64.StdEncoding.EncodeToString(  []byte(hex.EncodeToString(hasher.Sum(nil))))
  if Compare(cryptoText,hash)==0 {
    BUNIT := c.GetString("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    var JRNAL_NO int64
    query1 := "SELECT ISNULL((MAX(JRNAL_NO)+1),1) as JRNAL_NO FROM [SunSystemsData].[dbo].["+BUNIT+"_A_SALFLDG]"
      rows1, err1 := conn.Query(query1)
      if err1 != nil {
        defer conn.Close()
      fmt.Println("Perdon! Error en querys hardcodeados: ", err1.Error())
    }
      for rows1.Next()  {
      rows1.Scan(&JRNAL_NO)
    }
    jsonVariable := c.GetString("lineas")
    b := []byte(jsonVariable)
    var m map[string]interface{}
    err := json.Unmarshal(b, &m)
    if err != nil {
      fmt.Println("JSON Parse failed (perdon):", err.Error())
    }
    //var poliza PairList 
    //poliza =sortMapByValue(m)
    //generar un array map asociativo, ponerle los keys, values como vayan llegando y luego iterarlo en orden!
    var linea map[string]interface{}
    var D_C string
    D_C="C"
      for k, v := range m { 
      JRNAL_LINE,error1:=strconv.Atoi(k);
      if error1 != nil {
        defer conn.Close()
        fmt.Println("Perdon! : ", error1.Error())
      }
      JRNAL_LINE=JRNAL_LINE+1
      linea = v.(map[string]interface{});
      cantidad := linea["cantidad"].(float64)
      if cantidad < 0 {
        D_C="D";
      } else {
        D_C="C";
      }
      amountString := fmt.Sprintf("%.2f", cantidad)
      diario := strconv.FormatInt(JRNAL_NO, 10)
      lineaDelDiario := strconv.Itoa(JRNAL_LINE)
      treference := linea["treference"]
      cuenta := linea["cuenta"]
      query := "INSERT INTO ["+beego.AppConfig.String("serverAux")+"].[SunSystemsData].[dbo].["+BUNIT+"_A_SALFLDG] (TREFERENCE, ACCNT_CODE, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, DESCRIPTN, AMOUNT, OTHER_AMT, CONV_CODE, D_C, PERIOD, TRANS_DATETIME, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, ENTRY_DATETIME, ENTRY_PRD, DUE_DATETIME, CONV_RATE, POSTING_DATETIME, CV4_CONV_CODE, CV4_AMT, CV4_CONV_RATE, CV4_OPERATOR, ORIGINATOR_ID, POSTER_ID, JNL_REVERSAL_TYPE, SPLIT_IN_PROGRESS, AUTHORISTN_IN_PROGRESS, MAN_PAY_OVER, APRVLS_EXTSN, SUPPLMNTRY_EXTSN, TRUE_RATED, AGREED_STATUS, BINDER_STATUS, PRINCIPAL_REQD, SPLIT_ORIG_LINE, CV5_DP, CV5_OPERATOR, CV5_CONV_RATE, CV5_AMT, CV5_CONV_CODE, CV4_DP, CONSUMED_BDGT_ID, LE_DETAILS_IND, EXCLUDE_BAL, MEMO_AMT, REPORT_AMT, REPORT_OPERATOR, REPORT_RATE, CONV_OPERATOR, BASE_OPERATOR, BASE_RATE, HOLD_OP_ID, HOLD_REF, ALLOC_IN_PROGRESS, ALLOCATION, ALLOC_REF, ALLOC_PERIOD, ASSET_IND, ASSET_CODE, ASSET_SUB, OTHER_DP, CLEARDOWN, REVERSAL, LOSS_GAIN, ROUGH_FLAG, IN_USE_FLAG, ORIGINATED_DATETIME) VALUES ('"+treference.(string)+"','"+cuenta.(string)+"', '', '', '"+linea["fondo"].(string)+"', '"+linea["funcion"].(string)+"', '"+linea["reestriccion"].(string)+"', '"+linea["orgid"].(string)+"', '"+linea["who"].(string)+"', '', '"+linea["proyecto"].(string)+"', '"+linea["detalle"].(string)+"', '"+linea["descripcion"].(string)+"', "+amountString+", "+amountString+", 'MXP1', '"+D_C+"', "+linea["PERIOD"].(string)+", '"+linea["fecha"].(string)+"', "+diario+", "+lineaDelDiario+", 'JV', 'MPJ', '"+linea["fecha"].(string)+"', "+linea["PERIOD"].(string)+", '"+linea["fecha"].(string)+"', 1.0000000, '"+linea["fecha"].(string)+"', 'MXP1', "+amountString+", 1.0000000, '*', 'MPJ', 'MPJ', 0, 0, 0, 0 ,0 ,0, 0, 0, '', 0, 0, '2', '*', 0.00, 0.00, '', '2', 0, '', '', 0.0, 0.0, '*', 0.0, '*', '*', 1.0000, '', 0, '', '', 0, 0, '', '', '', '2', '00000', '', '', '', '', '"+linea["fecha"].(string)+"')"
        _ , err2 := conn.Exec(query)
      if err2 != nil {
          defer conn.Close()
        fmt.Println("Perdon 5! : ", err2.Error())
      }
    }
    defer conn.Close()
  }
}
func tienePermisosContador(tipo int) bool {
  if tipo == 3 || tipo == 4 || tipo == 7 {
    return true
  }
  return false
}
func tienePermisosTesoreroIglesia(tipo int) bool {
  if tipo == 3 || tipo == 5 {
    return true
  }
  return false
}
func tienePermisosFiscalista(tipo int) bool {
  if tipo == 4 {
    return true
  }
  return false
}



func (c *GuardarClasificacionDimensionesController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    TipoDondeEstaranLasDimensiones := c.GetString("TipoDondeEstaranLasDimensiones")
    entry1 := c.GetString("entry1")
    entry2 := c.GetString("entry2")
    entry3 := c.GetString("entry3")
    entry4 := c.GetString("entry4")
    entry5 := c.GetString("entry5")
    entry6 := c.GetString("entry6")
    entry7 := c.GetString("entry7")
    entry8 := c.GetString("entry8")
    entry9 := c.GetString("entry9")
    entry10 := c.GetString("entry10")
    S_HEAD1 := c.GetString("S_HEAD1")
    S_HEAD2 := c.GetString("S_HEAD2")
    S_HEAD3 := c.GetString("S_HEAD3")
    S_HEAD4 := c.GetString("S_HEAD4")
    S_HEAD5 := c.GetString("S_HEAD5")
    S_HEAD6 := c.GetString("S_HEAD6")
    S_HEAD7 := c.GetString("S_HEAD7")
    S_HEAD8 := c.GetString("S_HEAD8")
    S_HEAD9 := c.GetString("S_HEAD9")
    S_HEAD10 := c.GetString("S_HEAD10")
    //primero debo de checar si existe la combinacion Tipo- entryNum
    //si existe y entryX es 0, debo borrarla
    //si no existe Tipo-entryNum y entryX!=0hago un insert
    //si existe y entryX !=0, hago un update!
    var ANL_CAT_ID string
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.String() 
    substring := string(dateString[0:10]) 

    //1 {
    queryDireccion := "SELECT ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ENTRY_NUM = 1 AND ANL_ENT_ID = "+TipoDondeEstaranLasDimensiones
    rowsDireccion, _ := conn.Query(queryDireccion)
    if rowsDireccion.Next()  {
      rowsDireccion.Scan(&ANL_CAT_ID)
      if Compare(entry1,"0")==0 {
        query := `DELETE FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN] WHERE ENTRY_NUM = 1 AND ANL_ENT_ID = `+TipoDondeEstaranLasDimensiones
        conn.Exec(query)
      } else {
        if Compare(ANL_CAT_ID,entry1)==0 {
        } else {
          query1 := `UPDATE [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN] SET LAST_CHANGE_DATETIME = '`+substring+`',LAST_CHANGE_USER_ID = '`+alias.(string)+`', ANL_CAT_ID = '`+entry1+`', S_HEAD = '`+S_HEAD1+`' WHERE ENTRY_NUM = 1 AND ANL_ENT_ID = `+TipoDondeEstaranLasDimensiones
          conn.Exec(query1)
        }
      }
    }
    query := `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN]
      (ANL_ENT_ID,ANL_CAT_ID,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,ENTRY_NUM,VALIDATE_IND,S_HEAD)
  VALUES(`+TipoDondeEstaranLasDimensiones+`,'`+entry1+`',1,'`+alias.(string)+`','`+substring+`',1,1,'`+S_HEAD1+`')`
    conn.Exec(query)
    //1 }
    //2 {
    queryDireccion = "SELECT ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ENTRY_NUM = 2 AND ANL_ENT_ID = "+TipoDondeEstaranLasDimensiones
    rowsDireccion, _ = conn.Query(queryDireccion)
    if rowsDireccion.Next()  {
      rowsDireccion.Scan(&ANL_CAT_ID)
      if Compare(entry2,"0")==0 {
        query := `DELETE FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN] WHERE ENTRY_NUM = 2 AND ANL_ENT_ID = `+TipoDondeEstaranLasDimensiones
        conn.Exec(query)
      } else {
        if Compare(ANL_CAT_ID,entry2)==0 {
        } else {
          query1 := `UPDATE [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN] SET LAST_CHANGE_DATETIME = '`+substring+`',LAST_CHANGE_USER_ID = '`+alias.(string)+`', ANL_CAT_ID = '`+entry2+`', S_HEAD = '`+S_HEAD2+`' WHERE ENTRY_NUM = 2 AND ANL_ENT_ID = `+TipoDondeEstaranLasDimensiones
          conn.Exec(query1)
        }
      }
    }
    query = `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN]
      (ANL_ENT_ID,ANL_CAT_ID,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,ENTRY_NUM,VALIDATE_IND,S_HEAD)
  VALUES(`+TipoDondeEstaranLasDimensiones+`,'`+entry2+`',1,'`+alias.(string)+`','`+substring+`',2,1,'`+S_HEAD2+`')`
    conn.Exec(query)
    //2 }
    //3 {
    queryDireccion = "SELECT ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ENTRY_NUM = 3 AND ANL_ENT_ID = "+TipoDondeEstaranLasDimensiones
    rowsDireccion, _ = conn.Query(queryDireccion)
    if rowsDireccion.Next()  {
      rowsDireccion.Scan(&ANL_CAT_ID)
      if Compare(entry3,"0")==0 {
        query := `DELETE FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN] WHERE ENTRY_NUM = 3 AND ANL_ENT_ID = `+TipoDondeEstaranLasDimensiones
        conn.Exec(query)
      } else {
        if Compare(ANL_CAT_ID,entry3)==0 {
        } else {
          query1 := `UPDATE [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN] SET LAST_CHANGE_DATETIME = '`+substring+`',LAST_CHANGE_USER_ID = '`+alias.(string)+`', ANL_CAT_ID = '`+entry3+`', S_HEAD = '`+S_HEAD3+`' WHERE ENTRY_NUM = 3 AND ANL_ENT_ID = `+TipoDondeEstaranLasDimensiones
          conn.Exec(query1)
        }
      }
    }
    query = `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN]
      (ANL_ENT_ID,ANL_CAT_ID,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,ENTRY_NUM,VALIDATE_IND,S_HEAD)
  VALUES(`+TipoDondeEstaranLasDimensiones+`,'`+entry3+`',1,'`+alias.(string)+`','`+substring+`',3,1,'`+S_HEAD3+`')`
    conn.Exec(query)
    //3 }
    //4 {
    queryDireccion = "SELECT ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ENTRY_NUM = 4 AND ANL_ENT_ID = "+TipoDondeEstaranLasDimensiones
    rowsDireccion, _ = conn.Query(queryDireccion)
    if rowsDireccion.Next()  {
      rowsDireccion.Scan(&ANL_CAT_ID)
      if Compare(entry4,"0")==0 {
        query := `DELETE FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN] WHERE ENTRY_NUM = 4 AND ANL_ENT_ID = `+TipoDondeEstaranLasDimensiones
        conn.Exec(query)
      } else {
        if Compare(ANL_CAT_ID,entry4)==0 {
        } else {
          query1 := `UPDATE [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN] SET LAST_CHANGE_DATETIME = '`+substring+`',LAST_CHANGE_USER_ID = '`+alias.(string)+`', ANL_CAT_ID = '`+entry4+`', S_HEAD = '`+S_HEAD4+`' WHERE ENTRY_NUM = 4 AND ANL_ENT_ID = `+TipoDondeEstaranLasDimensiones
          conn.Exec(query1)
        }
      }
    }
    query = `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN]
      (ANL_ENT_ID,ANL_CAT_ID,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,ENTRY_NUM,VALIDATE_IND,S_HEAD)
  VALUES(`+TipoDondeEstaranLasDimensiones+`,'`+entry4+`',1,'`+alias.(string)+`','`+substring+`',4,1,'`+S_HEAD4+`')`
    conn.Exec(query)
    //4 }
    //5 {
    queryDireccion = "SELECT ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ENTRY_NUM = 5 AND ANL_ENT_ID = "+TipoDondeEstaranLasDimensiones
    rowsDireccion, _ = conn.Query(queryDireccion)
    if rowsDireccion.Next()  {
      rowsDireccion.Scan(&ANL_CAT_ID)
      if Compare(entry5,"0")==0 {
        query := `DELETE FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN] WHERE ENTRY_NUM = 5 AND ANL_ENT_ID = `+TipoDondeEstaranLasDimensiones
        conn.Exec(query)
      } else {
        if Compare(ANL_CAT_ID,entry5)==0 {
        } else {
          query1 := `UPDATE [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN] SET LAST_CHANGE_DATETIME = '`+substring+`',LAST_CHANGE_USER_ID = '`+alias.(string)+`', ANL_CAT_ID = '`+entry5+`', S_HEAD = '`+S_HEAD5+`' WHERE ENTRY_NUM = 5 AND ANL_ENT_ID = `+TipoDondeEstaranLasDimensiones
          conn.Exec(query1)
        }
      }
    }
    query = `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN]
      (ANL_ENT_ID,ANL_CAT_ID,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,ENTRY_NUM,VALIDATE_IND,S_HEAD)
  VALUES(`+TipoDondeEstaranLasDimensiones+`,'`+entry5+`',1,'`+alias.(string)+`','`+substring+`',5,1,'`+S_HEAD5+`')`
    conn.Exec(query)
    //5 }
    //6 {
    queryDireccion = "SELECT ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ENTRY_NUM = 6 AND ANL_ENT_ID = "+TipoDondeEstaranLasDimensiones
    rowsDireccion, _ = conn.Query(queryDireccion)
    if rowsDireccion.Next()  {
      rowsDireccion.Scan(&ANL_CAT_ID)
      if Compare(entry6,"0")==0 {
        query := `DELETE FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN] WHERE ENTRY_NUM = 6 AND ANL_ENT_ID = `+TipoDondeEstaranLasDimensiones
        conn.Exec(query)
      } else {
        if Compare(ANL_CAT_ID,entry6)==0 {
        } else {
          query1 := `UPDATE [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN] SET LAST_CHANGE_DATETIME = '`+substring+`',LAST_CHANGE_USER_ID = '`+alias.(string)+`', ANL_CAT_ID = '`+entry6+`', S_HEAD = '`+S_HEAD6+`' WHERE ENTRY_NUM = 6 AND ANL_ENT_ID = `+TipoDondeEstaranLasDimensiones
          conn.Exec(query1)
        }
      }
    }
    query = `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN]
      (ANL_ENT_ID,ANL_CAT_ID,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,ENTRY_NUM,VALIDATE_IND,S_HEAD)
  VALUES(`+TipoDondeEstaranLasDimensiones+`,'`+entry6+`',1,'`+alias.(string)+`','`+substring+`',6,1,'`+S_HEAD6+`')`
    conn.Exec(query)
    //6 }
    //7 {
    queryDireccion = "SELECT ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ENTRY_NUM = 7 AND ANL_ENT_ID = "+TipoDondeEstaranLasDimensiones
    rowsDireccion, _ = conn.Query(queryDireccion)
    if rowsDireccion.Next()  {
      rowsDireccion.Scan(&ANL_CAT_ID)
      if Compare(entry7,"0")==0 {
        query := `DELETE FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN] WHERE ENTRY_NUM = 7 AND ANL_ENT_ID = `+TipoDondeEstaranLasDimensiones
        conn.Exec(query)
      } else {
        if Compare(ANL_CAT_ID,entry7)==0 {
        } else {
          query1 := `UPDATE [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN] SET LAST_CHANGE_DATETIME = '`+substring+`',LAST_CHANGE_USER_ID = '`+alias.(string)+`', ANL_CAT_ID = '`+entry7+`', S_HEAD = '`+S_HEAD7+`' WHERE ENTRY_NUM = 7 AND ANL_ENT_ID = `+TipoDondeEstaranLasDimensiones
          conn.Exec(query1)
        }
      }
    }
    query = `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN]
      (ANL_ENT_ID,ANL_CAT_ID,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,ENTRY_NUM,VALIDATE_IND,S_HEAD)
  VALUES(`+TipoDondeEstaranLasDimensiones+`,'`+entry7+`',1,'`+alias.(string)+`','`+substring+`',7,1,'`+S_HEAD7+`')`
    conn.Exec(query)
    //7 }
    //8 {
    queryDireccion = "SELECT ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ENTRY_NUM = 8 AND ANL_ENT_ID = "+TipoDondeEstaranLasDimensiones
    rowsDireccion, _ = conn.Query(queryDireccion)
    if rowsDireccion.Next()  {
      rowsDireccion.Scan(&ANL_CAT_ID)
      if Compare(entry8,"0")==0 {
        query := `DELETE FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN] WHERE ENTRY_NUM = 8 AND ANL_ENT_ID = `+TipoDondeEstaranLasDimensiones
        conn.Exec(query)
      } else {
        if Compare(ANL_CAT_ID,entry8)==0 {
        } else {
          query1 := `UPDATE [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN] SET LAST_CHANGE_DATETIME = '`+substring+`',LAST_CHANGE_USER_ID = '`+alias.(string)+`', ANL_CAT_ID = '`+entry8+`', S_HEAD = '`+S_HEAD8+`' WHERE ENTRY_NUM = 8 AND ANL_ENT_ID = `+TipoDondeEstaranLasDimensiones
          conn.Exec(query1)
        }
      }
    }
    query = `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN]
      (ANL_ENT_ID,ANL_CAT_ID,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,ENTRY_NUM,VALIDATE_IND,S_HEAD)
  VALUES(`+TipoDondeEstaranLasDimensiones+`,'`+entry8+`',1,'`+alias.(string)+`','`+substring+`',8,1,'`+S_HEAD8+`')`
    conn.Exec(query)
    //8 }
    //9 {
    queryDireccion = "SELECT ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ENTRY_NUM = 9 AND ANL_ENT_ID = "+TipoDondeEstaranLasDimensiones
    rowsDireccion, _ = conn.Query(queryDireccion)
    if rowsDireccion.Next()  {
      rowsDireccion.Scan(&ANL_CAT_ID)
      if Compare(entry9,"0")==0 {
        query := `DELETE FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN] WHERE ENTRY_NUM = 9 AND ANL_ENT_ID = `+TipoDondeEstaranLasDimensiones
        conn.Exec(query)
      } else {
        if Compare(ANL_CAT_ID,entry9)==0 {
        } else {
          query1 := `UPDATE [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN] SET LAST_CHANGE_DATETIME = '`+substring+`',LAST_CHANGE_USER_ID = '`+alias.(string)+`', ANL_CAT_ID = '`+entry9+`', S_HEAD = '`+S_HEAD9+`' WHERE ENTRY_NUM = 9 AND ANL_ENT_ID = `+TipoDondeEstaranLasDimensiones
          conn.Exec(query1)
        }
      }
    }
    query = `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN]
      (ANL_ENT_ID,ANL_CAT_ID,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,ENTRY_NUM,VALIDATE_IND,S_HEAD)
  VALUES(`+TipoDondeEstaranLasDimensiones+`,'`+entry9+`',1,'`+alias.(string)+`','`+substring+`',9,1,'`+S_HEAD9+`')`
    conn.Exec(query)
    //9 }
    //10 {
    queryDireccion = "SELECT ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ENTRY_NUM = 10 AND ANL_ENT_ID = "+TipoDondeEstaranLasDimensiones
    rowsDireccion, _ = conn.Query(queryDireccion)
    if rowsDireccion.Next()  {
      rowsDireccion.Scan(&ANL_CAT_ID)
      if Compare(entry10,"0")==0 {
        query := `DELETE FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN] WHERE ENTRY_NUM = 10 AND ANL_ENT_ID = `+TipoDondeEstaranLasDimensiones
        conn.Exec(query)
      } else {
        if Compare(ANL_CAT_ID,entry10)==0 {
        } else {
          query1 := `UPDATE [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN] SET LAST_CHANGE_DATETIME = '`+substring+`',LAST_CHANGE_USER_ID = '`+alias.(string)+`', ANL_CAT_ID = '`+entry10+`', S_HEAD = '`+S_HEAD10+`' WHERE ENTRY_NUM = 10 AND ANL_ENT_ID = `+TipoDondeEstaranLasDimensiones
          conn.Exec(query1)
        }
      }
    }
    query = `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_ENT_DEFN]
      (ANL_ENT_ID,ANL_CAT_ID,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,ENTRY_NUM,VALIDATE_IND,S_HEAD)
  VALUES(`+TipoDondeEstaranLasDimensiones+`,'`+entry10+`',1,'`+alias.(string)+`','`+substring+`',10,1,'`+S_HEAD10+`')`
    conn.Exec(query)
    //10 }
    example := map[string]interface{}{ "success":1}
    c.Data["json"] = &example
    c.ServeJSON()
  }
} 

func (c *EditarDimensionController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    tipo := c.GetString("tipo")
    codigo := c.GetString("codigo")
    status := c.GetString("status")
    nombre := c.GetString("nombre")
    prohibido := c.GetString("prohibido")
    var ANL_CAT_ID string
    ANL_CAT_ID = tipo
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.String() 
    substring := string(dateString[0:10]) 


    queryDireccion := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CODE] WHERE ANL_CODE = '"+codigo+"' AND ANL_CAT_ID = '"+ANL_CAT_ID+"' order by ANL_CAT_ID desc"
    rowsDireccion, _ := conn.Query(queryDireccion)
    if rowsDireccion.Next()  {
      maximo := len(nombre)
      var LOOKUP string
      if maximo > 14 {
        maximo = 14
      }
      LOOKUP = string(nombre[0:maximo])
      query := `UPDATE [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE]
      SET LAST_CHANGE_USER_ID = '`+alias.(string)+`', LAST_CHANGE_DATETIME = '`+substring+`', STATUS = `+status+`, LOOKUP = '`+LOOKUP+`', NAME =  '`+nombre+`', PROHIBIT_POSTING = `+prohibido+`  
  WHERE ANL_CAT_ID = '`+ANL_CAT_ID+`' AND ANL_CODE = '`+codigo+`'`
      result , errx := conn.Exec(query)
      if errx != nil {
        defer conn.Close()
        fmt.Println("Perdon updatex! : ", errx.Error())
      }
      afectados, _ := result.RowsAffected()
      if afectados == 1 {
        example := map[string]interface{}{ "success":1}
        c.Data["json"] = &example
        c.ServeJSON()
        return
      }
      example := map[string]interface{}{ "success":3}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":2}
    c.Data["json"] = &example
    c.ServeJSON()
  }
} 

func (c *DeclareController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    rfc := c.GetString("rfc")
    periodo := c.GetString("periodo")
    declare := c.GetString("declare")
    cantidad := c.GetString("cantidad")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryDireccion1 := `SELECT TOP 1 idDeclaracion 
    FROM [SunSystemsData].[dbo].[zDeclaraciones] 
    WHERE BUNIT = '`+BUNIT.(string)+`' AND rfc = '`+rfc+`' AND
    periodo = '`+periodo+`'`
    rowsDireccion1, _ := conn.Query(queryDireccion1)
    idDeclaracion := 0
    if rowsDireccion1.Next()  {
      rowsDireccion1.Scan(&idDeclaracion)
    }
    if declare == "0" {
      queryDELETE := `DELETE FROM [SunSystemsData].[dbo].[zDeclaraciones]
          WHERE idDeclaracion = `+strconv.Itoa(idDeclaracion)
      conn.Exec(queryDELETE)
    } else {
      query := `INSERT INTO [SunSystemsData].[dbo].[zDeclaraciones]
      (rfc,periodo,cantidad,BUNIT) VALUES
      ('`+rfc+`','`+periodo+`',`+cantidad+`,'`+BUNIT.(string)+`')`
      conn.Exec(query)
    }
    example := map[string]interface{}{ "success":1}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 
func (c *NuevaDimensionController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    tipo := c.GetString("tipo")
    codigo := c.GetString("codigo")
    status := c.GetString("status")
    nombre := c.GetString("nombre")
    prohibido := c.GetString("prohibido")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.String() 
    substring := string(dateString[0:10]) 
    queryDireccion1 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CAT] WHERE S_HEAD = '"+tipo+"' order by ANL_CAT_ID desc"
    rowsDireccion1, _ := conn.Query(queryDireccion1)
    var ANL_CAT_ID string
    if rowsDireccion1.Next()  {
      rowsDireccion1.Scan(&ANL_CAT_ID)
    }
    queryDireccion := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CODE] WHERE ANL_CODE = '"+codigo+"' AND ANL_CAT_ID = '"+ANL_CAT_ID+"' order by ANL_CAT_ID desc"
    rowsDireccion, _ := conn.Query(queryDireccion)
    if rowsDireccion.Next()  {
      example := map[string]interface{}{ "success":2}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    maximo := len(nombre)
    var LOOKUP string
    if maximo > 14 {
      maximo = 14
    }
    LOOKUP = string(nombre[0:maximo])
    query := `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE]
(ANL_CAT_ID,ANL_CODE,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,STATUS,LOOKUP,NAME,DAG_CODE,BDGT_CHECK,BDGT_STOP,PROHIBIT_POSTING,NAVIGATION_OPTION,COMBINED_BDGT_CHCK)
VALUES
('`+ANL_CAT_ID+`','`+codigo+`',1,'`+alias.(string)+`','`+substring+`',`+status+`,'`+LOOKUP+`', '`+nombre+`',NULL,0,0,`+prohibido+`,99,0)`
    result , errx := conn.Exec(query)
    if errx != nil {
      defer conn.Close()
      fmt.Println("Perdon insertx! : ", errx.Error())
    }
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":3}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 




func (c *NuevaCuentaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    

    ACNT_CODE := c.GetString("ACNT_CODE")
    DESCR := c.GetString("DESCR")

    ACNT_TYPE := c.GetString("ACNT_TYPE")
    BAL_TYPE := c.GetString("BAL_TYPE")
    STATUS := c.GetString("STATUS")
    LINK_ACNT := c.GetString("LINK_ACNT")
    ENTER_ANL_1 := c.GetString("ENTER_ANL_1")
    ENTER_ANL_2 := c.GetString("ENTER_ANL_2")
    ENTER_ANL_3 := c.GetString("ENTER_ANL_3")
    ENTER_ANL_4 := c.GetString("ENTER_ANL_4")
    ENTER_ANL_5 := c.GetString("ENTER_ANL_5")
    ENTER_ANL_6 := c.GetString("ENTER_ANL_6")
    ENTER_ANL_7 := c.GetString("ENTER_ANL_7")
    ENTER_ANL_8 := c.GetString("ENTER_ANL_8")
    ENTER_ANL_9 := c.GetString("ENTER_ANL_9")
    ENTER_ANL_10 := c.GetString("ENTER_ANL_10")
    D1 := c.GetString("D1")
    D2 := c.GetString("D2")
    D3 := c.GetString("D3")
    D4 := c.GetString("D4")
    D5 := c.GetString("D5")
    D6 := c.GetString("D6")
    D7 := c.GetString("D7")
    D8 := c.GetString("D8")
    D9 := c.GetString("D9")
    D10 := c.GetString("D10")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.String() 
    substring := string(dateString[0:10]) 
    //ANL_CAT_ID := "01"
  
    queryDireccion0 := "SELECT TOP 1 ACNT_CODE FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ACNT] WHERE ACNT_CODE = '"+ACNT_CODE+"'"
    rowsDireccion0, _ := conn.Query(queryDireccion0)
    if rowsDireccion0.Next()  {
      example := map[string]interface{}{ "success":2}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    DESCR = strings.Replace(DESCR, "'", "", -1)
    maximoAux := 49
    lenDESCR := len(DESCR)
    if lenDESCR > maximoAux {
      DESCR = string(DESCR[0:maximoAux])
    }

    var LOOKUP string
    if lenDESCR > 14 {
      lenDESCR = 14
    }
    LOOKUP = string(DESCR[0:lenDESCR])

    
    query := `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT]
  (ACNT_CODE,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,DESCR,S_HEAD,LOOKUP,DAG_CODE,ACNT_TYPE,BAL_TYPE,STATUS,SUPPRESS_REVAL,LONG_DESCR,CONV_CODE_CTRL,DFLT_CURR_CODE,ALLOCN_IN_PROGRESS, LINK_ACNT, RPT_CONV_CTRL, USER_AREA, CR_LIMIT,ENTER_ANL_1,ENTER_ANL_2,ENTER_ANL_3,ENTER_ANL_4,ENTER_ANL_5,ENTER_ANL_6,ENTER_ANL_7,ENTER_ANL_8,ENTER_ANL_9,ENTER_ANL_10, OIL, CV4_DFLT_CURR_CODE,  CV4_CONV_CODE_CTRL,CV5_DFLT_CURR_CODE,CV5_CONV_CODE_CTRL,BANK_CURR_REQD,ACNT_LINKS_ALLOWED,PASP_ACNT_TYPE)
  VALUES ('`+ACNT_CODE+`',1,'`+alias.(string)+`','`+substring+`','`+DESCR+`','`+LOOKUP+`', '`+LOOKUP+`', NULL, `+ACNT_TYPE+`,  `+BAL_TYPE+`, `+STATUS+`, 0, '`+DESCR+`', 2, 'MXP1',  0,'`+LINK_ACNT+`',  0 , NULL, 0, `+ENTER_ANL_1+`, `+ENTER_ANL_2+`, `+ENTER_ANL_3+`, `+ENTER_ANL_4+`, `+ENTER_ANL_5+`, `+ENTER_ANL_6+`, `+ENTER_ANL_7+`, `+ENTER_ANL_8+`, `+ENTER_ANL_9+`, `+ENTER_ANL_10+`, NULL, 'MXP1', 2, NULL, 2, 0, 0, 0)`
    result , err := conn.Exec(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon insert cuenta! : ", err.Error())
    }
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      var numeroDimension string
      //Dimension 1
      if Compare(D1,"")!=0{//diferente a cadena vacia
        queryDireccion1 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ANL_ENT_ID = 152 AND ENTRY_NUM = 1"
        rowsDireccion1, _ := conn.Query(queryDireccion1)
        if rowsDireccion1.Next()  {
          rowsDireccion1.Scan(&numeroDimension)
          queryDireccion11 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ACNT_ANL_CAT] WHERE ANL_CAT_ID = '"+numeroDimension+"' AND ACNT_CODE = '"+ACNT_CODE+"'"
          rowsDireccion11, _ := conn.Query(queryDireccion11)
          if rowsDireccion11.Next()  {
          }else{
            query1 := `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT_ANL_CAT]
             (ANL_CAT_ID,ACNT_CODE,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,ANL_CODE)
              VALUES ('`+numeroDimension+`','`+ACNT_CODE +`',1,'`+alias.(string)+`','`+substring+`','`+D1+`')`
            conn.Exec(query1)
          }
        }
      }
      //Dimension 2
      if Compare(D2,"")!=0{//diferente a cadena vacia
        queryDireccion2 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ANL_ENT_ID = 152 AND ENTRY_NUM = 2"
        rowsDireccion2, _ := conn.Query(queryDireccion2)
        if rowsDireccion2.Next()  {
          rowsDireccion2.Scan(&numeroDimension)
          queryDireccion22 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ACNT_ANL_CAT] WHERE ANL_CAT_ID = '"+numeroDimension+"' AND ACNT_CODE = '"+ACNT_CODE+"'"
          rowsDireccion22, _ := conn.Query(queryDireccion22)
          if rowsDireccion22.Next()  {
          }else{
            query2 := `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT_ANL_CAT]
             (ANL_CAT_ID,ACNT_CODE,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,ANL_CODE)
              VALUES ('`+numeroDimension+`','`+ACNT_CODE +`',1,'`+alias.(string)+`','`+substring+`','`+D2+`')`
            conn.Exec(query2)
          }
        }
      }
      //Dimension 3
      if Compare(D3,"")!=0{//diferente a cadena vacia
        queryDireccion3 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ANL_ENT_ID = 152 AND ENTRY_NUM = 3"
        rowsDireccion3, _ := conn.Query(queryDireccion3)
        if rowsDireccion3.Next()  {
          rowsDireccion3.Scan(&numeroDimension)
          queryDireccion33 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ACNT_ANL_CAT] WHERE ANL_CAT_ID = '"+numeroDimension+"' AND ACNT_CODE = '"+ACNT_CODE+"'"
          rowsDireccion33, _ := conn.Query(queryDireccion33)
          if rowsDireccion33.Next()  {
          }else{
            query3 := `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT_ANL_CAT]
             (ANL_CAT_ID,ACNT_CODE,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,ANL_CODE)
              VALUES ('`+numeroDimension+`','`+ACNT_CODE +`',1,'`+alias.(string)+`','`+substring+`','`+D3+`')`
            conn.Exec(query3)
          }
        }
      }
      //Dimension 4
      if Compare(D4,"")!=0{//diferente a cadena vacia
        queryDireccion4 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ANL_ENT_ID = 152 AND ENTRY_NUM = 4"
        rowsDireccion4, _ := conn.Query(queryDireccion4)
        if rowsDireccion4.Next()  {
          rowsDireccion4.Scan(&numeroDimension)
          queryDireccion44 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ACNT_ANL_CAT] WHERE ANL_CAT_ID = '"+numeroDimension+"' AND ACNT_CODE = '"+ACNT_CODE+"'"
          rowsDireccion44, _ := conn.Query(queryDireccion44)
          if rowsDireccion44.Next()  {
          }else{
            query4 := `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT_ANL_CAT]
             (ANL_CAT_ID,ACNT_CODE,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,ANL_CODE)
              VALUES ('`+numeroDimension+`','`+ACNT_CODE +`',1,'`+alias.(string)+`','`+substring+`','`+D4+`')`
            conn.Exec(query4)
          }
        }
      }
      //Dimension 5
      if Compare(D5,"")!=0{//diferente a cadena vacia
        queryDireccion5 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ANL_ENT_ID = 152 AND ENTRY_NUM = 5"
        rowsDireccion5, _ := conn.Query(queryDireccion5)
        if rowsDireccion5.Next()  {
          rowsDireccion5.Scan(&numeroDimension)
          queryDireccion55 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ACNT_ANL_CAT] WHERE ANL_CAT_ID = '"+numeroDimension+"' AND ACNT_CODE = '"+ACNT_CODE+"'"
          rowsDireccion55, _ := conn.Query(queryDireccion55)
          if rowsDireccion55.Next()  {
          }else{
            query5 := `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT_ANL_CAT]
             (ANL_CAT_ID,ACNT_CODE,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,ANL_CODE)
              VALUES ('`+numeroDimension+`','`+ACNT_CODE +`',1,'`+alias.(string)+`','`+substring+`','`+D5+`')`
            conn.Exec(query5)
          }
        }
      }
      //Dimension 6
      if Compare(D6,"")!=0{//diferente a cadena vacia
        queryDireccion6 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ANL_ENT_ID = 152 AND ENTRY_NUM = 6"
        rowsDireccion6, _ := conn.Query(queryDireccion6)
        if rowsDireccion6.Next()  {
          rowsDireccion6.Scan(&numeroDimension)
          queryDireccion66 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ACNT_ANL_CAT] WHERE ANL_CAT_ID = '"+numeroDimension+"' AND ACNT_CODE = '"+ACNT_CODE+"'"
          rowsDireccion66, _ := conn.Query(queryDireccion66)
          if rowsDireccion66.Next()  {
          }else{
            query6 := `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT_ANL_CAT]
             (ANL_CAT_ID,ACNT_CODE,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,ANL_CODE)
              VALUES ('`+numeroDimension+`','`+ACNT_CODE +`',1,'`+alias.(string)+`','`+substring+`','`+D6+`')`
            conn.Exec(query6)
          }
        }
      }
      //Dimension 7
      if Compare(D7,"")!=0{//diferente a cadena vacia
        queryDireccion7 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ANL_ENT_ID = 152 AND ENTRY_NUM = 7"
        rowsDireccion7, _ := conn.Query(queryDireccion7)
        if rowsDireccion7.Next()  {
          rowsDireccion7.Scan(&numeroDimension)
          queryDireccion77 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ACNT_ANL_CAT] WHERE ANL_CAT_ID = '"+numeroDimension+"' AND ACNT_CODE = '"+ACNT_CODE+"'"
          rowsDireccion77, _ := conn.Query(queryDireccion77)
          if rowsDireccion77.Next()  {
          }else{
            query7 := `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT_ANL_CAT]
             (ANL_CAT_ID,ACNT_CODE,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,ANL_CODE)
              VALUES ('`+numeroDimension+`','`+ACNT_CODE +`',1,'`+alias.(string)+`','`+substring+`','`+D7+`')`
            conn.Exec(query7)
          }
        }
      }
      //Dimension 8
      if Compare(D8,"")!=0{//diferente a cadena vacia
        queryDireccion8 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ANL_ENT_ID = 152 AND ENTRY_NUM = 8"
        rowsDireccion8, _ := conn.Query(queryDireccion8)
        if rowsDireccion8.Next()  {
          rowsDireccion8.Scan(&numeroDimension)
          queryDireccion88 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ACNT_ANL_CAT] WHERE ANL_CAT_ID = '"+numeroDimension+"' AND ACNT_CODE = '"+ACNT_CODE+"'"
          rowsDireccion88, _ := conn.Query(queryDireccion88)
          if rowsDireccion88.Next()  {
          }else{
            query8 := `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT_ANL_CAT]
             (ANL_CAT_ID,ACNT_CODE,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,ANL_CODE)
              VALUES ('`+numeroDimension+`','`+ACNT_CODE +`',1,'`+alias.(string)+`','`+substring+`','`+D8+`')`
            conn.Exec(query8)
          }
        }
      }
      //Dimension 9
      if Compare(D9,"")!=0{//diferente a cadena vacia
        queryDireccion9 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ANL_ENT_ID = 152 AND ENTRY_NUM = 9"
        rowsDireccion9, _ := conn.Query(queryDireccion9)
        if rowsDireccion9.Next()  {
          rowsDireccion9.Scan(&numeroDimension)
          queryDireccion99 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ACNT_ANL_CAT] WHERE ANL_CAT_ID = '"+numeroDimension+"' AND ACNT_CODE = '"+ACNT_CODE+"'"
          rowsDireccion99, _ := conn.Query(queryDireccion99)
          if rowsDireccion99.Next()  {
          }else{
            query9 := `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT_ANL_CAT]
             (ANL_CAT_ID,ACNT_CODE,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,ANL_CODE)
              VALUES ('`+numeroDimension+`','`+ACNT_CODE +`',1,'`+alias.(string)+`','`+substring+`','`+D9+`')`
            conn.Exec(query9)
          }
        }
      }
      //Dimension 10
      if Compare(D10,"")!=0{//diferente a cadena vacia
        queryDireccion10 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ANL_ENT_ID = 152 AND ENTRY_NUM = 10"
        rowsDireccion10, _ := conn.Query(queryDireccion10)
        if rowsDireccion10.Next()  {
          rowsDireccion10.Scan(&numeroDimension)
          queryDireccion110 := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ACNT_ANL_CAT] WHERE ANL_CAT_ID = '"+numeroDimension+"' AND ACNT_CODE = '"+ACNT_CODE+"'"
          rowsDireccion110, _ := conn.Query(queryDireccion110)
          if rowsDireccion110.Next()  {
          }else{
            query10 := `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT_ANL_CAT]
             (ANL_CAT_ID,ACNT_CODE,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,ANL_CODE)
              VALUES ('`+numeroDimension+`','`+ACNT_CODE +`',1,'`+alias.(string)+`','`+substring+`','`+D10+`')`
            conn.Exec(query10)
          }
        }
      }
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":3}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 
func (c *NuevoUsuarioIglesiaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    nombre := c.GetString("nombre")
    correo := c.GetString("correo")
    password := c.GetString("password")
    passwordPrimo := []byte(password)
    hasher := sha512.New()
      hasher.Write(passwordPrimo)
    cryptoText := base64.StdEncoding.EncodeToString(hasher.Sum(nil))
    iglesia := c.GetString("iglesia")
    name := c.GetString("name")
    BUNIT :=  c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    query := `INSERT INTO [SunSystemsData].[dbo].[users] (usuario, pass, activo, alias, BUNIT, tipoDeUsuario, caducidad, dimension, nombre, iglesia) 
    VALUES ('`+correo+`', '`+cryptoText+`', 1, '', '`+BUNIT.(string)+`', 5, 0, '`+iglesia+`', '`+nombre+`', '`+name+`')`
    result , err := conn.Exec(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon insert! : ", err.Error())
    }
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 
func (c *NuevoDiezmoConceptoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    nombre := c.GetString("nombre")
    BUNIT :=  c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    query := `INSERT INTO [SunSystemsData].[dbo].[DiezmoConcepto] ( concepto, activo, BUNIT) 
    VALUES ('`+nombre+`', 1, '`+BUNIT.(string)+`')`
    result , err := conn.Exec(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon insert! : ", err.Error())
    }
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *GuardarConceptoCedulasController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    idCedula := c.GetString("idCedula")
    nombre := c.GetString("nombre")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    query := `INSERT INTO [SunSystemsData].[dbo].[CedulasConceptos] (idCedula,nombre) VALUES (`+idCedula+`, '`+nombre+`')`
    result , err := conn.Exec(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon insert! : ", err.Error())
    }
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 



func (c *ContabilizaDiarioController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    correo := c.GetSession("usuario")
    timestamp := c.GetString("timestamp")
    idTipoDeDiario := c.GetString("idTipoDeDiario")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }

    var debitos float64
    var creditos float64
    
    queryDebitos := "SELECT ISNULL(SUM(AMOUNT),0) as amount FROM [SunSystemsData].[dbo].[DiariosRetenidos] WHERE idTipoDeDiario = "+idTipoDeDiario+" AND usuario = '"+alias.(string)+"' AND timestamp = "+timestamp+" AND D_C = 'D'"
    rowsDebitos, _ := conn.Query(queryDebitos)
    if rowsDebitos.Next()  {
      rowsDebitos.Scan(&debitos)
    }

    queryCreditos := "SELECT ISNULL(SUM(AMOUNT),0) as amount FROM [SunSystemsData].[dbo].[DiariosRetenidos] WHERE idTipoDeDiario = "+idTipoDeDiario+" AND usuario = '"+alias.(string)+"' AND timestamp = "+timestamp+" AND D_C = 'C'"
    rowsCreditos, _ := conn.Query(queryCreditos)
    if rowsCreditos.Next()  {
      rowsCreditos.Scan(&creditos)
    }
    if debitos!=creditos {
      example := map[string]interface{}{ "success":2, "debitos" : debitos, "creditos" : creditos}
      c.Data["json"] = &example
      c.ServeJSON()
      return;
    }
    var codigo string

    queryCodigo := "SELECT Codigo FROM [SunSystemsData].[dbo].[TiposDeDiario] WHERE idTipoDeDiario = "+idTipoDeDiario+" AND BUNIT = '"+BUNIT.(string)+"'"
    rowsCodigo, _ := conn.Query(queryCodigo)
    if rowsCodigo.Next()  {
      rowsCodigo.Scan(&codigo)
    }

    var diario int
    query1 := "SELECT ISNULL((MAX(JRNAL_NO)+1),1) as JRNAL_NO FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG]"
      rows1, err1 := conn.Query(query1)
      if err1 != nil {
        defer conn.Close()
      fmt.Println("Perdon! Error en querys hardcodeados: ", err1.Error())
    }
      if rows1.Next()  {
      rows1.Scan(&diario)
    }
    JRNAL_NO := strconv.Itoa(diario)

    queryAver := `SELECT idLinea,lineaG,lineaT,referencia,DESCRIPTN,ACNT_CODE,D_C,AMOUNT,ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8,ANAL_T9,fecha
  FROM [SunSystemsData].[dbo].[DiariosRetenidos]
  WHERE BUNIT = '`+BUNIT.(string)+`' AND usuario = '`+alias.(string)+`' AND timestamp = `+timestamp+`
  order by lineaG asc`
    rowsAver, errA := conn.Query(queryAver)
    if errA != nil {
      defer conn.Close()
      fmt.Println("Perdon select Diario! : ", errA.Error())
    }
    todos := 0
    cuantos := 0
    for rowsAver.Next()  {
      var idLinea int
      var lineaG int
      var lineaT int
      var referencia string
      var DESCRIPTN string
      var ACNT_CODE string
      var fecha string
      var D_C string
      var AMOUNT float64
      var ANAL_T0 string
      var ANAL_T1 string
      var ANAL_T2 string
      var ANAL_T3 string
      var ANAL_T4 string
      var ANAL_T5 string
      var ANAL_T6 string
      var ANAL_T7 string
      var ANAL_T8 string
      var ANAL_T9 string
      rowsAver.Scan(&idLinea,&lineaG, &lineaT, &referencia, &DESCRIPTN, &ACNT_CODE, &D_C, &AMOUNT, &ANAL_T0, &ANAL_T1, &ANAL_T2, &ANAL_T3, &ANAL_T4, &ANAL_T5, &ANAL_T6, &ANAL_T7, &ANAL_T8, &ANAL_T9, &fecha)
      amountString := fmt.Sprintf("%.2f", AMOUNT)
      mes:=string(fecha[0:2])
      dia:=string(fecha[3:5])
      anio:=string(fecha[6:10])
      fechaBuena:=anio+"-"+mes+"-"+dia
      PERIOD:=anio+"0"+mes
      lineaGG := strconv.Itoa(lineaG)

      queryFactura := "SELECT deboFacturar, servicio, cliente, concepto FROM [SunSystemsData].[dbo].[TiposDeDiarioLineas] WHERE idTipoDeDiario = "+idTipoDeDiario+" AND Linea = "+strconv.Itoa(lineaT)
      rowsFactura, errB := conn.Query(queryFactura)
        
      if errB != nil {
        defer conn.Close()
        fmt.Println("Perdon select Diario! : ", errB.Error())
      }

      if rowsFactura.Next()  {
        var deboFacturar int
        var servicio string
        var cliente string
        var concepto string
        rowsFactura.Scan(&deboFacturar, &servicio, &cliente, &concepto)

        if deboFacturar == 1 {
          Empresa := ""
          pass := ""

          queryOpciones := `SELECT Empresa, pass
          FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '`+BUNIT.(string)+`'`
          rowsOpciones, errOpciones := conn.Query(queryOpciones)
          if errOpciones != nil {
            defer conn.Close()
            fmt.Println("Perdon opciones! : ", errOpciones.Error())
          }
          if rowsOpciones.Next()  {
            rowsOpciones.Scan(&Empresa, &pass)
            uDec, errorx := base64.StdEncoding.DecodeString(pass)
            if errorx != nil {
              fmt.Println(errorx)
            }
            uDecS := string(uDec) 
            resp, err := http.Get("http://umn.redirectme.net:755/factura?Empresa="+Empresa+"&cliente="+cliente+"&concepto="+concepto+"&servicio="+servicio+"&precio="+amountString+"&contra="+uDecS+"&correoReceptor="+correo.(string)+"&diario="+strconv.Itoa(diario)+"&linea="+lineaGG+"&BUNIT="+BUNIT.(string))
            if err != nil {
              fmt.Println(errorx)
            }
            defer resp.Body.Close()
            body, err := ioutil.ReadAll(resp.Body)
            fmt.Printf("%s", body)
          }
        }
        
      }




      queryInsert := `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
       (TREFERENCE, ACCNT_CODE, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, DESCRIPTN,
        AMOUNT, OTHER_AMT, CONV_CODE, D_C, PERIOD, TRANS_DATETIME, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, 
        ENTRY_DATETIME, ENTRY_PRD, DUE_DATETIME, CONV_RATE, POSTING_DATETIME, CV4_CONV_CODE, CV4_AMT, CV4_CONV_RATE, CV4_OPERATOR, ORIGINATOR_ID, POSTER_ID, JNL_REVERSAL_TYPE, SPLIT_IN_PROGRESS, AUTHORISTN_IN_PROGRESS, MAN_PAY_OVER, APRVLS_EXTSN, SUPPLMNTRY_EXTSN, TRUE_RATED, AGREED_STATUS, BINDER_STATUS, PRINCIPAL_REQD, SPLIT_ORIG_LINE, CV5_DP, CV5_OPERATOR, CV5_CONV_RATE, CV5_AMT, CV5_CONV_CODE, CV4_DP, CONSUMED_BDGT_ID, LE_DETAILS_IND, EXCLUDE_BAL, MEMO_AMT, REPORT_AMT, REPORT_OPERATOR, REPORT_RATE, CONV_OPERATOR, BASE_OPERATOR, BASE_RATE, HOLD_OP_ID, HOLD_REF, ALLOC_IN_PROGRESS, ALLOCATION, ALLOC_REF, ALLOC_PERIOD, ASSET_IND, ASSET_CODE, ASSET_SUB, OTHER_DP, CLEARDOWN, REVERSAL, LOSS_GAIN, ROUGH_FLAG, IN_USE_FLAG, ORIGINATED_DATETIME) VALUES 
('`+referencia+`','`+ACNT_CODE+`', '`+ANAL_T0+`', '`+ANAL_T1+`', '`+ANAL_T2+`', '`+ANAL_T3+`', '`+ANAL_T4+`', '`+ANAL_T5+`', '`+ANAL_T6+`', '`+ANAL_T7+`', '`+ANAL_T8+`', '`+ANAL_T9+`', '`+DESCRIPTN+`',
 `+amountString+`, `+amountString+`, 'MXP1', '`+D_C+`', `+PERIOD+`, '`+fechaBuena+`', `+JRNAL_NO+`, `+lineaGG+`, '`+codigo+`', '`+alias.(string)+`', 
 '`+fechaBuena+`', `+PERIOD+`, '`+fechaBuena+`', 1.0000000, '`+fechaBuena+`', 'MXP1', `+amountString+`, 1.0000000, '*', '`+alias.(string)+`', '`+alias.(string)+`', 0, 0, 0, 0 ,0 ,0, 0, 0, '', 0, 0, '2', '*', 0.00, 0.00, '', '2', 0, '', '', 0.0, 0.0, '*', 0.0, '*', '*', 1.0000, '', 0, '', '', 0, 0, '', '', '', '2', '00000', '', '', '', '', '`+fechaBuena+`')`
        todos = todos + 1
        result , errI := conn.Exec(queryInsert)
        if errI != nil {
        defer conn.Close()
        fmt.Println("Perdon insert o updateY! : ", errI.Error())
      }
      afectados, _ := result.RowsAffected()
      if afectados == 1 {
        cuantos = cuantos + 1
      }
    } 
    if cuantos == todos {
      if cuantos != 0{
        queryDELETE := `DELETE FROM [SunSystemsData].[dbo].[DiariosRetenidos]
          WHERE BUNIT = '`+BUNIT.(string)+`' AND usuario = '`+alias.(string)+`' AND timestamp = `+timestamp
        conn.Exec(queryDELETE)


        example := map[string]interface{}{ "success":1, "diario" : JRNAL_NO}
        c.Data["json"] = &example
        c.ServeJSON()
      }
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 


func (c *GuardarConfigOpcionesController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    pass := c.GetString("pass")
    Empresa := c.GetString("Empresa")
    rfc := c.GetString("rfc")
    base := c.GetString("base")
    PCENT_AFROUMN := c.GetString("PCENT_AFROUMN")
    PCENT_SALUD := c.GetString("PCENT_SALUD")
    Parte_Exenta := c.GetString("Parte_Exenta")
    rfcAnterior := c.GetString("rfcAnterior")
    regimen := c.GetString("regimen")

    razonSocial := c.GetString("razonSocial")
    regPatronal := c.GetString("regPatronal")
    lugarExpedicion := c.GetString("lugarExpedicion")

    periodoTimbrado := c.GetString("periodoTimbrado") 
    tipoDimension := c.GetString("tipoDimension")

    cryptoText := base64.StdEncoding.EncodeToString(  []byte(pass))
  

    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
  defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }


    query := `INSERT INTO [Sevenplus].[dbo].[zConfig] (base, PCENT_AFROUMN, PCENT_SALUD, Parte_Exenta, rfcAnterior, periodoTimbrado, BUNIT, pass, Empresa , tipoDimension, rfc, regimen, razonSocial, regPatronal, lugarExpedicion) VALUES
     (`+base+`, `+PCENT_AFROUMN+`, `+PCENT_SALUD+`, `+Parte_Exenta+`, '`+rfcAnterior+`', '`+periodoTimbrado+`', '`+BUNIT.(string)+`', '`+cryptoText+`', '`+Empresa+`',`+tipoDimension+`, '`+rfc+`', '`+regimen+`', '`+razonSocial+`', '`+regPatronal+`', '`+lugarExpedicion+`')`
    queryAver := "SELECT idConfig FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '"+BUNIT.(string)+"'"
    rowsAver, _ := conn.Query(queryAver)
    if rowsAver.Next()  {
      var idConfig int
      rowsAver.Scan(&idConfig)
      idConfigS := strconv.Itoa(idConfig)
      query = `UPDATE [Sevenplus].[dbo].[zConfig] SET base = `+base+`, 
      PCENT_AFROUMN = `+PCENT_AFROUMN+`, 
      PCENT_SALUD = `+PCENT_SALUD+`, 
      Parte_Exenta = `+Parte_Exenta+`, 
      rfcAnterior =  '`+rfcAnterior+`', 
      Empresa = '`+Empresa+`', 
      pass = '`+cryptoText+`', 
      tipoDimension = `+tipoDimension+`,
      rfc = '`+rfc+`',
      periodoTimbrado = '`+periodoTimbrado+`',
      regimen = '`+regimen+`',
      razonSocial = '`+razonSocial+`',
      regPatronal = '`+regPatronal+`',
      lugarExpedicion = '`+lugarExpedicion+`'
      WHERE idConfig =  `+ idConfigS
  } 
  result , err := conn.Exec(query)
  if err != nil {
    defer conn.Close()
    fmt.Println("Perdon insert o updateX! : ", err.Error())
  }
  afectados, _ := result.RowsAffected()
  if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *NuevoLineasDeDiarioController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    timestamp := c.GetString("timestamp")
    lineaG := c.GetString("lineaG")
    lineaT := c.GetString("lineaT")
    ref := c.GetString("ref")
    fecha := c.GetString("fecha")
    DESCRIPTN := c.GetString("descripcion")
    AMOUNT := c.GetString("AMOUNT")
    ACNT_CODE := c.GetString("ACNT_CODE")
    D_C := c.GetString("D_C")
    idTipoDeDiario := c.GetString("idTipoDeDiario")
    ANAL_T0 := c.GetString("ANAL_T0")
    ANAL_T1 := c.GetString("ANAL_T1")
    ANAL_T2 := c.GetString("ANAL_T2")
    ANAL_T3 := c.GetString("ANAL_T3")
    ANAL_T4 := c.GetString("ANAL_T4")
    ANAL_T5 := c.GetString("ANAL_T5")
    ANAL_T6 := c.GetString("ANAL_T6")
    ANAL_T7 := c.GetString("ANAL_T7")
    ANAL_T8 := c.GetString("ANAL_T8")
    ANAL_T9 := c.GetString("ANAL_T9")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }


    query := `INSERT INTO [SunSystemsData].[dbo].[DiariosRetenidos] (idTipoDeDiario,BUNIT,lineaG, lineaT , timestamp , usuario, referencia, fecha, ACNT_CODE, DESCRIPTN, D_C, AMOUNT,  ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9 ) VALUES
     ( `+idTipoDeDiario+`, '`+BUNIT.(string)+`',`+lineaG+`,`+lineaT+`,`+timestamp+`,'`+alias.(string)+`' ,'`+ref+`' ,'`+fecha+`','`+ACNT_CODE+`' ,'`+DESCRIPTN+`' ,'`+D_C+`' , `+AMOUNT+`, '`+ANAL_T0+`' ,'`+ANAL_T1+`' ,'`+ANAL_T2+`' ,'`+ANAL_T3+`' ,'`+ANAL_T4+`' ,'`+ANAL_T5+`' ,'`+ANAL_T6+`' ,'`+ANAL_T7+`' ,'`+ANAL_T8+`' ,'`+ANAL_T9+`' )`
    queryAver := "SELECT idLinea FROM [SunSystemsData].[dbo].[DiariosRetenidos] WHERE idTipoDeDiario = "+idTipoDeDiario+" AND usuario = '"+alias.(string)+"' AND timestamp = "+timestamp+" AND lineaG = "+lineaG+""
    rowsAver, _ := conn.Query(queryAver)
    if rowsAver.Next()  {
      var idLinea int
      rowsAver.Scan(&idLinea)
      idLineaS := strconv.Itoa(idLinea)
      query = `UPDATE [SunSystemsData].[dbo].[DiariosRetenidos] SET ACNT_CODE = '`+ACNT_CODE+`', referencia = '`+ref+`', fecha = '`+fecha+`', DESCRIPTN = '`+DESCRIPTN+`', AMOUNT = '`+AMOUNT+`', D_C = '`+D_C+`',
      ANAL_T0 = '`+ANAL_T0+`',
      ANAL_T1 = '`+ANAL_T1+`',
      ANAL_T2 = '`+ANAL_T2+`',
      ANAL_T3 = '`+ANAL_T3+`',
      ANAL_T4 = '`+ANAL_T4+`',
      ANAL_T5 = '`+ANAL_T5+`',
      ANAL_T6 = '`+ANAL_T6+`',
      ANAL_T7 = '`+ANAL_T7+`',
      ANAL_T8 = '`+ANAL_T8+`',
      ANAL_T9 = '`+ANAL_T9+`' WHERE idLinea =  `+ idLineaS
    } 
    result , err := conn.Exec(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon insert o updateX! : ", err.Error())
    }
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      var debitos float64
      var creditos float64
      
      queryDebitos := "SELECT ISNULL(SUM(AMOUNT),0) as amount FROM [SunSystemsData].[dbo].[DiariosRetenidos] WHERE idTipoDeDiario = "+idTipoDeDiario+" AND usuario = '"+alias.(string)+"' AND timestamp = "+timestamp+" AND D_C = 'D' AND referencia = '"+ref+"'"
      rowsDebitos, _ := conn.Query(queryDebitos)
      if rowsDebitos.Next()  {
        rowsDebitos.Scan(&debitos)
      }

      queryCreditos := "SELECT ISNULL(SUM(AMOUNT),0) as amount FROM [SunSystemsData].[dbo].[DiariosRetenidos] WHERE idTipoDeDiario = "+idTipoDeDiario+" AND usuario = '"+alias.(string)+"' AND timestamp = "+timestamp+" AND D_C = 'C' AND referencia = '"+ref+"'"
      rowsCreditos, _ := conn.Query(queryCreditos)
      if rowsCreditos.Next()  {
        rowsCreditos.Scan(&creditos)
      }

      example := map[string]interface{}{ "success":1, "debitos" : debitos, "creditos" : creditos}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 


func (c *SubeLineasDiezmoConceptoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    idDiezmoLinea := c.GetString("idDiezmoLinea")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    var orden int
    var idDiezmoConcepto int
    queryAver := `SELECT orden, idDiezmoConcepto FROM [SunSystemsData].[dbo].[DiezmoLinea] 
      WHERE idDiezmoLinea = `+idDiezmoLinea
    rowsAver, errorx := conn.Query(queryAver)
    if errorx != nil {
      fmt.Println(errorx.Error())
      fmt.Println("Perdon! Open connection failed:", errorx.Error())
      return
    }
    if rowsAver.Next()  {
      rowsAver.Scan(&orden, &idDiezmoConcepto)
      if orden == 1 {
        example := map[string]interface{}{ "success":1}
        c.Data["json"] = &example
        c.ServeJSON()
        return
      } else {
        nuevoOrden := orden - 1
        query2 := `UPDATE [SunSystemsData].[dbo].[DiezmoLinea] SET orden = `+strconv.Itoa(orden)+` WHERE orden = `+strconv.Itoa(nuevoOrden)+` AND idDiezmoConcepto = `+strconv.Itoa(idDiezmoConcepto)
        conn.Exec(query2)
        query := `UPDATE [SunSystemsData].[dbo].[DiezmoLinea] SET orden = `+strconv.Itoa(nuevoOrden)+` WHERE idDiezmoLinea = `+idDiezmoLinea
        conn.Exec(query)
        example := map[string]interface{}{ "success":1}
        c.Data["json"] = &example
        c.ServeJSON()
        return
      }
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 





func (c *ImprimirRecibosYaTimbradosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")

    periodo := c.GetString("periodo")
    outputPath :="static\\manuntencion\\3.3\\"+BUNIT.(string)+"\\"+periodo+"\\TODOS.pdf"
    fileList := []string{}
      
/*    searchDir :="static\\manuntencion\\"+BUNIT.(string)+"\\"+periodo
    err := filepath.Walk(searchDir, func(path string, f os.FileInfo, err error) error {
        if strings.Contains(path, "_TIMBRADO") {
          if strings.Contains(path, ".pdf") {
              fileList = append(fileList, path)
            }
          }
          return nil
      })
      */
      searchDir :="static\\manuntencion\\3.3\\"+BUNIT.(string)+"\\"+periodo
      err := filepath.Walk(searchDir, func(path string, f os.FileInfo, err error) error {
        if strings.Contains(path, "_TIMBRADO") {
          if strings.Contains(path, ".pdf") {
              fileList = append(fileList, path)
            }
          }
          return nil
      })
    

      err = initUniDoc("")
    if err != nil {
      fmt.Printf("Error licencia: %v\n", err)
      os.Exit(1)
    }
    fmt.Println(fileList)
    err = mergePdf(fileList, outputPath)
    if err != nil {
      fmt.Printf("Error mergepdf: %v\n", err)
      //os.Exit(1)
    }
    example := map[string]interface{}{ "success":1,"pdf" : outputPath}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 
func (c *CargaManuntencionPersonaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := ""
    BUNITx := c.GetSession("BUNIT")
    BUNIT = BUNITx.(string)
    BTemp := c.GetString("BUNITViejito")
    if BTemp == "" {
    } else {
      BUNIT = c.GetString("BUNITViejito")
    }


    ER := c.GetString("ER")
    ER = strings.TrimSpace(ER)
    var TipoRegimen string
    var SDI float64
    var Departamento string
    var PeriodicidadPago string
    var RiesgoPuesto string
    var TipoJornada string
    var TipoContrato string
    var FechaInicioRelLaboral string
    var NumSeguridadSocial string
    var NumEmpleado string
    var CURP string
    var RFC string
    var Nombre string
    var Correo string
    var c_Pais string
    var c_Estado string
    var c_Banco string
    var CuentaBancaria string
    var PCENT_Manutencion float64
    var PCENT_Posgrado float64
    var PCENT_Ministerial float64
    var PCENT_Pulpito float64
    var PCENT_Extraordinaria float64
    var ayuda_renta float64
    var unidades_seguro float64
    var proyecto string
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryAver := `SELECT ISNULL(PCENT_Manutencion,0),
    ISNULL(PCENT_Posgrado,0),
    ISNULL(PCENT_Ministerial,0),
    ISNULL(PCENT_Pulpito,0),
    ISNULL(PCENT_Extraordinaria,0),
    ISNULL(ayuda_renta,0),
    ISNULL(unidades_seguro,0),
    ISNULL(proyecto,''),
    CuentaBancaria,  c_Banco, c_Pais, c_Estado, ISNULL(SDI,0), correo, nombre, rfc, curp, numEmpleado, TipoContrato, TipoJornada, NumSeguridadSocial, FechaInicioRelLaboral, RiesgoPuesto, PeriodicidadPago, Departamento, TipoRegimen 
    FROM [Sevenplus].[dbo].[nomina] 
    WHERE ER = '`+ER+`' AND BUNIT = '`+BUNIT+`'`
    rowsAver, errorx := conn.Query(queryAver)
    if errorx != nil {
      fmt.Println(errorx.Error())
      fmt.Println(queryAver)
      fmt.Println("Perdon! Open connection failed:", errorx.Error())
      return
    }
    if rowsAver.Next()  {
      rowsAver.Scan(&PCENT_Manutencion, &PCENT_Posgrado, &PCENT_Ministerial, &PCENT_Pulpito, &PCENT_Extraordinaria, &ayuda_renta, &unidades_seguro, &proyecto, &CuentaBancaria, &c_Banco, &c_Pais, &c_Estado, &SDI, &Correo, &Nombre, &RFC, &CURP, &NumEmpleado, &TipoContrato, &TipoJornada, &NumSeguridadSocial, &FechaInicioRelLaboral, &RiesgoPuesto, &PeriodicidadPago, &Departamento, &TipoRegimen)
      amountString := fmt.Sprintf("%.2f", SDI)
      example := map[string]interface{}{ "success":1, "ayuda_renta" : ayuda_renta, "unidades_seguro" : unidades_seguro, "proyecto" : proyecto, "PCENT_Manutencion" : PCENT_Manutencion,"PCENT_Posgrado" : PCENT_Posgrado,"PCENT_Ministerial" : PCENT_Ministerial,"PCENT_Pulpito" : PCENT_Pulpito,"PCENT_Extraordinaria" : PCENT_Extraordinaria,"CuentaBancaria" : CuentaBancaria, "SDI" : amountString, "correo" : Correo,"nombre" : Nombre, "rfc" : RFC,"curp" : CURP,"numEmpleado" : NumEmpleado, "TipoContrato" : TipoContrato,"TipoJornada" : TipoJornada,"NumSeguridadSocial" : NumSeguridadSocial,"FechaInicioRelLaboral" : FechaInicioRelLaboral,"RiesgoPuesto" : RiesgoPuesto,"PeriodicidadPago" : PeriodicidadPago,"Departamento" : Departamento,"TipoRegimen" : TipoRegimen ,"c_Banco" : c_Banco ,"c_Pais" : c_Pais ,"c_Estado" : c_Estado}
      c.Data["json"] = &example
      c.ServeJSON()
      return
      
    } else {
      fmt.Println(queryAver)
      example := map[string]interface{}{ "success":2}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *PresupuestoEventosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    anio := c.GetString("anio")
    delPeriodo := anio+"001"
    alPeriodo := anio+"012"
    idPresupuesto := c.GetString("idPresupuesto")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    idPresupuestoViajes := 0
    queryFolio := `SELECT idPresupuestoEventos
    FROM [Sevenplus].[dbo].[PresupuestoEventos] WHERE idPresupuesto = `+idPresupuesto+``
    rowsD, errD := conn.Query(queryFolio)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    entre := 0
    if rowsD.Next()  {
      entre = 1
    }
    ANAL_T3:=""
    ANAL_T8:=""
    var AMOUNT decimal.Dec
    var DESCRIPTN string
    if entre == 0 {
      query := `SELECT ANAL_T3, ANAL_T8, SUM(AMOUNT), MAX(DESCRIPTN) FROM
      [SunSystemsData].[dbo].[`+BUNIT.(string)+`_B_SALFLDG] WHERE
      ACCNT_CODE = '862110'
      AND PERIOD >= `+delPeriodo+` AND PERIOD <= `+alPeriodo+`
      GROUP BY ANAL_T3, ANAL_T8
      ORDER BY ANAL_T3 asc, ANAL_T8 desc`
      rowsE, _ := conn.Query(query)
      for rowsE.Next()  {
        rowsE.Scan(&ANAL_T3, &ANAL_T8, &AMOUNT, &DESCRIPTN)
        queryIn := `INSERT INTO [Sevenplus].[dbo].[PresupuestoEventos]
          (idPresupuesto ,ANAL_T3 , ANAL_T8, Anual, descripcion) VALUES
          (`+idPresupuesto+`,'`+ANAL_T3+`','`+ANAL_T8+`',`+fmt.Sprintf("%.2f",math.Abs(AMOUNT.Float64()))+`, '`+DESCRIPTN+`' )`
        conn.Exec(queryIn)
      }
    }
    type Dimen struct {
      NAME string
    }
    FuncionesList := make(map[string]*Dimen)
    ProyectosList := make(map[string]*Dimen)
    
    type Viajes struct {
      ANAL_T3 string
      Anual float64
      ANAL_T8 string
      DESCRIPTN string
    }
    ViajesList := make(map[string]*Viajes)
    //FUnciones
    queryFolio = `SELECT ANL_CODE, NAME
  FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE] WHERE ANL_CAT_ID = '04' AND ANL_CODE NOT LIKE 'DT%' AND LEN(ANL_CODE) > 6 AND PROHIBIT_POSTING = 0 ORDER BY ANL_CODE ASC`
    rowsD, _ = conn.Query(queryFolio)
    for rowsD.Next()  {
      rowsD.Scan(&ANAL_T3, &ANAL_T8)
      ANAL_T3 = strings.TrimSpace(ANAL_T3)
      ANAL_T8 = strings.TrimSpace(ANAL_T8)
      FuncionesList[ANAL_T3] = &Dimen{ANAL_T8}
    }
    queryFolio = `SELECT ANL_CODE, NAME
  FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE] WHERE ANL_CAT_ID = '09' AND ANL_CODE = '*' OR (ANL_CODE NOT LIKE 'DT%' AND LEN(ANL_CODE) > 6 AND PROHIBIT_POSTING = 0) ORDER BY ANL_CODE ASC`
    rowsD, _ = conn.Query(queryFolio)
    for rowsD.Next()  {
      rowsD.Scan(&ANAL_T3, &ANAL_T8)
      ANAL_T3 = strings.TrimSpace(ANAL_T3)
      ANAL_T8 = strings.TrimSpace(ANAL_T8)
      ProyectosList[ANAL_T3] = &Dimen{ANAL_T8}
    }

    queryFolio = `SELECT ANAL_T3, ANAL_T8, Anual, idPresupuestoEventos, descripcion
    FROM [Sevenplus].[dbo].[PresupuestoEventos] WHERE idPresupuesto = `+idPresupuesto+``
    rowsD, _ = conn.Query(queryFolio)
    for rowsD.Next()  {
      rowsD.Scan(&ANAL_T3, &ANAL_T8, &AMOUNT, &idPresupuestoViajes, &DESCRIPTN)
      ANAL_T3 = strings.TrimSpace(ANAL_T3)
      ANAL_T8 = strings.TrimSpace(ANAL_T8)
      DESCRIPTN = strings.TrimSpace(DESCRIPTN)
      ViajesList[strconv.Itoa(idPresupuestoViajes)] = &Viajes{ANAL_T3, math.Abs(AMOUNT.Float64()), ANAL_T8, DESCRIPTN}
    } 
    example := map[string]interface{}{ "success":1, "viajes" : ViajesList, "funciones" : FuncionesList, "proyectos" : ProyectosList}
    c.Data["json"] = &example
    c.ServeJSON()
    return              
    
  }
} 

func (c *PresupuestoViajesController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    anio := c.GetString("anio")
    delPeriodo := anio+"001"
    alPeriodo := anio+"012"
    idPresupuesto := c.GetString("idPresupuesto")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    idPresupuestoViajes := 0
    queryFolio := `SELECT idPresupuestoViajes
    FROM [Sevenplus].[dbo].[PresupuestoViajes] WHERE idPresupuesto = `+idPresupuesto+``
    rowsD, errD := conn.Query(queryFolio)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    entre := 0
    if rowsD.Next()  {
      entre = 1
    }
    ANAL_T3:=""
    ANAL_T8:=""
    var AMOUNT decimal.Dec
    if entre == 0 {
      query := `SELECT ANAL_T3, ANAL_T8, SUM(AMOUNT) FROM
      [SunSystemsData].[dbo].[`+BUNIT.(string)+`_B_SALFLDG] WHERE
      ACCNT_CODE = '822110'
      AND PERIOD >= `+delPeriodo+` AND PERIOD <= `+alPeriodo+`
      GROUP BY ANAL_T3, ANAL_T8
      ORDER BY ANAL_T3 asc, ANAL_T8 desc`
      rowsE, _ := conn.Query(query)
      for rowsE.Next()  {
        rowsE.Scan(&ANAL_T3, &ANAL_T8, &AMOUNT)
        queryIn := `INSERT INTO [Sevenplus].[dbo].[PresupuestoViajes]
          (idPresupuesto ,ANAL_T3 , ANAL_T8, Anual) VALUES
          (`+idPresupuesto+`,'`+ANAL_T3+`','`+ANAL_T8+`',`+fmt.Sprintf("%.2f",math.Abs(AMOUNT.Float64()))+`)`
        conn.Exec(queryIn)
      }
    }
    type Dimen struct {
      NAME string
    }
    FuncionesList := make(map[string]*Dimen)
    ProyectosList := make(map[string]*Dimen)
    
    type Viajes struct {
      ANAL_T3 string
      Anual float64
      ANAL_T8 string
    }
    ViajesList := make(map[string]*Viajes)
    //FUnciones
    queryFolio = `SELECT ANL_CODE, NAME
  FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE] WHERE ANL_CAT_ID = '04' AND ANL_CODE NOT LIKE 'DT%' AND LEN(ANL_CODE) > 6 AND PROHIBIT_POSTING = 0 ORDER BY ANL_CODE ASC`
    rowsD, _ = conn.Query(queryFolio)
    for rowsD.Next()  {
      rowsD.Scan(&ANAL_T3, &ANAL_T8)
      ANAL_T3 = strings.TrimSpace(ANAL_T3)
      ANAL_T8 = strings.TrimSpace(ANAL_T8)
      FuncionesList[ANAL_T3] = &Dimen{ANAL_T8}
    }
    queryFolio = `SELECT ANL_CODE, NAME
  FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE] WHERE ANL_CAT_ID = '09' AND ANL_CODE NOT LIKE 'DT%' AND LEN(ANL_CODE) > 6 AND PROHIBIT_POSTING = 0 ORDER BY ANL_CODE ASC`
    rowsD, _ = conn.Query(queryFolio)
    for rowsD.Next()  {
      rowsD.Scan(&ANAL_T3, &ANAL_T8)
      ANAL_T3 = strings.TrimSpace(ANAL_T3)
      ANAL_T8 = strings.TrimSpace(ANAL_T8)
      ProyectosList[ANAL_T3] = &Dimen{ANAL_T8}
    }

    queryFolio = `SELECT ANAL_T3, ANAL_T8, Anual, idPresupuestoViajes
    FROM [Sevenplus].[dbo].[PresupuestoViajes] WHERE idPresupuesto = `+idPresupuesto+``
    rowsD, _ = conn.Query(queryFolio)
    for rowsD.Next()  {
      rowsD.Scan(&ANAL_T3, &ANAL_T8, &AMOUNT, &idPresupuestoViajes)
      ANAL_T3 = strings.TrimSpace(ANAL_T3)
      ANAL_T8 = strings.TrimSpace(ANAL_T8)
      ViajesList[strconv.Itoa(idPresupuestoViajes)] = &Viajes{ANAL_T3, math.Abs(AMOUNT.Float64()), ANAL_T8}
    } 
    example := map[string]interface{}{ "success":1, "viajes" : ViajesList, "funciones" : FuncionesList, "proyectos" : ProyectosList}
    c.Data["json"] = &example
    c.ServeJSON()
    return              
    
  }
} 


func (c *PresupuestoDiezmosDistritosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    anio := c.GetString("anio")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    idPresupuesto := 0
    pcentIngresoDistrito := 0.0
    delPeriodo := 0
    alPeriodo := 0

    queryFolio := `SELECT idPresupuesto, pcentIngresoDistrito, delPeriodo, alPeriodo
    FROM [Sevenplus].[dbo].[Presupuesto] WHERE anio = `+anio+` AND BUNIT = '`+BUNIT.(string)+`'`
    rowsD, errD := conn.Query(queryFolio)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    if rowsD.Next()  {
      rowsD.Scan(&idPresupuesto, &pcentIngresoDistrito, &delPeriodo, &alPeriodo)
      type Distritos struct {
        DT string
        Cantidad float64
        Original float64
        Name string
      }
      DistritosList := make(map[string]*Distritos)
      ANAL_T3 := ""
      var AMOUNT decimal.Dec
      NAME := ""
      queryAver := `SELECT a.ANAL_T3, SUM(a.AMOUNT) as cuanto , b.NAME
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] a
      INNER JOIN  [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE] b on b.ANL_CODE = a.ANAL_T3
      WHERE a.ACCNT_CODE = '611110'
      AND a.PERIOD >= `+strconv.Itoa(delPeriodo)+` AND a.PERIOD <= `+strconv.Itoa(alPeriodo)+`
      AND a.ALLOCATION != 'C' AND b.ANL_CAT_ID = '04'
      GROUP BY a.ANAL_T3, b.NAME
      ORDER BY cuanto  desc`
      rowsAver, verError := conn.Query(queryAver)
      fmt.Println (verError)
      numero := 1.0 + (pcentIngresoDistrito/100)
      fmt.Println(queryAver)
      for rowsAver.Next()  {
        rowsAver.Scan(&ANAL_T3, &AMOUNT, &NAME)
        ANAL_T3 = strings.TrimSpace(ANAL_T3)
        Original :=  math.Abs(AMOUNT.Float64() )
        AMOUNT_Float := math.Abs(AMOUNT.Float64() * numero)
        DistritosList[ANAL_T3] = &Distritos{ANAL_T3, AMOUNT_Float, Original, NAME}
      }
      example := map[string]interface{}{ "success":1, "pcentIngresoDistrito" : pcentIngresoDistrito, "distritos" : DistritosList}
      c.Data["json"] = &example
      c.ServeJSON()
      return              
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *GrabaLineaPresupuestoEventosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    idPresupuesto := c.GetString("idPresupuesto")
    proyecto := c.GetString("proyecto")
    can := c.GetString("can")
    descr := c.GetString("descr")
    funcion := c.GetString("funcion")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    
    queryAver := `INSERT INTO [Sevenplus].[dbo].[PresupuestoEventos] (idPresupuesto, ANAL_T3, ANAL_T8, Anual, descripcion) VALUES
    (`+idPresupuesto+`,'`+funcion+`','`+proyecto+`', `+can+`, '`+descr+`')`
    result , _ :=  conn.Exec(queryAver) 
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return        
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *GrabaLineaPresupuestoViajesController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    idPresupuesto := c.GetString("idPresupuesto")
    proyecto := c.GetString("proyecto")
    can := c.GetString("can")
    funcion := c.GetString("funcion")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    
    queryAver := `INSERT INTO [Sevenplus].[dbo].[PresupuestoViajes] (idPresupuesto, ANAL_T3, ANAL_T8, Anual) VALUES
    (`+idPresupuesto+`,'`+funcion+`','`+proyecto+`', `+can+` )`
    result , _ :=  conn.Exec(queryAver) 
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return        
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *EliminaLineaPresupuestoEventosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    idPresupuestoEventos := c.GetString("idPresupuestoEventos")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    
    queryAver := `DELETE FROM [Sevenplus].[dbo].[PresupuestoEventos] WHERE idPresupuestoEventos = `+idPresupuestoEventos
    result , _ :=  conn.Exec(queryAver) 
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return        
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *EliminaLineaPresupuestoViajesController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    idPresupuestoViajes := c.GetString("idPresupuestoViajes")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    
    queryAver := `DELETE FROM [Sevenplus].[dbo].[PresupuestoViajes] WHERE idPresupuestoViajes = `+idPresupuestoViajes
    result , _ :=  conn.Exec(queryAver) 
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return        
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *GrabaEventosPresupuestoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    anio := c.GetString("anio")
    valor := c.GetString("valor")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    
    queryAver := `UPDATE [Sevenplus].[dbo].[Presupuesto] SET eventos = `+valor+`
    WHERE  anio = `+anio+` AND BUNIT = '`+BUNIT.(string)+`'`
    result , _ :=  conn.Exec(queryAver) 
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return        
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *GrabaViajesPresupuestoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    anio := c.GetString("anio")
    valor := c.GetString("valor")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    
    queryAver := `UPDATE [Sevenplus].[dbo].[Presupuesto] SET viajes = `+valor+`
    WHERE  anio = `+anio+` AND BUNIT = '`+BUNIT.(string)+`'`
    result , _ :=  conn.Exec(queryAver) 
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return        
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *GrabaDiezmoPresupuestoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    anio := c.GetString("anio")
    valor := c.GetString("valor")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    
    queryAver := `UPDATE [Sevenplus].[dbo].[Presupuesto] SET diezmosDistritos = `+valor+`
    WHERE  anio = `+anio+` AND BUNIT = '`+BUNIT.(string)+`'`
    result , _ :=  conn.Exec(queryAver) 
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return        
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *GrabaPcentDiezmoPresupuestoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    anio := c.GetString("anio")
    valor := c.GetString("valor")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    
    queryAver := `UPDATE [Sevenplus].[dbo].[Presupuesto] SET pcentIngresoDistrito = `+valor+`
    WHERE  anio = `+anio+` AND BUNIT = '`+BUNIT.(string)+`'`
    result , _ :=  conn.Exec(queryAver) 
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return        
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *DameDatosPresupuestoController) Post() {
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    idPresupuesto := c.GetString("idPresupuesto")
    meses := c.GetString("meses")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    pcentIngresoDistrito := 0.0
    delPeriodo := ""
    alPeriodo := ""
    queryFolio := `SELECT pcentIngresoDistrito, delPeriodo, alPeriodo
    FROM [Sevenplus].[dbo].[Presupuesto] WHERE idPresupuesto = `+idPresupuesto+``
    rowsD, errD := conn.Query(queryFolio)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    if rowsD.Next()  {
      rowsD.Scan(&pcentIngresoDistrito, &delPeriodo, &alPeriodo)
    }
    type Distritos struct {
      DT string
      Cantidad float64
      Original float64
      Name string
    }
    DistritosList := make(map[string]*Distritos)
    ANAL_T3 := ""
    ANAL_T8 := ""
    var AMOUNT decimal.Dec
    NAME := ""
    queryAver := `SELECT a.ANAL_T3, SUM(a.AMOUNT) as cuanto , b.NAME
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] a
      INNER JOIN  [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE] b on b.ANL_CODE = a.ANAL_T3
      WHERE a.ACCNT_CODE = '611110'
      AND a.PERIOD >= `+delPeriodo+` AND a.PERIOD <= `+alPeriodo+`
      AND a.ALLOCATION != 'C' AND b.ANL_CAT_ID = '04'
      GROUP BY a.ANAL_T3, b.NAME
      ORDER BY cuanto  desc`
    rowsAver, _ := conn.Query(queryAver)
    numero := 1.0 + (pcentIngresoDistrito/100)
    mesesFloat, _ := strconv.ParseFloat(meses, 64)
    for rowsAver.Next()  {
      rowsAver.Scan(&ANAL_T3, &AMOUNT, &NAME)
      aux1 := (math.Abs(AMOUNT.Float64()) / mesesFloat) * 12.0
      aumento := aux1 * numero
      ANAL_T3 = strings.TrimSpace(ANAL_T3)
      DistritosList[ANAL_T3] = &Distritos{ANAL_T3, aumento, aux1, NAME}
    }
    type Viajes struct {
      ANAL_T3 string
      ANAL_T8 string
      Cantidad float64
    }
    ViajesList := make(map[string]*Viajes)
    idPresupuestoViajes := 0
    queryAver = `SELECT ANAL_T3, ANAL_T8, Anual, idPresupuestoViajes
      FROM [Sevenplus].[dbo].[PresupuestoViajes]
      WHERE idPresupuesto = `+idPresupuesto+``
    rowsAver, _ = conn.Query(queryAver)
    for rowsAver.Next()  {
      rowsAver.Scan(&ANAL_T3, &ANAL_T8, &AMOUNT, &idPresupuestoViajes)
      ANAL_T3 = strings.TrimSpace(ANAL_T3)
      ANAL_T8 = strings.TrimSpace(ANAL_T8)
      ViajesList[strconv.Itoa(idPresupuestoViajes)] = &Viajes{ANAL_T3, ANAL_T8, math.Abs(AMOUNT.Float64())}
    }

    example := map[string]interface{}{ "success":1, "diezmosDistritos" : DistritosList, "viajes" : ViajesList}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *PresupuestoAnioController) Post() {
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    
    anio := c.GetString("anio")
    delPeriodo := c.GetString("delPeriodo")
    alPeriodo := c.GetString("alPeriodo")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    entre := 0
    diezmosDistritos := 0.0
    viajes := 0.0
    eventos := 0.0
    idPresupuesto := 0
    queryFolio := `SELECT eventos, viajes, diezmosDistritos, idPresupuesto
    FROM [Sevenplus].[dbo].[Presupuesto] WHERE anio = `+anio+` AND BUNIT = '`+BUNIT.(string)+`'`
    rowsD, errD := conn.Query(queryFolio)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    if rowsD.Next()  {
      rowsD.Scan(&eventos, &viajes, &diezmosDistritos, &idPresupuesto)
      entre = 1
    }
    if entre == 1 {
      queryAver := `UPDATE [Sevenplus].[dbo].[Presupuesto] SET delPeriodo = `+delPeriodo+`, alPeriodo = `+alPeriodo+`
      WHERE  anio = `+anio+` AND BUNIT = '`+BUNIT.(string)+`'`
      fmt.Println(queryAver)
      result , _ :=  conn.Exec(queryAver) 
      afectados, _ := result.RowsAffected()
      if afectados == 1 {
        example := map[string]interface{}{ "success":1, "eventos" : eventos, "viajes" : viajes, "diezmosDistritos" : diezmosDistritos, "idPresupuesto" : idPresupuesto}
        c.Data["json"] = &example
        c.ServeJSON()
        return        
      }
    } else {
      query := `INSERT INTO [Sevenplus].[dbo].[Presupuesto] 
          (anio ,BUNIT , delPeriodo ,alPeriodo, pcentIngresoDistrito) VALUES
          (`+anio+`,'`+BUNIT.(string)+`',`+delPeriodo+`,`+alPeriodo+`, 0.0)`
      result , err := conn.Exec(query)
      fmt.Println(query)
      if err != nil {
        defer conn.Close()
        fmt.Println(query)
        fmt.Println("Perdon insert ! : ", err.Error())
      }
      afectados, _ := result.RowsAffected()
      if afectados == 1 {
        example := map[string]interface{}{ "success":1 , "viajes" : viajes, "diezmosDistritos" : diezmosDistritos, "idPresupuesto" : idPresupuesto}
        c.Data["json"] = &example
        c.ServeJSON()
        return
      }
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *BorraIdBancoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    idBanco := c.GetString("idBanco")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    entre := 0
    queryFolio := `SELECT idBanco
    FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] WHERE idBanco = `+idBanco
    rowsD, errD := conn.Query(queryFolio)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    if rowsD.Next()  {
      entre = 1
    }

    if entre == 0 {
      queryAver := `DELETE FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] WHERE idBanco = `+idBanco
      result , _ :=  conn.Exec(queryAver) 
      afectados, _ := result.RowsAffected()
      if afectados == 1 {
        example := map[string]interface{}{ "success":1}
        c.Data["json"] = &example
        c.ServeJSON()
        return        
      }
    } else {
      example := map[string]interface{}{ "success":2}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }

    
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *ChangeIdBancoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    idBanco := c.GetString("idBanco")
    status := c.GetString("status")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryD := "UPDATE [Sevenplus].[dbo].["+BUNIT.(string)+"_zBancos] SET STATUS = '"+status+"' WHERE idBanco = "+idBanco
    conn.Exec(queryD)
    example := map[string]interface{}{ "success":1}
    c.Data["json"] = &example
    c.ServeJSON()
    return        
  }
} 

func (c *DesligaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    idLigado := c.GetString("idLigado")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    FOLIO_FISCAL := ""
    AMOUNT := 0.0
    queryFolio := `SELECT FOLIO_FISCAL, AMOUNT
    FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] WHERE idLigado = `+idLigado
    
    rowsD, errD := conn.Query(queryFolio)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    if rowsD.Next()  {
      rowsD.Scan(&FOLIO_FISCAL, &AMOUNT)
    }
    queryFolio = `SELECT ligado
    FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_facturacion_XML] WHERE folioFiscal = '`+FOLIO_FISCAL+`'`
    rowsD, errD = conn.Query(queryFolio)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    ligado := 0.0
    if rowsD.Next()  {
      rowsD.Scan(&ligado)
    }
    nuevoLigado := ligado - AMOUNT
      amountString := fmt.Sprintf("%.2f", nuevoLigado)
  
    queryD := "UPDATE [SU_FISCAL].[dbo].["+BUNIT.(string)+"_facturacion_XML] SET ligado = "+amountString+" WHERE folioFiscal = '"+FOLIO_FISCAL+"'"
    conn.Exec(queryD)
    



    queryAver := `DELETE FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] WHERE idLigado = `+idLigado
    result , _ :=  conn.Exec(queryAver) 
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return        
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

 
func (c *EliminaConceptoManuntencionController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    idRegistro := c.GetString("idRegistro")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    queryAver := `DELETE FROM [Sevenplus].[dbo].[nominaConceptos] WHERE idRegistro = `+idRegistro
    result , _ :=  conn.Exec(queryAver) 
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return        
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *NuevoConceptoManuntencionController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
     
    GravadoExcento := c.GetString("GravadoExcento")
    TipoSAT := c.GetString("TipoSAT")
    TipoConcepto := c.GetString("TipoConceptoSAT")
    Concepto := c.GetString("Concepto")
    cuenta := c.GetString("cuenta")
    cuenta = strings.TrimSpace(cuenta)
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }

      queryAver := `SELECT idRegistro FROM [Sevenplus].[dbo].[nominaConceptos] 
      WHERE ACNT_CODE = '`+cuenta+`' AND BUNIT = '`+BUNIT.(string)+`'`
      rowsAver, errorx := conn.Query(queryAver)
      if errorx != nil {
        fmt.Println(errorx.Error())
        fmt.Println("Perdon! Open connection failed:", errorx.Error())
        return
      }
      if rowsAver.Next()  {
        query := `UPDATE [Sevenplus].[dbo].[nominaConceptos] SET 
      tipo = `+TipoConcepto+`, 
      TipoSAT = '`+TipoSAT+`', 
      Concepto = '`+Concepto+`',
      GravadoExcento = `+GravadoExcento+`
       WHERE ACNT_CODE =  '`+cuenta+ `' AND BUNIT = '`+BUNIT.(string)+`'`
        result , err := conn.Exec(query)
        if err != nil {
          defer conn.Close()
          fmt.Println(query)
          fmt.Println("Perdon  update! : ", err.Error())
        }
        afectados, _ := result.RowsAffected()
        if afectados == 1 {
          example := map[string]interface{}{ "success":1}
          c.Data["json"] = &example
          c.ServeJSON()
          return
        }
      } else {
        
      query := `INSERT INTO [Sevenplus].[dbo].[nominaConceptos] 
(ACNT_CODE ,tipo ,TipoSAT ,Concepto ,GravadoExcento ,BUNIT) VALUES
('`+cuenta+`',`+TipoConcepto+`,'`+TipoSAT+`','`+Concepto+`',`+GravadoExcento+`,'`+BUNIT.(string)+`')`
result , err := conn.Exec(query)
      if err != nil {
        defer conn.Close()
        fmt.Println(query)
        fmt.Println("Perdon insert ! : ", err.Error())
      }
      afectados, _ := result.RowsAffected()
      if afectados == 1 {
        example := map[string]interface{}{ "success":1}
        c.Data["json"] = &example
        c.ServeJSON()
        return
      }
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *GuardaClienteController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    idCliente := c.GetString("idCliente")
    razonSocial := c.GetString("razonSocial")
    rfc := c.GetString("rfc")
    correo := c.GetString("correo")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }

    
      
      if idCliente!="-1"  {
        query := `UPDATE [Sevenplus].[dbo].[`+BUNIT.(string)+`_zClientes] SET 
      correo = '`+correo+`', 
      razonSocial = '`+razonSocial+`', 
      rfc = '`+rfc+`'
       WHERE idCliente =  `+idCliente+ ` AND BUNIT = '`+BUNIT.(string)+`'`
        result , err := conn.Exec(query)
        if err != nil {
          defer conn.Close()
          fmt.Println(query)
          fmt.Println("Perdon update! : ", err.Error())
        }
        afectados, _ := result.RowsAffected()
        if afectados == 1 {
          example := map[string]interface{}{ "success":1}
          c.Data["json"] = &example
          c.ServeJSON()
          return
        }
      } else {
        
      query := `INSERT INTO [Sevenplus].[dbo].[`+BUNIT.(string)+`_zClientes] 
(BUNIT , correo ,razonSocial ,rfc) VALUES
('`+BUNIT.(string)+`', '`+correo+`','`+razonSocial+`','`+rfc+`')`

result , err := conn.Exec(query)
      if err != nil {
        defer conn.Close()
        fmt.Println(query)
        fmt.Println("Perdon insert ! : ", err.Error())
      }
      afectados, _ := result.RowsAffected()
      if afectados == 1 {
        example := map[string]interface{}{ "success":1}
        c.Data["json"] = &example
        c.ServeJSON()
        return
      }
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 


func (c *NuevoManuntencionPersonaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := ""
    BUNITx := c.GetSession("BUNIT")
    BUNIT = BUNITx.(string)
    BTemp := c.GetString("BUNITViejito")
    if BTemp == "" {
    } else {
      BUNIT = c.GetString("BUNITViejito")
    }
    


    PCENT_Manutencion := c.GetString("PCENT_Manutencion")
    PCENT_Manutencion = strings.TrimSpace(PCENT_Manutencion)

    PCENT_Posgrado := c.GetString("PCENT_Posgrado")
    PCENT_Posgrado = strings.TrimSpace(PCENT_Posgrado)

    PCENT_Ministerial := c.GetString("PCENT_Ministerial")
    PCENT_Ministerial = strings.TrimSpace(PCENT_Ministerial)

    PCENT_Pulpito := c.GetString("PCENT_Pulpito")
    PCENT_Pulpito = strings.TrimSpace(PCENT_Pulpito)

    PCENT_Extraordinaria := c.GetString("PCENT_Extraordinaria")
    PCENT_Extraordinaria = strings.TrimSpace(PCENT_Extraordinaria)

    ayuda_renta := c.GetString("ayuda_renta")
    ayuda_renta = strings.TrimSpace(ayuda_renta)
    
    unidades_seguro := c.GetString("unidades_seguro")
    unidades_seguro = strings.TrimSpace(unidades_seguro)

    proyecto := c.GetString("proyecto")
    proyecto = strings.TrimSpace(proyecto)


    
    
    
    

    ER := c.GetString("er")
    ER = strings.TrimSpace(ER)

    SDI := c.GetString("SDI")
    CuentaBancaria := c.GetString("CuentaBancaria")
    TipoRegimen := c.GetString("TipoRegimen")
    c_Pais := c.GetString("c_Pais")
    c_Estado := c.GetString("c_Estado")
    c_Banco := c.GetString("c_Banco")

    Departamento := c.GetString("Departamento")
    PeriodicidadPago := c.GetString("PeriodicidadPago")
    RiesgoPuesto := c.GetString("RiesgoPuesto")
    TipoJornada := c.GetString("TipoJornada")
    TipoContrato := c.GetString("TipoContrato")
    FechaInicioRelLaboral := c.GetString("FechaInicioRelLaboral")
    NumSeguridadSocial := c.GetString("NumSeguridadSocial")
    NumEmpleado := c.GetString("NumEmpleado")
    CURP := c.GetString("CURP")
    RFC := c.GetString("RFC")
    Nombre := c.GetString("Nombre")
    Correo := c.GetString("Correo")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }

    
      queryAver := `SELECT nombre FROM [Sevenplus].[dbo].[nomina] 
      WHERE ER = '`+ER+`' AND BUNIT = '`+BUNIT+`'`
      rowsAver, errorx := conn.Query(queryAver)
      if errorx != nil {
        fmt.Println(errorx.Error())
        fmt.Println("Perdon! Open connection failed:", errorx.Error())
        return
      }
      if rowsAver.Next()  { 
        query := `UPDATE [Sevenplus].[dbo].[nomina] SET
        PCENT_Manutencion = `+PCENT_Manutencion+`,
        PCENT_Posgrado = `+PCENT_Posgrado+`,
        PCENT_Ministerial = `+PCENT_Ministerial+`,
        PCENT_Pulpito = `+PCENT_Pulpito+`,
        PCENT_Extraordinaria = `+PCENT_Extraordinaria+`,
        ayuda_renta = `+ayuda_renta+`,
        unidades_seguro = `+unidades_seguro+`, 
        proyecto = '`+proyecto+`', 
      correo = '`+Correo+`', 
      nombre = '`+Nombre+`', 
      CuentaBancaria = '`+CuentaBancaria+`', 
      rfc = '`+RFC+`',
      SDI = `+SDI+`,
      curp = '`+CURP+`',
      c_Pais = '`+c_Pais+`',
      c_Banco = '`+c_Banco+`',
      c_Estado = '`+c_Estado+`',
      numEmpleado = '`+NumEmpleado+`',
      TipoContrato = '`+TipoContrato+`', TipoJornada = '`+TipoJornada+`',
      NumSeguridadSocial = '`+NumSeguridadSocial+`', FechaInicioRelLaboral = '`+FechaInicioRelLaboral+`',
      RiesgoPuesto = '`+RiesgoPuesto+`',
      PeriodicidadPago = '`+PeriodicidadPago+`',
      Departamento = '`+Departamento+`',
      TipoRegimen = '`+TipoRegimen+`' WHERE ER =  '`+ER+ `' AND BUNIT = '`+BUNIT+`'`
        result , err := conn.Exec(query)
        if err != nil {
          defer conn.Close()
          fmt.Println("Perdon insert o update! : ", err.Error())
        }
        afectados, _ := result.RowsAffected()
        if afectados == 1 {
          example := map[string]interface{}{ "success":1}
          c.Data["json"] = &example
          c.ServeJSON()
          return
        }
      } else {
        
      query := `INSERT INTO [Sevenplus].[dbo].[nomina] 
(ayuda_renta, unidades_seguro, proyecto, PCENT_Manutencion, PCENT_Posgrado, PCENT_Ministerial, PCENT_Pulpito, PCENT_Extraordinaria, CuentaBancaria, c_Banco,  c_Pais, c_Estado, ER ,BUNIT , SDI, correo ,nombre ,rfc ,curp ,numEmpleado ,TipoContrato ,TipoJornada ,NumSeguridadSocial ,FechaInicioRelLaboral ,RiesgoPuesto ,PeriodicidadPago, Departamento, TipoRegimen) VALUES
(`+ayuda_renta+`,`+unidades_seguro+`, '`+proyecto+`', `+PCENT_Manutencion+`,`+PCENT_Posgrado+`,`+PCENT_Ministerial+`,`+PCENT_Pulpito+`,`+PCENT_Extraordinaria+`,'`+CuentaBancaria+`','`+c_Banco+`','`+c_Pais+`','`+c_Estado+`','`+ER+`','`+BUNIT+`',`+SDI+`, '`+Correo+`','`+Nombre+`','`+RFC+`','`+CURP+`','`+NumEmpleado+`' ,'`+TipoContrato+`' ,'`+TipoJornada+`' ,'`+NumSeguridadSocial+`' ,'`+FechaInicioRelLaboral+`' ,'`+RiesgoPuesto+`' ,'`+PeriodicidadPago+`' ,'`+Departamento+`' ,'`+TipoRegimen+`')`

if TipoRegimen == "09"{ //ministro
        query = `INSERT INTO [Sevenplus].[dbo].[nomina] 
(ayuda_renta, unidades_seguro, proyecto, PCENT_Manutencion, PCENT_Posgrado, PCENT_Ministerial, PCENT_Pulpito, PCENT_Extraordinaria,CuentaBancaria, c_Banco,  c_Pais, c_Estado, ER ,BUNIT , correo ,nombre ,rfc ,curp ,numEmpleado ,TipoContrato ,TipoJornada ,NumSeguridadSocial ,FechaInicioRelLaboral ,RiesgoPuesto ,PeriodicidadPago, Departamento, TipoRegimen) VALUES
(`+ayuda_renta+`,`+unidades_seguro+`, '`+proyecto+`', `+PCENT_Manutencion+`,`+PCENT_Posgrado+`,`+PCENT_Ministerial+`,`+PCENT_Pulpito+`,`+PCENT_Extraordinaria+`,'`+CuentaBancaria+`','`+c_Banco+`','`+c_Pais+`','`+c_Estado+`','`+ER+`','`+BUNIT+`', '`+Correo+`','`+Nombre+`','`+RFC+`','`+CURP+`','`+NumEmpleado+`' ,'`+TipoContrato+`' ,'`+TipoJornada+`' ,'`+NumSeguridadSocial+`' ,'`+FechaInicioRelLaboral+`' ,'`+RiesgoPuesto+`' ,'`+PeriodicidadPago+`' ,'`+Departamento+`' ,'`+TipoRegimen+`')`

}
fmt.Println(query)
result , err := conn.Exec(query)
      if err != nil {
        defer conn.Close()
        fmt.Println("Perdon insert o update! : ", err.Error())
      }
      afectados, _ := result.RowsAffected()
      if afectados == 1 {
        example := map[string]interface{}{ "success":1}
        c.Data["json"] = &example
        c.ServeJSON()
        return
      }
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 


func (c *NuevoLineasDiezmoConceptoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    IdDiezmoConcepto := c.GetString("IdDiezmoConcepto")
    linea := c.GetString("linea")
    essuma := c.GetString("essuma")
    aparece := c.GetString("aparece")
    rfc := c.GetString("rfc")
    tipo := c.GetString("tipo")
    descripcion := c.GetString("descripcion")
    nombre := c.GetString("nombre")
    referencia := c.GetString("referencia")
    debofacturar := c.GetString("debofacturar")
    cuenta := c.GetString("cuenta")
    tipoDC := c.GetString("tipoDC")
    ANAL_T0 := c.GetString("ANAL_T0")
    ANAL_T1 := c.GetString("ANAL_T1")
    ANAL_T2 := c.GetString("ANAL_T2")
    ANAL_T3 := c.GetString("ANAL_T3")
    ANAL_T4 := c.GetString("ANAL_T4")
    ANAL_T5 := c.GetString("ANAL_T5")
    ANAL_T6 := c.GetString("ANAL_T6")
    ANAL_T7 := c.GetString("ANAL_T7")
    ANAL_T8 := c.GetString("ANAL_T8")
    ANAL_T9 := c.GetString("ANAL_T9")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    if Compare(linea,"0") == 0 {
      queryAver := `SELECT ISNULL(MAX(orden),0) as elQueSigue FROM [SunSystemsData].[dbo].[DiezmoLinea] 
      WHERE idDiezmoConcepto = `+IdDiezmoConcepto
      rowsAver, errorx := conn.Query(queryAver)
      if errorx != nil {
        fmt.Println(errorx.Error())
        fmt.Println("Perdon! Open connection failed:", errorx.Error())
        return
      }
      if rowsAver.Next()  {
        var idLinea int
        rowsAver.Scan(&idLinea)
        idLinea = idLinea + 1
        idLineaS := strconv.Itoa(idLinea)
        query := `INSERT INTO [SunSystemsData].[dbo].[DiezmoLinea] 
(idDiezmoConcepto,orden,nombre,cuenta,esSuma,aparece,D_C,ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8,ANAL_T9,deboFacturar,rfc,tipo,DESCRIPTN,TREFERENCE ) VALUES
(`+IdDiezmoConcepto+`,`+idLineaS+`,'`+nombre+`','`+cuenta+`',`+essuma+`,`+aparece+`,'`+tipoDC+`' ,'`+ANAL_T0+`' ,'`+ANAL_T1+`' ,'`+ANAL_T2+`' ,'`+ANAL_T3+`' ,'`+ANAL_T4+`' ,'`+ANAL_T5+`' ,'`+ANAL_T6+`' ,'`+ANAL_T7+`' ,'`+ANAL_T8+`' ,'`+ANAL_T9+`', `+debofacturar+`,'`+rfc+`' ,`+tipo+`,'`+descripcion+`' ,'`+referencia+`' )`

        result , err := conn.Exec(query)
        if err != nil {
          defer conn.Close()
          fmt.Println("Perdon insert o update! : ", err.Error())
        }
        afectados, _ := result.RowsAffected()
        if afectados == 1 {
          example := map[string]interface{}{ "success":1}
          c.Data["json"] = &example
          c.ServeJSON()
          return
        }
      }   
    } else {
      query := `UPDATE [SunSystemsData].[dbo].[DiezmoLinea] SET 
      cuenta = '`+cuenta+`', 
      nombre = '`+nombre+`', 
      deboFacturar = `+debofacturar+`,
      esSuma = `+essuma+`,
      aparece = `+aparece+`,
      rfc = '`+rfc+`', tipo = `+tipo+`,
      DESCRIPTN = '`+descripcion+`', D_C = '`+tipoDC+`',
      TREFERENCE = '`+referencia+`',
      ANAL_T0 = '`+ANAL_T0+`',
      ANAL_T1 = '`+ANAL_T1+`',
      ANAL_T2 = '`+ANAL_T2+`',
      ANAL_T3 = '`+ANAL_T3+`',
      ANAL_T4 = '`+ANAL_T4+`',
      ANAL_T5 = '`+ANAL_T5+`',
      ANAL_T6 = '`+ANAL_T6+`',
      ANAL_T7 = '`+ANAL_T7+`',
      ANAL_T8 = '`+ANAL_T8+`',
      ANAL_T9 = '`+ANAL_T9+`' WHERE orden =  `+ linea+ ` AND idDiezmoConcepto = `+IdDiezmoConcepto
      result , err := conn.Exec(query)
      if err != nil {
        defer conn.Close()
        fmt.Println("Perdon insert o update! : ", err.Error())
      }
      afectados, _ := result.RowsAffected()
      if afectados == 1 {
        example := map[string]interface{}{ "success":1}
        c.Data["json"] = &example
        c.ServeJSON()
        return
      }
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *NuevoLineasTiposDeDiarioController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    IdTipoDeDiario := c.GetString("IdTipoDeDiario")
    linea := c.GetString("linea")
    cliente := c.GetString("cliente")
    servicio := c.GetString("servicio")
    concepto := c.GetString("concepto")
    descripcion := c.GetString("descripcion")
    debofacturar := c.GetString("debofacturar")
    cuenta := c.GetString("cuenta")
    tipoDC := c.GetString("tipoDC")
    ANAL_T0 := c.GetString("ANAL_T0")
    ANAL_T1 := c.GetString("ANAL_T1")
    ANAL_T2 := c.GetString("ANAL_T2")
    ANAL_T3 := c.GetString("ANAL_T3")
    ANAL_T4 := c.GetString("ANAL_T4")
    ANAL_T5 := c.GetString("ANAL_T5")
    ANAL_T6 := c.GetString("ANAL_T6")
    ANAL_T7 := c.GetString("ANAL_T7")
    ANAL_T8 := c.GetString("ANAL_T8")
    ANAL_T9 := c.GetString("ANAL_T9")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }


    query := `INSERT INTO [SunSystemsData].[dbo].[TiposDeDiarioLineas] (idTipoDeDiario,ACNT_CODE, Linea , deboFacturar , servicio, cliente, concepto, DESCRIPTN, D_C,   ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9 ) VALUES
     (`+IdTipoDeDiario+`,'`+cuenta+`',`+linea+`,`+debofacturar+`,'`+servicio+`' ,'`+cliente+`' ,'`+concepto+`','`+descripcion+`' ,'`+tipoDC+`' ,'`+ANAL_T0+`' ,'`+ANAL_T1+`' ,'`+ANAL_T2+`' ,'`+ANAL_T3+`' ,'`+ANAL_T4+`' ,'`+ANAL_T5+`' ,'`+ANAL_T6+`' ,'`+ANAL_T7+`' ,'`+ANAL_T8+`' ,'`+ANAL_T9+`' )`
    queryAver := "SELECT idLinea FROM [SunSystemsData].[dbo].[TiposDeDiarioLineas] WHERE idTipoDeDiario = "+IdTipoDeDiario+" AND Linea = "+linea+""
    rowsAver, _ := conn.Query(queryAver)
    if rowsAver.Next()  {
      var idLinea int
      rowsAver.Scan(&idLinea)
      idLineaS := strconv.Itoa(idLinea)
      query = `UPDATE [SunSystemsData].[dbo].[TiposDeDiarioLineas] SET ACNT_CODE = '`+cuenta+`', deboFacturar = `+debofacturar+`, servicio = '`+servicio+`', cliente = '`+cliente+`', concepto = '`+concepto+`', DESCRIPTN = '`+descripcion+`', D_C = '`+tipoDC+`',
      ANAL_T0 = '`+ANAL_T0+`',
      ANAL_T1 = '`+ANAL_T1+`',
      ANAL_T2 = '`+ANAL_T2+`',
      ANAL_T3 = '`+ANAL_T3+`',
      ANAL_T4 = '`+ANAL_T4+`',
      ANAL_T5 = '`+ANAL_T5+`',
      ANAL_T6 = '`+ANAL_T6+`',
      ANAL_T7 = '`+ANAL_T7+`',
      ANAL_T8 = '`+ANAL_T8+`',
      ANAL_T9 = '`+ANAL_T9+`' WHERE idLinea =  `+ idLineaS
    } 
    result , err := conn.Exec(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon insert o update! : ", err.Error())
    }
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 




func (c *NuevaEtiquetaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    etiqueta := c.GetString("etiqueta")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    query := `INSERT INTO [Sevenplus].[dbo].[`+BUNIT.(string)+`_zEtiquetas] (BUNIT, etiqueta) VALUES
    ('`+BUNIT.(string)+`','`+etiqueta+`')`
    result , err := conn.Exec(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon insert! : ", err.Error())
    }
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *NuevaPalabraEtiquetaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    idEtiqueta := c.GetString("idEtiqueta")
    palabra := c.GetString("palabra")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    query := `INSERT INTO [Sevenplus].[dbo].[`+BUNIT.(string)+`_zLigadoRFC] (idEtiqueta, RFC) VALUES
    (`+idEtiqueta +`,'`+palabra+`')`
    result , err := conn.Exec(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon insert! : ", err.Error())
    }
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *NvoNumCtaPagoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    idCliente := c.GetString("idCliente")
    NumCtaPago := c.GetString("NumCtaPago")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    query := `INSERT INTO [Sevenplus].[dbo].[zNumCtaPago] (idCliente, NumCtaPago) VALUES
    (`+idCliente+`,'`+NumCtaPago+`')`
    result , err := conn.Exec(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon insert! : ", err.Error())
    }
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 



func (c *EliminarPalabraController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    IdLigadoRFC := c.GetString("IdLigadoRFC")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    query := `DELETE FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zLigadoRFC] WHERE idLigadoRFC = `+IdLigadoRFC+``
    result , err := conn.Exec(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon delete! : ", err.Error())
    }
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *EliminarNumCtaPagoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    IdNumCtaPago := c.GetString("IdNumCtaPago")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    query := `DELETE FROM [Sevenplus].[dbo].[zNumCtaPago] WHERE idNumCtaPago = `+IdNumCtaPago+``
    result , err := conn.Exec(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon insert! : ", err.Error())
    }
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *EliminarLineaCedulaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    IdLinea := c.GetString("IdLinea")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    query := `DELETE FROM [SunSystemsData].[dbo].[CedulasLinea] WHERE idLinea = `+IdLinea+``
    result , err := conn.Exec(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon insert! : ", err.Error())
    }
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *NuevoLineasCedulasController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    IdConcepto := c.GetString("IdConcepto")
    cuenta := c.GetString("cuenta")
    tipoDC := c.GetString("tipoDC")
    ANAL_T0 := c.GetString("ANAL_T0")
    ANAL_T1 := c.GetString("ANAL_T1")
    ANAL_T2 := c.GetString("ANAL_T2")
    ANAL_T3 := c.GetString("ANAL_T3")
    ANAL_T4 := c.GetString("ANAL_T4")
    ANAL_T5 := c.GetString("ANAL_T5")
    ANAL_T6 := c.GetString("ANAL_T6")
    ANAL_T7 := c.GetString("ANAL_T7")
    ANAL_T8 := c.GetString("ANAL_T8")
    ANAL_T9 := c.GetString("ANAL_T9")
    MetodoDePago := c.GetString("metodoDePago")
    NumCtaPago := c.GetString("NumCtaPago")

    
    RFC := c.GetString("RFC")
    RazonSocial  := c.GetString("RazonSocial")
    correo := c.GetString("correo")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    query := `INSERT INTO [SunSystemsData].[dbo].[CedulasLinea] (NumCtaPago, MetodoDePago, correo, rfc, razonSocial, idConcepto,cuenta, D_C_Tipo, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9 ) VALUES
     ('`+NumCtaPago+`', '`+MetodoDePago+`', '`+correo+`', '`+RFC+`','`+RazonSocial+`',`+IdConcepto+`,'`+cuenta+`',`+tipoDC+`,'`+ANAL_T0+`' ,'`+ANAL_T1+`' ,'`+ANAL_T2+`' ,'`+ANAL_T3+`' ,'`+ANAL_T4+`' ,'`+ANAL_T5+`' ,'`+ANAL_T6+`' ,'`+ANAL_T7+`' ,'`+ANAL_T8+`' ,'`+ANAL_T9+`' )`
    result , err := conn.Exec(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon insert! : ", err.Error())
    }
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func Dash(c *DashboardController )  {
  
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  hash := c.GetString("hash")
  currentTime := int64(time.Now().Unix())
  tm := time.Unix(currentTime, 0)
  dateString := tm.String() 
  substring := string(dateString[0:10])
    byteArray := []byte(substring)
  hasher := sha512.New()
    hasher.Write(byteArray)
  cryptoText := base64.StdEncoding.EncodeToString(  []byte(hex.EncodeToString(hasher.Sum(nil))))
  esAPI := 0
  if Compare(cryptoText,hash)==0 {
    tipoDeUsuario = 3
    esAPI = 1
  }
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    if BUNIT == nil {
      BUNIT = c.GetString("BUNIT")
    } 
    PERIOD := c.GetString("PERIOD")
    anio:=string(PERIOD[0:4]) 
    mes:=string(PERIOD[5:7])  
    PERIOD_ANTERIOR :=""
    mesNumero, _ := strconv.Atoi(mes)
    if mesNumero == 1 {
      mesS := "12"
      anioAnterior, _ := strconv.Atoi(anio)
      anioAnterior--
      PERIOD_ANTERIOR = strconv.Itoa(anioAnterior)+"0"+mesS
    } else {
      mesNumero--
      mesS := strconv.Itoa(mesNumero)
      if mesNumero < 10 {
        mesS = "0"+mesS
      }
      PERIOD_ANTERIOR = anio+"0"+mesS
    }



    //cuenta := c.GetString("cuenta")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
      
    //1 - 109, fondo 10, CAJAS Y BANCOS
    //11 - 119, fondo 10, INVERSIONES
    //139, fondo 10, CUENTAS X COBRAR
    //12, 14, 131,132,133,134,135,136,137,138, CUENTAS X COBRAR
    //3 - 349, fondo 10, CUENTAS X COBRAR
    //15- 159, fondo10, CUENTAS X COBRAR
    //16- 169, fondo10, IINVENTARIOS
    //17- 189, fondo10, Pagos anticipados
    //19, fondo 10, cuentas por cobrar entre fondos

    corrientes := 0.0
    var AMOUNT_ACTIVOS_CORRIENTES decimal.Dec
    

    query1 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE SUBSTRING(ACCNT_CODE,1,3) in('100','101','102','103','104','105','106','107','108','109')
      AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
    rows1, err1 := conn.Query(query1)
    if err1 != nil {
      fmt.Println(err1)
    }
    
    if rows1.Next()  {
      rows1.Scan(&AMOUNT_ACTIVOS_CORRIENTES)
      amountPrima := math.Abs(AMOUNT_ACTIVOS_CORRIENTES.Float64())
      corrientes = corrientes + amountPrima
    }

    //11 - 119, fondo 10, INVERSIONES
    query2 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE SUBSTRING(ACCNT_CODE,1,3) in('110','111','112','113','114','115','116','117','118','119')
      AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
    rows2, err2 := conn.Query(query2)
    if err2 != nil {
      fmt.Println(err2)
    }
    if rows2.Next()  {
      rows2.Scan(&AMOUNT_ACTIVOS_CORRIENTES)
      amountPrima := math.Abs(AMOUNT_ACTIVOS_CORRIENTES.Float64())
      corrientes = corrientes + amountPrima
    }

    //139, fondo 10, CUENTAS X COBRAR
    //12, 14, 131,132,133,134,135,136,137,138, CUENTAS X COBRAR
    //3 - 349, fondo 10, CUENTAS X COBRAR 
    
    query3_A := `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE SUBSTRING(ACCNT_CODE,1,3) in('139')
      AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
    rows3_A, err3_A := conn.Query(query3_A)
    if err3_A != nil {
      fmt.Println(err3_A)
    }
    if rows3_A.Next()  {
      rows3_A.Scan(&AMOUNT_ACTIVOS_CORRIENTES)
      amountPrima := math.Abs(AMOUNT_ACTIVOS_CORRIENTES.Float64())
      corrientes = corrientes + amountPrima
    }
    var ACNT_CODE string

    query3_BB := `SELECT ACNT_CODE FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT]
     WHERE ISNUMERIC( SUBSTRING(ACNT_CODE,1,1))<>1 OR (SUBSTRING(ACNT_CODE,1,2) in('12','14','30','31','32','33','34') OR SUBSTRING(ACNT_CODE,1,3) in('130','131','132','133','134','135','136','137','138'))`
    rows3_BB, err3_BB := conn.Query(query3_BB)
    if err3_BB != nil {
      fmt.Println(err3_BB)
    }
    for rows3_BB.Next()  {
      rows3_BB.Scan(&ACNT_CODE)
      query3_B := `SELECT ISNULL(SUM(AMOUNT),0) as amount
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
        WHERE ACCNT_CODE = '`+ACNT_CODE+`'
        AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
      rows3_B, err3_B := conn.Query(query3_B)
      if err3_B != nil {
        fmt.Println(err3_B)
      }
      if rows3_B.Next()  {
        rows3_B.Scan(&AMOUNT_ACTIVOS_CORRIENTES)
        amountPrima1 := AMOUNT_ACTIVOS_CORRIENTES.Float64()
        if amountPrima1 < 0 {
          amountPrima := math.Abs(AMOUNT_ACTIVOS_CORRIENTES.Float64())
          corrientes = corrientes + amountPrima
        }
      }
    }

    //16- 169, fondo10, INVENTARIOS
    

    query4 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE SUBSTRING(ACCNT_CODE,1,2) in('16')
      AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
    rows4, err4 := conn.Query(query4)
    if err4 != nil {
      fmt.Println(err4)
    }
    if rows4.Next()  {
      rows4.Scan(&AMOUNT_ACTIVOS_CORRIENTES)
      amountPrima := math.Abs(AMOUNT_ACTIVOS_CORRIENTES.Float64())
      corrientes = corrientes + amountPrima
    }
    //17- 189, fondo10, Pagos anticipados
    
    query5 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE SUBSTRING(ACCNT_CODE,1,2) in('17','18')
      AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
    rows5, err5 := conn.Query(query5)
    if err5 != nil {
      fmt.Println(err5)
    }
    
    if rows5.Next()  {
      rows5.Scan(&AMOUNT_ACTIVOS_CORRIENTES)
      amountPrima := math.Abs(AMOUNT_ACTIVOS_CORRIENTES.Float64())
      corrientes = corrientes + amountPrima
    }

    //19, fondo 10, cuentas por cobrar entre fondos
    
    query6 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE SUBSTRING(ACCNT_CODE,1,2) in('19')
      AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
    rows6, err6 := conn.Query(query6)
    if err6 != nil {
      fmt.Println(err6)
    }
    
    if rows6.Next()  {
      rows6.Scan(&AMOUNT_ACTIVOS_CORRIENTES)
      amountPrima := math.Abs(AMOUNT_ACTIVOS_CORRIENTES.Float64())
      corrientes = corrientes + amountPrima
    }

    //15- 159, fondo10, Documentos y prestamos x pagar
    

    query7 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE SUBSTRING(ACCNT_CODE,1,2) in('15')
      AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
    rows7, err7 := conn.Query(query7)
    if err7 != nil {
      fmt.Println(err7)
    }
    
    if rows7.Next()  {
      rows7.Scan(&AMOUNT_ACTIVOS_CORRIENTES)
      amountPrima := math.Abs(AMOUNT_ACTIVOS_CORRIENTES.Float64())
      corrientes = corrientes + amountPrima
    }




    
    corrientesPasivos := 0.0
    var AMOUNT_CUENTAS_POR_PAGAR decimal.Dec
        
    query3_BB = `SELECT ACNT_CODE FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT]
       WHERE ISNUMERIC( SUBSTRING(ACNT_CODE,1,1))<>1 OR (SUBSTRING(ACNT_CODE,1,2) in('12','14','30','31','32','33','34') OR SUBSTRING(ACNT_CODE,1,3) in('130','131','132','133','134','135','136','137','138'))`
    rows3_BB, err3_BB = conn.Query(query3_BB)
    if err3_BB != nil {
      fmt.Println(err3_BB)
    }
    for rows3_BB.Next()  {
      rows3_BB.Scan(&ACNT_CODE)
      query3_B := `SELECT ISNULL(SUM(AMOUNT),0) as amount
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
        WHERE ACCNT_CODE = '`+ACNT_CODE+`'
        AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
      rows3_B, err3_B := conn.Query(query3_B)
      if err3_B != nil {
        fmt.Println(err3_B)
      }
      if rows3_B.Next()  {
        rows3_B.Scan(&AMOUNT_CUENTAS_POR_PAGAR)
        amountPrima1 := AMOUNT_CUENTAS_POR_PAGAR.Float64()
        if amountPrima1 > 0 {
          amountPrima := math.Abs(AMOUNT_CUENTAS_POR_PAGAR.Float64())
          corrientesPasivos=corrientesPasivos+amountPrima 
        }
      }
    }

        
    query7 = `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE SUBSTRING(ACCNT_CODE,1,2) in('35')
      AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
    rows7, err7 = conn.Query(query7)
    if err7 != nil {
      fmt.Println(err7)
    }
    var AMOUNT_DOCUMENTOS decimal.Dec
    if rows7.Next()  {
      rows7.Scan(&AMOUNT_DOCUMENTOS)
      amountPrima := math.Abs(AMOUNT_DOCUMENTOS.Float64())
      corrientesPasivos=corrientesPasivos+amountPrima 
    }

    query1 = `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE SUBSTRING(ACCNT_CODE,1,2) in('36')
      AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
    rows1, err1 = conn.Query(query1)
    if err1 != nil {
      fmt.Println(err1)
    }
    var AMOUNT_FONDOS_CONFIADOS decimal.Dec
    if rows1.Next()  {
      rows1.Scan(&AMOUNT_FONDOS_CONFIADOS)
      amountPrima := math.Abs(AMOUNT_FONDOS_CONFIADOS.Float64())
      corrientesPasivos=corrientesPasivos+amountPrima 
    }

    query2 = `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE SUBSTRING(ACCNT_CODE,1,2) in('37','38')
      AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
    rows2, err2 = conn.Query(query2)
    if err2 != nil {
      fmt.Println(err2)
    }
    var AMOUNT_OTROS_PASIVOS_CORRIENTES decimal.Dec
    if rows2.Next()  {
      rows2.Scan(&AMOUNT_OTROS_PASIVOS_CORRIENTES)
      amountPrima := math.Abs(AMOUNT_OTROS_PASIVOS_CORRIENTES.Float64())
      corrientesPasivos=corrientesPasivos+amountPrima 
    }

      
    query4_BB := `SELECT ACNT_CODE FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT]
       WHERE SUBSTRING(ACNT_CODE,1,2) in('19')`
    rows4_BB, err4_BB := conn.Query(query4_BB)
    if err4_BB != nil {
      fmt.Println(err4_BB)
    }
    for rows4_BB.Next()  {
      rows4_BB.Scan(&ACNT_CODE)
      query4_B := `SELECT ISNULL(SUM(AMOUNT),0) as amount
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
        WHERE ACCNT_CODE = '`+ACNT_CODE+`'
        AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
      rows4_B, err4_B := conn.Query(query4_B)
      if err4_B != nil {
        fmt.Println(err4_B)
      }
      if rows4_B.Next()  {
        rows4_B.Scan(&AMOUNT_CUENTAS_POR_PAGAR)
        amountPrima1 := AMOUNT_CUENTAS_POR_PAGAR.Float64()
        if amountPrima1 > 0 {
          amountPrima := math.Abs(AMOUNT_CUENTAS_POR_PAGAR.Float64())
          corrientesPasivos=corrientesPasivos+amountPrima 
        }
      }
    }

        
        


    
    gastosOperativos := 0.0   
    esteAnio:=string(PERIOD[0:4]) 
    PERIOD_INICIO := esteAnio+"001"

    anteriorAnio, _ := strconv.Atoi(esteAnio)
    anteriorAnio--
    anteriorAnioS := strconv.Itoa(anteriorAnio)

    //PERIOD_INICIO_ANTERIOR := anteriorAnioS+"001"
    PERIOD_ANO_ANTERIOR := anteriorAnioS+string(PERIOD[4:7])
             
            
    //AND  SUBSTRING( CAST(PERIOD AS NVARCHAR(11)),1,4)  = '`+esteAnio+`'

    query7 = `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE (SUBSTRING(ACCNT_CODE,1,2) in('80','81','82','85','86','87','88','89','90','91','92','93','94','95','98') OR
      SUBSTRING(ACCNT_CODE,1,3) in('978') )
      AND PERIOD >= `+PERIOD_INICIO+` AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
      AND ANAL_T3 >= 'AFO'`
    rows7, err7 = conn.Query(query7)
    if err7 != nil {
      fmt.Println(err7)
    }
    var AMOUNT_ESTE_ANO decimal.Dec
    if rows7.Next()  {
      rows7.Scan(&AMOUNT_ESTE_ANO)
      amountPrima := math.Abs(AMOUNT_ESTE_ANO.Float64())
      gastosOperativos = gastosOperativos + amountPrima
    }
            
    query1 = `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE (SUBSTRING(ACCNT_CODE,1,2) in('80','81','82','85','86','87','88','89','90','91','92','93','94','95','98') OR
      SUBSTRING(ACCNT_CODE,1,3) in('978') )
       AND PERIOD >= `+PERIOD_ANO_ANTERIOR+` AND PERIOD < `+PERIOD_INICIO+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
       AND ANAL_T3 >= 'AFO'`
      
    
    rows1, err1 = conn.Query(query1)
    if err1 != nil {
      fmt.Println(err1)
    }
    var AMOUNT_FONDOS_CONFIADOS_2 decimal.Dec
    if rows1.Next()  {
      rows1.Scan(&AMOUNT_FONDOS_CONFIADOS_2)
      gastosOperativos = gastosOperativos + math.Abs(AMOUNT_FONDOS_CONFIADOS_2.Float64())
    }

    query8 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE ACCNT_CODE = '878777'
      AND PERIOD >= `+PERIOD_ANO_ANTERIOR+` AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
      AND ANAL_T3 >= 'AFO'`
    rows8, err8 := conn.Query(query8)
    if err8 != nil {
      fmt.Println(err8)
    }
    var AMOUNT_DIEZMO_UNION decimal.Dec
    if rows8.Next()  {
      rows8.Scan(&AMOUNT_DIEZMO_UNION)
      amountPrima := math.Abs(AMOUNT_DIEZMO_UNION.Float64())
      gastosOperativos = gastosOperativos - amountPrima
    }
/*
    query88 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE ACCNT_CODE = '878777'
      AND PERIOD >= `+PERIOD_ANO_ANTERIOR+` AND PERIOD < `+PERIOD_INICIO+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
      AND ANAL_T3 >= 'AFO'`
    rows88, err88 := conn.Query(query88)
    if err88 != nil {
      fmt.Println(err88)
    }
    if rows88.Next()  {
      rows88.Scan(&AMOUNT_DIEZMO_UNION)
      amountPrima := math.Abs(AMOUNT_DIEZMO_UNION.Float64())
      gastosOperativos = gastosOperativos - amountPrima
    }
*/
    query9 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE ACCNT_CODE = '878555'
      AND PERIOD >= `+PERIOD_ANO_ANTERIOR+` AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
      AND ANAL_T3 >= 'AFO'`
    rows9, err9 := conn.Query(query9)
    if err9 != nil {
      fmt.Println(err9)
    }
    var AMOUNT_DIEZMO_TAM decimal.Dec
    if rows9.Next()  {
      rows9.Scan(&AMOUNT_DIEZMO_TAM)
      amountPrima := math.Abs(AMOUNT_DIEZMO_TAM.Float64())
      gastosOperativos = gastosOperativos - amountPrima
    }
/*
    query99 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE ACCNT_CODE = '878555'
      AND PERIOD >= `+PERIOD_ANO_ANTERIOR+` AND PERIOD < `+PERIOD_INICIO+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
      AND ANAL_T3 >= 'AFO'`
    rows99, err99 := conn.Query(query99)
    if err99 != nil {
      fmt.Println(err99)
    }
    if rows99.Next()  {
      rows99.Scan(&AMOUNT_DIEZMO_TAM)
      amountPrima := math.Abs(AMOUNT_DIEZMO_TAM.Float64())
      gastosOperativos = gastosOperativos - amountPrima
    }
*/
    
    queryA := `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE (SUBSTRING(ACCNT_CODE,1,2) in('80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','98') OR
      SUBSTRING(ACCNT_CODE,1,3) in('978') )
       AND PERIOD >= `+PERIOD_ANO_ANTERIOR+` AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
       AND ANAL_T3 = 'AFOMISIO01'`
      
    rowsA, errA := conn.Query(queryA)
    if errA != nil {
      fmt.Println(errA)
    }
    var AMOUNT_AFOMISIO01 decimal.Dec
    if rowsA.Next()  {
      rowsA.Scan(&AMOUNT_AFOMISIO01)
      amountPrima := math.Abs(AMOUNT_AFOMISIO01.Float64())
      gastosOperativos = gastosOperativos - amountPrima
    }
/*
    queryAA := `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE (SUBSTRING(ACCNT_CODE,1,2) in('80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','98') OR
      SUBSTRING(ACCNT_CODE,1,3) in('978') )
       AND PERIOD >= `+PERIOD_ANO_ANTERIOR+` AND PERIOD < `+PERIOD_INICIO+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
       AND ANAL_T3 = 'AFOMISIO01'`
      
    rowsAA, errAA := conn.Query(queryAA)
    if errAA != nil {
      fmt.Println(errAA)
    }
    if rowsAA.Next()  {
      rowsAA.Scan(&AMOUNT_AFOMISIO01)
      amountPrima := math.Abs(AMOUNT_AFOMISIO01.Float64())
      gastosOperativos = gastosOperativos - amountPrima
    }
*/
    queryB := `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE (SUBSTRING(ACCNT_CODE,1,2) in('80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','98') OR
      SUBSTRING(ACCNT_CODE,1,3) in('978') )
       AND PERIOD >= `+PERIOD_ANO_ANTERIOR+` AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
       AND ANAL_T3 = 'AFOAG1111G'`
      
    rowsB, errB := conn.Query(queryB)
    if errB != nil {
      fmt.Println(errB)
    }
    var AMOUNT_AFOAG1111G decimal.Dec
    if rowsB.Next()  {
      rowsB.Scan(&AMOUNT_AFOAG1111G)
      amountPrima := math.Abs(AMOUNT_AFOAG1111G.Float64())
      gastosOperativos = gastosOperativos - amountPrima
    }
/*
    queryBB := `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE (SUBSTRING(ACCNT_CODE,1,2) in('80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','98') OR
      SUBSTRING(ACCNT_CODE,1,3) in('978') )
       AND PERIOD >= `+PERIOD_ANO_ANTERIOR+` AND PERIOD < `+PERIOD_INICIO+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
       AND ANAL_T3 = 'AFOAG1111G'`
      
    rowsBB, errBB := conn.Query(queryBB)
    if errBB != nil {
      fmt.Println(errBB)
    }
    if rowsBB.Next()  {
      rowsBB.Scan(&AMOUNT_AFOAG1111G)
      amountPrima := math.Abs(AMOUNT_AFOAG1111G.Float64())
      gastosOperativos = gastosOperativos - amountPrima
    }
*/
    queryC := `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE (SUBSTRING(ACCNT_CODE,1,2) in('80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','98') OR
      SUBSTRING(ACCNT_CODE,1,3) in('978') )
       AND PERIOD >= `+PERIOD_ANO_ANTERIOR+` AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
       AND ANAL_T3 = 'AFOAG1111D'`
      
    rowsC, errC := conn.Query(queryC)
    if errC != nil {
      fmt.Println(errC)
    }
    var AMOUNT_AFOAG1111GD decimal.Dec
    if rowsC.Next()  {
      rowsC.Scan(&AMOUNT_AFOAG1111GD)
      amountPrima := math.Abs(AMOUNT_AFOAG1111GD.Float64())
      gastosOperativos = gastosOperativos - amountPrima
    }
/*
    queryCC := `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE (SUBSTRING(ACCNT_CODE,1,2) in('80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','98') OR
      SUBSTRING(ACCNT_CODE,1,3) in('978') )
       AND PERIOD >= `+PERIOD_ANO_ANTERIOR+` AND PERIOD < `+PERIOD_INICIO+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
       AND ANAL_T3 = 'AFOAG1111D'`
      
    rowsCC, errCC := conn.Query(queryCC)
    if errCC != nil {
      fmt.Println(errCC)
    }
    if rowsCC.Next()  {
      rowsCC.Scan(&AMOUNT_AFOAG1111GD)
      amountPrima := math.Abs(AMOUNT_AFOAG1111GD.Float64())
      gastosOperativos = gastosOperativos - amountPrima
    }
    */
    pcent := 0.2
    if Compare(beego.AppConfig.String("TipoCampo"),"2")==0 {
      pcent = 0.3
    }
    if Compare(beego.AppConfig.String("TipoCampo"),"1")==0 {
      pcent = 0.2
    }
    gastosOperativos=gastosOperativos*pcent

    activosNetosAsignados := 0.0

    queryC = `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE SUBSTRING(ACCNT_CODE,1,1) in('5','6','7','8','9')
       AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10') 
       AND SUBSTRING(ANAL_T3,1,2)  in ('AF')`
      
    rowsC, errC = conn.Query(queryC)
    if errC != nil {
      fmt.Println(errC)
    }
    var AMOUNT_FONDOS_ASIGNADOS decimal.Dec
    if rowsC.Next()  {
      rowsC.Scan(&AMOUNT_FONDOS_ASIGNADOS)
      activosNetosAsignados = math.Abs(AMOUNT_FONDOS_ASIGNADOS.Float64())
    }

    corrientes = math.Abs(corrientes)
    activosNetosAsignados = math.Abs(activosNetosAsignados)

    //////
    ///    AQUI EMPIEZA LA LIQUIDEZ!
    /////
    efectivo := 0.0
    queryC = `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE SUBSTRING(ACCNT_CODE,1,2) in('10')
       AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10') 
       `
      
    rowsC, errC = conn.Query(queryC)
    if errC != nil {
      fmt.Println(errC)
    }
    var AMOUNT_EFECTIVO decimal.Dec
    if rowsC.Next()  {
      rowsC.Scan(&AMOUNT_EFECTIVO)
      efectivo = math.Abs(AMOUNT_EFECTIVO.Float64())
    }

    inversiones := 0.0
    queryC = `SELECT ISNULL(SUM(AMOUNT),0) as amount
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE SUBSTRING(ACCNT_CODE,1,2) in('11')
       AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10') 
       `
      
    rowsC, errC = conn.Query(queryC)
    if errC != nil {
      fmt.Println(errC)
    }
    if rowsC.Next()  {
      rowsC.Scan(&AMOUNT_EFECTIVO)
      inversiones = math.Abs(AMOUNT_EFECTIVO.Float64())
    }

    cuentasPorCobrarOrganizacionesSuperiores := 0.0

    query3_BB = `SELECT ACNT_CODE FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT]
       WHERE ACNT_CODE = 'AGL111'`
    rows3_BB, err3_BB = conn.Query(query3_BB)
    if err3_BB != nil {
      fmt.Println(err3_BB)
    }
    var AMOUNT_CUENTAS_POR_COBRAR_ORG_SUPERIOR decimal.Dec
    for rows3_BB.Next()  {
      rows3_BB.Scan(&ACNT_CODE)
      query3_B := `SELECT ISNULL(SUM(AMOUNT),0) as amount
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
        WHERE ACCNT_CODE = '`+ACNT_CODE+`'
        AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
      rows3_B, err3_B := conn.Query(query3_B)
      if err3_B != nil {
        fmt.Println(err3_B)
      }
      if rows3_B.Next()  {
        rows3_B.Scan(&AMOUNT_CUENTAS_POR_COBRAR_ORG_SUPERIOR)
        amountPrima1 := AMOUNT_CUENTAS_POR_COBRAR_ORG_SUPERIOR.Float64()
        if amountPrima1 < 0 {
          cuentasPorCobrarOrganizacionesSuperiores = math.Abs(AMOUNT_CUENTAS_POR_COBRAR_ORG_SUPERIOR.Float64())
        }
      }
    }






    queryPeriodos := "SELECT DISTINCT PERIOD FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] order by PERIOD asc"
    rowsPeriodos, _ := conn.Query(queryPeriodos)
    var periodo models.Periodo
        _ = periodo
        models.ClearPeriodos()
        for rowsPeriodos.Next()  {
      rowsPeriodos.Scan(&PERIOD)
      periodo := models.Periodo{PERIOD}
      models.AddPeriodo(periodo, PERIOD)
    }


    if esAPI == 0 {
      example := map[string]interface{}{ "success":1, "pcent" : pcent, "cuentaCobrarOrgSuperior" : cuentasPorCobrarOrganizacionesSuperiores, "inversiones" : inversiones, "efectivo" : efectivo, "periodos" : models.GetAllPeriodos(), "periodoAnterior":PERIOD_ANTERIOR, "activosNetosAsignados" : activosNetosAsignados, "corrientesActivos" : corrientes, "corrientesPasivos" : corrientesPasivos, "gastosOperativos" : gastosOperativos}
      c.Data["json"] = &example
      c.ServeJSON()
    } else {
      example := map[string]interface{}{ "success":1, "idCampo" : c.GetString("idCampo"), "nombre" : c.GetString("nombre"), "pcent" : pcent, "cuentaCobrarOrgSuperior" : cuentasPorCobrarOrganizacionesSuperiores, "inversiones" : inversiones, "efectivo" : efectivo, "periodos" : models.GetAllPeriodos(), "periodoAnterior":PERIOD_ANTERIOR, "activosNetosAsignados" : activosNetosAsignados, "corrientesActivos" : corrientes, "corrientesPasivos" : corrientesPasivos, "gastosOperativos" : gastosOperativos}
      c.Data["jsonp"] = &example
      c.ServeJSONP()
    }
    
    return
  }
}

func (c *DashboardController) Post() {
  Dash(c)
} 

func (c *DashboardController) Get() {
  Dash(c)
} 

func (c *DameDimensionesDisponiblesSegunLaCuentaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    cuenta := c.GetString("cuenta")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    
    tipoDimension := 0

    queryOpciones := `SELECT tipoDimension
    FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '`+BUNIT.(string)+`'`
    rowsOpciones, errOpciones := conn.Query(queryOpciones)
    if errOpciones != nil {
      defer conn.Close()
      fmt.Println("Perdon opciones! : ", errOpciones.Error())
    }
    if rowsOpciones.Next()  {
      rowsOpciones.Scan(&tipoDimension)
    }

    query := `SELECT STATUS, ENTER_ANL_1, ENTER_ANL_2, ENTER_ANL_3, ENTER_ANL_4, ENTER_ANL_5, ENTER_ANL_6, ENTER_ANL_7, ENTER_ANL_8, ENTER_ANL_9, ENTER_ANL_10 
    FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT] WHERE ACNT_CODE = '`+cuenta+`'`
    rowsAver, err := conn.Query(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon insert! : ", err.Error())
    }
    if rowsAver.Next()  {

      var STATUS int
      var ENTER_ANL_1 int
      var ENTER_ANL_2 int
      var ENTER_ANL_3 int
      var ENTER_ANL_4 int
      var ENTER_ANL_5 int
      var ENTER_ANL_6 int
      var ENTER_ANL_7 int
      var ENTER_ANL_8 int
      var ENTER_ANL_9 int
      var ENTER_ANL_10 int

      rowsAver.Scan(&STATUS, &ENTER_ANL_1, &ENTER_ANL_2, &ENTER_ANL_3, &ENTER_ANL_4, &ENTER_ANL_5, &ENTER_ANL_6, &ENTER_ANL_7, &ENTER_ANL_8, &ENTER_ANL_9, &ENTER_ANL_10)
      

      example := map[string]interface{}{ "success":1, "tipoDimension" : tipoDimension, "status" : STATUS, "D0" : ENTER_ANL_1, "D1" : ENTER_ANL_2, "D2" : ENTER_ANL_3, "D3" : ENTER_ANL_4, "D4" : ENTER_ANL_5, "D5" : ENTER_ANL_6, "D6" : ENTER_ANL_7, "D7" : ENTER_ANL_8, "D8" : ENTER_ANL_9, "D9" : ENTER_ANL_10 }
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 
func (c *DameLineaDelTipoDeDiarioController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    idTipoDeDiario := c.GetString("idTipoDeDiario")
    linea := c.GetString("linea")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    query := `SELECT ACNT_CODE, D_C, DESCRIPTN, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9 FROM [SunSystemsData].[dbo].[TiposDeDiarioLineas] WHERE Linea = `+linea+` AND idTipoDeDiario = `+idTipoDeDiario
    rowsAver, err := conn.Query(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon insert! : ", err.Error())
    }
    if rowsAver.Next()  {
      var cuenta string
      var D_C string
      var DESCRIPTN string
      var ANAL_T0 string
      var ANAL_T1 string
      var ANAL_T2 string
      var ANAL_T3 string
      var ANAL_T4 string
      var ANAL_T5 string
      var ANAL_T6 string
      var ANAL_T7 string
      var ANAL_T8 string
      var ANAL_T9 string
      rowsAver.Scan(&cuenta, &D_C, &DESCRIPTN, &ANAL_T0, &ANAL_T1, &ANAL_T2, &ANAL_T3, &ANAL_T4, &ANAL_T5, &ANAL_T6, &ANAL_T7, &ANAL_T8, &ANAL_T9)
      example := map[string]interface{}{ "success":1, "cuenta" : cuenta, "D_C" : D_C, "DESCRIPTN" : DESCRIPTN, "D0" : ANAL_T0, "D1" : ANAL_T1, "D2" : ANAL_T2, "D3" : ANAL_T3, "D4" : ANAL_T4, "D5" : ANAL_T5, "D6" : ANAL_T6, "D7" : ANAL_T7, "D8" : ANAL_T8, "D9" : ANAL_T9 }
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }

    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 



func (c *SubeInformeController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosTesoreroIglesia(tipoDeUsuario.(int)) {
    idUsuario := c.GetSession("idUsuario")
    idU := strconv.Itoa(idUsuario.(int))
    
    cadCampos := c.GetString("cadCampos")
    cadIdDiezmoLinea := c.GetString("cadIdDiezmoLinea")
    fmt.Println(cadCampos)
    fmt.Println(cadIdDiezmoLinea)
    _, header, errorFicha := c.GetFile("ficha")
    if errorFicha != nil {
      fmt.Println("Perdon archivo! : ")
      return
    }

    fechaFicha := c.GetString("fechaFicha")
    currentTime := int64(time.Now().Unix())
    fichaS :=strconv.FormatInt(currentTime, 10)+"-"+header.Filename
    errorGrabar := c.SaveToFile("ficha", fichaS) 
    if errorGrabar != nil {
      fmt.Println("Perdon  GRABAR! : ")
      return
    }
    IdDiezmoConcepto := c.GetString("IdDiezmoConcepto")
    

    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    
    
    query := `INSERT INTO [SunSystemsData].[dbo].[Informes] (timestamp, idUsuario, contabilizado, ficha, idDiezmoConcepto, fecha) VALUES 
    (`+strconv.FormatInt(currentTime, 10)+`,`+idU+`,0,'`+fichaS+`', `+IdDiezmoConcepto+`, '`+fechaFicha+`')`
    result , err := conn.Exec(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon insert! : ", err.Error())
    }
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      queryDireccion := "SELECT SCOPE_IDENTITY()"
      rowsDireccion, errX := conn.Query(queryDireccion)
      if errX != nil {
        defer conn.Close()
        fmt.Println("Perdon scope! : ", errX.Error())
      }

      var idInforme int
      if rowsDireccion.Next()  {
        rowsDireccion.Scan(&idInforme)
        arreglo := strings.Split(cadIdDiezmoLinea, "|")
        cantidades := strings.Split(cadCampos, "|")
      
      //pedir RFC en tipo de informes y si es egreso o ingreso
        //agregar facturado a tabla Informes
        for index,_ := range arreglo {
          //numeroAux , _ := strconv.ParseFloat(cantidades[index], 64)
          //numeroAux = numeroAux / 100
          //numeroS := fmt.Sprintf("%.2f", numeroAux)
          //strconv.FormatFloat(input_num, 'f', 6, 64)
          query = `INSERT INTO [SunSystemsData].[dbo].[InformeLinea] (idInforme,idDiezmoLinea,cantidad) VALUES 
    (`+strconv.Itoa(idInforme)+`,`+arreglo[index]+`,`+cantidades[index]+`)`
    fmt.Println(query)
     conn.Exec(query)

        } 
        ayudame := "menu"+strconv.Itoa(tipoDeUsuario.(int))+".tpl"
        c.Layout = "seven.tpl"
          c.TplName = "vacio.tpl"
          c.LayoutSections = make(map[string]string)
          c.LayoutSections["menu"] = ayudame
          c.LayoutSections["contenido"] = "nada.tpl"
        c.Data["mensaje"] = "Tu informe ha sido enviado, en cuanto se procese te llegara a tu correo el recibo"
        return
      }
    }
    ayudame := "menu"+strconv.Itoa(tipoDeUsuario.(int))+".tpl"
    c.Layout = "seven.tpl"
      c.TplName = "vacio.tpl"
      c.LayoutSections = make(map[string]string)
      c.LayoutSections["menu"] = ayudame
      c.LayoutSections["contenido"] = "nada.tpl"
    c.Data["mensaje"] = "Hubo un error, perdon"
  }
} 

func (c *SabanaDepartamentoSevenController) Get() {
  hash := c.GetString("hash")
  currentTime := int64(time.Now().Unix())
  tm := time.Unix(currentTime, 0)
  dateString := tm.String() 
  substring := string(dateString[0:10])
    byteArray := []byte(substring)
  hasher := sha512.New()
    hasher.Write(byteArray)
  cryptoText := base64.StdEncoding.EncodeToString(  []byte(hex.EncodeToString(hasher.Sum(nil))))
  if Compare(cryptoText,hash)==0 {
    BUNIT := c.GetString("BUNIT")
    FNCT := c.GetString("FNCT")
    
    periodoInicial := c.GetString("periodoInicial")
    periodoFinal := c.GetString("periodoFinal")

    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    type SabanaDepartamento struct {
      NAME string
      Real float64
      Presupuestado float64
      Cuenta string
      Proyecto string
    }
    var (
      SabanaDepartamentoList map[string]*SabanaDepartamento
    )
    SabanaDepartamentoList = make(map[string]*SabanaDepartamento)
    var realF decimal.Dec
    var presupuesto decimal.Dec
    
    queryOpciones := `SELECT ABS(SUM(AMOUNT)) as ViajesMensuales
      FROM [SunSystemsData].[dbo].[`+BUNIT+`_A_SALFLDG]
      WHERE PERIOD >= `+periodoInicial+` AND PERIOD <= `+periodoFinal+` AND
      ANAL_T3 = '`+FNCT+`'
      AND ALLOCATION!='C'
      AND ACCNT_CODE = '822110'
      AND ANAL_T8 = 'PEVANR01'`
    rowsOpciones, _ := conn.Query(queryOpciones)
    for rowsOpciones.Next()  {
      rowsOpciones.Scan(&realF)
    }
    queryOpciones = `SELECT ABS(SUM(AMOUNT)) as ViajesMensualesPresupuesto
      FROM [SunSystemsData].[dbo].[`+BUNIT+`_B_SALFLDG]
      WHERE PERIOD >= `+periodoInicial+` AND PERIOD <= `+periodoFinal+` AND
      ANAL_T3 = '`+FNCT+`'
      AND ALLOCATION!='C'
      AND ACCNT_CODE = '822110'
      AND ANAL_T8 = 'PEVANR01'`
    rowsOpciones, _ = conn.Query(queryOpciones)
    for rowsOpciones.Next()  {
      rowsOpciones.Scan(&presupuesto)
    }
    SabanaDepartamentoList["Viajes Mensuales"] = &SabanaDepartamento{"Viajes", realF.Float64(), presupuesto.Float64(),"822110","PEVANR01"}
    realF.SetFloat64(0.0)  
    realF.SetInt64(0)
    presupuesto.SetInt64(0)
    presupuesto.SetFloat64(0.0)  
    cuentaEsposa := "822120"
    if BUNIT == "MK1" {//ELi trejo, lomo plateado
      cuentaEsposa = "824110"
    }
    queryOpciones = `SELECT ABS(SUM(AMOUNT)) as ViajesEsposa
      FROM [SunSystemsData].[dbo].[`+BUNIT+`_A_SALFLDG]
      WHERE PERIOD >= `+periodoInicial+` AND PERIOD <= `+periodoFinal+` AND
      ANAL_T3 = '`+FNCT+`'
      AND ALLOCATION!='C'
      AND ACCNT_CODE = '`+cuentaEsposa+`'
      AND ANAL_T8 = 'PEVANE01'`
    rowsOpciones, _ = conn.Query(queryOpciones)
    for rowsOpciones.Next()  {
      rowsOpciones.Scan(&realF)
    }
    queryOpciones = `SELECT ABS(SUM(AMOUNT)) as ViajesEsposaPresupuesto
      FROM [SunSystemsData].[dbo].[`+BUNIT+`_B_SALFLDG]
      WHERE PERIOD >= `+periodoInicial+` AND PERIOD <= `+periodoFinal+` AND
      ANAL_T3 = '`+FNCT+`'
      AND ALLOCATION!='C'
      AND ACCNT_CODE = '`+cuentaEsposa+`'
      AND ANAL_T8 = 'PEVANE01'`
    rowsOpciones, _ = conn.Query(queryOpciones)
    for rowsOpciones.Next()  {
      rowsOpciones.Scan(&presupuesto)
    }
    SabanaDepartamentoList["Viajes Esposa"] = &SabanaDepartamento{"V. Esposa", realF.Float64(), presupuesto.Float64(),cuentaEsposa,"PEVANE01"}
    realF.SetFloat64(0.0)  
    realF.SetInt64(0)
    presupuesto.SetInt64(0)
    presupuesto.SetFloat64(0.0)  
    queryOpciones = `SELECT ABS(SUM(AMOUNT)) as Papeleria
      FROM [SunSystemsData].[dbo].[`+BUNIT+`_A_SALFLDG]
      WHERE PERIOD >= `+periodoInicial+` AND PERIOD <= `+periodoFinal+` AND
      ANAL_T3 = '`+FNCT+`'
      AND ALLOCATION!='C'
      AND ACCNT_CODE = '881110'`
    rowsOpciones, _ = conn.Query(queryOpciones)
    for rowsOpciones.Next()  {
      rowsOpciones.Scan(&realF)
    }
    queryOpciones = `SELECT ABS(SUM(AMOUNT)) as PapeleriaPresupuesto
      FROM [SunSystemsData].[dbo].[`+BUNIT+`_B_SALFLDG]
      WHERE PERIOD >= `+periodoInicial+` AND PERIOD <= `+periodoFinal+` AND
      ANAL_T3 = '`+FNCT+`'
      AND ALLOCATION!='C'
      AND ACCNT_CODE = '881110'`
    rowsOpciones, _ = conn.Query(queryOpciones)
    for rowsOpciones.Next()  {
      rowsOpciones.Scan(&presupuesto)
    }
    SabanaDepartamentoList["Papeleria"] = &SabanaDepartamento{"Papeleria", realF.Float64(), presupuesto.Float64(),"881110",""}
    realF.SetFloat64(0.0)
    realF.SetInt64(0)
    presupuesto.SetInt64(0)
    presupuesto.SetFloat64(0.0)  
    queryOpciones = `SELECT ABS(SUM(AMOUNT)) as Envios
      FROM [SunSystemsData].[dbo].[`+BUNIT+`_A_SALFLDG]
      WHERE PERIOD >= `+periodoInicial+` AND PERIOD <= `+periodoFinal+` AND
      ANAL_T3 = '`+FNCT+`'
      AND ALLOCATION!='C'
      AND ACCNT_CODE = '882110'`
    rowsOpciones, _ = conn.Query(queryOpciones)
    for rowsOpciones.Next()  {
      rowsOpciones.Scan(&realF)
    }
    queryOpciones = `SELECT ABS(SUM(AMOUNT)) as EnviosPresupuesto
      FROM [SunSystemsData].[dbo].[`+BUNIT+`_B_SALFLDG]
      WHERE PERIOD >= `+periodoInicial+` AND PERIOD <= `+periodoFinal+` AND
      ANAL_T3 = '`+FNCT+`'
      AND ALLOCATION!='C'
      AND ACCNT_CODE = '882110'`
    rowsOpciones, _ = conn.Query(queryOpciones)
    for rowsOpciones.Next()  {
      rowsOpciones.Scan(&presupuesto)
    }
    SabanaDepartamentoList["Envios"] = &SabanaDepartamento{"Envios", realF.Float64(), presupuesto.Float64(),"882110",""}
    realF.SetFloat64(0.0)  
    realF.SetInt64(0)
    presupuesto.SetInt64(0)
    presupuesto.SetFloat64(0.0)  
    queryOpciones = `SELECT ABS(SUM(AMOUNT)) as Celular
      FROM [SunSystemsData].[dbo].[`+BUNIT+`_A_SALFLDG]
      WHERE PERIOD >= `+periodoInicial+` AND PERIOD <= `+periodoFinal+` AND
      ANAL_T3 = '`+FNCT+`'
      AND ALLOCATION!='C'
      AND ACCNT_CODE = '887120'`
    rowsOpciones, _ = conn.Query(queryOpciones)
    for rowsOpciones.Next()  {
      rowsOpciones.Scan(&realF)
    }
    queryOpciones = `SELECT ABS(SUM(AMOUNT)) as CelularPresupuesto
      FROM [SunSystemsData].[dbo].[`+BUNIT+`_B_SALFLDG]
      WHERE PERIOD >= `+periodoInicial+` AND PERIOD <= `+periodoFinal+` AND
      ANAL_T3 = '`+FNCT+`'
      AND ALLOCATION!='C'
      AND ACCNT_CODE = '887120'`
    rowsOpciones, _ = conn.Query(queryOpciones)
    for rowsOpciones.Next()  {
      rowsOpciones.Scan(&presupuesto)
    }
    SabanaDepartamentoList["Celular"] = &SabanaDepartamento{"Celular", realF.Float64(), presupuesto.Float64(),"887120",""}
    realF.SetFloat64(0.0)  
    realF.SetInt64(0)
    presupuesto.SetInt64(0)
    presupuesto.SetFloat64(0.0)  

    queryOpciones = `SELECT ABS(SUM(AMOUNT)) as Varios
      FROM [SunSystemsData].[dbo].[`+BUNIT+`_A_SALFLDG]
      WHERE PERIOD >= `+periodoInicial+` AND PERIOD <= `+periodoFinal+` AND
      ANAL_T3 = '`+FNCT+`'
      AND ALLOCATION!='C'
      AND ACCNT_CODE = '822110'
      AND ANAL_T8 = 'PVARIO01'`
    rowsOpciones, _ = conn.Query(queryOpciones)
    for rowsOpciones.Next()  {
      rowsOpciones.Scan(&realF)
    }
    queryOpciones = `SELECT ABS(SUM(AMOUNT)) as VariosPresupuesto
      FROM [SunSystemsData].[dbo].[`+BUNIT+`_B_SALFLDG]
      WHERE PERIOD >= `+periodoInicial+` AND PERIOD <= `+periodoFinal+` AND
      ANAL_T3 = '`+FNCT+`'
      AND ALLOCATION!='C'
      AND ACCNT_CODE = '822110'
      AND ANAL_T8 = 'PVARIO01'`
    rowsOpciones, _ = conn.Query(queryOpciones)
    for rowsOpciones.Next()  {
      rowsOpciones.Scan(&presupuesto)
    }
    SabanaDepartamentoList["Varios"] = &SabanaDepartamento{"Varios", realF.Float64(), presupuesto.Float64(),"822110","PVARIO01"}
    realF.SetFloat64(0.0)  
    realF.SetInt64(0)
    presupuesto.SetInt64(0)
    presupuesto.SetFloat64(0.0)  
    
    example := map[string]interface{}{ "success":1, "sabana" : SabanaDepartamentoList}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  } else {
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
}

func (c *DetalleDepartamentoSevenController) Get() {
  hash := c.GetString("hash")
  currentTime := int64(time.Now().Unix())
  tm := time.Unix(currentTime, 0)
  dateString := tm.String() 
  substring := string(dateString[0:10])
    byteArray := []byte(substring)
  hasher := sha512.New()
    hasher.Write(byteArray)
  cryptoText := base64.StdEncoding.EncodeToString(  []byte(hex.EncodeToString(hasher.Sum(nil))))
  if Compare(cryptoText,hash)==0 {
    BUNIT := c.GetString("BUNIT")
    FNCT := c.GetString("FNCT")
    delPeriodo := c.GetString("delPeriodo")
    alPeriodo := c.GetString("alPeriodo")
    acnt := c.GetString("Cuenta")
    Proyecto := c.GetString("Proyecto")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }

    query := "SELECT  D_C, SUBSTRING( DESCRIPTN,0,29) as DESCRIPTN, JRNAL_NO, JRNAL_LINE, ANAL_T0, PERIOD, TRANS_DATETIME, ALLOCATION, TREFERENCE, AMOUNT,   ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T9, ANAL_T8, JRNAL_SRCE FROM [SunSystemsData].[dbo].["+BUNIT+"_A_SALFLDG] WHERE ACCNT_CODE = '"+acnt+"' AND PERIOD >= "+delPeriodo+" AND PERIOD <= "+alPeriodo+" AND ALLOCATION != 'C' AND ANAL_T3 = '"+FNCT+"' AND ANAL_T8 = '"+Proyecto+"' "
    
    query = query+" order by PERIOD desc, JRNAL_NO desc, JRNAL_LINE desc, TRANS_DATETIME desc"
      
      rows, err := conn.Query(query)
      if err!=nil {
        fmt.Println(query)
        fmt.Println(err.Error())
      }
    var D_C string
    var DESCRIPTN string
    var diario int
    var linea int
    var ref2 string
    var PERIOD int
    var trans time.Time
    var allocation string
    var treference string 
    var amount decimal.Dec
    err = nil
    
    var periodoActual int
    periodoActual,_ = strconv.Atoi(delPeriodo)
  
    //var nuevoNumero = 0
    //var totalDelPeriodo = 0
    type DiarioBuscarCantidad struct {
      Diario int
      Linea int
      AMOUNT float64
      D_C string
      TRANS_DATETIME string
      PERIOD int
      DESCRIPTN string
      TREFERENCE string
    }
    type Archivos struct {
      Nombre string
      Completo string
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)
    
    var (
      DiarioBuscarCantidadList map[string]*DiarioBuscarCantidad
    )
    DiarioBuscarCantidadList = make(map[string]*DiarioBuscarCantidad)
    
      var tfww string
    var fondo string
    var funcion string
    var JRNAL_SRCE string
    var restriccion string
    var orgId string
    var who string
    var detalle string
    var proyecto string
    //var flag string 
    var TRANS_DATETIME time.Time
    contador := "a"
    acumulador := 0.0

    for rows.Next()  {
      rows.Scan( &D_C, &DESCRIPTN, &diario, &linea, &ref2, &PERIOD, &trans, &allocation, &treference,&amount , &tfww, &fondo, &funcion, &restriccion, &orgId, &who, &detalle, &proyecto, &JRNAL_SRCE)
      if PERIOD != periodoActual {
        ArchivosList[strconv.Itoa(periodoActual)] = &Archivos{strconv.Itoa(periodoActual), fmt.Sprintf("%.2f",acumulador)}
        acumulador = 0
        periodoActual = PERIOD
      }
      acumulador += amount.Float64()
      TRANS_DATETIME = trans
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      fechaReal := ""
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          }
        }
      }
      fondo = strings.TrimSpace(fondo)
      funcion = strings.TrimSpace(funcion)
      restriccion = strings.TrimSpace(restriccion)
      orgId = strings.TrimSpace(orgId)
      who = strings.TrimSpace(who)
      detalle = strings.TrimSpace(detalle)
      proyecto = strings.TrimSpace(proyecto)
      JRNAL_SRCE = strings.TrimSpace(JRNAL_SRCE)    
      TREFERENCE := acnt+"| |"+ JRNAL_SRCE+"|"+fondo+"|"+funcion+"|"+restriccion+"|"+orgId+"|"+who+"|"+proyecto+"|"+detalle
      DiarioBuscarCantidadList[contador] = &DiarioBuscarCantidad{diario, linea, amount.Float64(), D_C, fechaReal, PERIOD, DESCRIPTN, TREFERENCE}
      contador = contador + "a"
    }
    ArchivosList[strconv.Itoa(periodoActual)] = &Archivos{strconv.Itoa(periodoActual), fmt.Sprintf("%.2f",acumulador)}
        
    example := map[string]interface{}{ "success":1 , "acumulados" : ArchivosList ,  "diarios": DiarioBuscarCantidadList }
    c.Data["json"] = &example
    c.ServeJSON()
    return
  } else {
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
}

func (c *DepartamentosSevenController) Get() {
  hash := c.GetString("hash")
  currentTime := int64(time.Now().Unix())
  tm := time.Unix(currentTime, 0)
  dateString := tm.String() 
  substring := string(dateString[0:10])
    byteArray := []byte(substring)
  hasher := sha512.New()
    hasher.Write(byteArray)
  cryptoText := base64.StdEncoding.EncodeToString(  []byte(hex.EncodeToString(hasher.Sum(nil))))
  if Compare(cryptoText,hash)==0 {
    BUNIT := c.GetString("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    type DepartamentosDimensiones struct {
      ANL_CODE string
      NAME string
    }
    var (
      DepartamentosList map[string]*DepartamentosDimensiones
    )
    DepartamentosList = make(map[string]*DepartamentosDimensiones)
    queryOpciones := `SELECT ANL_CODE, NAME
      FROM [SunSystemsData].[dbo].[`+BUNIT+`_ANL_CODE]
      WHERE ANL_CAT_ID = '04' AND 
       (ANL_CODE like 'DP%' OR
       ANL_CODE like 'AS%' OR
       ANL_CODE = 'SUTECNO01' OR
       ANL_CODE = 'SUTECNO02' OR
       ANL_CODE = 'SUTRANS01' OR
       ANL_CODE = 'AUTESOR01' OR
       ANL_CODE = 'AUCONTA01' OR
       ANL_CODE = 'AUAUDIT01' )
       AND ANL_CODE != 'DP'
       AND ANL_CODE != 'AS'
       AND STATUS = 0`
    rowsOpciones, _ := conn.Query(queryOpciones)
    ANL_CODE := ""
    NAME := ""
    for rowsOpciones.Next()  {
      rowsOpciones.Scan(&ANL_CODE, &NAME)
      DepartamentosList[ANL_CODE] = &DepartamentosDimensiones{ANL_CODE, NAME}
    }
    example := map[string]interface{}{ "success":1, "departamentos" : DepartamentosList}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  } else {
    fmt.Println(hash)
    fmt.Println(cryptoText)
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
}
func (c *NuevoTipoDeDiarioController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    nombre := c.GetString("nombre")
    codigo := c.GetString("codigo")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    query := `INSERT INTO [SunSystemsData].[dbo].[TiposDeDiario] (Codigo,nombre,BUNIT) VALUES ('`+codigo+`','`+nombre+`','`+BUNIT.(string)+`')`
    result , err := conn.Exec(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon insert! : ", err.Error())
    }
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *NuevaCedulasController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    nombre := c.GetString("nombre")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    query := `INSERT INTO [SunSystemsData].[dbo].[Cedulas](nombre,BUNIT) VALUES ('`+nombre+`','`+BUNIT.(string)+`')`
    result , err := conn.Exec(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon insert! : ", err.Error())
    }
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":0}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 


func (c *NuevoTipoDeDimensionesController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    S_HEAD := c.GetString("S_HEAD")
    DESCR := c.GetString("DESCR")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.String() 
    substring := string(dateString[0:10]) 
    ANL_CAT_ID := "01"
    queryDireccion := "SELECT TOP 1 ANL_CAT_ID FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CAT] order by ANL_CAT_ID desc"
    rowsDireccion, err := conn.Query(queryDireccion)
    var previoANAL string
    if rowsDireccion.Next()  {
      rowsDireccion.Scan(&previoANAL)
      numeroAux, _ := strconv.Atoi(previoANAL);
      numeroAux = numeroAux + 1
      if numeroAux > 9 {
        ANL_CAT_ID = strconv.Itoa(numeroAux);
      } else {
        ANL_CAT_ID = "0"+ strconv.Itoa(numeroAux);
      }
    }
    query := `INSERT INTO [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CAT](ANL_CAT_ID,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,STATUS,LOOKUP,USEABLE_ANL_ENT_ID,S_HEAD,DESCR,DAG_CODE,AMEND_CODE,VALIDATE_IND,LNGTH,LINKED,IBUS_CODE_DIM_ID)
    VALUES ('`+ANL_CAT_ID+`',1,'`+alias.(string)+`','`+substring+`',0,'`+S_HEAD+`',NULL,'`+S_HEAD+`','`+DESCR+`',NULL,1,1,15,0,NULL)`
    result , err := conn.Exec(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon insert! : ", err.Error())
    }
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":2}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 
func (c *EditarTipoDeDimensionesController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    ANL_CAT_ID := c.GetString("ANL_CAT_ID")
    S_HEAD := c.GetString("S_HEAD")
    DESCR := c.GetString("DESCR")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
  defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.String() 
    substring := string(dateString[0:10])    
    query := "UPDATE [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CAT] SET LOOKUP = '"+S_HEAD+"', S_HEAD = '"+S_HEAD+"', DESCR = '"+DESCR+"', LAST_CHANGE_DATETIME = '"+substring+"', LAST_CHANGE_USER_ID = '"+alias.(string)+"' WHERE ANL_CAT_ID = '"+ANL_CAT_ID+"'"
    result , err := conn.Exec(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon insert! : ", err.Error())
    }
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      example := map[string]interface{}{ "success":1}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    example := map[string]interface{}{ "success":2}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
} 

func (c *Migrar62PresupuestoController) Get() {
  bunitDestino := c.GetString("bunitDestino")//6.2
  bunitOrigen := c.GetString("bunitOrigen")//5.4
  bdDestino := c.GetString("bdDestino")//6.2
  bdOrigen := c.GetString("bdOrigen")//5.4
  connString2 := "Database="+bdOrigen+";Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
  conn, errS := sql.Open("mssql", connString2) 
  defer conn.Close()
  if errS != nil {
    fmt.Println("Perdon! Open connection failed:", errS.Error())
  }
  queryZ := `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] DROP CONSTRAINT FK_`+bunitDestino+`_0901_01_0354;`
  _, err := conn.Exec(queryZ) 
  if err == nil {
    fmt.Println("DROP B _0901_01_0354")
  } else {
    fmt.Println(err)
  }

  
  queryZ = `INSERT INTO [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
  SELECT *
  FROM [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_B_SALFLDG]`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("34 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] ADD TEMP1 char(15);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("35 B")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] ADD TEMP2 char(15);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("36 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] ADD TEMP3BK char(15);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("37 B")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] ADD TEMP4RST char(15);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("38 B")
  } else {
    fmt.Println(err)
  }

  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] SET [TEMP1]=[ANAL_T3]`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("39 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] SET [TEMP2]=[ANAL_T3]`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("40 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] SET [TEMP3BK]=[ANAL_T3] `
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("41 B")
  } else {
    fmt.Println(err)
  }

  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] SET [TEMP4RST]=[ANAL_T4] `
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("42 B")
  } else {
    fmt.Println(err)
  }

  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
  SET [ANAL_T4]='0'
  Where [ANAL_T4]='01' OR [ANAL_T4]='05' OR [ANAL_T4]='07'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("43 B")
  } else {
    fmt.Println(err)
  }

  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
  SET [ANAL_T4]='3'
  Where [ANAL_T4]='31' OR [ANAL_T4]='35'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("44 B")
  } else {
    fmt.Println(err)
  }

  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
  SET [VCHR_NUM]=[ANAL_T0]`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("45 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
  SET [TEMP1]='SUOPERA01'
    WHERE [TEMP1] LIKE 'AF%'
  OR [TEMP1] LIKE 'UF%'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("46 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
  SET [TEMP1]='SUOPERA01'
    WHERE [TEMP1] LIKE 'NO%'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("47 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
  SET [ANAL_T3]=[TEMP1]`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("48 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
  SET [TEMP2]='UFIN'
  WHERE [TEMP2] NOT LIKE 'AF%' AND [ANAL_T4]='0' AND [ANAL_T2] = '20'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("49 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
  SET [TEMP2]='UFNT'
  WHERE [TEMP2] NOT LIKE 'AF%' AND [ANAL_T4]='0' AND [ANAL_T2] = '10'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("50 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
  SET [TEMP2]='UFTF'
  WHERE [TEMP2] NOT LIKE 'AF%' AND [ANAL_T4]='3' AND [ANAL_T2] = '10'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("51 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
    SET [TEMP2]=' '
    WHERE  [TEMP2] LIKE 'DS%' OR
    [TEMP2] LIKE 'SU%' OR
    [TEMP2] LIKE 'AS%' OR
      [TEMP2] LIKE 'DP%' OR
      [TEMP2] LIKE 'NO%' OR
    [TEMP2] LIKE 'AU%' OR
      [TEMP2] LIKE 'BOLIVAR%' OR
      [TEMP2] LIKE 'MARIA%' OR 
      [TEMP2] LIKE 'LAICO%'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("52 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
    SET [ANAL_T0]=[TEMP2]`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("53 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] DROP COLUMN TEMP1;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("54 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] DROP COLUMN TEMP2;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("55 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] DROP COLUMN TEMP3BK;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("56 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] DROP COLUMN TEMP4RST;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("57 B")
  } else {
    fmt.Println(err)
  }
  

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0901_01_0354
      FOREIGN KEY (JRNAL_TYPE) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_DEFN] (JOURNAL_TYPE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE B _0901_01_0354")
  } else {
    fmt.Println(err)
  }
  queryZ = `SELECT MAX(JRNAL_NO) as JRNAL_NO
  FROM [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]`
  rowsZ, _ := conn.Query(queryZ)
  for rowsZ.Next()  {
    JRNAL_NO := 0
    rowsZ.Scan(&JRNAL_NO)
    //JRNAL_NO++
    JRNAL_S := strconv.Itoa(JRNAL_NO)
    if JRNAL_NO < 10 {
      JRNAL_S = "000000"+strconv.Itoa(JRNAL_NO)
    } else {
      if JRNAL_NO < 100 {
        JRNAL_S = "00000"+strconv.Itoa(JRNAL_NO)
      } else {
        if JRNAL_NO < 1000 {
          JRNAL_S = "0000"+strconv.Itoa(JRNAL_NO)
        }  else {
          if JRNAL_NO < 10000 {
            JRNAL_S = "000"+strconv.Itoa(JRNAL_NO)
          } else {
            if JRNAL_NO < 100000 {
              JRNAL_S = "00"+strconv.Itoa(JRNAL_NO)
            }  else {
              if JRNAL_NO < 1000000 {
                JRNAL_S = "0"+strconv.Itoa(JRNAL_NO)
              } 
            }
          }
        }
      }
    }
    queryZ = `UPDATE [`+bdDestino+`].[dbo].[SALFMSC]
    SET HIGH_JRNAL = '`+JRNAL_S+`'
    WHERE D_BASE = '`+bunitDestino+`' AND A_B = 'B'
    `
    _, err = conn.Exec(queryZ)  
    if err == nil {
      fmt.Println("NEW MAX JRNAL B: "+JRNAL_S)
    } else {
      fmt.Println(err)
    }
  }
  
  
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
    SET VCHR_NUM = CONCAT(LTRIM(RTRIM(JRNAL_TYPE)), SUBSTRING( CAST(PERIOD AS NVARCHAR(11)),1,4), '-',SUBSTRING (SUBSTRING (VCHR_NUM, len(JRNAL_TYPE),99), len(SUBSTRING (VCHR_NUM, len(JRNAL_TYPE),99))-4 ,5));`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("61 B")
  } else {
    fmt.Println(err)
  }


  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
    SET JNL_CLASS_CODE = JRNAL_TYPE;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("62 B")
  } else {
    fmt.Println(err)
  }

  c.Data["Website"] = "beego.me"
  c.Data["Email"] = "astaxie@gmail.com"
  c.Data["mensaje"] = "Sevenplus"
  c.TplName = "index.tpl"
  //example := map[string]interface{}{ "success":1}
  //c.Data["json"] = &example
  //c.ServeJSON()
}

func (c *Migrar62Controller) Get() {
  bunitDestino := c.GetString("bunitDestino")//6.2
  bunitOrigen := c.GetString("bunitOrigen")//5.4
  bdDestino := c.GetString("bdDestino")//6.2
  bdOrigen := c.GetString("bdOrigen")//5.4
  connString2 := "Database="+bdOrigen+";Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
  conn, errS := sql.Open("mssql", connString2) 
  defer conn.Close()
  if errS != nil {
    fmt.Println("Perdon! Open connection failed:", errS.Error())
  }
  queryZ := `DELETE FROM [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE]
    WHERE ANL_CAT_ID = '01'`
  _, err := conn.Exec(queryZ)
  if err == nil {
    fmt.Println("-2")
  } else {
    fmt.Println(err)
  }

  

//  queryZ = `DELETE FROM [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE]
  //  WHERE ANL_CAT_ID = '04' AND ANL_CODE != 'PSGENER01'`
  queryZ = `DELETE FROM [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE]
    WHERE ANL_CAT_ID = '12'`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("-1.5")
  } else {
    fmt.Println(err)
  }
  
  queryZ = `DELETE FROM [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE]
    WHERE ANL_CODE NOT IN 
  ('0000000000','10','20','A11111', 'PSGENER01')`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("-1")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_ENT_DEFN] DROP CONSTRAINT FK_`+bunitDestino+`_0005_02_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0005_02_0269")
  } else {
    fmt.Println("TRY pero no pude _0005_02_0269")
    fmt.Println(err)
  }

  

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_SUBCAT] DROP CONSTRAINT FK_`+bunitDestino+`_0006_01_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0006_01_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] DROP CONSTRAINT FK_`+bunitDestino+`_0269_01_0744;`
  //queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[ENT_USEABLE_ANL] DROP CONSTRAINT FK_`+bunitDestino+`_0269_01_0744;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0269_01_0744")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE] DROP CONSTRAINT FK_`+bunitDestino+`_0270_02_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0270_02_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_HRCHY_LAB] DROP CONSTRAINT FK_`+bunitDestino+`_0310_01_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0310_01_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LI_LINE_ANL_CAT] DROP CONSTRAINT FK_`+bunitDestino+`_0389_01_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0389_01_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ITEM_ANL_CAT] DROP CONSTRAINT FK_`+bunitDestino+`_0415_02_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0415_02_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_INTG_EXCL_ANL_CAT] DROP CONSTRAINT FK_`+bunitDestino+`_0429_01_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0429_01_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_WHSE_ANL_CAT] DROP CONSTRAINT FK_`+bunitDestino+`_0466_02_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0466_02_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_SUPP_ANL_CAT] DROP CONSTRAINT FK_`+bunitDestino+`_0467_02_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0467_02_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ADDR_ANL_CAT] DROP CONSTRAINT FK_`+bunitDestino+`_0470_01_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0470_01_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ACNT_ANL_CAT] DROP CONSTRAINT FK_`+bunitDestino+`_0471_01_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0471_01_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ASSET_ANL_CAT] DROP CONSTRAINT FK_`+bunitDestino+`_0473_02_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0473_02_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_CUST_ANL_CAT] DROP CONSTRAINT FK_`+bunitDestino+`_0474_02_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0474_02_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT_BDGT_DEFN] DROP CONSTRAINT FK_`+bunitDestino+`_0567_01_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0567_01_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_BUS_ACNT_RECOG] DROP CONSTRAINT FK_`+bunitDestino+`_0595_01_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0595_01_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_HELD_JNL_CTRL_ANL] DROP CONSTRAINT FK_`+bunitDestino+`_0619_01_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0619_01_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_TXN_REF_FORMAT_EXT] DROP CONSTRAINT FK_`+bunitDestino+`_0690_02_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0690_02_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_TXN_REF_FORMAT_EXT] DROP CONSTRAINT FK_`+bunitDestino+`_0690_03_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0690_03_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_TXN_REF_FORMAT_EXT] DROP CONSTRAINT FK_`+bunitDestino+`_0690_04_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0690_04_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_TXN_REF_FORMAT_EXT] DROP CONSTRAINT FK_`+bunitDestino+`_0690_05_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0690_05_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT_EXT] DROP CONSTRAINT FK_`+bunitDestino+`_0722_01_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0722_01_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT_EXT] DROP CONSTRAINT FK_`+bunitDestino+`_0722_02_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0722_02_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_BUS_ENT_DEFN] DROP CONSTRAINT FK_`+bunitDestino+`_0762_02_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0762_02_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_STD_TEXT_ANL_CAT] DROP CONSTRAINT FK_`+bunitDestino+`_0777_01_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0777_01_0269")
  } else {
    fmt.Println(err)
  }



  queryZ = `DELETE FROM [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT]`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("-0.5")
  } else {
    fmt.Println(err)
  }

  queryZ = `INSERT INTO [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT]
  SELECT *
  FROM [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ANL_CAT]`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("-0.49")
  } else {
    fmt.Println(err)
  }
   
   queryZ = `DELETE FROM [`+bdDestino+`].[dbo].[`+bunitDestino+`_ADDR] WHERE ADDR_CODE NOT IN 
  ('0000000000','10','20','A11111', 'PSGENER01')`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("0")
  } else {
    fmt.Println(err)
  }

//Se copian solo las funciones que quedaran en la nueva version, las demas se excluyen porque seran asignadas a 
//la dimension recursos
  queryZ = `INSERT INTO [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE]
  SELECT *
  FROM [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ANL_CODE]
  WHERE [ANL_CAT_ID]=04 AND
  [ANL_CODE] not like 'AF%' AND
    [ANL_CODE] not like 'NO%' AND
  [ANL_CODE] not like 'UF%'`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("1")
  } else {
    fmt.Println(err)
  }
  //Ahora se copian los recursos:
    //Se pasan del codigo 04 al 01 las funciones que seran Recursos (AF's)
  queryZ = `Insert Into [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE]
  Select *
  From [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ANL_CODE]
  Where [ANL_CAT_ID]=04 AND
  [ANL_CODE] like 'AF%'
  OR
  [ANL_CAT_ID]=04 AND
  [ANL_CODE] like 'UF%'`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("2")
  } else {
    fmt.Println(err)
  }

  // Se actualiza el codigo de la dimension de 04 a 01 para que queden en Recursos:
    //NOTA: se debe eliminar la clave de {C21}_ANL_CODE : [FK_C21_0270_02_0269]
    /*queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE] DROP CONSTRAINT FK_`+bunitDestino+`_0270_02_0269;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0270_02_0269")
  } else {
    fmt.Println(err)
  }*/
  
    queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE]
  SET [ANL_CAT_ID]='01'
  WHERE 
  [ANL_CAT_ID]=04 AND
  [ANL_CODE] like 'AF%'
  OR
  [ANL_CAT_ID]=04 AND
  [ANL_CODE] like 'UF%'`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("3")
  } else {
    fmt.Println(err)
  }

  //  L2 tfww
  //NOTA: Las TFWW NOI’s y NOU’s NO SE PASAN A LA NUEVA VERSION !!!
  queryZ = `Insert Into [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE]
  Select *
  From [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ANL_CODE]
  Where [ANL_CAT_ID]=02 AND
  [ANL_CODE] not like 'NO%'`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("4")
  } else {
    fmt.Println(err)
  }

  //L5 RSTR
  queryZ = `Insert Into [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE]
  Select *
  From [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ANL_CODE]
  Where [ANL_CAT_ID]=05 AND ANL_CODE in ('0','3')`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("4.5")
  } else {
    fmt.Println(err)
  }

  //L5 RSTR
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE]
  SET STATUS = 0
  Where [ANL_CAT_ID]=05 AND ANL_CODE in ('0','3')`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("4.6")
  } else {
    fmt.Println(err)
  }


  //L6 OrgID
  queryZ = `Insert Into [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE]
  Select *
  From [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ANL_CODE]
  Where [ANL_CAT_ID]=06`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("5")
  } else {
    fmt.Println(err)
  }

  //L7 WHO
  queryZ = `Insert Into [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE]
  Select *
  From [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ANL_CODE]
  Where [ANL_CAT_ID]=07`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("6")
  } else {
    fmt.Println(err)
  }

  //L8 FLAG
  queryZ = `Insert Into [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE]
  Select *
  From [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ANL_CODE]
  Where [ANL_CAT_ID]=08`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("6.5")
  } else {
    fmt.Println(err)
  }
  /*
    Address

---- LO PRIMERO QUE SE HACE ES PASAR EL DIGITO DE VERIFICACION DE LOS TERCEROS en 54
--Anteriormente el DV se guardaba en la tabla de impuestos ADV_ADDR_TAX pero solo se pasa
--la columna del DV y se actualiza en la tabla ADDR en el campo POST_CODE.
--Antes de actualizar, se pone en vacio el campo POST_CODE porque alli se almacenaba el
--codigo de municipio que ahora se usa en una dimension.
-- Con esta actualizacion quedara lista la 54 para insertar en la 62

---verificar
--USE SUNPLUSATLA
--SELECT ADV_ADDR.ADDR_CODE, ADV_ADDR.POST_CODE, ADV_ADDR_TAX.ADDR_CODE, ADV_ADDR_TAX.TAX_ID
--FROM ADV_ADDR_TAX INNER JOIN ADV_ADDR ON ADV_ADDR_TAX.ADDR_CODE = ADV_ADDR.ADDR_CODE;
  */
  //ESTO SE HACE EN 5.4 
  //USE SUNPLUSATLA  `+bunitOrigen+`
  queryZ = `UPDATE [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ADDR]
  SET POST_CODE = ''`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("7")
  } else {
    fmt.Println(err)
  }

  queryZ = `UPDATE [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ADDR]
  SET POST_CODE = TAX_ID
  FROM [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ADDR] INNER JOIN [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ADDR_TAX] 
  ON  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ADDR_TAX].[ADDR_CODE] = [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ADDR].[ADDR_CODE]`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("8")
  } else {
    fmt.Println(err)
  }
  // Se crean 3 columnas en la tabla de direcciones de 54 para que sean iguales a la 62  DROP COLUMN EMAIL
  queryZ = `ALTER TABLE  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ADDR]  ADD EMAIL char(50);`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("9")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ADDR]  ADD MISC_DESCR_1 char(50);`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("10")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ADDR]  ADD MISC_DESCR_2 char(50);`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("11")
  } else {
    fmt.Println(err)
  }
  //ADDR
  queryZ = `Insert Into [`+bdDestino+`].[dbo].[`+bunitDestino+`_ADDR]
  Select *
  From [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ADDR] WHERE ADDR_CODE NOT IN 
  ('0000000000','10','20','A11111')
  `
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("12")
  } else {
    fmt.Println(err)
  }
/*

-- Se Inserta las dimensiones asociadas al address como Tipo de documento, Pais etc
-- Hay que revisar que esten en el siguiente orden 
-- Orden dimensiones en el Core de 6.2
-- 13 category
-- 14 NIIF
-- 15 Ubicacion
-- 16 Tipo DOC
-- 17 Tipo TER  -- Tipo Tercero
-- 18 Tipo *no usar
-- 19 Nat Jur -- Naturaleza Juridica
-- 20 Acteco -- Actividad Economico
-- 21 Pais
-- 22 Dpto
-- 23 Mpio
-- 24 Pago

--IMPORTANTE
--Se determina cuales son las dimensiones de los addres en el sistema anterior 
--para luego hacer la conversion de las nuevas dimensiones en 62
--USE [SUNPLUSATLA]
--SELECT dbo.ADV_ADDR_ANL_CAT.ANL_CAT_ID, dbo.ADV_ANL_CAT.[LOOKUP]
--FROM dbo.ADV_ANL_CAT INNER JOIN dbo.ADV_ADDR_ANL_CAT ON dbo.ADV_ANL_CAT.ANL_CAT_ID = dbo.ADV_ADDR_ANL_CAT.ANL_CAT_ID
--GROUP BY dbo.ADV_ADDR_ANL_CAT.ANL_CAT_ID, dbo.ADV_ANL_CAT.[LOOKUP]
--ORDER BY dbo.ADV_ADDR_ANL_CAT.ANL_CAT_ID;

--COMPROBAR EN LA NUEVA VERSION QUE QUEDE IGUAL DESPUES DE ACTUALIZAR
--USE [SunSystemsAGC111]
--SELECT dbo.C21_ADDR_ANL_CAT.ANL_CAT_ID, dbo.C21_ANL_CAT.[LOOKUP]
--FROM dbo.C21_ANL_CAT INNER JOIN dbo.C21_ADDR_ANL_CAT ON dbo.C21_ANL_CAT.ANL_CAT_ID = dbo.C21_ADDR_ANL_CAT.ANL_CAT_ID
--GROUP BY dbo.C21_ADDR_ANL_CAT.ANL_CAT_ID, dbo.C21_ANL_CAT.[LOOKUP]
--ORDER BY dbo.C21_ADDR_ANL_CAT.ANL_CAT_ID;


--SE INSERTA TODA LA INFORMACION DE LA VERSION 54 A LA 62
--DE LA TABLA DE DIMENSIONES DE LOS ADDRESS

*/
  queryZ = `Insert Into [`+bdDestino+`].[dbo].[`+bunitDestino+`_ADDR_ANL_CAT]
  Select *
  From [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ADDR_ANL_CAT]`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("13")
  } else {
    fmt.Println(err)
  }
  //Se HACE UN RESPALDO DE LA COLUMNA ANL CAT ID EN TEMP5 EN 62
  queryZ = `ALTER TABLE  [`+bdDestino+`].[dbo].[`+bunitDestino+`_ADDR_ANL_CAT]  ADD TEMP5 nchar(2);`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("14.1")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ADDR_ANL_CAT]
  SET [TEMP5]=[ANL_CAT_ID];`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("14.2")
  } else {
    fmt.Println(err)
  }
  /*

--AHORA SE CONVIERTEN LAS DIMENSIONES EN [ANL_CAT_ID] EN 62
--Para ello necesitamos poner un codigo puente despues de 50

Codigos puente y varia segun el campo y consulta hecha previamente
18 sera 01   214 lineas
19 sera 02
20 sera 03
21 sera 04
22 sera 05
23 sera 06
24 sera 07

-- hacer repetidamente este update PUENTE segun el numero de dimensiones a convertir
--USE [SunSystemsAGC111]
--UPDATE [C21_ADDR_ANL_CAT]
--SET 
--[ANL_CAT_ID]='01'
--WHERE [ANL_CAT_ID]='18'


01 sera 20   214 lineas
02 sera 16  
03 sera 17
04 sera 22
05 sera 23
06 sera 21
07 sera 19

--USE [SunSystemsAGC111]
--UPDATE [C21_ADDR_ANL_CAT]
--SET 
--[ANL_CAT_ID]='20'
--WHERE [ANL_CAT_ID]='01'




-- NOTA: CONFIGURAR EN ADDRESS EL CODIGO 000000000 CON EL NOMBRE DEL CAMPO LOCAL


------Para consultar si la insercion de las direcciones se ejecuto correctamente en 62
--select * from [SunSystemsAGC111].[dbo].[C21_ADDR]
--select * from [SunSystemsAGC111].[dbo].[C21_OWN_CO]
--⎫ L9 Zonas/Conceptos DIAN
--AQUI SE ESTA MANEJANDO LOS CONCEPTOS DIAN, ENTONCES COPIAMOS LAS ZONAS PARA QUIENES LO TIENEN, DEFINIR EL USO DE ESTA
--DIMENSION

--OPCION 1-->Cuando no hay Conceptos DIAN en 5.4
--Insert Into [SunSystemsAGC111].[dbo].[C21_ANL_CODE]
--Select *
--From [SUNPLUSATLA].[dbo].[ADV_ANL_CODE]
--Where [ANL_CAT_ID]=09 

--OPCION 2 ----> Cuando hay conceptos y se queire migra otra informacion, en etse caso Distritos y zona
--Insert Into [SunSystemsAGC111].[dbo].[C21_ANL_CODE]
--Select *
--From [SUNPLUSATLA].[dbo].[ADV_ANL_CODE]
--Where [ANL_CAT_ID]=09 AND
--[SUNPLUSATLA].[dbo].[ADV_ANL_CODE].ANL_CODE LIKE 'D%' OR [SUNPLUSATLA].[dbo].[ADV_ANL_CODE].ANL_CODE LIKE 'Z%' 

  */
  //Opcion 1
  queryZ = `Insert Into [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE]
  Select *
  From [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ANL_CODE]
  Where [ANL_CAT_ID]=09`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("15")
  } else {
    fmt.Println(err)
  }

  queryZ = `Insert Into [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE]
  Select *
  From [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ANL_CODE]
  Where [ANL_CAT_ID]=10`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("16")
  } else {
    fmt.Println(err)
  }

  queryZ = `Insert Into [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE]
  Select *
  From [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ANL_CODE]
  Where [ANL_CAT_ID]=11`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("17")
  } else {
    fmt.Println(err)
  }

  queryZ = `Insert Into [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE]
  Select *
  From [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ANL_CODE]
  Where [ANL_CAT_ID]=12`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("18")
  } else {
    fmt.Println(err)
  }

  queryZ = `Insert Into [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE]
  Select *
  From [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ANL_CODE]
  Where [ANL_CAT_ID]=13`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("19")
  } else {
    fmt.Println(err)
  }

  queryZ = `Insert Into [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE]
  Select *
  From [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ANL_CODE]
  Where [ANL_CAT_ID]=14`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("20")
  } else {
    fmt.Println(err)
  }
  //2. Subir Catalogo
  //Se crean 2 columnas en la tabla del catalogo de 54 para que sean iguales a la 62
  queryZ = `ALTER TABLE  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ACNT]  ADD DR_CR smallint;`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("21")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ACNT]  ADD ACNT_SUB_TYPE smallint;`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("22")
  } else {
    fmt.Println(err)
  }
  queryZ = `Insert Into [`+bdDestino+`].[dbo].[`+bunitDestino+`_ACNT]
  Select *
  From [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ACNT]`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("23")
  } else {
    fmt.Println(err)
  }
  //Se inserta los codigos de las dimensiones asociadas al catalogo, por ejemplo las clases, el puc, NIIF etc
  queryZ = `Insert Into [`+bdDestino+`].[dbo].[`+bunitDestino+`_ACNT_ANL_CAT]
  Select *
  From [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ACNT_ANL_CAT]`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("24")
  } else {
    fmt.Println(err)
  }
/*
--NOTA: Las dimension asociada a conceptos y Formatos de la DIAN desaparecen, asi que se eliminan esos codigos de esta tabla.

--Poner la dimension recurso como obligatoria para todas las cuentaas de PyG (5 a la 999)
--1 = Mandatorio
--2 = Opcional
--3 = Prohibido
*/
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ACNT]
  SET ENTER_ANL_1=1
  WHERE ACNT_CODE BETWEEN '5' AND '999' AND LEN(ACNT_CODE)>4`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("25")
  } else {
    fmt.Println(err)
  }

  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ACNT]
  SET ENTER_ANL_1=3, ENTER_ANL_2=3, ENTER_ANL_3=3, ENTER_ANL_4=3, ENTER_ANL_5=3, ENTER_ANL_6=3, 
  ENTER_ANL_7=3, ENTER_ANL_8=3, ENTER_ANL_9=3, ENTER_ANL_10=3
  WHERE LEN(ACNT_CODE)<6`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("26")
  } else {
    fmt.Println(err)
  }

  //3. Subir los activos de planta
  //Se crean 2 columnas en la tabla de los activos de 54 para que sean iguales a la 62
  queryZ = `ALTER TABLE  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ASSET]  DROP COLUMN DAG_CODE;`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("27.1")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ASSET]  DROP COLUMN CV4_ANTICIPATED_DEP;`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("28.1")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ASSET]  ADD DAG_CODE nchar(5);`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("27.2")
  } else {
    fmt.Println(err)
  }
  
  queryZ = `ALTER TABLE  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ASSET]  ADD CV4_ANTICIPATED_DEP int;`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("28.2")
  } else {
    fmt.Println(err)
  }
  //CV4_ANTICIPATED_DEP
  //Se inserta el valor 0 en esta columna para que luego deje realizar la insercion de activos EN 5.4
  queryZ = `Update [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ASSET] SET [CV4_ANTICIPATED_DEP] = 0`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("29")
  } else {
    fmt.Println(err)
  }
  // Inserta los activos de 54 a 62
  queryZ = `Insert Into [`+bdDestino+`].[dbo].[`+bunitDestino+`_ASSET]
  Select *
  From [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ASSET]`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("30")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_DEP_PSET] DROP CONSTRAINT FK_`+bunitDestino+`_0661_01_0204;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0661_01_0204")
  } else {
    fmt.Println(err)
  }
  //INSERTA LAS DIMENSIONES EN LOS ACTIVOS
  queryZ = `Insert Into [`+bdDestino+`].[dbo].[`+bunitDestino+`_ASSET_ANL_CAT]
  Select *
  From [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_ASSET_ANL_CAT]`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("31")
  } else {
    fmt.Println(err)
  }
  // INSERTA LAS DIMENSIONES PARA PREDEFINIR DEPRECIACION EN LOS ACTIVOS
  queryZ = `Insert Into [`+bdDestino+`].[dbo].[`+bunitDestino+`_DEP_PSET]
  Select *
  From [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_DEP_PSET]`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("32")
  } else {
    fmt.Println(err)
  }
  //SE ACTUALIZA LA RESTRICCION Y A TODOS SE LE PONE UFIN
  queryZ = `Update [`+bdDestino+`].[dbo].[`+bunitDestino+`_DEP_PSET]
  SET [LDG_ANL_CODE_1]='UFIN',
  [LDG_ANL_CODE_4]='SUOPERA01',
  [LDG_ANL_CODE_5]='0'`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33")
  } else {
    fmt.Println(err)
  }
  /*
--  -- INSERTA TODAS LAS TRANSACCIONES DEL LIBRO MAYOR
--Chequear que los usuarios que estan en las transacciones existan en la base de datos de seguridad.
SISTEMA ANTIGUO
--Select  [ORIGINATOR_ID]
-- From [SUNPLUSATLA].[dbo].[ADV_A_SALFLDG] 
-- group BY [ORIGINATOR_ID]

--NOTA:
--Checar que esos usuarios existan en el nuevo servidor.
  */

  queryZ = `DELETE FROM [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_DEFN]
  WHERE RTRIM(LTRIM(JOURNAL_TYPE)) NOT IN ('SY','FA','LR')`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33.1")
  } else {
    fmt.Println(err)
  }
  //CK__CEA_JNL_D__ASSET__11FB5D2C
  queryZ = `ALTER TABLE  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_JNL_DEFN]  DROP CONSTRAINT CK__`+bunitOrigen+`_JNL_D__ASSET__6AA692EC;`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33.15")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_JNL_DEFN]  DROP CONSTRAINT CK__`+bunitOrigen+`_JNL_D__ASSET__11FB5D2C;`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33.15 PRIMA")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_JNL_DEFN]  DROP CONSTRAINT CK__`+bunitOrigen+`_JNL_D__ASSET__29EBEE09;`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33.15 PRIMA AGMG11")
  } else {
    fmt.Println(err)
  }
  
  queryZ = `ALTER TABLE  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_JNL_DEFN]  NOCHECK CONSTRAINT ALL;`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33.15 PRIMA")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_JNL_DEFN]  DROP CONSTRAINT DF__`+bunitOrigen+`_JNL_D__ASSET__69B26EB3;`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33.16")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_JNL_DEFN]  DROP CONSTRAINT DF__`+bunitOrigen+`_JNL_D__ASSET__110738F3;`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33.16 PRIMA")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_JNL_DEFN]  DROP CONSTRAINT DF__`+bunitOrigen+`_JNL_D__ASSET__28F7C9D0;`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33.16 PRIMA")
  } else {
    fmt.Println(err)
  }
  
  
  queryZ = `ALTER TABLE  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_JNL_DEFN]  DROP CONSTRAINT CK__`+bunitOrigen+`_JNL_D__IBUS___36F1E4BC;`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33.17")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_JNL_DEFN]  DROP CONSTRAINT CK__`+bunitOrigen+`_JNL_D__IBUS___5E46AEFC;`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33.17 PRIMA")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_JNL_DEFN]  DROP CONSTRAINT CK__`+bunitOrigen+`_JNL_D__IBUS___76373FD9;`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33.17 PRIMA AGMG11")
  } else {
    fmt.Println(err)
  }

  


  queryZ = `ALTER TABLE  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_JNL_DEFN]  DROP COLUMN IBUS_CODE_DOC_ID;`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33.19")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_JNL_DEFN]  DROP COLUMN ASSET_ENTRY;`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33.2")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE  [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_JNL_DEFN] ALTER COLUMN INPUT_DISC_ACC nchar(15) NULL;`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33.20")
  } else {
    fmt.Println(err)
  }
  
  queryZ = `UPDATE [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_JNL_DEFN]
  SET BASE_POST_RULE = 3,
  OTHER_POST_RULE = 3, MEMO_POST_RULE = 1, CV4_POST_RULE = 3, CV5_POST_RULE=0, INPUT_DISC_ACC = NULL, AUTO_TAX_ACC = 'I', REPORT_POST_RULE = 0 ;`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33.21")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_DEFN] DROP CONSTRAINT FK_`+bunitDestino+`_0354_02_0152;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0354_02_0152")
  } else {
    fmt.Println(err)
  }



  queryZ = `INSERT INTO [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_DEFN]
  SELECT *
  FROM [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_JNL_DEFN]`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33.3")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_CLASS] DROP CONSTRAINT FK_`+bunitDestino+`_0541_01_0160;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0541_01_0160")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] DROP CONSTRAINT FK_`+bunitDestino+`_0588_01_0541;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0588_01_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] DROP CONSTRAINT FK_`+bunitDestino+`_0588_02_0541;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0588_02_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] DROP CONSTRAINT FK_`+bunitDestino+`_0588_03_0541;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0588_03_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] DROP CONSTRAINT FK_`+bunitDestino+`_0588_04_0541;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0588_04_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] DROP CONSTRAINT FK_`+bunitDestino+`_0588_05_0541;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0588_05_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] DROP CONSTRAINT FK_`+bunitDestino+`_0588_06_0541;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0588_06_0541")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] DROP CONSTRAINT FK_`+bunitDestino+`_0588_07_0541;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0588_07_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] DROP CONSTRAINT FK_`+bunitDestino+`_0588_08_0541;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0588_08_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] DROP CONSTRAINT FK_`+bunitDestino+`_0588_09_0541;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0588_09_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] DROP CONSTRAINT FK_`+bunitDestino+`_0588_10_0541;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0588_10_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] DROP CONSTRAINT FK_`+bunitDestino+`_0588_11_0541;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0588_11_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] DROP CONSTRAINT FK_`+bunitDestino+`_0588_12_0541;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0588_12_0541")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] DROP CONSTRAINT FK_`+bunitDestino+`_0588_13_0541;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0588_13_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] DROP CONSTRAINT FK_`+bunitDestino+`_0588_14_0541;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0588_14_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_VCHR_NUM_STREAM] DROP CONSTRAINT FK_`+bunitDestino+`_0543_01_0542;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0543_01_0542")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG] DROP CONSTRAINT FK_`+bunitDestino+`_0901_01_0354;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP _0901_01_0354")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] DROP CONSTRAINT FK_`+bunitDestino+`_0901_01_0354;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("DROP B _0901_01_0354")
  } else {
    fmt.Println(err)
  }

  queryZ = `DELETE FROM [`+bdDestino+`].[dbo].[`+bunitDestino+`_VCHR_NUM_STREAM]
  WHERE RTRIM(LTRIM(VCHR_NUM_STREAM_CODE)) NOT IN ('SY','FA','LR')`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33.304")
  } else {
    fmt.Println(err)
  }
  
  queryZ = `DELETE FROM [`+bdDestino+`].[dbo].[`+bunitDestino+`_VCHR_NUM_STREAM_HDR]
  WHERE RTRIM(LTRIM(VCHR_NUM_STREAM_CODE)) NOT IN ('SY','FA','LR')`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33.305")
  } else {
    fmt.Println(err)
  }

  queryZ = `DELETE FROM [`+bdDestino+`].[dbo].[`+bunitDestino+`_TXN_REF_FMT]
  WHERE RTRIM(LTRIM(TXN_REF_FMT_CODE)) NOT IN ('SY','FA','LR')`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33.31")
  } else {
    fmt.Println(err)
  }

  queryZ = `DELETE FROM [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_CLASS]
  WHERE RTRIM(LTRIM(JNL_CLASS_CODE)) NOT IN ('SY','FA','LR')`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("33.32")
  } else {
    fmt.Println(err)
  }
  JOURNAL_TYPE := ""
  
  queryZ = `SELECT JOURNAL_TYPE
  FROM [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_JNL_DEFN] order by JOURNAL_TYPE asc`
  rowsZ, _ := conn.Query(queryZ)
  for rowsZ.Next()  {
    rowsZ.Scan(&JOURNAL_TYPE)
    JOURNAL_TYPE_ORIGINAL := JOURNAL_TYPE
    JOURNAL_TYPE = strings.TrimSpace(JOURNAL_TYPE)
    queryZ = `INSERT INTO [`+bdDestino+`].[dbo].[`+bunitDestino+`_VCHR_NUM_STREAM_HDR]
      (VCHR_NUM_STREAM_CODE, UPDATE_COUNT, LAST_CHANGE_USER_ID, LAST_CHANGE_DATETIME, LOOKUP, STATUS, DESCR, RESTART) VALUES
      ('`+JOURNAL_TYPE+`',1,'AOK','2017-11-02','`+JOURNAL_TYPE+`',0,'`+JOURNAL_TYPE+`',2)`
      _, err = conn.Exec(queryZ)
    if err == nil {
      fmt.Println("33.325 "+JOURNAL_TYPE)
    } else {
      fmt.Println(err)
    }

    queryZ = `INSERT INTO [`+bdDestino+`].[dbo].[`+bunitDestino+`_VCHR_NUM_STREAM]
      ( UPDATE_COUNT, LAST_CHANGE_USER_ID, LAST_CHANGE_DATETIME, LDG_CODE, VCHR_NUM_STREAM_CODE, SEQ_NUM, STREAM_YEAR) VALUES
      (1,'AOK','2017-11-02','A','`+JOURNAL_TYPE+`',0,2018)`
      _, err = conn.Exec(queryZ)
    if err == nil {
      fmt.Println("33.326 "+JOURNAL_TYPE)
    } else {
      fmt.Println(err)
    }
    longitudJRNAL := len(JOURNAL_TYPE)
    lS := strconv.Itoa(longitudJRNAL)
    queryZ = `INSERT INTO [`+bdDestino+`].[dbo].[`+bunitDestino+`_TXN_REF_FMT]
      (TXN_REF_FMT_CODE, UPDATE_COUNT, LAST_CHANGE_USER_ID, LAST_CHANGE_DATETIME, STATUS, LOOKUP, DESCR, S_HEAD, STRUCTURE, PART1_TYPE, PART1_CTRL, PART1_VAL, PART2_TYPE, PART2_CTRL, PART2_VAL, PART3_TYPE, PART3_CTRL, PART3_VAL, PART4_TYPE, PART4_CTRL, PART4_VAL, SU_RESERVED, DOC_CTRL) VALUES
      ('`+JOURNAL_TYPE+`',1,'AOK','2017-11-02',0,'`+JOURNAL_TYPE+`','`+JOURNAL_TYPE+`','`+JOURNAL_TYPE+`','0`+lS+` 04-05 00',6,0,'',4,0,'6',7,0,'`+JOURNAL_TYPE+`',99,0,'',0,0)`
      _, err = conn.Exec(queryZ)
    if err == nil {
      fmt.Println("33.33 "+JOURNAL_TYPE)
    } else {
      fmt.Println(err)
    }
    queryZ = `INSERT INTO [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_CLASS]
      (JNL_CLASS_CODE, UPDATE_COUNT, LAST_CHANGE_USER_ID, LAST_CHANGE_DATETIME, LOOKUP, S_HEAD, DESCR, STATUS, PREFIX, TXN_REF_FMT_CODE) VALUES
      ('`+JOURNAL_TYPE+`',1,'AOK','2017-11-02','`+JOURNAL_TYPE+`','`+JOURNAL_TYPE+`','`+JOURNAL_TYPE+`',0 ,'`+JOURNAL_TYPE+`','`+JOURNAL_TYPE+`')`
      _, err = conn.Exec(queryZ)
    if err == nil {
      fmt.Println("33.34 "+JOURNAL_TYPE)
    } else {
      fmt.Println(err)
    }
    tipoFormulario := "6BLE57"
    if len(JOURNAL_TYPE) == 5 {
      tipoFormulario = "6BLE54"
    }
    queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_DEFN]
      SET JNL_CLASS_CODE = '`+JOURNAL_TYPE+`',  JOURNAL_TYPE = '`+JOURNAL_TYPE+`', SEQ_CODE = '', FORM_NAME = '`+tipoFormulario+`'
      WHERE JOURNAL_TYPE = '`+JOURNAL_TYPE_ORIGINAL+`'`
    _, err = conn.Exec(queryZ)
    if err == nil {
      fmt.Println("33.35 "+JOURNAL_TYPE)
    } else {
      fmt.Println(err)
    }
  }


  queryZ = `INSERT INTO [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG]
  SELECT *
  FROM [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_A_SALFLDG]`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("34")
  } else {
    fmt.Println(err)
  }

  queryZ = `INSERT INTO [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
  SELECT *
  FROM [`+bdOrigen+`].[dbo].[`+bunitOrigen+`_B_SALFLDG]`
  _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("34 B")
  } else {
    fmt.Println(err)
  }
  //MASAGEO DE LAS TRANSACCIONES DE 54 PARA DEJAR LISTAS A 62
  //Crear Columna para conversion de dimensiones.
  //En estas columnas haremos la transfomacion de las Funciones a recursos.
  //Al finalizar la conversion, se deben eliminar dichas columnas para no tener problemas con la integridad de datos.
  //--USE SunSystemsAGC111;
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG] ADD TEMP1 char(15);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("35")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] ADD TEMP1 char(15);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("35 B")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG] ADD TEMP2 char(15);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("36")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] ADD TEMP2 char(15);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("36 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG] ADD TEMP3BK char(15);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("37")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] ADD TEMP3BK char(15);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("37 B")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG] ADD TEMP4RST char(15);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("38")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] ADD TEMP4RST char(15);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("38 B")
  } else {
    fmt.Println(err)
  }

  //Las Funciones se pasan a la columna TEMP1
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG] SET [TEMP1]=[ANAL_T3]`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("39")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] SET [TEMP1]=[ANAL_T3]`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("39 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG] SET [TEMP2]=[ANAL_T3]`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("40")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] SET [TEMP2]=[ANAL_T3]`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("40 B")
  } else {
    fmt.Println(err)
  }
  //---- SOLO PARA TENER DE RESPALDO SE COPIA A TEMP3
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG] SET [TEMP3BK]=[ANAL_T3] `
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("41")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] SET [TEMP3BK]=[ANAL_T3] `
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("41 B")
  } else {
    fmt.Println(err)
  }
  //--Respaldamos la colunma de Restricciones
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG] SET [TEMP4RST]=[ANAL_T4] `
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("42")
  } else {
    fmt.Println(err)
  }

  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] SET [TEMP4RST]=[ANAL_T4] `
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("42 B")
  } else {
    fmt.Println(err)
  }

  //--ACTUALIZAR LAS RESTRICCIONES:
  //--01 = 0
  //--05 = 0
  //--07 = 0
  //--31 = 3
  //--35 = 3
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG]
  SET [ANAL_T4]='0'
  Where [ANAL_T4]='01' OR [ANAL_T4]='05' OR [ANAL_T4]='07'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("43")
  } else {
    fmt.Println(err)
  }

  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
  SET [ANAL_T4]='0'
  Where [ANAL_T4]='01' OR [ANAL_T4]='05' OR [ANAL_T4]='07'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("43 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG]
  SET [ANAL_T4]='3'
  Where [ANAL_T4]='31' OR [ANAL_T4]='35'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("44")
  } else {
    fmt.Println(err)
  }

  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
  SET [ANAL_T4]='3'
  Where [ANAL_T4]='31' OR [ANAL_T4]='35'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("44 B")
  } else {
    fmt.Println(err)
  }
  // Se copia de ANAL_T0 donde en la versión 54 se encuentra el consecutivo de tipos de diarios a [VCHR_NUM] donde se almacenan en la nueva versón 62
  // la numeracion cambiara en la nueva version porque se reinicia cada año. 
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG]
  SET [VCHR_NUM]=[ANAL_T0]`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("45")
  } else {
    fmt.Println(err)
  }

  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
  SET [VCHR_NUM]=[ANAL_T0]`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("45 B")
  } else {
    fmt.Println(err)
  }
  //-- TEMP1 SERA LA COLUMNA DE FUNCIONES
  //-- Los AF's y UF's pasarán de funciones a recursos por lo tanto se reemplaza por SUOPERA01 en la Funcion.
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG]
  SET [TEMP1]='SUOPERA01'
    WHERE [TEMP1] LIKE 'AF%'
  OR [TEMP1] LIKE 'UF%'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("46")
  } else {
    fmt.Println(err)
  }

  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
  SET [TEMP1]='SUOPERA01'
    WHERE [TEMP1] LIKE 'AF%'
  OR [TEMP1] LIKE 'UF%'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("46 B")
  } else {
    fmt.Println(err)
  }
  //--Las funciones que empiezas con NO ej NOIMOB, NOUMOB,... dejan de existir, por lo tanto se reemplaza por SUOPERA01
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG]
  SET [TEMP1]='SUOPERA01'
    WHERE [TEMP1] LIKE 'NO%'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("47")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
  SET [TEMP1]='SUOPERA01'
    WHERE [TEMP1] LIKE 'NO%'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("47 B")
  } else {
    fmt.Println(err)
  }
//Despues de hacer los cambios en la TEMP1, actualizamos la columna de Funciones con los nuevos cambios que hicimos:
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG]
  SET [ANAL_T3]=[TEMP1]`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("48")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
  SET [ANAL_T3]=[TEMP1]`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("48 B")
  } else {
    fmt.Println(err)
  }
  //----HACER LAS ACTUALIZACIONES DE ACUERDO A LA FUNCION
  //--Ahora se trabaja en la columna TEMP2 donde masageamos para los Recursos.
  //-- Ponemos UFIN donde Funcion no empiece por AF, la restriccion sea 0 y el fondo sea 20.
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG]
  SET [TEMP2]='UFIN'
  WHERE [TEMP2] NOT LIKE 'AF%' AND [ANAL_T4]='0' AND [ANAL_T2] = '20'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("49")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
  SET [TEMP2]='UFIN'
  WHERE [TEMP2] NOT LIKE 'AF%' AND [ANAL_T4]='0' AND [ANAL_T2] = '20'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("49 B")
  } else {
    fmt.Println(err)
  }
  // -- Ponemos UFNT donde la Funcion no empiece por AF, la restriccion sea 0 y el fondo sea 10.
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG]
  SET [TEMP2]='UFNT'
  WHERE [TEMP2] NOT LIKE 'AF%' AND [ANAL_T4]='0' AND [ANAL_T2] = '10'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("50")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
  SET [TEMP2]='UFNT'
  WHERE [TEMP2] NOT LIKE 'AF%' AND [ANAL_T4]='0' AND [ANAL_T2] = '10'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("50 B")
  } else {
    fmt.Println(err)
  }
  //  -- Ponemos UFTF donde la Funcion no empiece por AF, la restriccion sea 3 y el fondo sea 10.
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG]
  SET [TEMP2]='UFTF'
  WHERE [TEMP2] NOT LIKE 'AF%' AND [ANAL_T4]='3' AND [ANAL_T2] = '10'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("51")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
  SET [TEMP2]='UFTF'
  WHERE [TEMP2] NOT LIKE 'AF%' AND [ANAL_T4]='3' AND [ANAL_T2] = '10'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("51 B")
  } else {
    fmt.Println(err)
  }
/*  
 -- Eliminamos las funciones que se usan sin restricciones, es decir aquellas que se usan en la cuenta
 --de distritos. Esto no es necesario en los Recursos pues igual quedaron en funciones.
-- Para ellos verificamos primeros que codigos existen en la dimension Recursos que estamos preparando TEMP2
--SELECT [TEMP2] from  [SunSystemsAGC111].[dbo].[C21_A_SALFLDG]
--GROUP BY [TEMP2]
--ORDER BY [TEMP2] ASC

------Actualizamos de ser necesario
--UPDATE [SunSystemsAGC111].[dbo].[C21_A_SALFLDG]
--SET [TEMP2]=' '
--WHERE  [TEMP2] LIKE 'DS%' OR
--    [TEMP2] LIKE 'SU%' OR
--    [TEMP2] LIKE 'AS%' OR
--      [TEMP2] LIKE 'DP%' OR
--      [TEMP2] LIKE 'NO%' OR
--    [TEMP2] LIKE 'AU%' OR
--      [TEMP2] LIKE 'BOLIVAR%' OR
--      [TEMP2] LIKE 'MARIA%' OR 
--      [TEMP2] LIKE 'LAICO%'
*/
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG]
    SET [TEMP2]=' '
    WHERE  [TEMP2] LIKE 'DS%' OR
    [TEMP2] LIKE 'SU%' OR
    [TEMP2] LIKE 'AS%' OR
      [TEMP2] LIKE 'DP%' OR
      [TEMP2] LIKE 'NO%' OR
    [TEMP2] LIKE 'AU%' OR
      [TEMP2] LIKE 'BOLIVAR%' OR
      [TEMP2] LIKE 'MARIA%' OR 
      [TEMP2] LIKE 'LAICO%'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("52")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
    SET [TEMP2]=' '
    WHERE  [TEMP2] LIKE 'DS%' OR
    [TEMP2] LIKE 'SU%' OR
    [TEMP2] LIKE 'AS%' OR
      [TEMP2] LIKE 'DP%' OR
      [TEMP2] LIKE 'NO%' OR
    [TEMP2] LIKE 'AU%' OR
      [TEMP2] LIKE 'BOLIVAR%' OR
      [TEMP2] LIKE 'MARIA%' OR 
      [TEMP2] LIKE 'LAICO%'`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("52 B")
  } else {
    fmt.Println(err)
  }
  //--Una vez terminada la masageada, entonces copiamos de TEMP2 a [ANAL_T0] que seran los Recursos.
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG]
    SET [ANAL_T0]=[TEMP2]`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("53")
  } else {
    fmt.Println(err)
  }
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
    SET [ANAL_T0]=[TEMP2]`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("53 B")
  } else {
    fmt.Println(err)
  }
  //--Eliminar columnas. Despues de verificar que todo este bien
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG] DROP COLUMN TEMP1;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("54")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] DROP COLUMN TEMP1;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("54 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG] DROP COLUMN TEMP2;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("55")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] DROP COLUMN TEMP2;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("55 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG] DROP COLUMN TEMP3BK;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("56")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] DROP COLUMN TEMP3BK;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("56 B")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG] DROP COLUMN TEMP4RST;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("57")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] DROP COLUMN TEMP4RST;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("57 B")
  } else {
    fmt.Println(err)
  }
  

  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] SET S_HEAD = 'RSCE', DESCR = 'Resource', LNGTH = 15
  WHERE ANL_CAT_ID = '01';`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("57.5")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ADDR_ANL_CAT] DROP COLUMN TEMP5;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("58")
  } else {
    fmt.Println(err)
  }
    //cosas de al final
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_DEP_PSET] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0661_01_0204
      FOREIGN KEY (ASSET_CODE) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ASSET] (ASSET_CODE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0661_01_0204")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CODE] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0270_02_0269
      FOREIGN KEY (ANL_CAT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0270_02_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_DEFN] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0354_02_0152
      FOREIGN KEY (INPUT_DISC_ACC) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ACNT] (ACNT_CODE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0354_02_0152")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_CLASS] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0541_01_0160
      FOREIGN KEY (TXN_REF_FMT_CODE) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_TXN_REF_FMT] (TXN_REF_FMT_CODE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0541_01_0160")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0588_01_0541
      FOREIGN KEY (PYMT_RUN_CLASS) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_CLASS] (JNL_CLASS_CODE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0588_01_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0588_02_0541
      FOREIGN KEY (TXN_MATCH_CLASS) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_CLASS] (JNL_CLASS_CODE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0588_02_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0588_03_0541
      FOREIGN KEY (DEPN_CALC_CLASS) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_CLASS] (JNL_CLASS_CODE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0588_03_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0588_04_0541
      FOREIGN KEY (PYMT_COLL_RUN_CLASS) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_CLASS] (JNL_CLASS_CODE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0588_04_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0588_05_0541
      FOREIGN KEY (PYMT_VOID_CLASS) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_CLASS] (JNL_CLASS_CODE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0588_05_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0588_06_0541
      FOREIGN KEY (LDG_REVAL_CLASS) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_CLASS] (JNL_CLASS_CODE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0588_06_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0588_07_0541
      FOREIGN KEY (POST_WTHLD_TAX_CLASS) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_CLASS] (JNL_CLASS_CODE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0588_07_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0588_08_0541
      FOREIGN KEY (ASSET_DISP_CLASS) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_CLASS] (JNL_CLASS_CODE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0588_08_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0588_09_0541
      FOREIGN KEY (PERD_CLEARDOWN_CLASS) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_CLASS] (JNL_CLASS_CODE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0588_09_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0588_10_0541
      FOREIGN KEY (TREASURY_DEAL_CLASS) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_CLASS] (JNL_CLASS_CODE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0588_10_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0588_11_0541
      FOREIGN KEY (CV4_CALCULATOR_CLASS) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_CLASS] (JNL_CLASS_CODE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0588_11_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0588_12_0541
      FOREIGN KEY (RECON_MANAGER_CLASS) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_CLASS] (JNL_CLASS_CODE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0588_12_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0588_13_0541
      FOREIGN KEY (ACNT_ALLOCN_CLASS) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_CLASS] (JNL_CLASS_CODE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0588_13_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LDG_DEFN] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0588_14_0541
      FOREIGN KEY (DFLT_CLASS) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_CLASS] (JNL_CLASS_CODE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0588_14_0541")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_VCHR_NUM_STREAM] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0543_01_0542
      FOREIGN KEY (VCHR_NUM_STREAM_CODE) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_VCHR_NUM_STREAM_HDR] (VCHR_NUM_STREAM_CODE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0543_01_0542")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0901_01_0354
      FOREIGN KEY (JRNAL_TYPE) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_DEFN] (JOURNAL_TYPE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0901_01_0354")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0901_01_0354
      FOREIGN KEY (JRNAL_TYPE) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_DEFN] (JOURNAL_TYPE);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE B _0901_01_0354")
  } else {
    fmt.Println(err)
  }

  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_ENT_DEFN] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0005_02_0269
      FOREIGN KEY (ANL_CAT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0005_02_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_SUBCAT] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0006_01_0269
      FOREIGN KEY (ANL_CAT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0006_01_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0269_01_0744
      FOREIGN KEY (USEABLE_ANL_ENT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[ENT_USEABLE_ANL] (USEABLE_ANL_ENT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0269_01_0744")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_HRCHY_LAB] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0310_01_0269
      FOREIGN KEY (ANL_CAT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0310_01_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_LI_LINE_ANL_CAT] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0389_01_0269
      FOREIGN KEY (ANL_CAT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0389_01_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ITEM_ANL_CAT] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0415_02_0269
      FOREIGN KEY (ANL_CAT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0415_02_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_INTG_EXCL_ANL_CAT] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0429_01_0269
      FOREIGN KEY (ANL_CAT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0429_01_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_WHSE_ANL_CAT] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0466_02_0269
      FOREIGN KEY (ANL_CAT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0466_02_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_SUPP_ANL_CAT] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0467_02_0269
      FOREIGN KEY (ANL_CAT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0467_02_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ADDR_ANL_CAT] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0470_01_0269
      FOREIGN KEY (ANL_CAT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0470_01_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ACNT_ANL_CAT] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0471_01_0269
      FOREIGN KEY (ANL_CAT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0471_01_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ASSET_ANL_CAT] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0473_02_0269
      FOREIGN KEY (ANL_CAT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0473_02_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_CUST_ANL_CAT] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0474_02_0269
      FOREIGN KEY (ANL_CAT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0474_02_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT_BDGT_DEFN] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0567_01_0269
      FOREIGN KEY (ANL_CAT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0567_01_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_BUS_ACNT_RECOG] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0595_01_0269
      FOREIGN KEY (ANL_CAT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0595_01_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_HELD_JNL_CTRL_ANL] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0619_01_0269
      FOREIGN KEY (ANL_CAT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0619_01_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_TXN_REF_FORMAT_EXT] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0690_02_0269
      FOREIGN KEY (ANL_CAT_ID_4) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0690_02_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_TXN_REF_FORMAT_EXT] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0690_03_0269
      FOREIGN KEY (ANL_CAT_ID_3) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0690_03_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_TXN_REF_FORMAT_EXT] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0690_04_0269
      FOREIGN KEY (ANL_CAT_ID_2) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0690_04_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_TXN_REF_FORMAT_EXT] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0690_05_0269
      FOREIGN KEY (ANL_CAT_ID_1) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0690_05_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT_EXT] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0722_01_0269
      FOREIGN KEY (ANL_CAT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0722_01_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT_EXT] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0722_02_0269
      FOREIGN KEY (REF_ANL_CAT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0722_02_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_BUS_ENT_DEFN] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0762_02_0269
      FOREIGN KEY (ANL_CAT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0762_02_0269")
  } else {
    fmt.Println(err)
  }
  queryZ = `ALTER TABLE [`+bdDestino+`].[dbo].[`+bunitDestino+`_STD_TEXT_ANL_CAT] WITH NOCHECK
      ADD CONSTRAINT FK_`+bunitDestino+`_0777_01_0269
      FOREIGN KEY (ANL_CAT_ID) REFERENCES  
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_ANL_CAT] (ANL_CAT_ID);`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("RESTORE _0777_01_0269")
  } else {
    fmt.Println(err)
  }

  queryZ = `SELECT MAX(JRNAL_NO) as JRNAL_NO
  FROM [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG]`
  rowsZ, _ = conn.Query(queryZ)
  for rowsZ.Next()  {
    JRNAL_NO := 0
    rowsZ.Scan(&JRNAL_NO)
    //JRNAL_NO++
    JRNAL_S := strconv.Itoa(JRNAL_NO)
    if JRNAL_NO < 10 {
      JRNAL_S = "000000"+strconv.Itoa(JRNAL_NO)
    } else {
      if JRNAL_NO < 100 {
        JRNAL_S = "00000"+strconv.Itoa(JRNAL_NO)
      } else {
        if JRNAL_NO < 1000 {
          JRNAL_S = "0000"+strconv.Itoa(JRNAL_NO)
        }  else {
          if JRNAL_NO < 10000 {
            JRNAL_S = "000"+strconv.Itoa(JRNAL_NO)
          } else {
            if JRNAL_NO < 100000 {
              JRNAL_S = "00"+strconv.Itoa(JRNAL_NO)
            }  else {
              if JRNAL_NO < 1000000 {
                JRNAL_S = "0"+strconv.Itoa(JRNAL_NO)
              } 
            }
          }
        }
      }
    }
    queryZ = `UPDATE [`+bdDestino+`].[dbo].[SALFMSC]
    SET HIGH_JRNAL = '`+JRNAL_S+`'
    WHERE D_BASE = '`+bunitDestino+`' AND A_B = 'A'
    `
    _, err = conn.Exec(queryZ)  
    if err == nil {
      fmt.Println("NEW MAX JRNAL: "+JRNAL_S)
    } else {
      fmt.Println(err)
    }
  }

  queryZ = `SELECT MAX(JRNAL_NO) as JRNAL_NO
  FROM [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]`
  rowsZ, _ = conn.Query(queryZ)
  for rowsZ.Next()  {
    JRNAL_NO := 0
    rowsZ.Scan(&JRNAL_NO)
    //JRNAL_NO++
    JRNAL_S := strconv.Itoa(JRNAL_NO)
    if JRNAL_NO < 10 {
      JRNAL_S = "000000"+strconv.Itoa(JRNAL_NO)
    } else {
      if JRNAL_NO < 100 {
        JRNAL_S = "00000"+strconv.Itoa(JRNAL_NO)
      } else {
        if JRNAL_NO < 1000 {
          JRNAL_S = "0000"+strconv.Itoa(JRNAL_NO)
        }  else {
          if JRNAL_NO < 10000 {
            JRNAL_S = "000"+strconv.Itoa(JRNAL_NO)
          } else {
            if JRNAL_NO < 100000 {
              JRNAL_S = "00"+strconv.Itoa(JRNAL_NO)
            }  else {
              if JRNAL_NO < 1000000 {
                JRNAL_S = "0"+strconv.Itoa(JRNAL_NO)
              } 
            }
          }
        }
      }
    }
    queryZ = `UPDATE [`+bdDestino+`].[dbo].[SALFMSC]
    SET HIGH_JRNAL = '`+JRNAL_S+`'
    WHERE D_BASE = '`+bunitDestino+`' AND A_B = 'B'
    `
    _, err = conn.Exec(queryZ)  
    if err == nil {
      fmt.Println("NEW MAX JRNAL B: "+JRNAL_S)
    } else {
      fmt.Println(err)
    }
  }
  
  queryZ = `SELECT JOURNAL_TYPE
  FROM [`+bdDestino+`].[dbo].[`+bunitDestino+`_JNL_DEFN] order by JOURNAL_TYPE asc`
  rowsZ, _ = conn.Query(queryZ)
  for rowsZ.Next()  {
    rowsZ.Scan(&JOURNAL_TYPE)
    JOURNAL_TYPE = strings.TrimSpace(JOURNAL_TYPE)
    queryZZ := `SELECT MAX(REPLACE(VCHR_NUM,'`+JOURNAL_TYPE+`','') ) as num FROM
      [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG] 
      WHERE JRNAL_TYPE = '`+JOURNAL_TYPE+`'`
      numS := "0"
      ultimos5 := "0"
      rowsZZ, errZZ := conn.Query(queryZZ)
    if rowsZZ.Next()  {
      rowsZZ.Scan(&numS)
      numS = strings.TrimSpace(numS)
      cuantos := len(numS)
      if cuantos > 5 {
        ultimos5 = numS[(cuantos-5):] 
      } else {
        ultimos5 = numS
      }
    //  fmt.Println(ultimos5)
    } else {
      fmt.Println(errZZ)
    }
    numeroConsecutivo, _ := strconv.Atoi(ultimos5)
    //numeroConsecutivo++



    queryZ = `INSERT INTO [`+bdDestino+`].[dbo].[`+bunitDestino+`_VCHR_NUM_STREAM]
      ( UPDATE_COUNT, LAST_CHANGE_USER_ID, LAST_CHANGE_DATETIME, LDG_CODE, VCHR_NUM_STREAM_CODE, SEQ_NUM, STREAM_YEAR) VALUES
      (1,'AOK','2017-11-02','A','`+JOURNAL_TYPE+`',`+strconv.Itoa(numeroConsecutivo)+`,2017)`
      _, err = conn.Exec(queryZ)
    if err == nil {
      fmt.Println("Nuevo consecutivo para "+JOURNAL_TYPE+": "+strconv.Itoa(numeroConsecutivo))
    } else {
      fmt.Println(err)
    }
  }
  //monedas
  queryZ = `INSERT INTO [`+bdDestino+`].[dbo].[`+bunitDestino+`_CURR_PERD_RATE]
      (CURR_CODE_FROM, CURR_CODE_TO, PERD, ACNT_FROM, UPDATE_COUNT, LAST_CHANGE_USER_ID, LAST_CHANGE_DATETIME, DESCR, S_HEAD, LOOKUP, MULTIPLY_DIVIDE, CONV_RATE, ACNT_TO, NET_LOSS_ACNT_REAL, GAIN_ACNT_REAL, NET_LOSS_ACNT_NONREAL, GAIN_ACNT_NONREAL, CONV_RATE_2, CONV_RATE_3, CONV_RATE_4, CONV_RATE_5, CONV_RATE_6, RATE_TOLR, RATE_TOLR_PCENT, CONV_RATE_DEC_PL, STATUS) VALUES
      ('MXP1','MXP1', 0, '', 1,'AOK','2017-11-02','MXP1','MXP1','MXP1',0, 1.000000000, '', '338100', '338100', '338100', '338100' , 0, 0,0 ,0 ,0, 0, 0, 9, 0 )`
      _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("59")
  } else {
    fmt.Println(err)
    fmt.Println(queryZ)
  }
  queryZ = `INSERT INTO [`+bdDestino+`].[dbo].[`+bunitDestino+`_CURR_DAILY_RATE]
      (CURR_CODE_FROM, CURR_CODE_TO, EFF_FROM_DATETIME, ACNT_FROM, UPDATE_COUNT, LAST_CHANGE_USER_ID, LAST_CHANGE_DATETIME, DESCR, S_HEAD, LOOKUP, MULTIPLY_DIVIDE, CONV_RATE, ACNT_TO, NET_LOSS_ACNT_REAL, GAIN_ACNT_REAL, RATE_TOLR, RATE_TOLR_PCENT, CONV_RATE_DEC_PL, STATUS, EFF_TO_DATETIME) VALUES
      ('MXP1','MXP1', '2000-11-02', '', 1,'AOK','2017-11-02','MXP1','MXP1','MXP1',0, 1.000000000, '', '338100', '338100' , 0,0, 9, 0, '2099-11-02' )`
      _, err = conn.Exec(queryZ)
  if err == nil {
    fmt.Println("60")
  } else {
    fmt.Println(err)
    fmt.Println(queryZ)
  }
  //aqui empiezo el masageo de VCHR_NUM
  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG]
    SET VCHR_NUM = CONCAT(LTRIM(RTRIM(JRNAL_TYPE)), SUBSTRING( CAST(PERIOD AS NVARCHAR(11)),1,4), '-',SUBSTRING (SUBSTRING (VCHR_NUM, len(JRNAL_TYPE),99), len(SUBSTRING (VCHR_NUM, len(JRNAL_TYPE),99))-4 ,5));`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("61")
  } else {
    fmt.Println(err)
  }

  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
    SET VCHR_NUM = CONCAT(LTRIM(RTRIM(JRNAL_TYPE)), SUBSTRING( CAST(PERIOD AS NVARCHAR(11)),1,4), '-',SUBSTRING (SUBSTRING (VCHR_NUM, len(JRNAL_TYPE),99), len(SUBSTRING (VCHR_NUM, len(JRNAL_TYPE),99))-4 ,5));`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("61 B")
  } else {
    fmt.Println(err)
  }


  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_A_SALFLDG]
    SET JNL_CLASS_CODE = JRNAL_TYPE;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("62")
  } else {
    fmt.Println(err)
  }

  queryZ = `UPDATE [`+bdDestino+`].[dbo].[`+bunitDestino+`_B_SALFLDG]
    SET JNL_CLASS_CODE = JRNAL_TYPE;`
  _, err = conn.Exec(queryZ)  
  if err == nil {
    fmt.Println("62 B")
  } else {
    fmt.Println(err)
  }

  c.Data["Website"] = "beego.me"
  c.Data["Email"] = "astaxie@gmail.com"
  c.Data["mensaje"] = "Sevenplus"
  c.TplName = "index.tpl"
  //example := map[string]interface{}{ "success":1}
  //c.Data["json"] = &example
  //c.ServeJSON()
}
func (c *GenerarBUNITController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetString("BUNIT")
    cuadre := c.GetString("cuadre")
    descr := c.GetString("descr")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    //PRIMERO TENGO QUE HACER UN SELECT PARA VER SI YA EXISTE!! SI YA EXISTE, PUES NO SE CREA NADA!
    queryDireccion := "SELECT BU_CODE FROM [SU_DOMAINDB].[dbo].[DOMN_BU_DSRCE_LINK] WHERE BU_CODE = '"+BUNIT+"'"
    rowsDireccion, err := conn.Query(queryDireccion)
    if rowsDireccion.Next()  {
      example := map[string]interface{}{ "success":2}
      c.Data["json"] = &example
      c.ServeJSON()
      return
    }
    
    //["+beego.AppConfig.String("serverAux")+"].
    //INSERT INTO
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.String() 
    substring := string(dateString[0:10])    
    query := "INSERT INTO [SU_DOMAINDB].[dbo].[DOMN_BU_DSRCE_LINK] (BU_CODE,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,DSRCE_ID,ESB_ENABLED) VALUES ('"+BUNIT+"',0,'"+alias.(string)+"','"+substring+"',1,0)"
    result , err := conn.Exec(query)
    if err != nil {
      defer conn.Close()
      fmt.Println("Perdon insert! : ", err.Error())
    }
    afectados, _ := result.RowsAffected()
    if afectados == 1 {
      queryZ := `INSERT INTO [SunSystemsData].[dbo].[DB_DEFN] (DB_CODE,UPDATE_COUNT,LAST_CHANGE_USER_ID,LAST_CHANGE_DATETIME,DESCR,DATE_FORMAT,DEC_SEP,THSND_SEP,PRIMARY_BUDGET,P_COMMITMENT_LEDGER,FILLER_113,SRCE_DB_CODE,SRCE_VAL1_CONV_CODE,SRCE_VAL3_CONV_CODE,SRCE_PIVOT_VAL,TRGT_VAL1_CONV_CODE,TRGT_VAL3_CONV_CODE,TRGT_PIVOT_VAL,TRGT_SRCE_VAL1,TRGT_SRCE_VAL2,TRGT_SRCE_VAL3,TRGT_SRCE_VALM,UPGRADE_DATETIME,PAYMENT_DRIVE,SB_DEC_PL,PIVOT_CURR_CODE,VAL1_BASE_NAME,VAL1_CONV_CODE,VAL1_BASE_POST_RULE,VAL1_BASE_AMT_DEC_PL,VAL1_BASE_AMT_BAL,VAL1_BASE_AMT_BAL_TOLR,VAL1_BASE_BAL_ACNT_DR,VAL1_BASE_BAL_ACNT_CR,VAL2_OTHER_NAME,VAL2_OTHER_POST_RULE,VAL2_OTHER_AMT_BAL,VAL2_OTHER_BAL_ACNT_DR,VAL2_OTHER_BAL_ACNT_CR,VAL3_CURR_TYPE,VAL3_RPTG_NAME,VAL3_RPTG_CURR,VAL3_RPTG_POST_RULE,VAL3_RPTG_AMT_DEC_PL,VAL3_RPTG_AMT_BAL,VAL3_RPTG_AMT_BAL_TOLR,VAL3_BAL_ACNT_DR,VAL3_BAL_ACNT_CR,VAL4_MEMO_NAME,VAL4_MEMO_POST_RULE,RESPONSE_DATE_SEP,MAX_NUM_OF_PERDS,DAGS_IN_USE_ITEM,DAGS_IN_USE_SUPP,DAGS_IN_USE_CUST,DAGS_IN_USE_DEFN,DAGS_IN_USE_WHSE,DAGS_IN_USE_FIN,DAG_CODE,LA_EXPTD_REVN_LDG,VAL4_NAME,VAL4_CURR_CODE,VAL4_POST_RULE,VAL4_AMT_BAL,VAL4_BAL_ACNT_DR,VAL4_BAL_ACNT_CR,VAL4_CALC_FROM,VAL5_NAME,VAL5_CURR_CODE,VAL5_POST_RULE,VAL5_AMT_BAL,VAL5_BAL_ACNT_DR,VAL5_BAL_ACNT_CR,VAL5_CALC_FROM,ALLOCN_LOCKING_ALLOWED,ALLOW_SIGNED_SPLITS,ALLOW_MULTIPLE_SPLITS,VAL4_AMT_BAL_TOLR,VAL5_AMT_BAL_TOLR,PST_DIFF_LRGST_CARRIER,CORRECT_DIFF,FUNDING_CURR,VAL1_BASE_WO_TOLR,VAL1_BASE_WO_ACNT_DR,VAL1_BASE_WO_ACNT_CR,MONTH_FORMAT,FIN_BU,DAGS_IN_USE_ZONE,DAGS_IN_USE_LOCN,FORM_BACKGROUND_COLOUR,DAGS_IN_USE_ACNT,DAGS_IN_USE_JNL_TYPE,DAGS_IN_USE_ANL_T0,DAGS_IN_USE_ANL_T1,DAGS_IN_USE_ANL_T2,DAGS_IN_USE_ANL_T3,DAGS_IN_USE_ANL_T4,DAGS_IN_USE_ANL_T5,DAGS_IN_USE_ANL_T6,DAGS_IN_USE_ANL_T7,DAGS_IN_USE_ANL_T8,DAGS_IN_USE_ANL_T9,DATA_ARCHIVED,ARCHIVE_BU_CODE,VAL4_CV4_AMT_DEC_PL,VAL5_CV4_AMT_DEC_PL)
      VALUES ('`+BUNIT+`',1,'`+alias.(string)+`','`+substring+`','`+descr+`',0,'.','.','B','C',NULL,'',NULL,NULL,0,NULL,NULL,0,0,0,0,0,NULL,'\payments\',2,1,'Pesos Mexicanos','MXP1',3,2,2,0.001,'`+cuadre+`','`+cuadre+`','Pesos',3,3,NULL,NULL,99,NULL,'',0,0,3,0.000,NULL,NULL,'Units',1,'/',12,0,0,0,0,0,0,NULL,NULL,'Pesos Mexicanos','MXP1',3,1,'`+cuadre+`','`+cuadre+`',1,NULL,NULL,0,3,NULL,NULL,0,0,0,0,0.001,0.000,0,0,99,0.000,NULL,NULL,0,1,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,NULL,2,0)`
      _ , errZ := conn.Exec(queryZ)
      if errZ != nil {
        defer conn.Close()
        fmt.Println("Perdon insert Z! : ", errZ.Error())
      }
      //afectadosZ, _ := result.RowsAffected()
      
      query1 := `CREATE TABLE [SunSystemsData].[dbo].[`+BUNIT+`_A_SALFLDG](
      [ACCNT_CODE] [dbo].[REF_MAINT_CODE] NOT NULL,
      [PERIOD] [dbo].[FIN_PERD_INT] NOT NULL,
      [TRANS_DATETIME] [dbo].[FIN_DATETIME] NOT NULL,
      [JRNAL_NO] [dbo].[FIN_JNL_NUM] NOT NULL,
      [JRNAL_LINE] [dbo].[FIN_JNL_LINE] NOT NULL,
      [AMOUNT] [dbo].[FIN_AMOUNT_BASE] NOT NULL,
      [D_C] [dbo].[FIN_FLAG_D_C] NOT NULL,
      [ALLOCATION] [dbo].[FIN_FLAG_ALLOCN_BR] NOT NULL,
      [JRNAL_TYPE] [dbo].[FIN_JNL_TYPE] NULL,
      [JRNAL_SRCE] [dbo].[FIN_JNL_SRCE] NOT NULL,
      [TREFERENCE] [dbo].[TRANSACTION_REF_MIXED] NULL,
      [DESCRIPTN] [dbo].[FIN_DESCR_50] NULL,
      [ENTRY_DATETIME] [dbo].[FIN_DATETIME] NULL,
      [ENTRY_PRD] [dbo].[FIN_PERD_INT] NOT NULL,
      [DUE_DATETIME] [dbo].[FIN_DATETIME] NULL,
      [ALLOC_REF] [dbo].[FIN_ALLOCN_REF] NOT NULL,
      [ALLOC_DATETIME] [dbo].[FIN_DATETIME] NULL,
      [ALLOC_PERIOD] [dbo].[FIN_PERD_INT] NOT NULL,
      [ASSET_IND] [dbo].[FIN_FLAG_ASSET] NOT NULL,
      [ASSET_CODE] [dbo].[FIN_ASSET_CODE] NOT NULL,
      [ASSET_SUB] [dbo].[FIN_ASSET_SUB_CODE] NOT NULL,
      [CONV_CODE] [dbo].[FIN_CONV_CODE] NOT NULL,
      [CONV_RATE] [dbo].[FIN_CONV_RATE] NOT NULL,
      [OTHER_AMT] [dbo].[FIN_OTHER_AMT_ACC] NOT NULL,
      [OTHER_DP] [dbo].[FIN_FLAG_OTHER_DP] NOT NULL,
      [CLEARDOWN] [dbo].[FIN_SEQ] NOT NULL,
      [REVERSAL] [dbo].[FIN_FLAG_Y_N_NA] NOT NULL,
      [LOSS_GAIN] [dbo].[FIN_LOSS_GAIN] NOT NULL,
      [ROUGH_FLAG] [dbo].[FIN_FLAG_ROUGH] NOT NULL,
      [IN_USE_FLAG] [dbo].[FIN_FLAG_Y_N_NA] NOT NULL,
      [ANAL_T0] [dbo].[FIN_ANL_T0] NOT NULL,
      [ANAL_T1] [dbo].[FIN_ANL_T1] NOT NULL,
      [ANAL_T2] [dbo].[FIN_ANL_T2] NOT NULL,
      [ANAL_T3] [dbo].[FIN_ANL_T3] NOT NULL,
      [ANAL_T4] [dbo].[FIN_ANL_T4] NOT NULL,
      [ANAL_T5] [dbo].[FIN_ANL_T5] NOT NULL,
      [ANAL_T6] [dbo].[FIN_ANL_T6] NOT NULL,
      [ANAL_T7] [dbo].[FIN_ANL_T7] NOT NULL,
      [ANAL_T8] [dbo].[FIN_ANL_T8] NOT NULL,
      [ANAL_T9] [dbo].[FIN_ANL_T9] NOT NULL,
      [POSTING_DATETIME] [dbo].[FIN_DATETIME] NULL,
      [ALLOC_IN_PROGRESS] [dbo].[FIN_ALLOCN_IN_PROG] NOT NULL,
      [HOLD_REF] [dbo].[FIN_JNL_REF] NOT NULL,
      [HOLD_OP_ID] [dbo].[FIN_OPR_ID] NOT NULL,
      [BASE_RATE] [dbo].[FIN_CONV_RATE] NOT NULL,
      [BASE_OPERATOR] [dbo].[FIN_FLAG_OPN] NOT NULL,
      [CONV_OPERATOR] [dbo].[FIN_FLAG_OPN] NOT NULL,
      [REPORT_RATE] [dbo].[FIN_CONV_RATE] NOT NULL,
      [REPORT_OPERATOR] [dbo].[FIN_FLAG_OPN] NOT NULL,
      [REPORT_AMT] [dbo].[FIN_AMT_RPTG_ACC] NOT NULL,
      [MEMO_AMT] [dbo].[FIN_AMT_MEMO_ACC] NOT NULL,
      [EXCLUDE_BAL] [dbo].[FIN_FLAG_Y_N_NA] NOT NULL,
      [LE_DETAILS_IND] [dbo].[FIN_FLAG_LE_DETAILS] NOT NULL,
      [CONSUMED_BDGT_ID] [dbo].[NUM_INT] NOT NULL,
      [CV4_CONV_CODE] [dbo].[FIN_CONV_CODE] NOT NULL,
      [CV4_AMT] [dbo].[FIN_AMOUNT_BASE] NOT NULL,
      [CV4_CONV_RATE] [dbo].[FIN_CONV_RATE] NOT NULL,
      [CV4_OPERATOR] [dbo].[FIN_FLAG_OPN] NOT NULL,
      [CV4_DP] [dbo].[FIN_FLAG_OTHER_DP] NOT NULL,
      [CV5_CONV_CODE] [dbo].[FIN_CONV_CODE] NOT NULL,
      [CV5_AMT] [dbo].[FIN_AMOUNT_BASE] NOT NULL,
      [CV5_CONV_RATE] [dbo].[FIN_CONV_RATE] NOT NULL,
      [CV5_OPERATOR] [dbo].[FIN_FLAG_OPN] NOT NULL,
      [CV5_DP] [dbo].[FIN_FLAG_OTHER_DP] NOT NULL,
      [LINK_REF_1] [dbo].[CHAR_ALPHA_V15] NULL,
      [LINK_REF_2] [dbo].[CHAR_ALPHA_V15] NULL,
      [LINK_REF_3] [dbo].[CHAR_ALPHA_V15] NULL,
      [ALLOCN_CODE] [dbo].[CHAR_CODE_5] NULL,
      [ALLOCN_STMNTS] [dbo].[NUM_SMALLINT] NULL,
      [OPR_CODE] [dbo].[OPERATOR_CODE] NULL,
      [SPLIT_ORIG_LINE] [dbo].[NUM_INT] NOT NULL,
      [VAL_DATETIME] [dbo].[FIN_DATETIME] NULL,
      [SIGNING_DETAILS] [dbo].[STRING_V30] NULL,
      [INSTLMT_DATETIME] [dbo].[FIN_DATETIME] NULL,
      [PRINCIPAL_REQD] [dbo].[FLAG_Y_N] NOT NULL,
      [BINDER_STATUS] [dbo].[FIN_FLAG_BINDER_STATUS] NOT NULL,
      [AGREED_STATUS] [dbo].[FLAG_Y_N] NOT NULL,
      [SPLIT_LINK_REF] [dbo].[CHAR_ALPHA_V15] NULL,
      [PSTG_REF] [dbo].[CHAR_ALPHA_V15] NULL,
      [TRUE_RATED] [dbo].[FLAG_TRUE_RATED] NOT NULL,
      [HOLD_DATETIME] [dbo].[FIN_DATETIME] NULL,
      [HOLD_TEXT] [dbo].[STRING_V30] NULL,
      [INSTLMT_NUM] [dbo].[NUM_SMALLINT] NULL,
      [SUPPLMNTRY_EXTSN] [dbo].[FLAG_Y_N] NOT NULL,
      [APRVLS_EXTSN] [dbo].[FLAG_Y_N] NOT NULL,
      [REVAL_LINK_REF] [dbo].[NUM_INT] NULL,
      [SAVED_SET_NUM] [dbo].[NUM_18_0] NULL,
      [AUTHORISTN_SET_REF] [int] NULL,
      [PYMT_AUTHORISTN_SET_REF] [int] NULL,
      [MAN_PAY_OVER] [dbo].[FLAG_Y_N] NOT NULL,
      [PYMT_STAMP] [dbo].[STRING_V10] NULL,
      [AUTHORISTN_IN_PROGRESS] [dbo].[FLAG_Y_N] NOT NULL,
      [SPLIT_IN_PROGRESS] [dbo].[FLAG_Y_N] NOT NULL,
      [VCHR_NUM] [dbo].[CHAR_ALPHA_V30] NULL,
      [JNL_CLASS_CODE] [dbo].[REF_MAINT_CODE] NULL,
      [ORIGINATOR_ID] [dbo].[OPERATOR_CODE] NULL,
      [ORIGINATED_DATETIME] [datetime] NULL,
      [LAST_CHANGE_USER_ID] [dbo].[LAST_CHANGE_USER_ID] NULL,
      [LAST_CHANGE_DATETIME] [datetime] NULL,
      [AFTER_PSTG_ID] [dbo].[OPERATOR_CODE] NULL,
      [AFTER_PSTG_DATETIME] [datetime] NULL,
      [POSTER_ID] [dbo].[OPERATOR_CODE] NULL,
      [ALLOC_ID] [dbo].[OPERATOR_CODE] NULL,
      [JNL_REVERSAL_TYPE] [dbo].[FLAG_JNL_REVERSAL_TYPE] NOT NULL,
      PRIMARY KEY CLUSTERED 
      (
        [ACCNT_CODE] ASC,
        [PERIOD] ASC,
        [TRANS_DATETIME] ASC,
        [JRNAL_NO] ASC,
        [JRNAL_LINE] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]`
      _ , err1 := conn.Exec(query1)
      if err1 != nil {
        defer conn.Close()
        fmt.Println("Perdon 1! : ", err1.Error())
      }
      query2 := `CREATE TABLE [dbo].[`+BUNIT+`_B_SALFLDG](
      [ACCNT_CODE] [dbo].[REF_MAINT_CODE] NOT NULL,
      [PERIOD] [dbo].[FIN_PERD_INT] NOT NULL,
      [TRANS_DATETIME] [dbo].[FIN_DATETIME] NOT NULL,
      [JRNAL_NO] [dbo].[FIN_JNL_NUM] NOT NULL,
      [JRNAL_LINE] [dbo].[FIN_JNL_LINE] NOT NULL,
      [AMOUNT] [dbo].[FIN_AMOUNT_BASE] NOT NULL,
      [D_C] [dbo].[FIN_FLAG_D_C] NOT NULL,
      [ALLOCATION] [dbo].[FIN_FLAG_ALLOCN_BR] NOT NULL,
      [JRNAL_TYPE] [dbo].[FIN_JNL_TYPE] NULL,
      [JRNAL_SRCE] [dbo].[FIN_JNL_SRCE] NOT NULL,
      [TREFERENCE] [dbo].[TRANSACTION_REF_MIXED] NULL,
      [DESCRIPTN] [dbo].[FIN_DESCR_50] NULL,
      [ENTRY_DATETIME] [dbo].[FIN_DATETIME] NULL,
      [ENTRY_PRD] [dbo].[FIN_PERD_INT] NOT NULL,
      [DUE_DATETIME] [dbo].[FIN_DATETIME] NULL,
      [ALLOC_REF] [dbo].[FIN_ALLOCN_REF] NOT NULL,
      [ALLOC_DATETIME] [dbo].[FIN_DATETIME] NULL,
      [ALLOC_PERIOD] [dbo].[FIN_PERD_INT] NOT NULL,
      [ASSET_IND] [dbo].[FIN_FLAG_ASSET] NOT NULL,
      [ASSET_CODE] [dbo].[FIN_ASSET_CODE] NOT NULL,
      [ASSET_SUB] [dbo].[FIN_ASSET_SUB_CODE] NOT NULL,
      [CONV_CODE] [dbo].[FIN_CONV_CODE] NOT NULL,
      [CONV_RATE] [dbo].[FIN_CONV_RATE] NOT NULL,
      [OTHER_AMT] [dbo].[FIN_OTHER_AMT_ACC] NOT NULL,
      [OTHER_DP] [dbo].[FIN_FLAG_OTHER_DP] NOT NULL,
      [CLEARDOWN] [dbo].[FIN_SEQ] NOT NULL,
      [REVERSAL] [dbo].[FIN_FLAG_Y_N_NA] NOT NULL,
      [LOSS_GAIN] [dbo].[FIN_LOSS_GAIN] NOT NULL,
      [ROUGH_FLAG] [dbo].[FIN_FLAG_ROUGH] NOT NULL,
      [IN_USE_FLAG] [dbo].[FIN_FLAG_Y_N_NA] NOT NULL,
      [ANAL_T0] [dbo].[FIN_ANL_T0] NOT NULL,
      [ANAL_T1] [dbo].[FIN_ANL_T1] NOT NULL,
      [ANAL_T2] [dbo].[FIN_ANL_T2] NOT NULL,
      [ANAL_T3] [dbo].[FIN_ANL_T3] NOT NULL,
      [ANAL_T4] [dbo].[FIN_ANL_T4] NOT NULL,
      [ANAL_T5] [dbo].[FIN_ANL_T5] NOT NULL,
      [ANAL_T6] [dbo].[FIN_ANL_T6] NOT NULL,
      [ANAL_T7] [dbo].[FIN_ANL_T7] NOT NULL,
      [ANAL_T8] [dbo].[FIN_ANL_T8] NOT NULL,
      [ANAL_T9] [dbo].[FIN_ANL_T9] NOT NULL,
      [POSTING_DATETIME] [dbo].[FIN_DATETIME] NULL,
      [ALLOC_IN_PROGRESS] [dbo].[FIN_ALLOCN_IN_PROG] NOT NULL,
      [HOLD_REF] [dbo].[FIN_JNL_REF] NOT NULL,
      [HOLD_OP_ID] [dbo].[FIN_OPR_ID] NOT NULL,
      [BASE_RATE] [dbo].[FIN_CONV_RATE] NOT NULL,
      [BASE_OPERATOR] [dbo].[FIN_FLAG_OPN] NOT NULL,
      [CONV_OPERATOR] [dbo].[FIN_FLAG_OPN] NOT NULL,
      [REPORT_RATE] [dbo].[FIN_CONV_RATE] NOT NULL,
      [REPORT_OPERATOR] [dbo].[FIN_FLAG_OPN] NOT NULL,
      [REPORT_AMT] [dbo].[FIN_AMT_RPTG_ACC] NOT NULL,
      [MEMO_AMT] [dbo].[FIN_AMT_MEMO_ACC] NOT NULL,
      [EXCLUDE_BAL] [dbo].[FIN_FLAG_Y_N_NA] NOT NULL,
      [LE_DETAILS_IND] [dbo].[FIN_FLAG_LE_DETAILS] NOT NULL,
      [CONSUMED_BDGT_ID] [dbo].[NUM_INT] NOT NULL,
      [CV4_CONV_CODE] [dbo].[FIN_CONV_CODE] NOT NULL,
      [CV4_AMT] [dbo].[FIN_AMOUNT_BASE] NOT NULL,
      [CV4_CONV_RATE] [dbo].[FIN_CONV_RATE] NOT NULL,
      [CV4_OPERATOR] [dbo].[FIN_FLAG_OPN] NOT NULL,
      [CV4_DP] [dbo].[FIN_FLAG_OTHER_DP] NOT NULL,
      [CV5_CONV_CODE] [dbo].[FIN_CONV_CODE] NOT NULL,
      [CV5_AMT] [dbo].[FIN_AMOUNT_BASE] NOT NULL,
      [CV5_CONV_RATE] [dbo].[FIN_CONV_RATE] NOT NULL,
      [CV5_OPERATOR] [dbo].[FIN_FLAG_OPN] NOT NULL,
      [CV5_DP] [dbo].[FIN_FLAG_OTHER_DP] NOT NULL,
      [LINK_REF_1] [dbo].[CHAR_ALPHA_V15] NULL,
      [LINK_REF_2] [dbo].[CHAR_ALPHA_V15] NULL,
      [LINK_REF_3] [dbo].[CHAR_ALPHA_V15] NULL,
      [ALLOCN_CODE] [dbo].[CHAR_CODE_5] NULL,
      [ALLOCN_STMNTS] [dbo].[NUM_SMALLINT] NULL,
      [OPR_CODE] [dbo].[OPERATOR_CODE] NULL,
      [SPLIT_ORIG_LINE] [dbo].[NUM_INT] NOT NULL,
      [VAL_DATETIME] [dbo].[FIN_DATETIME] NULL,
      [SIGNING_DETAILS] [dbo].[STRING_V30] NULL,
      [INSTLMT_DATETIME] [dbo].[FIN_DATETIME] NULL,
      [PRINCIPAL_REQD] [dbo].[FLAG_Y_N] NOT NULL,
      [BINDER_STATUS] [dbo].[FIN_FLAG_BINDER_STATUS] NOT NULL,
      [AGREED_STATUS] [dbo].[FLAG_Y_N] NOT NULL,
      [SPLIT_LINK_REF] [dbo].[CHAR_ALPHA_V15] NULL,
      [PSTG_REF] [dbo].[CHAR_ALPHA_V15] NULL,
      [TRUE_RATED] [dbo].[FLAG_TRUE_RATED] NOT NULL,
      [HOLD_DATETIME] [dbo].[FIN_DATETIME] NULL,
      [HOLD_TEXT] [dbo].[STRING_V30] NULL,
      [INSTLMT_NUM] [dbo].[NUM_SMALLINT] NULL,
      [SUPPLMNTRY_EXTSN] [dbo].[FLAG_Y_N] NOT NULL,
      [APRVLS_EXTSN] [dbo].[FLAG_Y_N] NOT NULL,
      [REVAL_LINK_REF] [dbo].[NUM_INT] NULL,
      [SAVED_SET_NUM] [dbo].[NUM_18_0] NULL,
      [AUTHORISTN_SET_REF] [int] NULL,
      [PYMT_AUTHORISTN_SET_REF] [int] NULL,
      [MAN_PAY_OVER] [dbo].[FLAG_Y_N] NOT NULL,
      [PYMT_STAMP] [dbo].[STRING_V10] NULL,
      [AUTHORISTN_IN_PROGRESS] [dbo].[FLAG_Y_N] NOT NULL,
      [SPLIT_IN_PROGRESS] [dbo].[FLAG_Y_N] NOT NULL,
      [VCHR_NUM] [dbo].[CHAR_ALPHA_V30] NULL,
      [JNL_CLASS_CODE] [dbo].[REF_MAINT_CODE] NULL,
      [ORIGINATOR_ID] [dbo].[OPERATOR_CODE] NULL,
      [ORIGINATED_DATETIME] [datetime] NULL,
      [LAST_CHANGE_USER_ID] [dbo].[LAST_CHANGE_USER_ID] NULL,
      [LAST_CHANGE_DATETIME] [datetime] NULL,
      [AFTER_PSTG_ID] [dbo].[OPERATOR_CODE] NULL,
      [AFTER_PSTG_DATETIME] [datetime] NULL,
      [POSTER_ID] [dbo].[OPERATOR_CODE] NULL,
      [ALLOC_ID] [dbo].[OPERATOR_CODE] NULL,
      [JNL_REVERSAL_TYPE] [dbo].[FLAG_JNL_REVERSAL_TYPE] NOT NULL,
      PRIMARY KEY CLUSTERED 
      (
        [ACCNT_CODE] ASC,
        [PERIOD] ASC,
        [TRANS_DATETIME] ASC,
        [JRNAL_NO] ASC,
        [JRNAL_LINE] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]`
      _ , err2 := conn.Exec(query2)
      if err2 != nil {
        defer conn.Close()
        fmt.Println("Perdon 2! : ", err2.Error())
      }
      query3 := `CREATE TABLE [dbo].[`+BUNIT+`_ACNT](
      [ACNT_CODE] [dbo].[REF_MAINT_CODE] NOT NULL,
      [UPDATE_COUNT] [dbo].[UPDATE_CNT] NOT NULL,
      [LAST_CHANGE_USER_ID] [dbo].[LAST_CHANGE_USER_ID] NOT NULL,
      [LAST_CHANGE_DATETIME] [dbo].[LAST_CHANGE_DATETIME] NOT NULL,
      [DESCR] [dbo].[DESCRIPTION_50] NOT NULL,
      [S_HEAD] [dbo].[SHORT_HEADING] NULL,
      [LOOKUP] [dbo].[LOOKUP] NOT NULL,
      [DAG_CODE] [dbo].[DATA_ACCESS_GROUP] NULL,
      [ACNT_TYPE] [dbo].[FLAG_ACNT_TYPE] NOT NULL,
      [BAL_TYPE] [dbo].[FLAG_BAL_TYPE] NOT NULL,
      [STATUS] [dbo].[STATUS] NOT NULL,
      [SUPPRESS_REVAL] [dbo].[FLAG_Y_N] NOT NULL,
      [LONG_DESCR] [dbo].[LONG_DESCRIPTION] NULL,
      [CONV_CODE_CTRL] [dbo].[FLAG_CONV_CODE_CTRL] NOT NULL,
      [DFLT_CURR_CODE] [dbo].[CURRENCY_CODE] NULL,
      [ALLOCN_IN_PROGRESS] [dbo].[FLAG_Y_N_NA] NOT NULL,
      [LINK_ACNT] [dbo].[REF_MAINT_CODE] NOT NULL,
      [RPT_CONV_CTRL] [dbo].[FLAG_Y_N] NOT NULL,
      [USER_AREA] [dbo].[CHAR_ALPHA_V30] NULL,
      [CR_LIMIT] [dbo].[NUM_18_0_SILS] NULL,
      [ENTER_ANL_1] [dbo].[FLAG_ENTER_ANL] NOT NULL,
      [ENTER_ANL_2] [dbo].[FLAG_ENTER_ANL] NOT NULL,
      [ENTER_ANL_3] [dbo].[FLAG_ENTER_ANL] NOT NULL,
      [ENTER_ANL_4] [dbo].[FLAG_ENTER_ANL] NOT NULL,
      [ENTER_ANL_5] [dbo].[FLAG_ENTER_ANL] NOT NULL,
      [ENTER_ANL_6] [dbo].[FLAG_ENTER_ANL] NOT NULL,
      [ENTER_ANL_7] [dbo].[FLAG_ENTER_ANL] NOT NULL,
      [ENTER_ANL_8] [dbo].[FLAG_ENTER_ANL] NOT NULL,
      [ENTER_ANL_9] [dbo].[FLAG_ENTER_ANL] NOT NULL,
      [ENTER_ANL_10] [dbo].[FLAG_ENTER_ANL] NOT NULL,
      [OIL] [dbo].[NUM_18_0_SILS] NULL,
      [CV4_DFLT_CURR_CODE] [dbo].[CURRENCY_CODE] NULL,
      [CV4_CONV_CODE_CTRL] [dbo].[FLAG_CONV_CODE_CTRL] NOT NULL,
      [CV5_DFLT_CURR_CODE] [dbo].[CURRENCY_CODE] NULL,
      [CV5_CONV_CODE_CTRL] [dbo].[FLAG_CONV_CODE_CTRL] NOT NULL,
      [BANK_CURR_REQD] [dbo].[FLAG_Y_N] NOT NULL,
      [ACNT_LINKS_ALLOWED] [dbo].[FLAG_Y_N] NOT NULL,
      [PASP_ACNT_TYPE] [dbo].[FLAG_PASP_ACNT_TYPE] NOT NULL,
      PRIMARY KEY CLUSTERED 
      (
        [ACNT_CODE] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]`
      _ , err3 := conn.Exec(query3)
      if err3 != nil {
        defer conn.Close()
        fmt.Println("Perdon 3! : ", err3.Error())
      }
      query4 := `CREATE TABLE [dbo].[`+BUNIT+`_ADDR](
      [ADDR_CODE] [dbo].[REF_MAINT_CODE] NOT NULL,
      [UPDATE_COUNT] [dbo].[UPDATE_CNT] NOT NULL,
      [LAST_CHANGE_USER_ID] [dbo].[LAST_CHANGE_USER_ID] NOT NULL,
      [LAST_CHANGE_DATETIME] [dbo].[LAST_CHANGE_DATETIME] NOT NULL,
      [STATUS] [dbo].[STATUS] NOT NULL,
      [S_HEAD] [dbo].[SHORT_HEADING] NULL,
      [LOOKUP] [dbo].[LOOKUP] NOT NULL,
      [TELEPHONE_NO] [dbo].[PHONE_FAX] NULL,
      [TELEX_FAX_NO] [dbo].[PHONE_FAX] NULL,
      [ADDR_LINE_1] [dbo].[STRING_V50] NULL,
      [ADDR_LINE_2] [dbo].[STRING_V50] NULL,
      [ADDR_LINE_3] [dbo].[STRING_V50] NULL,
      [ADDR_LINE_4] [dbo].[STRING_V50] NULL,
      [ADDR_LINE_5] [dbo].[STRING_V50] NULL,
      [TOWN_CITY] [dbo].[STRING_V50] NULL,
      [STATE] [dbo].[STRING_V50] NULL,
      [POST_CODE] [dbo].[POSTCODE] NULL,
      [COUNTRY] [dbo].[STRING_V50] NULL,
      [AREA] [dbo].[CHAR_ALPHA_V40] NULL,
      [CMMNT] [dbo].[LONG_DESCRIPTION] NULL,
      [EDI_PROFILE_ID] [int] NULL,
      [TIME_ZONE] [dbo].[NUM_SMALLINT_V2] NULL,
      [LANG_CODE] [dbo].[LANGUAGE_CODE] NULL,
      [COUNTRY_CODE] [dbo].[CHAR_CODE_3] NULL,
      [STATE_CODE] [dbo].[CHAR_CODE_2] NULL,
      [LINK_ADDR_CODE] [dbo].[REF_MAINT_CODE] NULL,
      [USER_AREA] [dbo].[CHAR_CODE_3] NULL,
      [WEB_PAGE_ADDR] [dbo].[WEB_ADDRESS] NULL,
      [TEMP_ADDR] [dbo].[FLAG_Y_N] NOT NULL,
      [DAG_CODE] [dbo].[DATA_ACCESS_GROUP] NULL,
      PRIMARY KEY CLUSTERED 
      (
        [ADDR_CODE] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]`
      _ , err4 := conn.Exec(query4)
      if err4 != nil {
        defer conn.Close()
        fmt.Println("Perdon 4! : ", err4.Error())
      }
      query5 := `CREATE TABLE [dbo].[`+BUNIT+`_ANL_CAT](
      [ANL_CAT_ID] [dbo].[ANALYSIS_DIMENSION] NOT NULL,
      [UPDATE_COUNT] [dbo].[UPDATE_CNT] NOT NULL,
      [LAST_CHANGE_USER_ID] [dbo].[LAST_CHANGE_USER_ID] NOT NULL,
      [LAST_CHANGE_DATETIME] [dbo].[LAST_CHANGE_DATETIME] NOT NULL,
      [STATUS] [dbo].[STATUS] NOT NULL,
      [LOOKUP] [dbo].[LOOKUP] NOT NULL,
      [USEABLE_ANL_ENT_ID] [dbo].[TBL_NUM] NULL,
      [S_HEAD] [dbo].[SHORT_HEADING_UPPER] NOT NULL,
      [DESCR] [dbo].[CHAR_ALPHA_V40] NOT NULL,
      [DAG_CODE] [dbo].[DATA_ACCESS_GROUP] NULL,
      [AMEND_CODE] [dbo].[FLAG_Y_N] NOT NULL,
      [VALIDATE_IND] [dbo].[FLAG_VALIDATION_IND] NOT NULL,
      [LNGTH] [dbo].[NUM_SMALLINT_NO_SIGN] NOT NULL,
      [LINKED] [dbo].[FLAG_Y_N] NOT NULL,
      [IBUS_CODE_DIM_ID] [dbo].[NUM_INT] NULL,
      PRIMARY KEY CLUSTERED 
      (
        [ANL_CAT_ID] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]`
      _ , err5 := conn.Exec(query5)
      if err5 != nil {
        defer conn.Close()
        fmt.Println("Perdon 5! : ", err5.Error())
      }
      query6 := `CREATE TABLE [dbo].[`+BUNIT+`_ANL_CODE](
      [ANL_CAT_ID] [dbo].[ANALYSIS_DIMENSION] NOT NULL,
      [ANL_CODE] [dbo].[REF_MAINT_CODE] NOT NULL,
      [UPDATE_COUNT] [dbo].[UPDATE_CNT] NOT NULL,
      [LAST_CHANGE_USER_ID] [dbo].[LAST_CHANGE_USER_ID] NOT NULL,
      [LAST_CHANGE_DATETIME] [dbo].[LAST_CHANGE_DATETIME] NOT NULL,
      [STATUS] [dbo].[STATUS] NOT NULL,
      [LOOKUP] [dbo].[LOOKUP] NOT NULL,
      [NAME] [dbo].[NAME] NULL,
      [DAG_CODE] [dbo].[DATA_ACCESS_GROUP] NULL,
      [BDGT_CHECK] [dbo].[FLAG_BDGT_CHECK] NOT NULL,
      [BDGT_STOP] [dbo].[FLAG_Y_N] NOT NULL,
      [PROHIBIT_POSTING] [dbo].[FLAG_Y_N] NOT NULL,
      [NAVIGATION_OPTION] [dbo].[FLAG_NAVIGATION_OPTION] NOT NULL,
      [COMBINED_BDGT_CHCK] [dbo].[FLAG_Y_N] NOT NULL,
      PRIMARY KEY CLUSTERED 
      (
        [ANL_CAT_ID] ASC,
        [ANL_CODE] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]`
      _ , err6 := conn.Exec(query6)
      if err6 != nil {
        defer conn.Close()
        fmt.Println("Perdon 6! : ", err6.Error())
      }
      query7 := `CREATE TABLE [dbo].[`+BUNIT+`_ASSET](
      [ASSET_CODE] [dbo].[CHAR_CODE_10_UPPER] NOT NULL,
      [UPDATE_COUNT] [dbo].[UPDATE_CNT] NOT NULL,
      [LAST_CHANGE_USER_ID] [dbo].[LAST_CHANGE_USER_ID] NOT NULL,
      [LAST_CHANGE_DATETIME] [dbo].[LAST_CHANGE_DATETIME] NOT NULL,
      [STATUS] [dbo].[STATUS] NOT NULL,
      [ASSET_STATUS] [dbo].[STATUS_ASSET] NOT NULL,
      [S_HEAD] [dbo].[SHORT_HEADING] NULL,
      [LOOKUP] [dbo].[LOOKUP] NOT NULL,
      [DESCR] [dbo].[DESCRIPTION_50] NOT NULL,
      [START_PERD] [dbo].[PERD] NULL,
      [END_PERD] [dbo].[PERD] NULL,
      [LAST_PERD] [dbo].[PERD] NULL,
      [DISPOSAL_PERD] [dbo].[PERD] NULL,
      [BAL_SHEET_ACNT] [dbo].[REF_MAINT_CODE] NULL,
      [PROFIT_LOSS_ACNT] [dbo].[REF_MAINT_CODE] NULL,
      [DISPOSED] [dbo].[FLAG_Y_N] NOT NULL,
      [BASE_GROSS] [dbo].[NUM_18_3_SILS_ACC] NOT NULL,
      [BASE_DEP] [dbo].[NUM_18_3_SILS_ACC] NOT NULL,
      [BASE_NET] [dbo].[NUM_18_3_SILS_ACC] NOT NULL,
      [BASE_DEP_MTHD] [dbo].[FLAG_DEP_MTHD] NOT NULL,
      [BASE_PCENT] [dbo].[PERCENTAGE_FIN] NULL,
      [BASE_FINAL] [dbo].[NUM_18_3_SILS_ACC] NULL,
      [BASE_TBL_CODE] [dbo].[CHAR_CODE_5] NULL,
      [BASE_TBL_COL] [dbo].[CHAR_CODE_2] NULL,
      [ASSET_CONV_CODE] [dbo].[CURRENCY_CODE] NULL,
      [TXN_GROSS] [dbo].[NUM_18_3_SILS_ACC] NOT NULL,
      [TXN_DEP] [dbo].[NUM_18_3_SILS_ACC] NOT NULL,
      [TXN_NET] [dbo].[NUM_18_3_SILS_ACC] NOT NULL,
      [TXN_DEP_MTHD] [dbo].[FLAG_DEP_MTHD] NOT NULL,
      [TXN_PCENT] [dbo].[PERCENTAGE_FIN] NULL,
      [TXN_FINAL] [dbo].[NUM_18_3_SILS_ACC] NULL,
      [TXN_TBL_CODE] [dbo].[CHAR_CODE_5] NULL,
      [TXN_TBL_COL] [dbo].[CHAR_CODE_2] NULL,
      [FINAL_VAL_OVER] [dbo].[FLAG_Y_N] NOT NULL,
      [BASE_DAYS_FIRST_PERD] [dbo].[NUM_SMALLINT] NULL,
      [BASE_ACTIVE_DAYS] [dbo].[NUM_SMALLINT] NULL,
      [TXN_DAYS_FIRST_PERD] [dbo].[NUM_SMALLINT] NULL,
      [TXN_ACTIVE_DAYS] [dbo].[NUM_SMALLINT] NULL,
      [LAST_DEP_AMT] [dbo].[NUM_18_3_SILS_ACC] NULL,
      [LAST_DEP_TXN_AMT] [dbo].[NUM_18_3_SILS_ACC] NULL,
      [BASE_POST_FINAL_VAL] [dbo].[NUM_18_3_SILS_ACC] NOT NULL,
      [TXN_POST_FINAL_VAL] [dbo].[NUM_18_3_SILS_ACC] NOT NULL,
      [RPT_ACCUM_GROSS] [dbo].[NUM_18_3_SILS_ACC] NOT NULL,
      [RPT_DEP] [dbo].[NUM_18_3_SILS_ACC] NOT NULL,
      [RPT_NET] [dbo].[NUM_18_3_SILS_ACC] NOT NULL,
      [RPT_CONV_CODE_CTRL] [dbo].[FLAG_CONV_CODE_CTRL] NOT NULL,
      [CV4_CONV_CODE] [dbo].[FIN_CONV_CODE] NULL,
      [CV4_GROSS] [dbo].[NUM_18_3_SILS_ACC] NOT NULL,
      [CV4_DEP] [dbo].[NUM_18_3_SILS_ACC] NOT NULL,
      [CV4_NET] [dbo].[NUM_18_3_SILS_ACC] NOT NULL,
      [CV4_DEP_MTHD] [dbo].[FLAG_DEP_MTHD] NOT NULL,
      [CV4_PCENT] [dbo].[PERCENTAGE_FIN] NULL,
      [CV4_FINAL] [dbo].[NUM_18_3_SILS_ACC] NULL,
      [CV4_TBL_CODE] [dbo].[CHAR_CODE_5] NULL,
      [CV4_TBL_COL] [dbo].[CHAR_CODE_2] NULL,
      [CV4_DAYS_FIRST_PERD] [dbo].[NUM_SMALLINT] NULL,
      [CV4_LAST_DEP_AMT] [dbo].[NUM_18_3_ACC] NULL,
      [CV4_ACTIVE_DAYS] [dbo].[NUM_SMALLINT] NULL,
      [CV4_POST_FINAL_VAL] [dbo].[NUM_18_3_SILS_ACC] NOT NULL,
      [RPT_DEP_MTHD] [dbo].[FLAG_DEP_MTHD] NOT NULL,
      [RPT_PCENT] [dbo].[PERCENTAGE_FIN] NULL,
      [RPT_FINAL] [dbo].[NUM_18_3_SILS_ACC] NULL,
      [RPT_TBL_CODE] [dbo].[CHAR_CODE_5] NULL,
      [RPT_TBL_COL] [dbo].[CHAR_CODE_2] NULL,
      [RPT_DAYS_FIRST_PERD] [dbo].[NUM_SMALLINT] NULL,
      [RPT_ACTIVE_DAYS] [dbo].[NUM_SMALLINT] NULL,
      [RPT_LAST_DEP_AMT] [dbo].[NUM_18_3_ACC] NULL,
      [RPT_POST_FINAL_VAL] [dbo].[NUM_18_3_SILS_ACC] NOT NULL,
      [ASSET_QTY] [dbo].[NUM_18_5_ACC] NULL,
      [ANTICIPATED_BS_ACNT] [dbo].[REF_MAINT_CODE] NULL,
      [ANTICIPATED_PL_ACNT] [dbo].[REF_MAINT_CODE] NULL,
      [BASE_ANTICIPATED_DEP] [dbo].[NUM_18_3_SILS_ACC] NOT NULL,
      [BASE_ANTICIPATED_FROM] [dbo].[NUM_SMALLINT_NO_SIGN] NULL,
      [BASE_ANTICIPATED_YEARS] [dbo].[NUM_SMALLINT] NULL,
      [BASE_ANTICIPATED_FACTOR] [dbo].[NUM_5_3] NULL,
      [BASE_ANTICIPATED_CUR_YR] [dbo].[FLAG_Y_N] NOT NULL,
      [BASE_ANTICIPATED_LST_YR] [dbo].[NUM_SMALLINT_NO_SIGN] NULL,
      [BASE_FIRST_YEAR_PCENT] [dbo].[NUM_6_3] NULL,
      [BASE_REDUCTION_PCENT] [dbo].[NUM_6_3] NULL,
      [BASE_REDUCTION_LST_YR] [dbo].[NUM_SMALLINT_NO_SIGN] NULL,
      [TXN_ANTICIPATED_DEP] [dbo].[NUM_18_3_SILS_ACC] NOT NULL,
      [TXN_ANTICIPATED_FROM] [dbo].[NUM_SMALLINT_NO_SIGN] NULL,
      [TXN_ANTICIPATED_YEARS] [dbo].[NUM_SMALLINT] NULL,
      [TXN_ANTICIPATED_FACTOR] [dbo].[NUM_5_3] NULL,
      [TXN_ANTICIPATED_CUR_YR] [dbo].[FLAG_Y_N] NOT NULL,
      [TXN_ANTICIPATED_LST_YR] [dbo].[NUM_SMALLINT_NO_SIGN] NULL,
      [TXN_FIRST_YEAR_PCENT] [dbo].[NUM_6_3] NULL,
      [TXN_REDUCTION_PCENT] [dbo].[NUM_6_3] NULL,
      [TXN_REDUCTION_LST_YR] [dbo].[NUM_SMALLINT_NO_SIGN] NULL,
      [RPT_ANTICIPATED_DEP] [dbo].[NUM_18_3_SILS_ACC] NOT NULL,
      [RPT_ANTICIPATED_FROM] [dbo].[NUM_SMALLINT_NO_SIGN] NULL,
      [RPT_ANTICIPATED_YEARS] [dbo].[NUM_SMALLINT] NULL,
      [RPT_ANTICIPATED_FACTOR] [dbo].[NUM_5_3] NULL,
      [RPT_ANTICIPATED_CUR_YR] [dbo].[FLAG_Y_N] NOT NULL,
      [RPT_ANTICIPATED_LST_YR] [dbo].[NUM_SMALLINT_NO_SIGN] NULL,
      [RPT_FIRST_YEAR_PCENT] [dbo].[NUM_6_3] NULL,
      [RPT_REDUCTION_PCENT] [dbo].[NUM_6_3] NULL,
      [RPT_REDUCTION_LST_YR] [dbo].[NUM_SMALLINT_NO_SIGN] NULL,
      [ASSET_CLASS_CODE] [dbo].[CHAR_CODE_10_UPPER] NULL,
      [PART_DISPOSED] [dbo].[FLAG_Y_N] NOT NULL,
      [PART_DISPOSAL_PERD] [dbo].[PERD] NULL,
      PRIMARY KEY CLUSTERED 
      (
        [ASSET_CODE] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]`
      _ , err7 := conn.Exec(query7)
      if err7 != nil {
        defer conn.Close()
        fmt.Println("Perdon 7! : ", err7.Error())
      }
      query8 := `CREATE TABLE [dbo].[`+BUNIT+`_ASSET_ANL_CAT](
      [ANL_CAT_ID] [dbo].[ANALYSIS_DIMENSION] NOT NULL,
      [ASSET_CODE] [dbo].[CHAR_CODE_10_UPPER] NOT NULL,
      [UPDATE_COUNT] [dbo].[UPDATE_CNT] NOT NULL,
      [LAST_CHANGE_USER_ID] [dbo].[LAST_CHANGE_USER_ID] NOT NULL,
      [LAST_CHANGE_DATETIME] [dbo].[LAST_CHANGE_DATETIME] NOT NULL,
      [ANL_CODE] [dbo].[ANL_CODE_0] NOT NULL,
      PRIMARY KEY CLUSTERED 
      (
        [ANL_CAT_ID] ASC,
        [ASSET_CODE] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]`
      _ , err8 := conn.Exec(query8)
      if err8 != nil {
        defer conn.Close()
        fmt.Println("Perdon 8! : ", err8.Error())
      }
      query9 := `CREATE TABLE [dbo].[`+BUNIT+`_NOTE](
      [NOTE_ID] [int] IDENTITY(1,1) NOT NULL,
      [UPDATE_COUNT] [dbo].[UPDATE_CNT] NOT NULL,
      [LAST_CHANGE_USER_ID] [dbo].[LAST_CHANGE_USER_ID] NOT NULL,
      [LAST_CHANGE_DATETIME] [dbo].[LAST_CHANGE_DATETIME] NOT NULL,
      PRIMARY KEY CLUSTERED 
      (
        [NOTE_ID] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]`
      _ , err9 := conn.Exec(query9)
      if err9 != nil {
        defer conn.Close()
        fmt.Println("Perdon 9! : ", err9.Error())
      }
      queryA := `CREATE TABLE [dbo].[`+BUNIT+`_NOTE_DETAIL](
      [NOTE_ID] [int] NOT NULL,
      [NOTE_SEQ] [dbo].[NUM_SMALLINT] NOT NULL,
      [UPDATE_COUNT] [dbo].[UPDATE_CNT] NOT NULL,
      [LAST_CHANGE_USER_ID] [dbo].[LAST_CHANGE_USER_ID] NOT NULL,
      [LAST_CHANGE_DATETIME] [dbo].[LAST_CHANGE_DATETIME] NOT NULL,
      [CREATE_DATETIME] [datetime] NULL,
      [CREATE_OPR] [dbo].[OPERATOR_CODE] NOT NULL,
      [INTERNAL_ONLY] [dbo].[FLAG_Y_N] NOT NULL,
      [NOTE_CLASS_CODE] [dbo].[REF_MAINT_CODE] NULL,
      [NOTE_TEXT] [dbo].[STRING_V1000] NOT NULL,
      PRIMARY KEY CLUSTERED 
      (
        [NOTE_ID] ASC,
        [NOTE_SEQ] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]`
      _ , errA := conn.Exec(queryA)
      if errA != nil {
        defer conn.Close()
        fmt.Println("Perdon A! : ", errA.Error())
      }
      queryB := `CREATE TABLE [dbo].[`+BUNIT+`_NOTE_LDG](
      [ACNT_CODE] [dbo].[REF_MAINT_CODE] NOT NULL,
      [PERD] [dbo].[FIN_PERD_INT] NOT NULL,
      [TXN_DATETIME] [dbo].[FIN_DATETIME] NOT NULL,
      [JNL_NUM] [dbo].[FIN_JNL_NUM] NOT NULL,
      [JNL_LINE] [dbo].[FIN_JNL_LINE] NOT NULL,
      [NOTE_ID] [int] NOT NULL,
      [UPDATE_COUNT] [dbo].[UPDATE_CNT] NOT NULL,
      [LAST_CHANGE_USER_ID] [dbo].[LAST_CHANGE_USER_ID] NOT NULL,
      [LAST_CHANGE_DATETIME] [dbo].[LAST_CHANGE_DATETIME] NOT NULL,
      [LDG_TYPE] [dbo].[LEDGER_CODE] NOT NULL,
      PRIMARY KEY CLUSTERED 
      (
        [ACNT_CODE] ASC,
        [PERD] ASC,
        [TXN_DATETIME] ASC,
        [JNL_NUM] ASC,
        [JNL_LINE] ASC,
        [NOTE_ID] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]`
      _ , errB := conn.Exec(queryB)
      if errB != nil {
        defer conn.Close()
        fmt.Println("Perdon B!: ", errB.Error())
      }
      queryC := `CREATE TABLE [dbo].[`+BUNIT+`_OWN_CO](
      [OWN_CO_CODE] [dbo].[REF_MAINT_CODE] NOT NULL,
      [UPDATE_COUNT] [dbo].[UPDATE_CNT] NOT NULL,
      [LAST_CHANGE_USER_ID] [dbo].[LAST_CHANGE_USER_ID] NOT NULL,
      [LAST_CHANGE_DATETIME] [dbo].[LAST_CHANGE_DATETIME] NOT NULL,
      [PYMT_TERMS_GRP_CODE] [dbo].[REF_MAINT_CODE] NULL,
      [DESCR] [dbo].[DESCRIPTION_50] NULL,
      [S_HEAD] [dbo].[SHORT_HEADING] NULL,
      [LOOKUP] [dbo].[LOOKUP] NOT NULL,
      [PYMT_RCPT_MTHD] [dbo].[FLAG_PYMT_MTHD] NOT NULL,
      [PREF_PYMT_MTHD] [dbo].[FLAG_PYMT_MTHD] NOT NULL,
      [INV_TO_ADDR_CODE] [dbo].[REF_MAINT_CODE] NULL,
      [WEB_PAGE_ADDR] [dbo].[WEB_ADDRESS] NULL,
      [EMAIL] [dbo].[EMAIL] NULL,
      [NAME] [dbo].[NAME] NULL,
      PRIMARY KEY CLUSTERED 
      (
        [OWN_CO_CODE] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]`
      _ , errC := conn.Exec(queryC)
      if errC != nil {
        defer conn.Close()
        fmt.Println("Perdon C!: ", errC.Error())
      }
      queryD := `CREATE TABLE [dbo].[`+BUNIT+`_PSTG_DETAIL](
      [PSTG_HDR_ID] [int] NOT NULL,
      [LINE_NUM] [dbo].[NUM_INT] NOT NULL,
      [UPDATE_COUNT] [dbo].[UPDATE_CNT] NOT NULL,
      [LAST_CHANGE_USER_ID] [dbo].[LAST_CHANGE_USER_ID] NOT NULL,
      [LAST_CHANGE_DATETIME] [dbo].[LAST_CHANGE_DATETIME] NOT NULL,
      [ACNT_CODE] [dbo].[REF_MAINT_CODE] NOT NULL,
      [PERD] [dbo].[PERD] NOT NULL,
      [TXN_DATETIME] [datetime] NULL,
      [JNL_NUM] [dbo].[NUM_INT] NOT NULL,
      [JNL_LINE_NUM] [dbo].[NUM_INT] NOT NULL,
      [JNL_TYPE] [dbo].[CHAR_CODE_5] NOT NULL,
      [JNL_SRCE] [dbo].[CHAR_CODE_5] NOT NULL,
      [TXN_REF] [dbo].[TRANSACTION_REF_MIXED] NOT NULL,
      [DESCR] [dbo].[STRING_V255] NOT NULL,
      [AMT] [dbo].[NUM_18_3_ACC] NOT NULL,
      [DR_CR_IND] [dbo].[CHAR_CODE_1] NOT NULL,
      [CONV_CODE] [dbo].[CHAR_CODE_5] NOT NULL,
      [CONV_RATE] [dbo].[NUM_18_9] NOT NULL,
      [TXN_AMT] [dbo].[NUM_18_3_ACC] NOT NULL,
      [TXN_DEC_PL] [dbo].[CHAR_CODE_1] NOT NULL,
      [BASE_RATE] [dbo].[NUM_18_9] NOT NULL,
      [BASE_OPR] [dbo].[CHAR_CODE_1] NOT NULL,
      [CONV_OPR] [dbo].[CHAR_CODE_1] NOT NULL,
      [RPT_RATE] [dbo].[NUM_18_9] NOT NULL,
      [RPT_OPR] [dbo].[CHAR_CODE_1] NOT NULL,
      [RPT_AMT] [dbo].[NUM_18_3_ACC] NOT NULL,
      [MEMO_AMT] [dbo].[NUM_18_5_ACC_FIN] NOT NULL,
      [ALLOCN_IND] [dbo].[NUM_SMALLINT] NOT NULL,
      [ALLOCN_REF] [dbo].[NUM_INT] NOT NULL,
      [ALLOCN_DATETIME] [datetime] NULL,
      [ALLOCN_PERD] [dbo].[PERD] NOT NULL,
      [ALLOCN_IN_PROGRESS] [dbo].[NUM_SMALLINT] NOT NULL,
      [ENTRY_DATETIME] [datetime] NULL,
      [ENTRY_PERD] [dbo].[PERD] NOT NULL,
      [DUE_DATETIME] [datetime] NULL,
      [PSTG_DATETIME] [datetime] NULL,
      [ASSET_IND] [dbo].[NUM_SMALLINT] NOT NULL,
      [ASSET_CODE] [dbo].[CHAR_CODE_10] NOT NULL,
      [ASSET_SUB_CODE] [dbo].[CHAR_CODE_5] NOT NULL,
      [CLEARDOWN] [dbo].[CHAR_CODE_5] NOT NULL,
      [REVERSAL] [dbo].[NUM_SMALLINT] NOT NULL,
      [LOSS_GAIN] [dbo].[NUM_SMALLINT] NOT NULL,
      [ROUGH_FLAG] [dbo].[NUM_SMALLINT] NOT NULL,
      [IN_USE_FLAG] [dbo].[NUM_SMALLINT] NOT NULL,
      [EXCL_BAL] [dbo].[NUM_SMALLINT] NOT NULL,
      [ANL_CODE_T0] [dbo].[REF_MAINT_CODE] NOT NULL,
      [ANL_CODE_T1] [dbo].[REF_MAINT_CODE] NOT NULL,
      [ANL_CODE_T2] [dbo].[REF_MAINT_CODE] NOT NULL,
      [ANL_CODE_T3] [dbo].[REF_MAINT_CODE] NOT NULL,
      [ANL_CODE_T4] [dbo].[REF_MAINT_CODE] NOT NULL,
      [ANL_CODE_T5] [dbo].[REF_MAINT_CODE] NOT NULL,
      [ANL_CODE_T6] [dbo].[REF_MAINT_CODE] NOT NULL,
      [ANL_CODE_T7] [dbo].[REF_MAINT_CODE] NOT NULL,
      [ANL_CODE_T8] [dbo].[REF_MAINT_CODE] NOT NULL,
      [ANL_CODE_T9] [dbo].[REF_MAINT_CODE] NOT NULL,
      [HOLD_REF] [dbo].[NUM_INT] NOT NULL,
      [HOLD_OPR_CODE] [dbo].[OPERATOR_CODE] NOT NULL,
      [DOC_1_DATETIME] [datetime] NULL,
      [DOC_2_DATETIME] [datetime] NULL,
      [DOC_3_DATETIME] [datetime] NULL,
      [DOC_4_DATETIME] [datetime] NULL,
      [DOC_NUM_PRFX_1] [dbo].[CHAR_ALPHA_V15] NULL,
      [DOC_NUM_1] [dbo].[NUM_INT] NOT NULL,
      [DOC_NUM_PRFX_2] [dbo].[CHAR_ALPHA_V15] NULL,
      [DOC_NUM_2] [dbo].[NUM_INT] NOT NULL,
      [DOC_NUM_PRFX_3] [dbo].[CHAR_ALPHA_V15] NULL,
      [DOC_NUM_3] [dbo].[NUM_INT] NOT NULL,
      [DOC_NUM_PRFX_4] [dbo].[CHAR_ALPHA_V15] NULL,
      [DOC_NUM_4] [dbo].[NUM_INT] NOT NULL,
      [DISC_1_DATETIME] [datetime] NULL,
      [DISC_PCENT_1] [dbo].[PERCENTAGE_PM] NOT NULL,
      [DISC_2_DATETIME] [datetime] NULL,
      [DISC_PCENT_2] [dbo].[PERCENTAGE_PM] NOT NULL,
      [INTEREST_DATETIME] [datetime] NULL,
      [INTEREST_PCENT] [dbo].[PERCENTAGE_PM] NOT NULL,
      [LATE_PYMT_DATETIME] [datetime] NULL,
      [LATE_PYMT_PCENT] [dbo].[PERCENTAGE_PM] NOT NULL,
      [PYMT_REF] [dbo].[CHAR_ALPHA_30] NOT NULL,
      [BANK_CODE] [dbo].[BANK_SORT_CODE] NOT NULL,
      [SRCE_REF] [dbo].[CHAR_CODE_10] NOT NULL,
      [MODULE_CODE] [dbo].[CHAR_CODE_1] NOT NULL,
      [PYMT_TERMS_GRP_CODE] [dbo].[REF_MAINT_CODE] NULL,
      [STD_TEXT_CLASS_CODE] [dbo].[REF_MAINT_CODE] NOT NULL,
      [STD_TEXT_CODE] [dbo].[REF_MAINT_CODE] NOT NULL,
      [CONSUMED_BDGT_ID] [dbo].[NUM_INT] NULL,
      [CV4_CONV_CODE] [dbo].[CHAR_CODE_5] NOT NULL,
      [CV4_AMT] [dbo].[NUM_18_3_ACC] NOT NULL,
      [CV4_CONV_RATE] [dbo].[NUM_18_9] NOT NULL,
      [CV4_OPERATOR] [dbo].[CHAR_CODE_1] NOT NULL,
      [CV4_DP] [dbo].[CHAR_CODE_1] NOT NULL,
      [CV5_CONV_CODE] [dbo].[CHAR_CODE_5] NOT NULL,
      [CV5_AMT] [dbo].[NUM_18_3_ACC] NOT NULL,
      [CV5_CONV_RATE] [dbo].[NUM_18_9] NOT NULL,
      [CV5_OPERATOR] [dbo].[CHAR_CODE_1] NOT NULL,
      [CV5_DP] [dbo].[CHAR_CODE_1] NOT NULL,
      [LINK_REF_1] [dbo].[CHAR_ALPHA_V15] NULL,
      [LINK_REF_2] [dbo].[CHAR_ALPHA_V15] NULL,
      [LINK_REF_3] [dbo].[CHAR_ALPHA_V15] NULL,
      [PRINCIPAL_CODE_1] [dbo].[CHAR_ALPHA_V15] NULL,
      [PRINCIPAL_CODE_2] [dbo].[CHAR_ALPHA_V15] NULL,
      [PRINCIPAL_CODE_3] [dbo].[CHAR_ALPHA_V15] NULL,
      [PRINCIPAL_CODE_4] [dbo].[CHAR_ALPHA_V15] NULL,
      [PRINCIPAL_CODE_5] [dbo].[CHAR_ALPHA_V15] NULL,
      [PRINCIPAL_CODE_6] [dbo].[CHAR_ALPHA_V15] NULL,
      [PRINCIPAL_CODE_7] [dbo].[CHAR_ALPHA_V15] NULL,
      [PRINCIPAL_CODE_8] [dbo].[CHAR_ALPHA_V15] NULL,
      [PRINCIPAL_CODE_9] [dbo].[CHAR_ALPHA_V15] NULL,
      [PRINCIPAL_CODE_10] [dbo].[CHAR_ALPHA_V15] NULL,
      [PRINCIPAL_CODE_11] [dbo].[CHAR_ALPHA_V15] NULL,
      [PRINCIPAL_CODE_12] [dbo].[CHAR_ALPHA_V15] NULL,
      [PRINCIPAL_CODE_13] [dbo].[CHAR_ALPHA_V15] NULL,
      [PRINCIPAL_CODE_14] [dbo].[CHAR_ALPHA_V15] NULL,
      [PRINCIPAL_CODE_15] [dbo].[CHAR_ALPHA_V15] NULL,
      [PRINCIPAL_CODE_16] [dbo].[CHAR_ALPHA_V15] NULL,
      [PRINCIPAL_CODE_17] [dbo].[CHAR_ALPHA_V15] NULL,
      [PRINCIPAL_CODE_18] [dbo].[CHAR_ALPHA_V15] NULL,
      [PRINCIPAL_CODE_19] [dbo].[CHAR_ALPHA_V15] NULL,
      [PRINCIPAL_CODE_20] [dbo].[CHAR_ALPHA_V15] NULL,
      [ALLOCN_CODE] [dbo].[CHAR_CODE_5] NULL,
      [ALLOCN_STMNTS] [dbo].[NUM_SMALLINT] NULL,
      [ALLOCN_USER_ID] [dbo].[OPERATOR_CODE] NULL,
      [SPLIT_ORIG_LINE] [dbo].[NUM_INT] NOT NULL,
      [VAL_DATETIME] [datetime] NULL,
      [SIGNING_DETAILS] [dbo].[CHAR_ALPHA_V30] NULL,
      [INSTLMT_DATETIME] [datetime] NULL,
      [BINDER_STATUS] [dbo].[FIN_FLAG_BINDER_STATUS] NOT NULL,
      [AGREED_STATUS] [dbo].[FLAG_Y_N] NOT NULL,
      [SPLIT_LINK_REF] [dbo].[CHAR_ALPHA_V15] NULL,
      [PSTG_REF] [dbo].[CHAR_ALPHA_V15] NULL,
      [TRUE_RATED] [dbo].[FLAG_TRUE_RATED] NOT NULL,
      [HOLD_DATETIME] [datetime] NULL,
      [HOLD_TEXT] [dbo].[STRING_V30] NULL,
      [INSTLMT_NUM] [dbo].[NUM_SMALLINT] NULL,
      [SUPPLMNTRY_EXTSN] [dbo].[FLAG_Y_N] NOT NULL,
      [APRVLS_EXTSN] [dbo].[FLAG_Y_N] NOT NULL,
      [REVAL_LINK_REF] [dbo].[NUM_INT] NULL,
      [MAN_PAY_OVER] [dbo].[FLAG_Y_N] NOT NULL,
      [PYMT_STAMP] [dbo].[STRING_V10] NULL,
      [AUTHORISTN_IN_PROGRESS] [dbo].[FLAG_Y_N] NOT NULL,
      [SPLIT_IN_PROGRESS] [dbo].[FLAG_Y_N] NOT NULL,
      [VCHR_NUM] [dbo].[CHAR_ALPHA_V30] NULL,
      [ORIGINATOR_ID] [dbo].[OPERATOR_CODE] NULL,
      [ORIGINATED_DATETIME] [datetime] NULL,
      [JNL_CLASS_CODE] [dbo].[REF_MAINT_CODE] NULL,
      [ALLOC_ID] [dbo].[OPERATOR_CODE] NULL,
      [JNL_REVERSAL_TYPE] [dbo].[FLAG_JNL_REVERSAL_TYPE] NOT NULL,
      PRIMARY KEY CLUSTERED 
      (
        [PSTG_HDR_ID] ASC,
        [LINE_NUM] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]`
      _ , errD := conn.Exec(queryD)
      if errD != nil {
        defer conn.Close()
        fmt.Println("Perdon D!: ", errD.Error())
      }
      queryE := `CREATE TABLE [dbo].[`+BUNIT+`_SSRFMSC](
      [SUN_TB] [dbo].[CHAR_CODE_3] NOT NULL,
      [KEY_FIELDS] [dbo].[CHAR_ALPHA_61] NOT NULL,
      [LOOKUP] [dbo].[FIN_LOOKUP] NOT NULL,
      [LAST_CHANGE_DATETIME] [dbo].[LAST_CHANGE_DATETIME] NOT NULL,
      [DAG] [dbo].[DATA_ACCESS_GROUP] NULL,
      [UPDATE_COUNT] [dbo].[UPDATE_CNT] NOT NULL,
      [LAST_CHANGE_USER_ID] [dbo].[LAST_CHANGE_USER_ID] NOT NULL,
      [RECORD_STATUS] [dbo].[FIN_NUM_1] NOT NULL,
      [SUN_DATA] [dbo].[STRING_V927] NOT NULL,
      PRIMARY KEY CLUSTERED 
      (
        [SUN_TB] ASC,
        [KEY_FIELDS] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]`
      _ , errE := conn.Exec(queryE)
      if errE != nil {
        defer conn.Close()
        fmt.Println("Perdon E!: ", errE.Error())
      }
      queryF := `CREATE TABLE [dbo].[`+BUNIT+`_ACNT_ANL_CAT](
      [ANL_CAT_ID] [dbo].[ANALYSIS_DIMENSION] NOT NULL,
      [ACNT_CODE] [dbo].[REF_MAINT_CODE] NOT NULL,
      [UPDATE_COUNT] [dbo].[UPDATE_CNT] NOT NULL,
      [LAST_CHANGE_USER_ID] [dbo].[LAST_CHANGE_USER_ID] NOT NULL,
      [LAST_CHANGE_DATETIME] [dbo].[LAST_CHANGE_DATETIME] NOT NULL,
      [ANL_CODE] [dbo].[ANL_CODE_0] NOT NULL,
      PRIMARY KEY CLUSTERED 
      (
        [ANL_CAT_ID] ASC,
        [ACNT_CODE] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]`
      _ , errF := conn.Exec(queryF)
      if errF != nil {
        defer conn.Close()
        fmt.Println("Perdon F!: ", errF.Error())
      }
      queryG := `CREATE TABLE [dbo].[`+BUNIT+`_ANL_ENT_DEFN](
        [ANL_ENT_ID] [dbo].[TBL_NUM] NOT NULL,
        [ANL_CAT_ID] [dbo].[ANALYSIS_DIMENSION] NOT NULL,
        [UPDATE_COUNT] [dbo].[UPDATE_CNT] NOT NULL,
        [LAST_CHANGE_USER_ID] [dbo].[LAST_CHANGE_USER_ID] NOT NULL,
        [LAST_CHANGE_DATETIME] [dbo].[LAST_CHANGE_DATETIME] NOT NULL,
        [ENTRY_NUM] [dbo].[NUM_SMALLINT] NOT NULL,
        [VALIDATE_IND] [dbo].[FLAG_VALIDATION_IND] NOT NULL,
        [S_HEAD] [dbo].[SHORT_HEADING_UPPER] NOT NULL,
      PRIMARY KEY CLUSTERED 
      (
        [ANL_ENT_ID] ASC,
        [ANL_CAT_ID] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]`
      _ , errG := conn.Exec(queryG)
      if errG != nil {
        defer conn.Close()
        fmt.Println("Perdon G!: ", errG.Error())
      }
    }
    example := map[string]interface{}{ "success":1}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *ContabilizaALaBravaController) Post() {
  cad := c.GetString("cad")
  source := c.GetString("source")
  soap, err := gosoap.SoapClient("http://localhost:8080/connect/wsdl/SecurityProvider?wsdl","http://localhost:8080/connect/soap/SecurityProvider")
  if err != nil {
    fmt.Errorf("error not expected: %s", err)
  }
  fmt.Println(source)
  params := gosoap.Params{
    "name": source,
    "password" : "",
  }
  err = soap.Call("Authenticate", "SecurityProviderAuthenticateRequest", params)
  if err != nil {
    fmt.Errorf("error in soap call: %s", err)
  }
  vaucher := soap.GetResponse()
  fmt.Println(vaucher)
  soapJournal, err := gosoap.SoapClient("http://localhost:8080/connect/wsdl/ComponentExecutor?wsdl","http://localhost:8080/connect/soap/ComponentExecutor")
  if err != nil {
    fmt.Errorf("error not expected: %s", err)
  }
  params = gosoap.Params{
    "authentication": vaucher,
    "licensing" : "",
    "component" : "Journal",
    "method" : "Import",
    "group" : "",
    "payload" : cad,
  }
  err = soapJournal.Call("Execute", "ComponentExecutorExecuteRequest", params)
  if err != nil {
    fmt.Errorf("error in soap call: %s", err)
  }
  diarioContabilizado := soapJournal.GetResponse()
  fmt.Println(diarioContabilizado)  
  example := map[string]interface{}{ "Success":1, "JRNAL_NO" : diarioContabilizado}
  c.Data["json"] = &example
  c.ServeJSON()
}


func (c *MandarDimensionesYLibroMayorController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    servidor := c.GetString("servidor")
    bunitDestino := c.GetString("bunit")
    type TypeDocument struct{
      Success int
      JRNAL_NO string
    }
    hc := http.Client{}
      form := url.Values{}
     // form.Add("cryptoText", cryptoText)
      //form.Add("rfc", k)
    req, err := http.NewRequest("GET", servidor+"maximoDiario?bunit="+bunitDestino, strings.NewReader(form.Encode()))
    check(err)
      req.PostForm = form
      req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
      resp, err := hc.Do(req)  
      DocumentObject := TypeDocument {Success:0, JRNAL_NO:""}
      err = json.NewDecoder(resp.Body).Decode(&DocumentObject)
      diarioMaximo := DocumentObject.JRNAL_NO
      fmt.Println(fmt.Sprintf("%s",diarioMaximo)+" es el maximo diario de la bunit destino")

    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    //exportar diarios
    query := `SELECT ACCNT_CODE, PERIOD, TRANS_DATETIME, JRNAL_NO, JRNAL_LINE, AMOUNT, D_C, ALLOCATION, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ALLOC_REF, ALLOC_DATETIME, ALLOC_PERIOD, ASSET_IND,ASSET_CODE, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE JRNAL_NO > `+diarioMaximo+`
      ORDER BY JRNAL_NO asc, JRNAL_LINE asc`
    rowsD, errD:= conn.Query(query)
    if errD != nil {
      fmt.Println("que pasho:", errD.Error())
    }
    var TRANS_DATETIME time.Time
    var ALLOC_DATETIME time.Time
    var AMOUNT decimal.Dec
    PERIOD, JRNAL_NO, JRNAL_LINE, ALLOC_PERIOD := 0, 0, 0, 0
    var ACCNT_CODE, D_C, ALLOCATION, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ALLOC_REF, ASSET_IND, ASSET_CODE, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9 string
    var cadOriginal bytes.Buffer
    diarioEnElQueEstoy := 0
    diarioAnterior := 99999999
    for rowsD.Next()  {
      rowsD.Scan(&ACCNT_CODE, &PERIOD, &TRANS_DATETIME, &JRNAL_NO, &JRNAL_LINE, &AMOUNT, &D_C, &ALLOCATION, &JRNAL_TYPE, &JRNAL_SRCE, &TREFERENCE, &DESCRIPTN, &ALLOC_REF, &ALLOC_DATETIME, &ALLOC_PERIOD, &ASSET_IND, &ASSET_CODE, &ANAL_T0, &ANAL_T1, &ANAL_T2, &ANAL_T3, &ANAL_T4, &ANAL_T5, &ANAL_T6, &ANAL_T7, &ANAL_T8, &ANAL_T9)
      ACCNT_CODE = strings.TrimSpace(ACCNT_CODE)
      D_C = strings.TrimSpace(D_C)
      ALLOCATION = strings.TrimSpace(ALLOCATION)
      JRNAL_TYPE = strings.TrimSpace(JRNAL_TYPE)
      JRNAL_SRCE = strings.TrimSpace(JRNAL_SRCE)
      TREFERENCE = strings.TrimSpace(TREFERENCE)
      DESCRIPTN = strings.TrimSpace(DESCRIPTN)
      ALLOC_REF = strings.TrimSpace(ALLOC_REF)
      ASSET_IND = strings.TrimSpace(ASSET_IND)
      ANAL_T0 = strings.TrimSpace(ANAL_T0)
      ANAL_T1 = strings.TrimSpace(ANAL_T1)
      ANAL_T2 = strings.TrimSpace(ANAL_T2)
      ANAL_T3 = strings.TrimSpace(ANAL_T3)
      ANAL_T4 = strings.TrimSpace(ANAL_T4)
      ANAL_T5 = strings.TrimSpace(ANAL_T5)
      ANAL_T6 = strings.TrimSpace(ANAL_T6)
      ANAL_T7 = strings.TrimSpace(ANAL_T7)
      ANAL_T8 = strings.TrimSpace(ANAL_T8)
      ANAL_T9 = strings.TrimSpace(ANAL_T9)

      diarioEnElQueEstoy = JRNAL_NO
      if diarioEnElQueEstoy != diarioAnterior {
        if len(cadOriginal.String()) > 0 {
          cadOriginal.WriteString(`</Ledger>
            </Payload>
          </SSC>
          `)  
          fmt.Println(cadOriginal.String())
          hc := http.Client{}
            form := url.Values{}
            form.Add("cad", cadOriginal.String())
            form.Add("source", JRNAL_SRCE)
          req, err := http.NewRequest("POST", servidor+"contabilizaSSC_A_la_Brava", strings.NewReader(form.Encode()))
          check(err)
            req.PostForm = form
            req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
            resp, err := hc.Do(req)  
            DocumentObject := TypeDocument {Success:0, JRNAL_NO:""}
            err = json.NewDecoder(resp.Body).Decode(&DocumentObject)
            respuesta := DocumentObject.JRNAL_NO
          fmt.Println(respuesta)
          if respuesta != "error"{
            fmt.Println(fmt.Sprintf("%s",respuesta)+" CONTABILIZADO")
          } else {
            fmt.Println(fmt.Sprintf("%s",respuesta)+" ERROR")
          }
              example := map[string]interface{}{ "success":1}
    c.Data["json"] = &example
    c.ServeJSON()
    return

        }
        cadOriginal.Reset()
        cadOriginal.WriteString(`<SSC>
          <SunSystemsContext>
            <BusinessUnit>`+bunitDestino+`</BusinessUnit>
            <BudgetCode>A</BudgetCode>
          </SunSystemsContext>
          <MethodContext>
            <LedgerPostingParameters>
              <JournalType>JV</JournalType>
              <PostingType>2</PostingType>
              <PostProvisional>N</PostProvisional>
              <PostToHold>N</PostToHold>
              <BalancingOptions>T2</BalancingOptions>
              <SuspenseAccount>338100</SuspenseAccount>
              <TransactionAmountAccount>338100</TransactionAmountAccount>
              <ReportingAccount>338100</ReportingAccount>
              <SupressSubstitutedMessages>N</SupressSubstitutedMessages>
              <ReportErrorsOnly>Y</ReportErrorsOnly>
            </LedgerPostingParameters>
          </MethodContext>
          <Payload>
            <Ledger>`)  
      }
      fechaOriginal := fmt.Sprintf("%s",TRANS_DATETIME)
      anioFecha := fechaOriginal[0:4]
      mesFecha := fechaOriginal[5:7]
      diaFecha := fechaOriginal[8:10]
      fechaFinal := diaFecha+mesFecha+anioFecha
      
      periodAux := strconv.Itoa(PERIOD)
      anioP := periodAux[0:4]
      mesP := periodAux[4:]
      periodAux = mesP+anioP
      cadOriginal.WriteString(`<Line>
            <TransactionReference>`+TREFERENCE+`</TransactionReference>
            <AccountingPeriod>`+periodAux+`</AccountingPeriod>
            <TransactionDate>`+fechaFinal+`</TransactionDate>
            <AccountCode>`+ACCNT_CODE+`</AccountCode>
            <AnalysisCode1>`+ANAL_T0+`</AnalysisCode1>
            <AnalysisCode2>`+ANAL_T1+`</AnalysisCode2>
            <AnalysisCode3>`+ANAL_T2+`</AnalysisCode3>
            <AnalysisCode4>`+ANAL_T3+`</AnalysisCode4>
            <AnalysisCode5>`+ANAL_T4+`</AnalysisCode5>
            <AnalysisCode6>`+ANAL_T5+`</AnalysisCode6>
            <AnalysisCode7>`+ANAL_T6+`</AnalysisCode7>
            <AnalysisCode8>`+ANAL_T7+`</AnalysisCode8>
            <AnalysisCode9>`+ANAL_T8+`</AnalysisCode9>
            <AnalysisCode10>`+ANAL_T9+`</AnalysisCode10>
            <Description>`+DESCRIPTN+`</Description>
            <Value4Amount>`+fmt.Sprintf("%.2f",math.Abs(AMOUNT.Float64()))+`</Value4Amount>
            <DebitCredit>`+D_C+`</DebitCredit>
            <Value4CurrencyCode>MXP1</Value4CurrencyCode>
            <DueDate>`+fechaFinal+`</DueDate>
          </Line>`) 



      diarioAnterior = JRNAL_NO

      
        
    }
  

    example := map[string]interface{}{ "success":1}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
}


func (c *GuardarBUNITController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    idUsuario := c.GetSession("idUsuario")
    BUNITNUEVO := c.GetString("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, errS := sql.Open("mssql", connString2) 
    defer conn.Close()
    if errS != nil {
      fmt.Println("Perdon! Open connection failed:", errS.Error())
    }
    //["+beego.AppConfig.String("serverAux")+"].
    //var idU string
    idU := strconv.Itoa(idUsuario.(int))
    query := "UPDATE [Sevenplus].[dbo].[users] set BUNIT = '"+BUNITNUEVO+"' WHERE idUsuario = "+idU+""
    _ , err2 := conn.Exec(query)
    if err2 != nil {
        defer conn.Close()
      fmt.Println("Perdon 5! : ", err2.Error())
    }
    c.SetSession("BUNIT", BUNITNUEVO)
    c.SessionRegenerateID()
    example := map[string]interface{}{ "success":1}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}



func (c *GenerarReciboDiarioEnPDFController) Get() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    diario := c.GetString("diario")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }

    queryDireccion := "SELECT ADDR_LINE_1, ADDR_LINE_2,ADDR_LINE_3,ADDR_LINE_4,ADDR_LINE_5 FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ADDR] WHERE ADDR_CODE = '0000000000'"
    rowsDireccion, err := conn.Query(queryDireccion)
    var addr1 string
    var addr2 string
    var addr3 string
    var addr4 string
    var addr5 string
    for rowsDireccion.Next()  {
      rowsDireccion.Scan(&addr1,&addr2,&addr3,&addr4,&addr5)
      addr1 = strings.TrimSpace(addr1)
      addr2 = strings.TrimSpace(addr2)
      addr3 = strings.TrimSpace(addr3)
      addr4 = strings.TrimSpace(addr4)
      addr5 = strings.TrimSpace(addr5)
    }

    
    queryDiario := "SELECT DESCR FROM [SunSystemsData].[dbo].[DB_DEFN] WHERE DB_CODE = '"+BUNIT.(string)+"'"
    rowsDiario, _ := conn.Query(queryDiario)
    var bunitD string
    for rowsDiario.Next()  {
      rowsDiario.Scan(&bunitD)
    }
    var PERIOD int
    var JRNAL_SRCE string
    var TREFERENCE_GLOBAL string
    var ANAL_T0_GLOBAL string
    var JRNAL_TYPE string
    query := "SELECT TOP 1 PERIOD, JRNAL_SRCE, TREFERENCE, ANAL_T0, JRNAL_TYPE FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE JRNAL_NO = "+diario+" order by JRNAL_LINE asc"
      rowsAntes, err1 := conn.Query(query)
      if err1 != nil {
      fmt.Println("Perdón! :", err1.Error())
    }
    if rowsAntes.Next()  {
      rowsAntes.Scan(&PERIOD, &JRNAL_SRCE, &TREFERENCE_GLOBAL, &ANAL_T0_GLOBAL, &JRNAL_TYPE)
    }
    pdf := gofpdf.New("L", "mm", "A4", "")
    tr := pdf.UnicodeTranslatorFromDescriptor("")
      pdf.SetHeaderFunc(func() {
    })
    pdf.SetFooterFunc(func() {
      pdf.SetY(-15)
      pdf.SetFont("Arial", "I", 8)
      pdf.CellFormat(0, 10, fmt.Sprintf("Page %d", pdf.PageNo()),
        "", 0, "C", false, 0, "")
    })
    pdf.AddPage()
    pdf.Image("logo.png", 10, 3, 30, 0, false, "", 0, "")
    pdf.SetFont("Arial Black", "", 12)
    pdf.SetXY(0, 10)
    pdf.CellFormat(0,0,tr(addr1),"",1,"C",false,0,"")
      pdf.SetXY(0, 14)
    pdf.CellFormat(0,0,tr(addr2),"",1,"C",false,0,"")
    pdf.SetFont("Arial", "", 12)
    pdf.SetXY(0, 18)
    pdf.CellFormat(0,0,tr(addr3),"",1,"C",false,0,"")
    pdf.SetXY(0, 22)
    pdf.CellFormat(0,0,tr(addr4),"",1,"C",false,0,"")
    pdf.SetXY(0, 26)
    pdf.CellFormat(0,0,tr(addr5),"",1,"C",false,0,"")
    pdf.SetFont("Arial", "", 10)


    
    queryX := `SELECT b.DESCR as CUENTA, a.ACCNT_CODE, a.PERIOD, a.JRNAL_LINE, a.AMOUNT, a.D_C, a.ANAL_T3, a.ANAL_T5, a.JRNAL_TYPE, a.JRNAL_SRCE, a.TREFERENCE, a.DESCRIPTN, a.TRANS_DATETIME
  FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] a
  INNER JOIN [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT] b on a.ACCNT_CODE = b.ACNT_CODE
  WHERE a.JRNAL_NO = `+diario+`
  order by a.JRNAL_LINE asc`

      rows, _ := conn.Query(queryX)
      var D_C string
    var DESCRIPTN string
    var descripcionCuenta string
    var distrito string
    var iglesia string
    var cuenta string
    var tipoDiario string
    var treference string 
    var quienContabilizo string 
    var TRANS_DATETIME time.Time
    var linea int
    
    var amount decimal.Dec
    dGlobales := 0.0
    cGlobales := 0.0
    dRef := 0.0
    cRef := 0.0
    y := 50.0
    x := 0.0
    tope := 180.0
    ac := accounting.Accounting{Symbol: "$", Precision: 2}
    TREFERENCE_ANTERIOR := "-"
    for rows.Next()  {
      rows.Scan(&descripcionCuenta, &cuenta, &PERIOD, &linea, &amount, &D_C, &distrito, &iglesia, &tipoDiario, &quienContabilizo, &treference, &DESCRIPTN, &TRANS_DATETIME)
      treference = strings.TrimSpace(treference)
      distrito = strings.TrimSpace(distrito)
      iglesia = strings.TrimSpace(iglesia)
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      fechaReal := ""
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          }
        }
      }
      _ = fechaReal//hardcode, borrar despues
      descripcionCuenta = strings.TrimSpace(descripcionCuenta)
      cuenta = strings.TrimSpace(cuenta)
      descripcionCuenta = strings.TrimSpace(descripcionCuenta)
      descripcionCuenta = strings.Replace(descripcionCuenta, "á", "a", -1)
      descripcionCuenta = strings.Replace(descripcionCuenta, "é", "e", -1)
      descripcionCuenta = strings.Replace(descripcionCuenta, "í", "i", -1)
      descripcionCuenta = strings.Replace(descripcionCuenta, "ó", "o", -1)
      descripcionCuenta = strings.Replace(descripcionCuenta, "ú", "u", -1)
      descripcionCuenta = strings.Replace(descripcionCuenta, "ñ", "n", -1)
      DESCRIPTN = strings.TrimSpace(DESCRIPTN)
      DESCRIPTN = strings.Replace(DESCRIPTN, "á", "a", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "é", "e", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "í", "i", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "ó", "o", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "ú", "u", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "ñ", "n", -1)
      if Compare(TREFERENCE_ANTERIOR,treference) == 0 {

      } else {
        if Compare(TREFERENCE_ANTERIOR,"-")==0 {//primera vez, no hacer nada
        } else {
          pdf.SetFont("Arial", "", 8)
          pdf.SetXY(170, y)
          pdf.Cell(0, 0,  "Total por referencia:")
          pdf.SetFont("Arial", "", 10)
          pdf.SetXY(240, y)
          pdf.Cell(0, 0,  ac.FormatMoney(math.Abs(dRef)))
          pdf.SetXY(260, y)
          pdf.Cell(0, 0, ac.FormatMoney(math.Abs(cRef)))
          y = y + 5
          dRef = 0
          cRef = 0
        }
        if y < (tope-20.0) {
        } else {
          y = 50
          pdf.AddPage()
        }
        pdf.SetFont("Arial", "B", 12)
        pdf.SetXY(10, y)
        //pdf.Cell(0, 0, anal_t0)
        y = y + 6 //6 x q 12 es la font! ¿?
        pdf.ClipPolygon([]gofpdf.PointType{{10, y -2.5}, {280, y-2.5},{280, y-2.5 }}, true)
        pdf.ClipEnd()
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(10, y)
        pdf.Cell(0, 0, "Ln")
        pdf.SetXY(22, y)
        pdf.Cell(0, 0, "Cuenta")
        pdf.SetXY(50, y)
        pdf.Cell(0, 0, "Nombre de la cuenta")
        pdf.SetXY(95, y)
        pdf.Cell(0, 0, tr("Descripción"))
        pdf.SetXY(170, y)
        pdf.Cell(0, 0, "Dimensiones")
        pdf.SetXY(240, y)
        pdf.Cell(0, 0, tr("Débito"))
        pdf.SetXY(260, y)
        pdf.Cell(0, 0, tr("Crédito")) 
        y = y + 5//5 x la font??
        pdf.ClipPolygon([]gofpdf.PointType{{10, y -2.5}, {280, y-2.5},{280, y-2.5 }}, true)
        pdf.ClipEnd()
        TREFERENCE_ANTERIOR = treference
      }
      amountPrima := math.Abs(amount.Float64())
      if Compare(D_C,"C")==0 {
        amountPrima = amountPrima*-1.0
        cGlobales += amountPrima
        cRef += amountPrima
      } else {
        dGlobales += amountPrima;
        dRef +=amountPrima;
      }
      lineaActual := strconv.Itoa(linea)
      pdf.SetXY(10, y)
      pdf.Cell(0, 0, lineaActual)
      pdf.SetXY(22, y)
      pdf.Cell(0, 0, tr(cuenta))
      pdf.SetXY(50, y)
      pdf.Cell(0, 0, tr(descripcionCuenta))
      pdf.SetXY(95, y)
      pdf.Cell(0, 0, tr(DESCRIPTN))
      pdf.SetXY(170, y)
      pdf.SetFont("Arial", "", 7)
      //pdf.Cell(0, 0, tr(tfww)+"-"+tr(fondo)+"-"+tr(funcion)+"-"+tr(restriccion)+"-"+tr(orgId)+"-"+tr(who)+"-"+tr(flag)+"-"+tr(proyecto)+"-"+tr(detalle))
      pdf.SetFont("Arial", "", 10)
      if Compare(D_C,"C")==0 {
        x = 260
      } else {
        x = 240
      }
      pdf.SetXY(x, y)
      pdf.Cell(0, 0, ac.FormatMoney(math.Abs(amountPrima)))     
      if y < tope{
        y = y + 5
      } else {
        y = 50
        pdf.AddPage()
      }
    }
    pdf.SetFont("Arial", "", 8)
    pdf.SetXY(170, y)
    pdf.Cell(0, 0,  "Total por referencia:")
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(240, y)
    pdf.Cell(0, 0,  ac.FormatMoney(math.Abs(dRef)))
    pdf.SetXY(260, y)
    pdf.Cell(0, 0, ac.FormatMoney(math.Abs(cRef)))
    y = y + 5
    pdf.ClipPolygon([]gofpdf.PointType{{10, y -2.5}, {280, y-2.5},{280, y-2.5 }}, true)
    pdf.ClipEnd()
    pdf.SetFont("Arial", "", 8)
    pdf.SetXY(170, y)
    pdf.Cell(0, 0,  "Total del diario:")
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(240, y)
    pdf.Cell(0, 0,  ac.FormatMoney(math.Abs(dGlobales)))
    pdf.SetXY(260, y)
    pdf.Cell(0, 0, ac.FormatMoney(math.Abs(cGlobales)))
    var b bytes.Buffer
      w := bufio.NewWriter(&b)
      pdf.Output(w)
      pdf.Close()
      w.Flush()
      c.Ctx.Output.ContentType("application/pdf")
      c.Ctx.Output.Body(b.Bytes())
  }
}

func (c *GenerarPDFController) Get() {
  texto := c.GetString("texto")
  texto = `<?xml version="1.0" encoding="UTF-8"?><cfdi:Comprobante Certificado="MIIGvjCCBKagAwIBAgIUMDAwMDEwMDAwMDA0MTE5OTg5MzUwDQYJKoZIhvcNAQELBQAwggGyMTgwNgYDVQQDDC9BLkMuIGRlbCBTZXJ2aWNpbyBkZSBBZG1pbmlzdHJhY2nDs24gVHJpYnV0YXJpYTEvMC0GA1UECgwmU2VydmljaW8gZGUgQWRtaW5pc3RyYWNpw7NuIFRyaWJ1dGFyaWExODA2BgNVBAsML0FkbWluaXN0cmFjacOzbiBkZSBTZWd1cmlkYWQgZGUgbGEgSW5mb3JtYWNpw7NuMR8wHQYJKoZIhvcNAQkBFhBhY29kc0BzYXQuZ29iLm14MSYwJAYDVQQJDB1Bdi4gSGlkYWxnbyA3NywgQ29sLiBHdWVycmVybzEOMAwGA1UEEQwFMDYzMDAxCzAJBgNVBAYTAk1YMRkwFwYDVQQIDBBEaXN0cml0byBGZWRlcmFsMRQwEgYDVQQHDAtDdWF1aHTDqW1vYzEVMBMGA1UELRMMU0FUOTcwNzAxTk4zMV0wWwYJKoZIhvcNAQkCDE5SZXNwb25zYWJsZTogQWRtaW5pc3RyYWNpw7NuIENlbnRyYWwgZGUgU2VydmljaW9zIFRyaWJ1dGFyaW9zIGFsIENvbnRyaWJ1eWVudGUwHhcNMTgwOTAzMTgwMDQxWhcNMjIwOTAzMTgwMDQxWjCCAV0xQzBBBgNVBAMTOklHTEVTSUEgQURWRU5USVNUQSBERUwgU0VQVElNTyBESUEgU0VDQ0lPTiBSRUdJT01PTlRBTkEgQVIxQzBBBgNVBCkTOklHTEVTSUEgQURWRU5USVNUQSBERUwgU0VQVElNTyBESUEgU0VDQ0lPTiBSRUdJT01PTlRBTkEgQVIxQzBBBgNVBAoTOklHTEVTSUEgQURWRU5USVNUQSBERUwgU0VQVElNTyBESUEgU0VDQ0lPTiBSRUdJT01PTlRBTkEgQVIxJTAjBgNVBC0THElBUzE4MDcxOUxYMiAvIE9PRks3NTA5MTVGSzgxHjAcBgNVBAUTFSAvIE9PRks3NTA5MTVNSkNTTFIwNDFFMEMGA1UECxM8SUdMRVNJQSBBRFZFTlRJU1RBIERFTCBTRVBUSU1PIERJQSBTRUNDSU9OIFJFR0lPTU9OVEFOQSxBLlIuMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn2ivBbruj3+LpkatqCZYDy8SJaLxbYeIBb1z+YVWy4mBaD08o9ZvNQd0M3ADUkHBm3fTnyOMPrYccoHgfHBJPiNekENK2lml6YC3WdNwtYbrxjJyvRW+RnjsVEDqB395t/gvwM+zrPlVxQ0P1PiizyHFL4uSeS6hW1XI5lRB1OgLbCZ7H9bg4p8O/6o2mH6+Tixx2bb5OaB2yoHX8zZbmofu2KEM4bJ50orsKcni02Fx8PVk0aCMjtds34fEJUTzNZfk/Tj+KLsvDBY2qXAkICkK4JouZ3LLFLWOdtHHrrhP2pAY6Xvol1/g4y3a6+rxSbJ2rrkH1myXERD97IZ05wIDAQABox0wGzAMBgNVHRMBAf8EAjAAMAsGA1UdDwQEAwIGwDANBgkqhkiG9w0BAQsFAAOCAgEAQP41vLl/2ajs2CPr+xLQEAhQXukOKWOwVTgsnJPCUY58mlo+NeGTOdMgOXa2dL8LGVSlehcPPUerTDAmZzI25dKEFmKe2UoBdxO48QgBsS4Bv29gefANvVOqLiXjp+paF3Qjsj/8gkxJxhkkYn+2oerYXt9DxK/0MGi3YbNsy/FyjwLMElZb7r7ss8MNCxocsXfXNVuubrDt4JnavoMc+siQ3NyqTiIwswNo2X/Rms0vwlJPvm7/+xfMaYeXFHOtGlf/5dIN4TNu5mnUQJC02dtoNYou3BW6OrEj6IDgokiBtXDlCc8tSAE8kKRdhbjZ7gU/AT7H4uUboZwpCEN0DLSHC6vY5TK/OrPx4Gl1ic4PpOJCQmtZrN8rk+KKDeZDr87PmBlxHPyvfARjm3cQOztxO8U7UV2WtgKPXy2e5mzendJAoCj6BcowETa0GexwFaMIJrkvpRF4EE8ObKSz5K5YLWPGqT5WuiAXZYfjGaVd42QxKzKfxGKo4ub+u33E/uQu2KXpno9PbWCVbHoTCsth+R7LhaeT8BgdstaB4tVJtgGIuQ/uqrT5o32pkWem0urA1/iJjuNWHbdLR5eRTHFhB626cKkXIEtbS2mmB6/gFNrFS+Z/rC/GcZwTU5uMtiz7PLkQkothTyYkxosD3RQ6qc4R/ARPEoainm4JSi4=" Descuento="0.00" Fecha="2018-12-10T17:43:10" Folio="1" FormaPago="03" LugarExpedicion="64460" MetodoPago="PUE" Moneda="MXN" NoCertificado="00001000000411998935" Sello="kCjL9DRBYc8y/3aej20H/gzgyQzIz37Ntvn0PlYdq9I1xMcW9L5cIaMZ2emBw3HRhckCrhUIYBpS7rxyo/ABbfEHHRve1n9DBAGl3tv0hWNtNiDoGtGCH7AvR5+Ql69ghvhYXBpUuaKz04nVt1dSBFgb7QtyE6b5jHlmcNiH9b520+ftZcNBRn3nvwhZzgL9NSvZDABracnz9Nnjuy18B/ISBjofYs4H6ajUOhpvHSDYDIgt1U4JHFTkyfNoGjPlpKxz9pFJgbzzlbT78cWazuOP+CCwuLW15qMHX3TB+N5pPgYvYhegsbeN7Y8+cMBDjg5L9Iv5QiEXbtiCmD5RUw==" Serie="S" SubTotal="4350.00" TipoCambio="1" TipoDeComprobante="I" Total="4350.00" Version="3.3" xsi:schemaLocation="http://www.sat.gob.mx/cfd/3 http://www.sat.gob.mx/sitio_internet/cfd/3/cfdv33.xsd http://www.sat.gob.mx/nomina http://www.sat.gob.mx/sitio_internet/cfd/nomina/nomina12.xsd" xmlns:cfdi="http://www.sat.gob.mx/cfd/3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><cfdi:Emisor Nombre="IGLESIA ADVENTISTA DEL SEPTIMO DIA SECCION REGIOMONTANA" RegimenFiscal="603" Rfc="IAS180719LX2"/><cfdi:Receptor Nombre="IGLESIA ADVENTISTA DEL SEPTIMO DIA, A.R." Rfc="IAS930628FA8" UsoCFDI="G03"/><cfdi:Conceptos><cfdi:Concepto Cantidad="1.00000" ClaveProdServ="94111901" ClaveUnidad="ACT" Descripcion="Diezmos y ofrendas 05/10/2018" Importe="4350.00" NoIdentificacion="777" ValorUnitario="4350.00"/></cfdi:Conceptos><cfdi:Impuestos/><cfdi:Complemento><tfd:TimbreFiscalDigital Version="1.1" SelloCFD="kCjL9DRBYc8y/3aej20H/gzgyQzIz37Ntvn0PlYdq9I1xMcW9L5cIaMZ2emBw3HRhckCrhUIYBpS7rxyo/ABbfEHHRve1n9DBAGl3tv0hWNtNiDoGtGCH7AvR5+Ql69ghvhYXBpUuaKz04nVt1dSBFgb7QtyE6b5jHlmcNiH9b520+ftZcNBRn3nvwhZzgL9NSvZDABracnz9Nnjuy18B/ISBjofYs4H6ajUOhpvHSDYDIgt1U4JHFTkyfNoGjPlpKxz9pFJgbzzlbT78cWazuOP+CCwuLW15qMHX3TB+N5pPgYvYhegsbeN7Y8+cMBDjg5L9Iv5QiEXbtiCmD5RUw==" UUID="3D49613A-45A5-4E0E-ACB8-13EF88BEA413" FechaTimbrado="2018-12-10T17:43:32" RfcProvCertif="STO020301G28" NoCertificadoSAT="00001000000404627119" SelloSAT="OtrFWrKp6D2R24WUZAUhRMfk0ceRjHRyJ3tFzrA8uJhSq18vOm65doJvfXhoSpUYWUt0k3uvOt6gr5lctf0sUOvhJdGr9ZMswcOj4DjZYx2ceh9hWrh3u5hkd7i82nDClSxkm0S855AA2dWWYXm8tRb0nfAM2BWpI8GtcZsJrx81tC5uzdHX5B5+T3BqC+LmUlGRfAJKeWcMsA07BXSTLedRaLql1NgOoPZMV93TbRMyFJIJ+ILtWQ9LKvnqwEvtRBCdNA4+b207dgGLlGuulUjg9l0DLvDA/eIsmcRJY3nys4zct4rgVbb5K06lghYaz9NhyX5DGZlKqrlGMpCD+Q==" xsi:schemaLocation="http://www.sat.gob.mx/TimbreFiscalDigital http://www.sat.gob.mx/sitio_internet/cfd/TimbreFiscalDigital/TimbreFiscalDigitalv11.xsd" xmlns:tfd="http://www.sat.gob.mx/TimbreFiscalDigital"/></cfdi:Complemento></cfdi:Comprobante>`
  texto = `<?xml version="1.0" encoding="UTF-8"?><cfdi:Comprobante Certificado="MIIGqDCCBJCgAwIBAgIUMDAwMDEwMDAwMDA0MDY3MjA0OTEwDQYJKoZIhvcNAQELBQAwggGyMTgwNgYDVQQDDC9BLkMuIGRlbCBTZXJ2aWNpbyBkZSBBZG1pbmlzdHJhY2nDs24gVHJpYnV0YXJpYTEvMC0GA1UECgwmU2VydmljaW8gZGUgQWRtaW5pc3RyYWNpw7NuIFRyaWJ1dGFyaWExODA2BgNVBAsML0FkbWluaXN0cmFjacOzbiBkZSBTZWd1cmlkYWQgZGUgbGEgSW5mb3JtYWNpw7NuMR8wHQYJKoZIhvcNAQkBFhBhY29kc0BzYXQuZ29iLm14MSYwJAYDVQQJDB1Bdi4gSGlkYWxnbyA3NywgQ29sLiBHdWVycmVybzEOMAwGA1UEEQwFMDYzMDAxCzAJBgNVBAYTAk1YMRkwFwYDVQQIDBBEaXN0cml0byBGZWRlcmFsMRQwEgYDVQQHDAtDdWF1aHTDqW1vYzEVMBMGA1UELRMMU0FUOTcwNzAxTk4zMV0wWwYJKoZIhvcNAQkCDE5SZXNwb25zYWJsZTogQWRtaW5pc3RyYWNpw7NuIENlbnRyYWwgZGUgU2VydmljaW9zIFRyaWJ1dGFyaW9zIGFsIENvbnRyaWJ1eWVudGUwHhcNMTcwNjI5MTYyOTEyWhcNMjEwNjI5MTYyOTEyWjCCAUcxPjA8BgNVBAMTNUlHTEVTSUEgQURWRU5USVNUQSBERUwgU0VQVElNTyBESUEgVU5JT04gREVMIE5PUlRFIEFSMT4wPAYDVQQpEzVJR0xFU0lBIEFEVkVOVElTVEEgREVMIFNFUFRJTU8gRElBIFVOSU9OIERFTCBOT1JURSBBUjE+MDwGA1UEChM1SUdMRVNJQSBBRFZFTlRJU1RBIERFTCBTRVBUSU1PIERJQSBVTklPTiBERUwgTk9SVEUgQVIxJTAjBgNVBC0THElBUzE2MDcwN1U2MiAvIFZJTU42OTA1MDZNUjIxHjAcBgNVBAUTFSAvIFZJTU42OTA1MDZNQ1NMUlIwNjE+MDwGA1UECxM1SUdMRVNJQSBBRFZFTlRJU1RBIERFTCBTRVBUSU1PIERJQSBVTklPTiBERUwgTk9SVEUgQVIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC1ysoSYRlfIxmeBaEFbWb7+FWJP0hvbpRvhn4Khrr3oxAnqezy0ZRrWwrYpTEL4RG1a/9FVE9EDEDEvnHWZQfgojdnVTUcQlUnvvrGlfdm0G6mZBlRUop5Z+1MO8KnTXN2vyHNC4N+ZPUaB6pYItiw385IBCHWULaj50wFvXN+9aEqFSqf5zB1dsL4su0LvfTJfC3KgJljd/O4vpI5YRyKy8q2pdI6BHCbRqZheOx2iXYldsuROwMPaz8UUR4nJfqHvCtyrINb/IWGfCb8kNErDjhRN2PHBdXyVYnhPoVSf4btLwz7y9tP5zusQGbFTd/iqDOmZHJSZK2DL3736MtXAgMBAAGjHTAbMAwGA1UdEwEB/wQCMAAwCwYDVR0PBAQDAgbAMA0GCSqGSIb3DQEBCwUAA4ICAQBwbiP20Krz3eTghiMX2AIRwPcGZhkclg6pDaI678pqBULZrDOWhO/jUWliEe2H5yTcvXoeHhyr2aPg5iQgFj9HxgdSs/7gtjNrlpxEvz2JFSgLhaOpA9pSFhqbKMMFatPMJhOpxdeEVi1rGvDNQlP8DrpjfPKNsE3LVDz0FGmgzoHogxtlUIlCpwqLWNfKOclMXbhpMv6CrRoOC4a8HXRJZRCBWLt3tfaW2nfu445iqyXO/dVr/nBNmOmaCK45AdsJywbB/pdqM95dZnat4M9gpKXoOSJ8bvPX9Z7JnUFS18RWBM2iPtYxOtWakKviAfMsNEbiNVTkP87uwOiTsFFrqZY8CnDkw1hTd9Pr5Yank97k0VS8BwAiwySKGYbWAsqiJEOH7RJS8vdQ0Kn/kXME/Sq8WGU4MgL/6Wk+IEqco84If0ARDO80khTh5FPf17i0pj3L6UK7IiLahPIdpaEX00WSnqRUk4Wy9FMGnB/b5/G/z8MHVUaIJnasn7mETwNP8K1NPbejlzyU7T0BJFfdoUElIgjN7E8NdTNaFySm+J7eAEZZkcqjdfHSwvvu7SRPosmyO0WUTS5bpSrqnj/c5iZd2iZANN1ipNRCAP9sVnTfO4DSlbmKp7IJZTZeoE2KRGirnCeeB0mn3C/uH3dMNAlkoDlUwzcvXYXoGrh3pA==" Descuento="0.00" Fecha="2019-01-11T14:14:43" Folio="1" FormaPago="03" LugarExpedicion="67500" MetodoPago="PUE" Moneda="MXN" NoCertificado="00001000000406720491" Sello="WAKfcy2eXkYDulU4sYTVFI2LxpSEJXJzim66i8tPsW63boldsc2/cq3xCfa5juFTcbeZ1BD/lrIQLTnzSF351UDW8XNmF/YkvyvFt1ZZKUFu+CWxcI/tcccDbL3BFyAfL3I4iB3lMif0AaiAQi025vbj+xzqygZX+OIyhdy7a0zYDdhp16YW2PMeH46775meytDxjrBREoGeOKpDBWT9kTTKWFmg96HmZstZiRzuxzuA+vSeUx9vND6jAYHQiwGf81z1cjA4ZkcpSa021C+kEQ/VUtUpRC3BpsQP7r8VlsgxQ5JOzcDb0ZYOlkDeqXjoaF6XxoiOygsmnRZKeHINKA==" Serie="S" SubTotal="3500.00" TipoCambio="1" TipoDeComprobante="I" Total="3500.00" Version="3.3" xsi:schemaLocation="http://www.sat.gob.mx/cfd/3 http://www.sat.gob.mx/sitio_internet/cfd/3/cfdv33.xsd http://www.sat.gob.mx/nomina http://www.sat.gob.mx/sitio_internet/cfd/nomina/nomina12.xsd" xmlns:cfdi="http://www.sat.gob.mx/cfd/3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><cfdi:Emisor Nombre="IGLESIA ADVENTISTA DEL SEPTIMO DIA UNION DEL NORTE A.R." RegimenFiscal="603" Rfc="IAS160707U62"/><cfdi:Receptor Nombre="IGLESIA ADVENTISTA DEL SEPTIMO DIA SECCION DE SONORA, A.R." Rfc="IAS161024N33" UsoCFDI="G03"/><cfdi:Conceptos><cfdi:Concepto Cantidad="1.00000" ClaveProdServ="55101528" ClaveUnidad="D63" Descripcion="Venta de material religioso D279BBC0-BC60-4D74-832C-5E481D3FFC8E" Importe="3500.00" NoIdentificacion="777" ValorUnitario="3500.00"/></cfdi:Conceptos><cfdi:Impuestos/><cfdi:Complemento><tfd:TimbreFiscalDigital Version="1.1" SelloCFD="WAKfcy2eXkYDulU4sYTVFI2LxpSEJXJzim66i8tPsW63boldsc2/cq3xCfa5juFTcbeZ1BD/lrIQLTnzSF351UDW8XNmF/YkvyvFt1ZZKUFu+CWxcI/tcccDbL3BFyAfL3I4iB3lMif0AaiAQi025vbj+xzqygZX+OIyhdy7a0zYDdhp16YW2PMeH46775meytDxjrBREoGeOKpDBWT9kTTKWFmg96HmZstZiRzuxzuA+vSeUx9vND6jAYHQiwGf81z1cjA4ZkcpSa021C+kEQ/VUtUpRC3BpsQP7r8VlsgxQ5JOzcDb0ZYOlkDeqXjoaF6XxoiOygsmnRZKeHINKA==" UUID="77805CEC-3F59-46FE-98B9-72CEE98454A2" FechaTimbrado="2019-01-11T14:15:07" RfcProvCertif="STO020301G28" NoCertificadoSAT="00001000000404627119" SelloSAT="8EpjohF6yt5kIKRF3nBp/nlH3OhpeHD8aa1DZq414WRIMYbibBMlz6rQ5tO13KsWP9Pg/EvCBDN162nKjaMfP3nby0A4Qdu9LmyzdZPNtW+XmaX/GUstXHqpJaEpCTy0vhQUUHRMcyP9gketwtee5Dub3A60UbETyBLkHaCZu0SRUCnAAbcvtVxRrF8uw641bGBdmjSSb9xuu6q1zX+AqT079wr5+fAbbkT5wT92IM0OlZNHsOOs4/722SUlciFgH/2kaUDgSqDLe7jyu5oFEr3WaGA++9axcBpTSg9HRiqc2EfKpdPALStthgSgrXLGjt7a0Stl1QT/8s1JSB6GFQ==" xsi:schemaLocation="http://www.sat.gob.mx/TimbreFiscalDigital http://www.sat.gob.mx/sitio_internet/cfd/TimbreFiscalDigital/TimbreFiscalDigitalv11.xsd" xmlns:tfd="http://www.sat.gob.mx/TimbreFiscalDigital"/></cfdi:Complemento></cfdi:Comprobante>`
  v := new(CFDI)
  connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
  conn, err := sql.Open("mssql", connString2) 
  defer conn.Close()
  if err != nil {
    fmt.Println("Open connection failed:", err.Error())
  }
  err = xml.Unmarshal([]byte(texto), v)
  if err != nil {
    fmt.Printf("error: %v", err)
    return
  }
  pdf := gofpdf.New("P", "pt", "A4", "")//mm
  tr := pdf.UnicodeTranslatorFromDescriptor("")
  pdf.SetHeaderFunc(func() {})
  pdf.SetFooterFunc(func() {})
  pdf.AddPage()
  pdf.Image("logo.png", 517.24, 720, 71.04, 71.04, false, "", 0, "")
  pdf.Image("static/flama.png", 517.24, 0, 242.08, 601.04, false, "", 0, "")
  pdf.SetFont("Arial", "", 14)
  pdf.SetTextColor(5, 121, 134)
  pdf.SetXY(0, 8)
  pdf.MultiCell(510.24,20,tr(v.Emisors[0].NombreRazonSocial33),"","C",false)
  pdf.SetFillColor(5, 121, 134)
  pdf.SetDrawColor(5, 121, 134)
  pdf.Line(509.24,110,509.24,790)
  pdf.Line(508.24,110,508.24,790)
  pdf.Line(21,90,498.24,90)
  pdf.Line(21,91,498.24,91)
  pdf.SetFillColor(234, 230, 228)
  pdf.SetDrawColor(234, 230, 228) 
  pdf.SetFont("Arial", "", 12)
  pdf.SetXY(197.12, 42)
  fill := false
  fill = !fill  
  pdf.CellFormat(116,18,tr("RFC: "+v.Emisors[0].RFCEmisor33),"",1,"C",fill,0,"")
  pdf.SetFont("Arial", "", 6)
  pdf.Image("static/gps.png", 15, 40, 15, 15, false, "", 0, "")//direccion
  pdf.SetXY(29, 40)
  rfcEmisor := ""
  razonSocialOrigen := ""
  lugarExpedicion := ""
  regimen := ""
  direccion := ""
  telefono := ""
  correoCFDI := ""
  web := ""
  BUNIT := c.GetSession("BUNIT")
  queryF := "SELECT rfc, razonSocial, lugarExpedicion, regimen, direccion, telefono, correoCFDI, web FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '"+BUNIT.(string)+"'"
  rowsF, err := conn.Query(queryF)
  if rowsF.Next()  {
    rowsF.Scan(&rfcEmisor, &razonSocialOrigen, &lugarExpedicion, &regimen, &direccion, &telefono, &correoCFDI, &web)
  }
  pdf.MultiCell( 100,6,tr(direccion),"","L",false)  
  pdf.Image("static/tel.png", 15, 70, 15, 15, false, "", 0, "")//telefono
  pdf.SetXY(29, 75)
  pdf.MultiCell( 100,6,tr(telefono),"","L",false)
  pdf.Image("static/mail.png", 481.24, 40, 15, 15, false, "", 0, "")//correo
  pdf.SetXY(381.24, 45)
  pdf.MultiCell( 100,6,tr(correoCFDI),"","R",false)
  pdf.Image("static/web.png", 481.24, 70, 15, 15, false, "", 0, "")//web
  pdf.SetXY(381.24, 75)
  pdf.MultiCell( 100,6,tr(web),"","R",false)
  pdf.SetTextColor(0, 0, 0)
  pdf.SetFont("Arial", "", 10)
  pdf.SetXY(20, 100)
  pdf.MultiCell(266.2445,12,tr("RÉGIMEN FISCAL:"),"","L",fill)
  pdf.SetXY(20+266.2445, 100)
  pdf.MultiCell(106.4978,12,tr("FECHA:"),"","L",fill)
  pdf.SetXY(20+266.2445+106.4978, 100)
  pdf.MultiCell(106.4978,12,tr("HORA:"),"","L",fill)
  pdf.Line(20,100,20,125)
  pdf.Line(20+266.2445,100,20+266.2445,125)
  pdf.Line(20+266.2445+106.4978,100,20+266.2445+106.4978,125)
  pdf.Line(20+266.2445+106.4978+106.4978,100,20+266.2445+106.4978+106.4978,125)
  pdf.Line(20,125,20+266.2445+106.4978+106.4978,125)
  pdf.SetTextColor(5, 121, 134)
  pdf.SetXY(20, 113)
  rs := "Personas morales con fines no lucrativos"
  if regimen != "603" {
    rs = "El regimen NO es moral con fines lucrativos"
  }
  pdf.MultiCell(266.2445,12,tr(regimen+" - "+rs),"","C",false)
  x := strings.Split(v.Fecha33, "T")
  pdf.SetXY(20+266.2445, 113)
  pdf.MultiCell(106.4978,12,tr(x[0]),"","C",false)
  pdf.SetXY(20+266.2445+106.4978, 113)
  pdf.MultiCell(106.4978,12,tr(x[1]),"","C",false)
  //RECEPTOR
  pdf.SetTextColor(0, 0, 0)
  pdf.SetXY(20, 130)
  pdf.MultiCell(479.24,12,tr("RECEPTOR:"),"","L",fill)
  pdf.Line(20,130,20,179)
  pdf.Line(20+479.24,130,20+479.24,179)
  pdf.Line(20,179,20+479.24,179)
  pdf.SetTextColor(5, 121, 134)
  pdf.SetXY(20, 143)
  pdf.MultiCell(479.24,12,tr(v.Receptors[0].NombreRazonSocial33),"","L",false)
  pdf.SetXY(20, 155)
  pdf.MultiCell(479.24,12,tr("RFC: "+v.Receptors[0].RFCReceptor33),"","L",false)
  pdf.SetXY(20, 167)
  pdf.MultiCell(479.24,12,tr("Uso CFDI: "+v.Receptors[0].UsoCFDI),"","L",false)
  //UUID
  pdf.SetTextColor(0, 0, 0)
  pdf.SetXY(20, 184)
  pdf.MultiCell(479.24,12,tr("FOLIO FISCAL:"),"","L",fill)
  pdf.Line(20,184,20,209)
  pdf.Line(20+479.24,184,20+479.24,209)
  pdf.Line(20,209,20+479.24,209)
  pdf.SetTextColor(5, 121, 134)
  pdf.SetXY(20, 197)
  pdf.MultiCell(479.24,12,tr(v.Complementos[0].TimbreFiscalDigitals[0].UUID),"","C",false)
  //No. de Serie del Certificado del CSD:
  pdf.SetTextColor(0, 0, 0)
  pdf.SetXY(20, 214)
  pdf.MultiCell(479.24,12,tr("No. de Serie del Certificado del CSD:"),"","L",fill)
  pdf.Line(20,214,20,239)
  pdf.Line(20+479.24,214,20+479.24,239)
  pdf.Line(20,239,20+479.24,239)
  pdf.SetTextColor(5, 121, 134)
  pdf.SetXY(20, 227)
  pdf.MultiCell(479.24,12,tr(v.NoCertificado),"","C",false)
  //CONCEPTOS
  pdf.SetFont("Arial", "", 10)
  //cantidadFloat, _ := strconv.ParseFloat(v.Total33, 64)
  cantidadFloat := v.Conceptoss[0].Conceptos[0].Importe
    ac := accounting.Accounting{Symbol: "$", Precision: 2}  
  pdf.SetTextColor(0, 0, 0)
  pdf.SetXY(20, 244)
  pdf.SetFont("Arial", "", 8)
  pdf.MultiCell(62.851147541,12,tr("ClaveProdServ"),"","C",fill)
  pdf.SetFont("Arial", "", 10)
  pdf.SetXY(20+62.851147541, 244)
  pdf.MultiCell(23.5691803279,12,tr("N.I."),"","C",fill)
  pdf.SetXY(20+62.851147541+23.5691803279, 244)
  pdf.MultiCell(54.9947540983,12,tr("Cantidad"),"","C",fill)
  pdf.SetXY(20+62.851147541+23.5691803279+54.9947540983, 244)
  pdf.SetFont("Arial", "", 8)
  pdf.MultiCell(23.5691803279,12,tr("C.U."),"","C",fill)
  pdf.SetFont("Arial", "", 10)
  pdf.SetXY(20+62.851147541+23.5691803279+54.9947540983+23.5691803279, 244)
  pdf.MultiCell(157.127868852,12,tr("Descripción"),"","C",fill)
  pdf.SetXY(20+62.851147541+23.5691803279+54.9947540983+23.5691803279+157.127868852, 244)
  pdf.MultiCell(78.5639344262,12,tr("Valor unitario"),"","C",fill)
  pdf.SetXY(20+62.851147541+23.5691803279+54.9947540983+23.5691803279+157.127868852+78.5639344262, 244)
  pdf.MultiCell(78.5639344262,12,tr("Importe"),"","C",fill)
  pdf.Line(20,244,20,293)
  pdf.Line(20+62.851147541,244,20+62.851147541,293)
  pdf.Line(20+62.851147541+23.5691803279,244,20+62.851147541+23.5691803279,293)
  pdf.Line(20+62.851147541+23.5691803279+54.9947540983,244,20+62.851147541+23.5691803279+54.9947540983,293)
  pdf.Line(20+62.851147541+23.5691803279+54.9947540983+23.5691803279,244,20+62.851147541+23.5691803279+54.9947540983+23.5691803279,293)
  pdf.Line(20+62.851147541+23.5691803279+54.9947540983+23.5691803279+157.127868852,244,20+62.851147541+23.5691803279+54.9947540983+23.5691803279+157.127868852,293)
  pdf.Line(20+62.851147541+23.5691803279+54.9947540983+23.5691803279+157.127868852+78.5639344262,244,20+62.851147541+23.5691803279+54.9947540983+23.5691803279+157.127868852+78.5639344262,293)
  pdf.Line(20+479.24,244,20+479.24,293)
  pdf.Line(20,293,20+479.24,293)
  pdf.SetTextColor(5, 121, 134)
  pdf.SetXY(20, 257)
  pdf.MultiCell(62.851147541,12,tr(v.Conceptoss[0].Conceptos[0].ClaveProdServ),"","C",false)//claveConcepto
  pdf.SetXY(20+62.851147541, 257)
  pdf.MultiCell(23.5691803279,12,tr("777"),"","C",false)
  pdf.SetXY(20+62.851147541+23.5691803279, 257)
  pdf.MultiCell(54.9947540983,12,tr("1.00000"),"","C",false)
  pdf.SetXY(20+62.851147541+23.5691803279+54.9947540983, 257)
  pdf.SetFont("Arial", "", 8)
  pdf.MultiCell(23.5691803279,12,tr(v.Conceptoss[0].Conceptos[0].ClaveUnidad),"","C",false)
  pdf.SetFont("Arial", "", 10)
  pdf.SetXY(20+62.851147541+23.5691803279+54.9947540983+23.5691803279, 257)
  pdf.MultiCell(157.127868852,12,tr(v.Conceptoss[0].Conceptos[0].Descripcion),"","C",false)
  pdf.SetXY(20+62.851147541+23.5691803279+54.9947540983+23.5691803279+157.127868852, 257)
  pdf.MultiCell(78.5639344262,12,ac.FormatMoney(cantidadFloat),"","C",false)
  pdf.SetXY(20+62.851147541+23.5691803279+54.9947540983+23.5691803279+157.127868852+78.5639344262, 257)
  pdf.MultiCell(78.5639344262,12,ac.FormatMoney(cantidadFloat),"","C",false)
  pdf.SetTextColor(0, 0, 0)
  pdf.SetXY(20, 298)
  pdf.MultiCell(100,12,tr("LugarExpedicion"),"","C",fill)
  pdf.SetXY(120, 298)
  pdf.MultiCell(89.24,12,tr("MetodoPago"),"","C",fill)
  pdf.SetXY(209.24, 298)
  pdf.MultiCell(130,12,tr("FormaPago"),"","C",fill)
  pdf.SetXY(339.24, 298)
  pdf.MultiCell(160,12,tr("TipoDeComprobante"),"","C",fill)
  pdf.Line(20,298,20,335)
  pdf.Line(120,298,120,335)
  pdf.Line(209.24,298,209.24,335)
  pdf.Line(339.24,298,339.24,335)
  pdf.Line(20+479.24,298,20+479.24,335)
  pdf.Line(20,335,20+479.24,335)
  pdf.SetTextColor(5, 121, 134)
  pdf.SetXY(20, 311)
  pdf.MultiCell(100,12,tr(v.LugarExpedicion),"","C",false)
  pdf.SetXY(120, 311)
  pdf.MultiCell(89.24,12,tr("PUE"),"","C",false)
  pdf.SetXY(209.24, 311)
  MetodoDePagoString := ""
  MetodoDePago := v.MetodoDePago33
    if Compare(MetodoDePago,"01")==0 {
      MetodoDePagoString = "Efectivo"
    }
    if Compare(MetodoDePago,"02")==0 {
      MetodoDePagoString = "Cheque"
    }
    if Compare(MetodoDePago,"03")==0 {
      MetodoDePagoString = "Transferencia"
    }
    if Compare(MetodoDePago,"04")==0 {
      MetodoDePagoString = "Tarjeta de credito"
    }
    if Compare(MetodoDePago,"05")==0 {
      MetodoDePagoString = "Monedero electronico"
    }
    if Compare(MetodoDePago,"06")==0 {
      MetodoDePagoString = "Dinero electronico"
    }
    if Compare(MetodoDePago,"08")==0 {
      MetodoDePagoString = "Vales de despensa"
    }
    if Compare(MetodoDePago,"28")==0 {
      MetodoDePagoString = "Tarjeta de debito"
    }
    if Compare(MetodoDePago,"29")==0 {
      MetodoDePagoString = "Tarjeta de servicio"
    }
    if Compare(MetodoDePago,"99")==0 {
      MetodoDePagoString = "Otros"
    }
  pdf.MultiCell(130,12,tr(v.MetodoDePago33+"-"+MetodoDePagoString),"","C",false)
  pdf.SetXY(339.24, 311)
  pdf.MultiCell(160,12,tr(v.TipoDeComprobante33),"","C",false)
  pdf.SetTextColor(0, 0, 0)
  pdf.SetXY(20, 340)
  pdf.MultiCell(70,12,tr("Serie"),"","C",fill)
  pdf.SetXY(90, 340)
  pdf.MultiCell(70,12,tr("Folio"),"","C",fill)
  pdf.SetXY(160, 340)
  pdf.MultiCell(70,12,tr("Moneda"),"","C",fill)
  pdf.SetXY(230, 340)
  pdf.MultiCell(269.24,12,tr("Importe con letra"),"","C",fill)
  pdf.Line(20,340,20,377)
  pdf.Line(90,340,90,377)
  pdf.Line(160,340,160,377)
  pdf.Line(230,340,230,377)
  pdf.Line(20+479.24,340,20+479.24,377)
  pdf.Line(20,377,20+479.24,377)
  pdf.SetTextColor(5, 121, 134)
  pdf.SetXY(20, 353)
  pdf.MultiCell(70,12,tr("S"),"","C",false)
  pdf.SetXY(90, 353)
  pdf.MultiCell(70,12,tr(v.Folio),"","C",false)
  pdf.SetXY(160.24, 353)
  pdf.MultiCell(70,12,tr(v.Moneda),"","C",false)
  pdf.SetXY(230.24, 353)
  strImporte := FloatToString(v.Total33)
  puntos := strings.Split(strImporte, ".")
  centavos := puntos[1]
  str := numerosAPalabras.Convert(v.Total33)+" "+centavos+"/100 M.N."
  pdf.MultiCell(269.24,12,tr(str),"","C",false)
  key := barcode.RegisterQR(pdf, "?re="+v.Emisors[0].RFCEmisor33+"&rr="+v.Receptors[0].RFCReceptor33+"&id="+v.Complementos[0].TimbreFiscalDigitals[0].UUID, qr.H, qr.Unicode)
  barcode.Barcode(pdf, key, 15, 383, 120, 120, false)
  ex := 423.0
  pdf.Line(150,ex,499.24,ex)
  pdf.SetXY(150, ex)
  pdf.MultiCell(349.24,12,tr("Subtotal:"),"","L",false)
  pdf.SetXY(150, ex)
  pdf.MultiCell(349.24,12,tr(ac.FormatMoney(v.Total33)),"","R",false)
  pdf.Line(150,ex,150,ex+36)
  pdf.Line(499.24,ex,499.24,ex+36)
  ex+=12
  pdf.SetXY(150, ex)
  pdf.MultiCell(349.24,12,tr("IVA:"),"","L",false)
  pdf.SetXY(150, ex)
  pdf.MultiCell(349.24,12,tr("$ 0.00"),"","R",false)
  pdf.Line(150,ex,499.24,ex)
  ex+=12
  pdf.SetXY(150, ex)
  pdf.MultiCell(349.24,12,tr("Total:"),"","L",false)
  pdf.SetXY(150, ex)
  pdf.MultiCell(349.24,12,tr(ac.FormatMoney(v.Total33)),"","R",false)
  pdf.Line(150,ex,499.24,ex)
  ex+=12
  pdf.Line(150,ex,499.24,ex)
  pdf.SetTextColor(0, 0, 0)
  pdf.SetFont("Arial", "", 8)
  ex = 510
  pdf.SetXY(20, ex)
  pdf.MultiCell(479.24,12,tr("Sello Digital del CFDI: "+v.Complementos[0].TimbreFiscalDigitals[0].SelloCFD33),"","L",false)
  ex+=64
  pdf.SetXY(20, ex) 
  pdf.MultiCell(479.24,12,tr("Sello del SAT: "+v.Complementos[0].TimbreFiscalDigitals[0].SelloSAT33),"","L",false)
  ex+=64
  pdf.SetXY(20, ex)
  pdf.MultiCell(479.24,12,tr("No de serie del Certificado del SAT: "+v.Complementos[0].TimbreFiscalDigitals[0].NoCertificadoSAT),"","L",false)
  ex+=14
  pdf.SetXY(20, ex)
  pdf.MultiCell(479.24,12,tr("Fecha y hora de certificación: "+v.Complementos[0].TimbreFiscalDigitals[0].FechaTimbrado),"","L",false)
  ex+=14
  pdf.SetXY(20, ex)
  pdf.MultiCell(479.24,12,tr("Rfc del proveedor del certificado: "+v.Complementos[0].TimbreFiscalDigitals[0].RfcProvCertif),"","L",false)
  cadenaOriginalSAT := "||1.1|"+v.Complementos[0].TimbreFiscalDigitals[0].UUID+"|"+v.Complementos[0].TimbreFiscalDigitals[0].FechaTimbrado+"|"+v.Sello+"|"+v.Complementos[0].TimbreFiscalDigitals[0].NoCertificadoSAT+"||"
  ex+=14
  pdf.SetXY(20, ex)
  pdf.MultiCell(479.24,12,tr("Cadena original del SAT: "+cadenaOriginalSAT),"","L",false)
  ex+=82
  pdf.SetXY(20, ex)
  pdf.MultiCell(479.24,12,tr("Este documento es una representación impresa de un CFDI                          Versión 3.3"),"","L",false)
  var b bytes.Buffer
  w := bufio.NewWriter(&b)
  pdf.Output(w)
  pdf.Close()
  w.Flush()
  c.Ctx.Output.ContentType("application/pdf")
  c.Ctx.Output.Body(b.Bytes())
}
/*
func (c *GenerarPDFconXMLController) Get() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    files, _ := ioutil.ReadDir("static/bancos/xml")
    cuantosRegistros := 0
      cuantosErrores := 0
      STATUS := "1"
      archivosProcesados := 0
      for _, f := range files {
          if strings.Contains(f.Name(), ".xml") {
            content, err := ioutil.ReadFile("static/bancos/xml/"+f.Name())
        if err != nil {
        }
        xmlString := string(content)
          v := new(CFDI)
          err = xml.Unmarshal([]byte(xmlString), v)
          if err != nil {
              fmt.Printf("error: %v", err)
              return
          }
        pdf := gofpdf.New("L", "mm", "A4", "")
        tr := pdf.UnicodeTranslatorFromDescriptor("")
          pdf.SetHeaderFunc(func() {
          pdf.Image("logo.png", 10, 3, 30, 0, false, "", 0, "")
          pdf.SetFont("Arial", "", 18)
          pdf.SetXY(40, 10)
          pdf.Cell(0,0,tr(bunitD))
          //pdf.CellFormat(0,0,tr(bunitD),"",1,"C",false,0,"")  
          pdf.SetFont("Arial", "B", 12)     
          periodoActual := strconv.Itoa(PERIOD)   
          pdf.SetXY(40, 22)
          pdf.Cell(0,0,tr("Periodo contable: "+periodoActual))
          pdf.SetXY(40, 30)
          pdf.Cell(0, 0, tr("Tipo de diario: "+JRNAL_TYPE))
          pdf.SetXY(105, 22)
          pdf.Cell(0, 0, tr("Referencia de Transacción: "+TREFERENCE_GLOBAL))
          pdf.SetXY(105, 30)
          pdf.Cell(0, 0, "Creado por: "+JRNAL_SRCE)
          pdf.SetFont("Arial", "B", 16)
          pdf.SetXY(215, 22)
          pdf.Cell(0, 0, tr("Diario N°: "+diario))
          pdf.Ln(20)
        })
        pdf.SetFooterFunc(func() {
          pdf.SetY(-15)
          pdf.SetFont("Arial", "I", 8)
          pdf.CellFormat(0, 10, fmt.Sprintf("Page %d", pdf.PageNo()),
            "", 0, "C", false, 0, "")
        })
        pdf.SetFont("Arial", "", 8)
          pdf.AddPage()


          tieneAddenda := len(v.Addendas)
        }
      }

    
//CargarDeCarpetaXMLBancosController
    
    queryX := "SELECT c.TREFERENCE, c.ACCNT_CODE, SUBSTRING( a.DESCR,0,25) as DESCR , c.ANAL_T1, c.ANAL_T2, c.ANAL_T3, c.ANAL_T4, c.ANAL_T5, c.ANAL_T6, c.ANAL_T9, c.ANAL_T8, SUBSTRING( c.DESCRIPTN,0,35) as DESCRIPTN, c.AMOUNT, c.CONV_CODE, c.ANAL_T7, c.D_C, c.ALLOCATION, c.ANAL_T0, c.JRNAL_LINE FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] c INNER JOIN [SunSystemsData].[dbo].["+BUNIT.(string)+"_ACNT] a on a.ACNT_CODE = c.ACCNT_CODE WHERE c.JRNAL_NO = "+diario+" order by c.JRNAL_LINE asc"
      rows, _ := conn.Query(queryX)
      var D_C string
    var DESCRIPTN string
    var descripcionCuenta string
    var tfww string
    var fondo string
    var funcion string
    var moneda string
    var restriccion string
    var orgId string
    var who string
    var detalle string
    var proyecto string
    var flag string 
    var anal_t0 string  
    var cuenta string
    var allocation string
    var treference string 
    var linea int
    var amount decimal.Dec
    dGlobales := 0.0
    cGlobales := 0.0
    dRef := 0.0
    cRef := 0.0
    y := 50.0
    x := 0.0
    tope := 180.0
    ac := accounting.Accounting{Symbol: "$", Precision: 2}
    TREFERENCE_ANTERIOR := "-"
    for rows.Next()  {
      rows.Scan(&treference, &cuenta, &descripcionCuenta, &tfww, &fondo, &funcion, &restriccion, &orgId, &who, &detalle, &proyecto, &DESCRIPTN, &amount, &moneda, &flag, &D_C, &allocation, &anal_t0, &linea)
      treference = strings.TrimSpace(treference)
      anal_t0 = strings.TrimSpace(anal_t0)
      cuenta = strings.TrimSpace(cuenta)
      descripcionCuenta = strings.TrimSpace(descripcionCuenta)
      descripcionCuenta = strings.Replace(descripcionCuenta, "á", "a", -1)
      descripcionCuenta = strings.Replace(descripcionCuenta, "é", "e", -1)
      descripcionCuenta = strings.Replace(descripcionCuenta, "í", "i", -1)
      descripcionCuenta = strings.Replace(descripcionCuenta, "ó", "o", -1)
      descripcionCuenta = strings.Replace(descripcionCuenta, "ú", "u", -1)
      descripcionCuenta = strings.Replace(descripcionCuenta, "ñ", "n", -1)
      tfww = strings.TrimSpace(tfww)
      fondo = strings.TrimSpace(fondo)
      funcion = strings.TrimSpace(funcion)
      restriccion = strings.TrimSpace(restriccion)
      orgId = strings.TrimSpace(orgId)
      who = strings.TrimSpace(who)
      detalle = strings.TrimSpace(detalle)
      proyecto = strings.TrimSpace(proyecto)
      DESCRIPTN = strings.TrimSpace(DESCRIPTN)
      DESCRIPTN = strings.Replace(DESCRIPTN, "á", "a", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "é", "e", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "í", "i", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "ó", "o", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "ú", "u", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "ñ", "n", -1)
      moneda = strings.TrimSpace(moneda)
      flag = strings.TrimSpace(flag)    
      if Compare(TREFERENCE_ANTERIOR,treference) == 0 {

      } else {
        if Compare(TREFERENCE_ANTERIOR,"-")==0 {//primera vez, no hacer nada
        } else {
          pdf.SetFont("Arial", "", 8)
          pdf.SetXY(170, y)
          pdf.Cell(0, 0,  "Total por referencia:")
          pdf.SetFont("Arial", "", 10)
          pdf.SetXY(240, y)
          pdf.Cell(0, 0,  ac.FormatMoney(math.Abs(dRef)))
          pdf.SetXY(260, y)
          pdf.Cell(0, 0, ac.FormatMoney(math.Abs(cRef)))
          y = y + 5
          dRef = 0
          cRef = 0
        }
        if y < (tope-20.0) {
        } else {
          y = 50
          pdf.AddPage()
        }
        pdf.SetFont("Arial", "B", 12)
        pdf.SetXY(10, y)
        pdf.Cell(0, 0, anal_t0)
        y = y + 6 //6 x q 12 es la font! ¿?
        pdf.ClipPolygon([]gofpdf.PointType{{10, y -2.5}, {280, y-2.5},{280, y-2.5 }}, true)
        pdf.ClipEnd()
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(10, y)
        pdf.Cell(0, 0, "Ln")
        pdf.SetXY(22, y)
        pdf.Cell(0, 0, "Cuenta")
        pdf.SetXY(50, y)
        pdf.Cell(0, 0, "Nombre de la cuenta")
        pdf.SetXY(95, y)
        pdf.Cell(0, 0, tr("Descripción"))
        pdf.SetXY(170, y)
        pdf.Cell(0, 0, "Dimensiones")
        pdf.SetXY(240, y)
        pdf.Cell(0, 0, tr("Débito"))
        pdf.SetXY(260, y)
        pdf.Cell(0, 0, tr("Crédito")) 
        y = y + 5//5 x la font??
        pdf.ClipPolygon([]gofpdf.PointType{{10, y -2.5}, {280, y-2.5},{280, y-2.5 }}, true)
        pdf.ClipEnd()
        TREFERENCE_ANTERIOR = treference
      }
      amountPrima := math.Abs(amount.Float64())
      if Compare(D_C,"C")==0 {
        amountPrima = amountPrima*-1.0
        cGlobales += amountPrima
        cRef += amountPrima
      } else {
        dGlobales += amountPrima;
        dRef +=amountPrima;
      }
      lineaActual := strconv.Itoa(linea)
      pdf.SetXY(10, y)
      pdf.Cell(0, 0, lineaActual)
      pdf.SetXY(22, y)
      pdf.Cell(0, 0, tr(cuenta))
      pdf.SetXY(50, y)
      pdf.Cell(0, 0, tr(descripcionCuenta))
      pdf.SetXY(95, y)
      pdf.Cell(0, 0, tr(DESCRIPTN))
      pdf.SetXY(170, y)
      pdf.SetFont("Arial", "", 7)
      pdf.Cell(0, 0, tr(tfww)+"-"+tr(fondo)+"-"+tr(funcion)+"-"+tr(restriccion)+"-"+tr(orgId)+"-"+tr(who)+"-"+tr(flag)+"-"+tr(proyecto)+"-"+tr(detalle))
      pdf.SetFont("Arial", "", 10)
      if Compare(D_C,"C")==0 {
        x = 260
      } else {
        x = 240
      }
      pdf.SetXY(x, y)
      pdf.Cell(0, 0, ac.FormatMoney(math.Abs(amountPrima)))     
      if y < tope{
        y = y + 5
      } else {
        y = 50
        pdf.AddPage()
      }
    }
    pdf.SetFont("Arial", "", 8)
    pdf.SetXY(170, y)
    pdf.Cell(0, 0,  "Total por referencia:")
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(240, y)
    pdf.Cell(0, 0,  ac.FormatMoney(math.Abs(dRef)))
    pdf.SetXY(260, y)
    pdf.Cell(0, 0, ac.FormatMoney(math.Abs(cRef)))
    y = y + 5
    pdf.ClipPolygon([]gofpdf.PointType{{10, y -2.5}, {280, y-2.5},{280, y-2.5 }}, true)
    pdf.ClipEnd()
    pdf.SetFont("Arial", "", 8)
    pdf.SetXY(170, y)
    pdf.Cell(0, 0,  "Total del diario:")
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(240, y)
    pdf.Cell(0, 0,  ac.FormatMoney(math.Abs(dGlobales)))
    pdf.SetXY(260, y)
    pdf.Cell(0, 0, ac.FormatMoney(math.Abs(cGlobales)))
    var b bytes.Buffer
      w := bufio.NewWriter(&b)
      pdf.Output(w)
      pdf.Close()
      w.Flush()
      c.Ctx.Output.ContentType("application/pdf")
      c.Ctx.Output.Body(b.Bytes())
  }
}
*/
func generaDiarioFunction (diario, BUNIT string, c *GenerarDiarioEnPDFController, libro string) {
/*  if libro == nil {
    libro = "A"
  }*/
  if libro  == "" {
    libro = "A"
  }
  connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
  DB := c.GetSession("DB")
  if DB == nil {
    DBS := ""
    if BUNIT == "MUR" {
      DBS = "SunSystemsData"
    } else {
      DBS = "SunSystemsData"
    }
    
    fmt.Println(DBS)
     c.SetSession("DB", DBS)
     c.Data["DB"] = DBS
     DB = c.GetSession("DB")
  }
  conn, err := sql.Open("mssql", connString2) 
  defer conn.Close()
  if err != nil {
    fmt.Println("Open connection failed:", err.Error())
  }
  queryDiario := "SELECT DESCR FROM ["+DB.(string)+"].[dbo].[DB_DEFN] WHERE DB_CODE = '"+BUNIT+"'"
  rowsDiario, _ := conn.Query(queryDiario)
  var bunitD string
  for rowsDiario.Next()  {
    rowsDiario.Scan(&bunitD)
  }
  var PERIOD int
  var JRNAL_SRCE string
  var TREFERENCE_GLOBAL string
  var ANAL_T0_GLOBAL string
  var VCHR_NUM string
  var JRNAL_TYPE string
  var ALLOCATION_C string
  var ALLOC_REF_C int
  var OTRO_DIARIO int
  var TRANS_DATETIME time.Time
  query := `SELECT TOP 1 ISNULL(ALLOC_REF,'') as ALLOC_REF, ISNULL(ALLOCATION,'') as ALLOCATION, ISNULL(VCHR_NUM,'') as  VCHR_NUM, PERIOD, JRNAL_SRCE, TREFERENCE, ANAL_T0, JRNAL_TYPE, TRANS_DATETIME FROM [`+DB.(string)+`].[dbo].[`+BUNIT+`_`+libro+`_SALFLDG] WHERE JRNAL_NO = `+diario+` order by JRNAL_LINE asc`
  rowsAntes, err1 := conn.Query(query)
  if err1 != nil {
    fmt.Println(query)
    fmt.Println("Perdón! :", err1.Error())
  }
  if rowsAntes.Next()  {
    rowsAntes.Scan(&ALLOC_REF_C, &ALLOCATION_C, &VCHR_NUM, &PERIOD, &JRNAL_SRCE, &TREFERENCE_GLOBAL, &ANAL_T0_GLOBAL, &JRNAL_TYPE, &TRANS_DATETIME)
    if ALLOCATION_C == "C" {
      query = `SELECT TOP 1 JRNAL_NO FROM [`+DB.(string)+`].[dbo].[`+BUNIT+`_`+libro+`_SALFLDG] WHERE ALLOC_REF = `+strconv.Itoa(ALLOC_REF_C)+` AND JRNAL_NO != `+diario+` order by JRNAL_NO asc`
      rowsAntes1, _ := conn.Query(query)
      if rowsAntes1.Next() {
        rowsAntes1.Scan(&OTRO_DIARIO)
      }
    }
  }
  mes := int(TRANS_DATETIME.Month())
  dia :=  TRANS_DATETIME.Day()
  fechaReal := ""
  if mes > 9 && dia > 9 {
    fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
  } else {
    if mes > 9 && dia < 10 {
      fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
    } else {
      if mes < 10 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
      }
    }
  }
  pdf := gofpdf.New("L", "mm", "A4", "")
  tr := pdf.UnicodeTranslatorFromDescriptor("")
  var periodoActual string
    pdf.SetHeaderFunc(func() {
      if ALLOCATION_C == "C" {
        pdf.SetFillColor(255, 0, 0)
        pdf.SetTextColor(255, 255, 255)
        pdf.SetXY(215, 5)
        pdf.CellFormat(0,10,tr("Poliza reversiada con la "+strconv.Itoa(OTRO_DIARIO)),"",1,"C",true,0,"/generarDiario?libro="+libro+"&diario="+strconv.Itoa(OTRO_DIARIO))
        pdf.SetFillColor(255, 255, 255)
        pdf.SetTextColor(0, 0, 0)
      }
    pdf.Image("logo.png", 10, 3, 30, 0, false, "", 0, "")
      pdf.SetFont("Arial", "", 18)
      pdf.SetXY(40, 10)
      pdf.Cell(0,0,tr(bunitD))
    //pdf.CellFormat(0,0,tr(bunitD),"",1,"C",false,0,"")  
    pdf.SetFont("Arial", "B", 12)     
    periodoActual = strconv.Itoa(PERIOD)    
    pdf.SetXY(40, 22)
    pdf.Cell(0,0,tr("Periodo contable: "+periodoActual))
    pdf.SetXY(40, 30)
    pdf.Cell(0, 0, tr("Tipo de diario: "+JRNAL_TYPE))
    pdf.SetXY(105, 22)
    pdf.Cell(0, 0, tr("Referencia de Transacción: "+TREFERENCE_GLOBAL))
    pdf.SetXY(105, 30)
    pdf.Cell(0, 0, "Creado por: "+JRNAL_SRCE)
    pdf.SetFont("Arial", "B", 16)
    pdf.SetXY(215, 22)
    pdf.Cell(0, 0, tr("Diario N°: "+diario))
    pdf.SetXY(215, 30)
    pdf.Cell(0, 0, tr("Fecha: "+fechaReal))

    pdf.Ln(20)
  })
  pdf.SetFooterFunc(func() {
    pdf.SetY(-15)
    pdf.SetFont("Arial", "I", 8)
    pdf.CellFormat(0, 10, fmt.Sprintf("Page %d", pdf.PageNo()),
      "", 0, "C", false, 0, "")
  })
  pdf.SetFont("Arial", "", 8)
    pdf.AddPage()
  queryX := "SELECT c.TREFERENCE, c.ACCNT_CODE, SUBSTRING( ISNULL(a.DESCR,''),0,25) as DESCR , c.ANAL_T1, c.ANAL_T2, c.ANAL_T3, c.ANAL_T4, c.ANAL_T5, c.ANAL_T6, c.ANAL_T9, c.ANAL_T8, SUBSTRING( ISNULL(c.DESCRIPTN,''),0,50) as DESCRIPTN, c.AMOUNT, c.CONV_CODE, c.ANAL_T7, c.D_C,  ISNULL(c.ALLOCATION,'') as ALLOCATION, c.ANAL_T0, c.JRNAL_LINE FROM ["+DB.(string)+"].[dbo].["+BUNIT+"_"+libro+"_SALFLDG] c INNER JOIN ["+DB.(string)+"].[dbo].["+BUNIT+"_ACNT] a on a.ACNT_CODE = c.ACCNT_CODE WHERE c.JRNAL_NO = "+diario+" order by c.JRNAL_LINE asc"
  queryY := "SELECT c.TREFERENCE, c.ACCNT_CODE, SUBSTRING( ISNULL(a.DESCR,''),0,25) as DESCR , c.ANAL_T1, c.ANAL_T2, c.ANAL_T3, c.ANAL_T4, c.ANAL_T5, c.ANAL_T6, c.ANAL_T9, c.ANAL_T8, SUBSTRING( ISNULL(c.DESCRIPTN,''),0,50) as DESCRIPTN, c.AMOUNT, c.CONV_CODE, c.ANAL_T7, c.D_C,  ISNULL(c.ALLOCATION,'') as ALLOCATION, c.ANAL_T0, c.JRNAL_LINE, ISNULL(c.AFTER_PSTG_ID,'') as AFTER_PSTG_ID FROM ["+DB.(string)+"].[dbo].["+BUNIT+"_"+libro+"_SALFLDG] c INNER JOIN ["+DB.(string)+"].[dbo].["+BUNIT+"_ACNT] a on a.ACNT_CODE = c.ACCNT_CODE WHERE c.JRNAL_NO = "+diario+" order by c.JRNAL_LINE asc"
    rows, _ := conn.Query(queryX)
    var D_C string
  var DESCRIPTN string
  var descripcionCuenta string
  var tfww string
  var fondo string
  var funcion string
  var moneda string
  var restriccion string
  var orgId string
  var who string
  var detalle string
  var proyecto string
  var flag string 
  var anal_t0 string  
  var cuenta string
  var allocation string
  var treference string 
  var linea int
  var amount decimal.Dec
  dGlobales := 0.0
  cGlobales := 0.0
  dRef := 0.0
  cRef := 0.0
  y := 50.0
  x := 0.0
  tope := 180.0
  ac := accounting.Accounting{Symbol: "$", Precision: 2}
  TREFERENCE_ANTERIOR := "-"
  guardaPrimeraLinea := ""
  guardaSegundaLinea := ""
  cantidadPrimeraLinea := 0.0
  primeraVez := true
  segundaVez := true
  for rows.Next()  {
    rows.Scan(&treference, &cuenta, &descripcionCuenta, &tfww, &fondo, &funcion, &restriccion, &orgId, &who, &detalle, &proyecto, &DESCRIPTN, &amount, &moneda, &flag, &D_C, &allocation, &anal_t0, &linea)
    treference = strings.TrimSpace(treference)
    anal_t0 = strings.TrimSpace(anal_t0)
    cuenta = strings.TrimSpace(cuenta)
    descripcionCuenta = strings.TrimSpace(descripcionCuenta)
    descripcionCuenta = strings.Replace(descripcionCuenta, "á", "a", -1)
    descripcionCuenta = strings.Replace(descripcionCuenta, "é", "e", -1)
    descripcionCuenta = strings.Replace(descripcionCuenta, "í", "i", -1)
    descripcionCuenta = strings.Replace(descripcionCuenta, "ó", "o", -1)
    descripcionCuenta = strings.Replace(descripcionCuenta, "ú", "u", -1)
    descripcionCuenta = strings.Replace(descripcionCuenta, "ñ", "n", -1)
    if len(descripcionCuenta) > 19 {
      descripcionCuenta = descripcionCuenta[0:19]
    }
    tfww = strings.TrimSpace(tfww)
    fondo = strings.TrimSpace(fondo)
    funcion = strings.TrimSpace(funcion)
    restriccion = strings.TrimSpace(restriccion)
    orgId = strings.TrimSpace(orgId)
    who = strings.TrimSpace(who)
    detalle = strings.TrimSpace(detalle)
    proyecto = strings.TrimSpace(proyecto)
    DESCRIPTN = strings.TrimSpace(DESCRIPTN)
    DESCRIPTN = strings.Replace(DESCRIPTN, "á", "a", -1)
    DESCRIPTN = strings.Replace(DESCRIPTN, "é", "e", -1)
    DESCRIPTN = strings.Replace(DESCRIPTN, "í", "i", -1)
    DESCRIPTN = strings.Replace(DESCRIPTN, "ó", "o", -1)
    DESCRIPTN = strings.Replace(DESCRIPTN, "ú", "u", -1)
    DESCRIPTN = strings.Replace(DESCRIPTN, "ñ", "n", -1)
    
    moneda = strings.TrimSpace(moneda)
    flag = strings.TrimSpace(flag)    
    if Compare(TREFERENCE_ANTERIOR,treference) == 0 {

    } else {
      if Compare(TREFERENCE_ANTERIOR,"-")==0 {//primera vez, no hacer nada
      } else {
        pdf.SetFont("Arial", "", 8)
        pdf.SetXY(170, y)
        pdf.Cell(0, 0,  "Total por referencia:")
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(240, y)
        pdf.Cell(0, 0,  ac.FormatMoney(math.Abs(dRef)))
        pdf.SetXY(260, y)
        pdf.Cell(0, 0, ac.FormatMoney(math.Abs(cRef)))
        y = y + 5
        dRef = 0
        cRef = 0
      }
      if y < (tope-20.0) {
      } else {
        y = 50
        pdf.AddPage()
      }
      pdf.SetFont("Arial", "B", 12)
      pdf.SetXY(10, y)
      pdf.Cell(0, 0, treference)//anal_t0
      y = y + 6 //6 x q 12 es la font! ¿?
      pdf.ClipPolygon([]gofpdf.PointType{{10, y -2.5}, {280, y-2.5},{280, y-2.5 }}, true)
      pdf.ClipEnd()
      pdf.SetFont("Arial", "", 10)
      pdf.SetXY(10, y)
      pdf.Cell(0, 0, "Ln")
      pdf.SetXY(22, y)
      pdf.Cell(0, 0, "Cuenta")
      pdf.SetXY(50, y)
      pdf.Cell(0, 0, "Nombre de la cuenta")
      pdf.SetXY(95, y)
      pdf.Cell(0, 0, tr("Descripción"))
      pdf.SetXY(170, y)
      pdf.Cell(0, 0, "Dimensiones")
      pdf.SetXY(240, y)
      pdf.Cell(0, 0, tr("Débito"))
      pdf.SetXY(260, y)
      pdf.Cell(0, 0, tr("Crédito")) 
      y = y + 5//5 x la font??
      pdf.ClipPolygon([]gofpdf.PointType{{10, y -2.5}, {280, y-2.5},{280, y-2.5 }}, true)
      pdf.ClipEnd()
      TREFERENCE_ANTERIOR = treference
    }
    amountPrima := math.Abs(amount.Float64())
    if primeraVez {
      primeraVez = false
      guardaPrimeraLinea = DESCRIPTN
      cantidadPrimeraLinea = amountPrima
    } else {
      if segundaVez {
        segundaVez = false
        guardaSegundaLinea = DESCRIPTN
      }
    }
    if len(DESCRIPTN) > 35 {
      DESCRIPTN =DESCRIPTN [0:35] 
    }
    if Compare(D_C,"C")==0 {
      amountPrima = amountPrima*-1.0
      cGlobales += amountPrima
      cRef += amountPrima
    } else {
      dGlobales += amountPrima;
      dRef +=amountPrima;
    }
    lineaActual := strconv.Itoa(linea)
    pdf.SetXY(10, y)
    pdf.Cell(0, 0, lineaActual)
    pdf.SetXY(22, y)
    pdf.CellFormat(0,0,tr(cuenta),"",1,"L",false,0,"/generarEstadoDeCuenta?cuenta="+cuenta+"&delPeriodo="+periodoActual+"&alPeriodo="+periodoActual+"&busca=1")
    //pdf.Cell(0, 0, tr(cuenta))

    pdf.SetXY(50, y)
    pdf.Cell(0, 0, tr(descripcionCuenta))
    pdf.SetXY(95, y)
    pdf.Cell(0, 0, tr(DESCRIPTN))
    pdf.SetXY(170, y)
    pdf.SetFont("Arial", "", 7)
    pdf.Cell(0, 0, tr(anal_t0)+"-"+tr(tfww)+"-"+tr(fondo)+"-"+tr(funcion)+"-"+tr(restriccion)+"-"+tr(orgId)+"-"+tr(who)+"-"+tr(flag)+"-"+tr(proyecto)+"-"+tr(detalle))
    pdf.SetFont("Arial", "", 10)
    if Compare(D_C,"C")==0 {
      x = 260
    } else {
      x = 240
    }
    pdf.SetXY(x, y)
    pdf.Cell(0, 0, ac.FormatMoney(math.Abs(amountPrima)))     
    if y < tope{
      y = y + 5
    } else {
      y = 50
      pdf.AddPage()
    }
  }
  pdf.SetFont("Arial", "", 8)
  pdf.SetXY(170, y)
  pdf.Cell(0, 0,  "Total por referencia:")
  pdf.SetFont("Arial", "", 10)
  pdf.SetXY(240, y)
  pdf.Cell(0, 0,  ac.FormatMoney(math.Abs(dRef)))
  pdf.SetXY(260, y)
  pdf.Cell(0, 0, ac.FormatMoney(math.Abs(cRef)))
  y = y + 5
  pdf.ClipPolygon([]gofpdf.PointType{{10, y -2.5}, {280, y-2.5},{280, y-2.5 }}, true)
  pdf.ClipEnd()
  pdf.SetFont("Arial", "", 8)
  pdf.SetXY(170, y)
  pdf.Cell(0, 0,  "Total del diario:")
  pdf.SetFont("Arial", "", 10)
  pdf.SetXY(240, y)
  pdf.Cell(0, 0,  ac.FormatMoney(math.Abs(dGlobales)))
  pdf.SetXY(260, y)
  pdf.Cell(0, 0, ac.FormatMoney(math.Abs(cGlobales)))
  rows, _ = conn.Query(queryY)
  var AFTER_PSTG_ID string
  for rows.Next()  {
    rows.Scan(&treference, &cuenta, &descripcionCuenta, &tfww, &fondo, &funcion, &restriccion, &orgId, &who, &detalle, &proyecto, &DESCRIPTN, &amount, &moneda, &flag, &D_C, &allocation, &anal_t0, &linea, &AFTER_PSTG_ID)
    flag = strings.TrimSpace(flag)
    if flag == "Y" {
      treference = strings.TrimSpace(treference)
      cuenta = strings.TrimSpace(cuenta)
      moneda = strings.TrimSpace(moneda)
      AFTER_PSTG_ID = strings.TrimSpace(AFTER_PSTG_ID)
      if len(moneda) > 3 {
        moneda = moneda[0:3]
      }
      descripcionCuenta = strings.TrimSpace(descripcionCuenta)
      DESCRIPTN = strings.TrimSpace(DESCRIPTN)
      DESCRIPTN = strings.Replace(DESCRIPTN, "á", "a", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "é", "e", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "í", "i", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "ó", "o", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "ú", "u", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "ñ", "n", -1)
      
      pdf.SetFooterFunc(func() {
      })
      pdf.SetHeaderFunc(func() {
      })
      queryDireccion := "SELECT ADDR_LINE_1,ADDR_LINE_2,ADDR_LINE_3,ADDR_LINE_4,ADDR_LINE_5 FROM ["+DB.(string)+"].[dbo].["+BUNIT+"_ADDR] WHERE ADDR_CODE = '0000000000'"
      rowsDireccion, _ := conn.Query(queryDireccion)
      var addr1 string
      var addr2 string
      var addr3 string
      var addr4 string
      var addr5 string
      for rowsDireccion.Next()  {
        rowsDireccion.Scan(&addr1,&addr2,&addr3,&addr4,&addr5)
      }
      pdf.AddPageFormat("P",gofpdf.SizeType{ 595.28/2.83464566929, 841.89/2.83464566929})
      pdf.Image("logo.png", 10, 3, 20, 0, false, "", 0, "")
      pdf.SetFont("Arial", "B", 16)
      pdf.SetXY(0, 8)
      pdf.CellFormat(0,0,tr(addr1),"",1,"C",false,0,"")
      pdf.SetFont("Arial", "", 10)
      pdf.SetXY(0, 14)
      pdf.CellFormat(0,0,tr(addr2),"",1,"C",false,0,"")
      pdf.SetXY(0, 18)
      pdf.CellFormat(0,0,tr(addr3),"",1,"C",false,0,"")
      pdf.SetXY(0, 22)
      pdf.CellFormat(0,0,tr(addr4),"",1,"C",false,0,"")
      pdf.SetXY(0, 26)
      pdf.CellFormat(0,0,tr(addr5),"",1,"C",false,0,"")
      palabra := "Cargo "
      if D_C == "C" {
        palabra = "Crédito "
      }
      pdf.SetFont("Arial", "B", 14)
      pdf.SetXY(0, 36)
      pdf.CellFormat(0,0,tr(palabra+"Memo"),"",1,"C",false,0,"")
      pdf.SetFont("Arial", "", 10)
      pdf.SetXY(170, 36)
      pdf.CellFormat(15,6,tr("Nº de diario"),"",1,"C",false,0,"")
      pdf.SetXY(170, 42)
      pdf.CellFormat(15,6,tr(diario+"-"+strconv.Itoa(linea)),"",1,"C",false,0,"")
      pdf.SetFont("Arial", "B", 12)

      pdf.SetXY(30, 46)
      pdf.CellFormat(25,6,tr(cuenta),"",1,"C",false,0,"")
      pdf.SetXY(15, 51)
      pdf.CellFormat(45,6,tr(descripcionCuenta),"",1,"C",false,0,"")

      pdf.SetFont("Arial", "B", 10)
      pdf.SetXY(130, 56)
      pdf.CellFormat(30,6,tr("Tipo de diario:"),"",1,"R",false,0,"")
      pdf.SetXY(130, 68)
      pdf.CellFormat(30,6,tr("Segunda referencia:"),"",1,"R",false,0,"")
      pdf.SetXY(130, 74)
      pdf.CellFormat(30,6,tr("Referencia de transacción:"),"",1,"R",false,0,"")
      pdf.SetXY(130, 80)
      pdf.CellFormat(30,6,tr("Fecha de:"),"",1,"R",false,0,"")
      pdf.SetXY(130, 86)
      pdf.CellFormat(30,6,tr("Origen de diario:"),"",1,"R",false,0,"")
      pdf.SetFont("Arial", "", 10)
      pdf.SetXY(160, 56)
      pdf.CellFormat(30,6,tr(JRNAL_TYPE),"",1,"L",false,0,"")
      pdf.SetXY(160, 68)
      pdf.CellFormat(30,6,tr(VCHR_NUM),"",1,"L",false,0,"")
      pdf.SetXY(160, 74)
      pdf.CellFormat(30,6,tr(treference),"",1,"L",false,0,"")
      pdf.SetXY(160, 80)
      pdf.CellFormat(30,6,tr(fechaReal),"",1,"L",false,0,"")
      pdf.SetXY(160, 86)
      pdf.CellFormat(30,6,tr(JRNAL_SRCE),"",1,"L",false,0,"")
      
      pdf.SetFont("Arial", "B", 10)
      pdf.SetXY(20, 94)
      pdf.CellFormat(30,6,tr("Periodo contable:"),"",1,"R",false,0,"")
      pdf.SetXY(50, 94)
      pdf.SetFont("Arial", "", 10)
      pdf.CellFormat(30,6,tr(periodoActual),"",1,"L",false,0,"")

      pdf.SetFont("Arial", "B", 10)
      pdf.SetXY(170, 94)
      pdf.CellFormat(30,6,tr(palabra+"Importe"),"",1,"C",false,0,"")
      pdf.SetFont("Arial", "B", 14)
      pdf.SetXY(10, 100)
      pdf.CellFormat(130,12,tr(DESCRIPTN),"",1,"C",false,0,"")
      pdf.SetFont("Arial", "", 14)
      pdf.SetXY(160, 100)
      amountPrima := math.Abs(amount.Float64())
      pdf.CellFormat(40,12,tr(ac.FormatMoney(math.Abs(amountPrima))+" "+moneda ),"",1,"C",false,0,"")
      pdf.SetDrawColor(0, 0, 0)
      pdf.SetLineWidth(.3)
      pdf.Line(10,94,200,94)
      pdf.Line(10,114,200,114)
      bar := "_"+BUNIT+"_A00"+diario+"MO000"+strconv.Itoa(linea)+D_C+cuenta
      pdf.SetXY(10, 145)
      pdf.SetFont("Arial", "", 10)
      pdf.CellFormat(0,0,tr("Barcode: "+bar),"",1,"C",false,0,"")
      key := barcode.RegisterCode128(pdf, bar)
      barcode.Barcode(pdf, key, 25, 120, 165,20, false)

      pdf.SetXY(10, 270)
      pdf.CellFormat(10,6,tr(fechaReal),"",1,"C",false,0,"")

      pdf.SetXY(60, 270)
      pdf.CellFormat(20,6,tr("FTJL1_S2Memo26"),"",1,"C",false,0,"")

      pdf.SetXY(100, 270)
      pdf.CellFormat(10,6,tr(BUNIT),"",1,"C",false,0,"")

      pdf.SetXY(140, 270)
      pdf.CellFormat(30,6,tr("Revisor: "+AFTER_PSTG_ID),"",1,"C",false,0,"")
      pdf.Line(10,269,200,269)
    }
  }
  cuantos := len(JRNAL_TYPE)
  tope = 260
  if cuantos >= 2 {
    dos := JRNAL_TYPE[0:2]
    //recibos
    if dos == "CR" {
      //pdf.SetBottomMargin(0.0)
      pdf.SetFooterFunc(func() {
      })
      pdf.SetHeaderFunc(func() {
      })
      empiezo := 82.0
      queryDireccion := "SELECT ADDR_LINE_1,ADDR_LINE_2,ADDR_LINE_3,ADDR_LINE_4,ADDR_LINE_5 FROM ["+DB.(string)+"].[dbo].["+BUNIT+"_ADDR] WHERE ADDR_CODE = '0000000000'"

      rowsDireccion, _ := conn.Query(queryDireccion)
      var addr1 string
      var addr2 string
      var addr3 string
      var addr4 string
      var addr5 string
      for rowsDireccion.Next()  {
        rowsDireccion.Scan(&addr1,&addr2,&addr3,&addr4,&addr5)
      }
      pdf.AddPageFormat("P",gofpdf.SizeType{ 595.28/2.83464566929, 841.89/2.83464566929})
      pdf.Image("logo.png", 10, 3, 20, 0, false, "", 0, "")
      pdf.SetFont("Arial", "B", 16)
      pdf.SetXY(0, 8)
      pdf.CellFormat(0,0,tr(addr1),"",1,"C",false,0,"")
      pdf.SetFont("Arial", "", 10)
      pdf.SetXY(0, 14)
      pdf.CellFormat(0,0,tr(addr2),"",1,"C",false,0,"")
      pdf.SetXY(0, 18)
      pdf.CellFormat(0,0,tr(addr3),"",1,"C",false,0,"")
      pdf.SetXY(0, 22)
      pdf.CellFormat(0,0,tr(addr4),"",1,"C",false,0,"")
      pdf.SetXY(0, 26)
      pdf.CellFormat(0,0,tr(addr5),"",1,"C",false,0,"")
      pdf.SetFillColor(0, 0, 0)
      pdf.SetTextColor(255, 255, 255)
      pdf.SetFont("Arial", "B", 10)
      pdf.SetXY(160, 14)
      pdf.CellFormat(0,6,tr("Fecha:"),"",1,"C",true,0,"")
      pdf.SetXY(160, 14+empiezo)
      pdf.CellFormat(0,6,tr("Fecha:"),"",1,"C",true,0,"")
      pdf.SetFont("Arial", "B", 8)
      pdf.SetXY(160, 25)
      pdf.CellFormat(0,6,tr("Referencia de recepción"),"",1,"C",true,0,"")
      pdf.SetXY(160, 36)
      pdf.CellFormat(0,6,tr("Referencia de transacción"),"",1,"C",true,0,"")
      pdf.SetXY(160, 32+empiezo)
      pdf.CellFormat(0,6,tr("Referencia de recepción"),"",1,"C",true,0,"")
      pdf.SetXY(160, 50+empiezo)
      pdf.CellFormat(0,6,tr("Referencia de transacción"),"",1,"C",true,0,"")
      
      

      pdf.SetTextColor(0, 0, 0)
      pdf.SetFillColor(255, 255, 255)
      pdf.SetXY(160.5, 19)
      pdf.CellFormat(39,6,tr(fechaReal),"1",1,"C",false,0,"")
      pdf.SetXY(160.5, 30)
      pdf.CellFormat(39,6,tr(VCHR_NUM),"1",1,"C",false,0,"")
      pdf.SetXY(160.5, 41)
      pdf.CellFormat(39,6,tr(TREFERENCE_GLOBAL),"1",1,"C",false,0,"")
      pdf.SetXY(160.5, 19+empiezo)
      pdf.CellFormat(39,6,tr(fechaReal),"1",1,"C",false,0,"")
      pdf.SetXY(160.5, 37+empiezo)
      pdf.CellFormat(39,6,tr(VCHR_NUM),"1",1,"C",false,0,"")
      pdf.SetXY(160.5, 55+empiezo)
      pdf.CellFormat(39,6,tr(TREFERENCE_GLOBAL),"1",1,"C",false,0,"")


      pdf.SetTextColor(222, 222, 222)
      pdf.SetFont("Arial", "B", 18)
      
      pdf.SetXY(0, 31)
      pdf.CellFormat(0,0,tr("RECIBO OFICIAL"),"",1,"C",false,0,"")
      pdf.SetXY(0, 31+empiezo)
      pdf.CellFormat(0,0,tr("RECIBO OFICIAL"),"",1,"C",false,0,"")



      pdf.SetTextColor(0, 0, 0)
      
      
      pdf.SetFont("Arial", "", 10)
      pdf.SetXY(15, 35)
      pdf.CellFormat(39,6,tr("Valor recibido de:"),"",1,"L",false,0,"")
      pdf.SetXY(15, 40)
      pdf.CellFormat(39,6,tr("Cantidad:"),"",1,"L",false,0,"")

      pdf.SetXY(15, 35+empiezo)
      pdf.CellFormat(39,6,tr("Valor recibido de:"),"",1,"L",false,0,"")
      pdf.SetXY(15, 40+empiezo)
      pdf.CellFormat(39,6,tr("Cantidad:"),"",1,"L",false,0,"")
      

      pdf.SetXY(50, 35)
      pdf.CellFormat(59,6,tr(guardaPrimeraLinea),"",1,"L",false,0,"")
      pdf.SetXY(50, 35+empiezo)
      pdf.CellFormat(59,6,tr(guardaPrimeraLinea),"",1,"L",false,0,"")
      
      pdf.SetFillColor(255, 222, 0)
      strImporte := FloatToString(cantidadPrimeraLinea)
      puntos := strings.Split(strImporte, ".")
      centavos := puntos[1]
      str := ""+numerosAPalabras.Convert(cantidadPrimeraLinea)+" "+centavos+"/100 M.N."
      //pdf.CellFormat(110,12,tr(str),"",1,"C",true,0,"")
      pdf.SetXY(40, 40)
      pdf.MultiCell( 110,12,tr(str),"","C",true)
      pdf.SetXY(40, 40+empiezo)
      pdf.MultiCell( 110,12,tr(str),"","C",true)
      
      //pdf.CellFormat(30,6,tr(ac.FormatMoney(math.Abs(cantidadPrimeraLinea)) ),"",1,"C",true,0,"")
      pdf.SetFillColor(255, 255, 255)

      pdf.Image("gracias.jpg", 15, 60, 40, 10, false, "", 0, "")
      pdf.SetXY(70, 40)
      //pdf.CellFormat(139,6,tr(str ),"",1,"L",false,0,"")
      pdf.SetXY(40, 45)
      //pdf.CellFormat(39,6,tr(guardaSegundaLinea),"",1,"L",false,0,"")
      pdf.SetDrawColor(0, 0, 0)
      pdf.SetLineWidth(.3)
      pdf.SetXY(160, 75)
      pdf.CellFormat(40,6,tr("Recibido por: "+JRNAL_SRCE),"",1,"C",false,0,"")

      pdf.Line(160,75,200,75)
      pdf.SetFont("Arial", "", 8)
      
      pdf.SetXY(75, 60)
      pdf.CellFormat(60,5,tr("Valor recibido"),"1",1,"C",false,0,"")
      pdf.SetXY(75, 60+empiezo)
      pdf.CellFormat(60,5,tr("Valor recibido"),"1",1,"C",false,0,"")
      
      
      pdf.SetFont("Arial", "B", 10)
      pdf.SetXY(75, 65)
      pdf.CellFormat(60,6,tr("****"+ac.FormatMoney(math.Abs(cantidadPrimeraLinea))+" MXN" ),"1",1,"C",false,0,"")
      pdf.SetXY(75, 65+empiezo)
      pdf.CellFormat(60,6,tr("****"+ac.FormatMoney(math.Abs(cantidadPrimeraLinea))+" MXN" ),"1",1,"C",false,0,"")
      
      pdf.Line(10,empiezo,200,empiezo)

      

      pdf.Image("logo.png", 10, 3+empiezo, 20, 0, false, "", 0, "")
      pdf.SetFont("Arial", "B", 16)
      pdf.SetXY(0, 8+empiezo)
      pdf.CellFormat(0,0,tr(addr1),"",1,"C",false,0,"")
      pdf.SetFont("Arial", "", 10)
      pdf.SetXY(0, 14+empiezo)
      pdf.CellFormat(0,0,tr(addr2),"",1,"C",false,0,"")
      pdf.SetXY(0, 18+empiezo)
      pdf.CellFormat(0,0,tr(addr3),"",1,"C",false,0,"")
      pdf.SetXY(0, 22+empiezo)
      pdf.CellFormat(0,0,tr(addr4),"",1,"C",false,0,"")
      pdf.SetXY(0, 26+empiezo)
      pdf.CellFormat(0,0,tr(addr5),"",1,"C",false,0,"")
      pdf.SetFillColor(0, 0, 0)
      pdf.SetTextColor(0, 0, 0)

      empiezo=165.0
      pdf.SetXY(10, empiezo)
      pdf.CellFormat(15,6,tr("Cta."),"",1,"C",false,0,"")
      pdf.SetXY(25, empiezo)
      pdf.CellFormat(45,6,tr("Nombre de Cta."),"",1,"C",false,0,"")
      pdf.SetXY(70, empiezo)
      pdf.CellFormat(45,6,tr("Dimensiones"),"",1,"C",false,0,"")
      pdf.SetXY(105, empiezo)
      pdf.CellFormat(50,6,tr("CONCEPTO"),"",1,"C",false,0,"")
      pdf.SetXY(165, empiezo)
      pdf.SetFont("Arial", "", 8)
      pdf.CellFormat(17.5,6,tr("CARGO"),"",1,"L",false,0,"")
      pdf.SetXY(182.5, empiezo)
      pdf.CellFormat(17.5,6,tr("CRÉDITO"),"",1,"R",false,0,"")
      

      pdf.Line(10,empiezo,200,empiezo)
      empiezo+=6
      pdf.Line(10,empiezo,200,empiezo)
      
      pdf.SetDrawColor(202, 202, 202)
      pdf.SetLineWidth(.1)
      sumaAux := 0.0
      largo := "25"
      if BUNIT == "MR1" {
        largo = "40"
      }
      queryX := "SELECT  c.TREFERENCE, c.ACCNT_CODE, SUBSTRING( a.DESCR,0,"+largo+") as DESCR , c.ANAL_T1, c.ANAL_T2, c.ANAL_T3, c.ANAL_T4, c.ANAL_T5, c.ANAL_T6, c.ANAL_T9, c.ANAL_T8, SUBSTRING( c.DESCRIPTN,0,35) as DESCRIPTN, c.AMOUNT, c.CONV_CODE, c.ANAL_T7, c.D_C, c.ALLOCATION, c.ANAL_T0, c.JRNAL_LINE FROM ["+DB.(string)+"].[dbo].["+BUNIT+"_"+libro+"_SALFLDG] c INNER JOIN ["+DB.(string)+"].[dbo].["+BUNIT+"_ACNT] a on a.ACNT_CODE = c.ACCNT_CODE WHERE c.JRNAL_NO = "+diario+" order by c.JRNAL_LINE asc"
      rows, _ := conn.Query(queryX)
      pdf.SetFont("Arial", "", 6)
      first := true
      for rows.Next()  {
        rows.Scan(&treference, &cuenta, &descripcionCuenta, &tfww, &fondo, &funcion, &restriccion, &orgId, &who, &detalle, &proyecto, &DESCRIPTN, &amount, &moneda, &flag, &D_C, &allocation, &anal_t0, &linea)
        treference = strings.TrimSpace(treference)
        anal_t0 = strings.TrimSpace(anal_t0)
        cuenta = strings.TrimSpace(cuenta)
        descripcionCuenta = strings.TrimSpace(descripcionCuenta)
        descripcionCuenta = strings.Replace(descripcionCuenta, "á", "a", -1)
        descripcionCuenta = strings.Replace(descripcionCuenta, "é", "e", -1)
        descripcionCuenta = strings.Replace(descripcionCuenta, "í", "i", -1)
        descripcionCuenta = strings.Replace(descripcionCuenta, "ó", "o", -1)
        descripcionCuenta = strings.Replace(descripcionCuenta, "ú", "u", -1)
        descripcionCuenta = strings.Replace(descripcionCuenta, "ñ", "n", -1)
        tfww = strings.TrimSpace(tfww)
        fondo = strings.TrimSpace(fondo)
        funcion = strings.TrimSpace(funcion)
        restriccion = strings.TrimSpace(restriccion)
        orgId = strings.TrimSpace(orgId)
        who = strings.TrimSpace(who)
        detalle = strings.TrimSpace(detalle)
        proyecto = strings.TrimSpace(proyecto)
        

        DESCRIPTN = strings.TrimSpace(DESCRIPTN)
        DESCRIPTN = strings.Replace(DESCRIPTN, "á", "a", -1)
        DESCRIPTN = strings.Replace(DESCRIPTN, "é", "e", -1)
        DESCRIPTN = strings.Replace(DESCRIPTN, "í", "i", -1)
        DESCRIPTN = strings.Replace(DESCRIPTN, "ó", "o", -1)
        DESCRIPTN = strings.Replace(DESCRIPTN, "ú", "u", -1)
        DESCRIPTN = strings.Replace(DESCRIPTN, "ñ", "n", -1)
        if len(DESCRIPTN)>25 {
          DESCRIPTN = DESCRIPTN[0:25] 
        }
        
        
        moneda = strings.TrimSpace(moneda)
        flag = strings.TrimSpace(flag)  

        amountPrima := math.Abs(amount.Float64())
        pdf.SetFont("Arial", "", 8)
        pdf.SetXY(10, empiezo)
        pdf.CellFormat(15,6,tr(cuenta),"",1,"C",false,0,"")
        pdf.SetXY(25, empiezo)
        pdf.CellFormat(45,6,tr(descripcionCuenta),"",1,"C",false,0,"")
        pdf.SetXY(60, empiezo)
        pdf.SetFont("Arial", "", 6)
        pdf.CellFormat(55, 6, tr(anal_t0)+"-"+tr(tfww)+"-"+tr(fondo)+"-"+tr(funcion)+"-"+tr(restriccion)+"-"+tr(orgId)+"-"+tr(who)+"-"+tr(flag)+"-"+tr(proyecto)+"-"+tr(detalle),"",1,"L",false,0,"")
        pdf.SetXY(110, empiezo)
        pdf.SetFont("Arial", "", 6)
        pdf.CellFormat(50,6,tr(DESCRIPTN),"",1,"R",false,0,"")
        pdf.SetXY(165, empiezo)
        cantidadCredito := 0.0
        cantidadCargo := 0.0
        if Compare(D_C,"C")==0 {
          cantidadCredito = amountPrima
          sumaAux+=amountPrima
        } else {
          cantidadCargo = amountPrima
        }
        pdf.SetFont("Arial", "", 8)
        pdf.CellFormat(17.5,6,tr(ac.FormatMoney(math.Abs(cantidadCargo)) ),"",1,"R",false,0,"")
        pdf.SetXY(182.5, empiezo)
        pdf.CellFormat(17.5,6,tr(ac.FormatMoney(math.Abs(cantidadCredito)) ),"",1,"R",false,0,"")
        pdf.Line(10,empiezo,200,empiezo)
        
        if empiezo < tope{
          empiezo+=6
        } else {
          if first {
            first = false
            empiezo=82.0
            pdf.SetDashPattern([]float64{0.8, 0.8}, 0)
            pdf.Line(5,84,205,84)
            pdf.SetDashPattern([]float64{}, 0)
            pdf.SetLineWidth(.3)
          }
          empiezo = 20
          pdf.AddPageFormat("P",gofpdf.SizeType{ 595.28/2.83464566929, 841.89/2.83464566929})
        }
      }//For
    }
    if dos == "PC" { //pago de efectivo
      pdf.SetFooterFunc(func() {
      })
      pdf.SetHeaderFunc(func() {
      })
      queryDireccion := "SELECT ADDR_LINE_1,ADDR_LINE_2,ADDR_LINE_3,ADDR_LINE_4,ADDR_LINE_5 FROM ["+DB.(string)+"].[dbo].["+BUNIT+"_ADDR] WHERE ADDR_CODE = '0000000000'"
      rowsDireccion, _ := conn.Query(queryDireccion)
      var addr1 string
      var addr2 string
      var addr3 string
      var addr4 string
      var addr5 string
      for rowsDireccion.Next()  {
        rowsDireccion.Scan(&addr1,&addr2,&addr3,&addr4,&addr5)
      }
      queryX = "SELECT c.TREFERENCE, c.ACCNT_CODE, SUBSTRING( a.DESCR,0,25) as DESCR , c.ANAL_T1, c.ANAL_T2, c.ANAL_T3, c.ANAL_T4, c.ANAL_T5, c.ANAL_T6, c.ANAL_T9, c.ANAL_T8, SUBSTRING( c.DESCRIPTN,0,35) as DESCRIPTN, c.AMOUNT, c.CONV_CODE, c.ANAL_T7, c.D_C, c.ALLOCATION, c.ANAL_T0, c.JRNAL_LINE FROM ["+DB.(string)+"].[dbo].["+BUNIT+"_"+libro+"_SALFLDG] c INNER JOIN ["+DB.(string)+"].[dbo].["+BUNIT+"_ACNT] a on a.ACNT_CODE = c.ACCNT_CODE WHERE c.JRNAL_NO = "+diario+" order by c.JRNAL_LINE asc"
      rows, _ = conn.Query(queryX)
      treferenceActual := ""
      treferenceAnterior := ""
      consecutivoReferencia := 0
      for rows.Next()  {
        rows.Scan(&treference, &cuenta, &descripcionCuenta, &tfww, &fondo, &funcion, &restriccion, &orgId, &who, &detalle, &proyecto, &DESCRIPTN, &amount, &moneda, &flag, &D_C, &allocation, &anal_t0, &linea)
        treference = strings.TrimSpace(treference)
        anal_t0 = strings.TrimSpace(anal_t0)
        cuenta = strings.TrimSpace(cuenta)
        descripcionCuenta = strings.TrimSpace(descripcionCuenta)
        descripcionCuenta = strings.Replace(descripcionCuenta, "á", "a", -1)
        descripcionCuenta = strings.Replace(descripcionCuenta, "é", "e", -1)
        descripcionCuenta = strings.Replace(descripcionCuenta, "í", "i", -1)
        descripcionCuenta = strings.Replace(descripcionCuenta, "ó", "o", -1)
        descripcionCuenta = strings.Replace(descripcionCuenta, "ú", "u", -1)
        descripcionCuenta = strings.Replace(descripcionCuenta, "ñ", "n", -1)
        tfww = strings.TrimSpace(tfww)
        fondo = strings.TrimSpace(fondo)
        funcion = strings.TrimSpace(funcion)
        restriccion = strings.TrimSpace(restriccion)
        orgId = strings.TrimSpace(orgId)
        who = strings.TrimSpace(who)
        detalle = strings.TrimSpace(detalle)
        proyecto = strings.TrimSpace(proyecto)
        

        DESCRIPTN = strings.TrimSpace(DESCRIPTN)
        DESCRIPTN = strings.Replace(DESCRIPTN, "á", "a", -1)
        DESCRIPTN = strings.Replace(DESCRIPTN, "é", "e", -1)
        DESCRIPTN = strings.Replace(DESCRIPTN, "í", "i", -1)
        DESCRIPTN = strings.Replace(DESCRIPTN, "ó", "o", -1)
        DESCRIPTN = strings.Replace(DESCRIPTN, "ú", "u", -1)
        DESCRIPTN = strings.Replace(DESCRIPTN, "ñ", "n", -1)
        
        moneda = strings.TrimSpace(moneda)
        flag = strings.TrimSpace(flag)  

        amountPrima := math.Abs(amount.Float64())
        treferenceActual = treference
        if treferenceAnterior != treferenceActual {//pon pdf!
          consecutivoReferencia++
          cantidadPrimeraLinea = amountPrima
          guardaPrimeraLinea = DESCRIPTN
          queryXX := "SELECT SUBSTRING( DESCRIPTN,0,50) as DESCR FROM ["+DB.(string)+"].[dbo].["+BUNIT+"_"+libro+"_SALFLDG] WHERE JRNAL_NO = "+diario+" AND JRNAL_LINE = "+strconv.Itoa(linea)
          rowsXX, _ := conn.Query(queryXX)
          if rowsXX.Next()  {
            rowsXX.Scan(&guardaSegundaLinea)
          }
          pdf.AddPageFormat("P",gofpdf.SizeType{ 595.28/2.83464566929, 841.89/2.83464566929})
          pdf.Image("logo.png", 10, 8, 20, 0, false, "", 0, "")
          pdf.SetFont("Arial", "B", 16)
          pdf.SetXY(0, 13)
          pdf.CellFormat(0,0,tr(addr1),"",1,"C",false,0,"")
          pdf.SetFont("Arial", "", 10)
          pdf.SetXY(0, 20)
          pdf.CellFormat(0,0,tr(addr2),"",1,"C",false,0,"")
          pdf.SetXY(0, 24)
          pdf.CellFormat(0,0,tr(addr3),"",1,"C",false,0,"")
          pdf.SetXY(0, 28)
          pdf.CellFormat(0,0,tr(addr4),"",1,"C",false,0,"")
          pdf.SetXY(0, 32)
          pdf.CellFormat(0,0,tr(addr5),"",1,"C",false,0,"")
          pdf.SetFillColor(0, 0, 0)
          pdf.SetTextColor(255, 255, 255)
          pdf.SetXY(160, 20)
          pdf.SetFont("Arial", "B", 10)
          pdf.CellFormat(0,6,tr("Fecha:"),"",1,"C",true,0,"")
          pdf.SetXY(160, 32)
          pdf.CellFormat(0,6,tr("Cash Voucher"),"",1,"C",true,0,"")
          pdf.SetTextColor(0, 0, 0)
          pdf.SetFillColor(255, 255, 255)
          pdf.SetXY(160.1, 25)
          pdf.CellFormat(39.7,6,tr(fechaReal),"1",1,"C",false,0,"")
          pdf.SetXY(160.5, 37)
          VCHR_NUM_NUEVO := VCHR_NUM+"-"+strconv.Itoa(consecutivoReferencia)
          pdf.CellFormat(39,6,tr(VCHR_NUM_NUEVO),"1",1,"C",false,0,"")
          pdf.SetFont("Arial", "", 10)
          pdf.SetXY(15, 37)
          pdf.CellFormat(39,6,tr("Pagarse a:"),"",1,"L",false,0,"")
          pdf.SetXY(15, 42)
          pdf.CellFormat(39,6,tr("Cantidad:"),"",1,"L",false,0,"")
          pdf.SetXY(15, 47)
          pdf.CellFormat(39,6,tr("Concepto:"),"",1,"L",false,0,"")
          pdf.SetXY(40, 37)
          pdf.CellFormat(39,6,tr(guardaPrimeraLinea),"",1,"L",false,0,"")
          pdf.SetXY(40, 42)
          pdf.SetFillColor(255, 222, 0)
          pdf.CellFormat(30,6,tr(ac.FormatMoney(math.Abs(cantidadPrimeraLinea)) ),"",1,"C",true,0,"")
          pdf.SetFillColor(255, 255, 255)
          pdf.SetXY(70, 42)
          strImporte := FloatToString(cantidadPrimeraLinea)
          puntos := strings.Split(strImporte, ".")
          centavos := puntos[1]
          str := "(SON: "+numerosAPalabras.Convert(cantidadPrimeraLinea)+" "+centavos+"/100 M.N.)"
          pdf.CellFormat(139,6,tr(str ),"",1,"L",false,0,"")
          pdf.SetXY(40, 47)
          pdf.CellFormat(39,6,tr(guardaSegundaLinea),"",1,"L",false,0,"")
          pdf.SetDrawColor(0, 0, 0)
          pdf.SetLineWidth(.3)
          pdf.SetXY(20, 59)
          pdf.CellFormat(40,6,tr(JRNAL_SRCE),"",1,"C",false,0,"")
          pdf.SetXY(20, 65)
          pdf.CellFormat(40,6,tr("Procesado por"),"",1,"C",false,0,"")
          pdf.Line(20,65,60,65)

          pdf.SetXY(90, 65)
          pdf.CellFormat(50,6,tr("Aprobado por"),"",1,"C",false,0,"")
          pdf.Line(90,65,140,65)

          pdf.SetXY(150, 65)
          pdf.CellFormat(50,6,tr("Recibido por"),"",1,"C",false,0,"")
          pdf.Line(150,65,200,65)


          empiezo:=155.0
          pdf.SetXY(10, empiezo)
          pdf.CellFormat(15,6,tr("Cta."),"",1,"C",false,0,"")
          pdf.SetXY(25, empiezo)
          pdf.CellFormat(45,6,tr("Nombre de Cta."),"",1,"C",false,0,"")
          pdf.SetXY(70, empiezo)
          pdf.CellFormat(45,6,tr("Dimensiones"),"",1,"C",false,0,"")
          pdf.SetXY(105, empiezo)
          pdf.CellFormat(50,6,tr("CONCEPTO"),"",1,"C",false,0,"")
          pdf.SetXY(165, empiezo)
          pdf.SetFont("Arial", "", 8)
          pdf.CellFormat(17.5,6,tr("CARGO"),"",1,"L",false,0,"")
          pdf.SetXY(182.5, empiezo)
          pdf.CellFormat(17.5,6,tr("CRÉDITO"),"",1,"R",false,0,"")
          



          pdf.Line(10,empiezo,200,empiezo)
          empiezo+=6
          pdf.Line(10,empiezo,200,empiezo)
          
          pdf.SetDrawColor(202, 202, 202)
          pdf.SetLineWidth(.1)
          sumaAux := 0.0
          queryXXX := "SELECT c.TREFERENCE, c.ACCNT_CODE, SUBSTRING( a.DESCR,0,25) as DESCR , c.ANAL_T1, c.ANAL_T2, c.ANAL_T3, c.ANAL_T4, c.ANAL_T5, c.ANAL_T6, c.ANAL_T9, c.ANAL_T8, SUBSTRING( c.DESCRIPTN,0,35) as DESCRIPTN, c.AMOUNT, c.CONV_CODE, c.ANAL_T7, c.D_C, c.ALLOCATION, c.ANAL_T0, c.JRNAL_LINE FROM ["+DB.(string)+"].[dbo].["+BUNIT+"_"+libro+"_SALFLDG] c INNER JOIN ["+DB.(string)+"].[dbo].["+BUNIT+"_ACNT] a on a.ACNT_CODE = c.ACCNT_CODE WHERE c.JRNAL_NO = "+diario+" AND TREFERENCE = '"+treferenceActual+"' order by c.JRNAL_LINE asc"
          rowsXXX, _ := conn.Query(queryXXX)
          first := true
          for rowsXXX.Next()  {
            rowsXXX.Scan(&treference, &cuenta, &descripcionCuenta, &tfww, &fondo, &funcion, &restriccion, &orgId, &who, &detalle, &proyecto, &DESCRIPTN, &amount, &moneda, &flag, &D_C, &allocation, &anal_t0, &linea)
            treference = strings.TrimSpace(treference)
            anal_t0 = strings.TrimSpace(anal_t0)
            cuenta = strings.TrimSpace(cuenta)
            descripcionCuenta = strings.TrimSpace(descripcionCuenta)
            descripcionCuenta = strings.Replace(descripcionCuenta, "á", "a", -1)
            descripcionCuenta = strings.Replace(descripcionCuenta, "é", "e", -1)
            descripcionCuenta = strings.Replace(descripcionCuenta, "í", "i", -1)
            descripcionCuenta = strings.Replace(descripcionCuenta, "ó", "o", -1)
            descripcionCuenta = strings.Replace(descripcionCuenta, "ú", "u", -1)
            descripcionCuenta = strings.Replace(descripcionCuenta, "ñ", "n", -1)
            tfww = strings.TrimSpace(tfww)
            fondo = strings.TrimSpace(fondo)
            funcion = strings.TrimSpace(funcion)
            restriccion = strings.TrimSpace(restriccion)
            orgId = strings.TrimSpace(orgId)
            who = strings.TrimSpace(who)
            detalle = strings.TrimSpace(detalle)
            proyecto = strings.TrimSpace(proyecto)
            

            DESCRIPTN = strings.TrimSpace(DESCRIPTN)
            DESCRIPTN = strings.Replace(DESCRIPTN, "á", "a", -1)
            DESCRIPTN = strings.Replace(DESCRIPTN, "é", "e", -1)
            DESCRIPTN = strings.Replace(DESCRIPTN, "í", "i", -1)
            DESCRIPTN = strings.Replace(DESCRIPTN, "ó", "o", -1)
            DESCRIPTN = strings.Replace(DESCRIPTN, "ú", "u", -1)
            DESCRIPTN = strings.Replace(DESCRIPTN, "ñ", "n", -1)
            
            moneda = strings.TrimSpace(moneda)
            flag = strings.TrimSpace(flag)  

            amountPrima := math.Abs(amount.Float64())
            pdf.SetFont("Arial", "", 8)
            pdf.SetXY(10, empiezo)
            pdf.CellFormat(15,6,tr(cuenta),"",1,"C",false,0,"")
            pdf.SetXY(25, empiezo)
            pdf.CellFormat(45,6,tr(descripcionCuenta),"",1,"L",false,0,"")
            pdf.SetXY(60, empiezo)
            pdf.SetFont("Arial", "", 6)
            pdf.CellFormat(55, 6, tr(anal_t0)+"-"+tr(tfww)+"-"+tr(fondo)+"-"+tr(funcion)+"-"+tr(restriccion)+"-"+tr(orgId)+"-"+tr(who)+"-"+tr(flag)+"-"+tr(proyecto)+"-"+tr(detalle),"",1,"L",false,0,"")
            pdf.SetXY(110, empiezo)
            pdf.SetFont("Arial", "", 6)
            pdf.CellFormat(50,6,tr(DESCRIPTN),"",1,"R",false,0,"")
            pdf.SetXY(165, empiezo)
            cantidadCredito := 0.0
            cantidadCargo := 0.0
            if Compare(D_C,"C")==0 {
              cantidadCredito = amountPrima
              sumaAux+=amountPrima
            } else {
              cantidadCargo = amountPrima
            }
            pdf.SetFont("Arial", "", 8)
            pdf.CellFormat(17.5,6,tr(ac.FormatMoney(math.Abs(cantidadCargo)) ),"",1,"R",false,0,"")
            pdf.SetXY(182.5, empiezo)
            pdf.CellFormat(17.5,6,tr(ac.FormatMoney(math.Abs(cantidadCredito)) ),"",1,"R",false,0,"")
            pdf.Line(10,empiezo,200,empiezo)
            if empiezo < tope{
              empiezo+=6
            } else {
              if first {
                first = false
              }
              empiezo = 20
              pdf.AddPageFormat("P",gofpdf.SizeType{ 595.28/2.83464566929, 841.89/2.83464566929})
            }
          }
          pdf.SetFont("Arial", "", 8)
          pdf.SetXY(10, 265)
          pdf.CellFormat(15,6,tr("Diario No."),"",1,"C",false,0,"")
          pdf.SetFont("Arial", "B", 8)
          pdf.SetXY(10, 270)
          pdf.CellFormat(15,6,tr(diario),"",1,"C",false,0,"")

          pdf.SetFont("Arial", "", 8)
          pdf.SetXY(35, 265)
          pdf.CellFormat(15,6,tr("Hecho por:"),"",1,"C",false,0,"")
          pdf.SetFont("Arial", "B", 8)
          pdf.SetXY(35, 270)
          pdf.CellFormat(15,6,tr(JRNAL_SRCE),"",1,"C",false,0,"")
          
          pdf.SetFont("Arial", "", 8)
          pdf.SetXY(60, 265)
          pdf.CellFormat(15,6,tr("BD:"),"",1,"C",false,0,"")
          pdf.SetFont("Arial", "B", 8)
          pdf.SetXY(60, 270)
          pdf.CellFormat(15,6,tr(BUNIT),"",1,"C",false,0,"")
          pdf.SetFont("Arial", "", 8)
          pdf.SetXY(135, 265)
          pdf.CellFormat(15,6,tr("SUMAS IGUALES:"),"",1,"C",false,0,"")
          pdf.SetXY(165, 265)
          pdf.CellFormat(17.5,6,tr(ac.FormatMoney(math.Abs(sumaAux)) ),"",1,"R",false,0,"")
          pdf.SetXY(182.5, 265)
          pdf.CellFormat(17.5,6,tr(ac.FormatMoney(math.Abs(sumaAux)) ),"",1,"R",false,0,"") 
        }//if treferenceAnterior != treferenceActual
        treferenceAnterior = treferenceActual
      }//for rows.Next()
    } //if PC
    if dos == "MG" || dos == "TR" || dos == "TE" { //cheques
      pdf.SetFooterFunc(func() {
      })
      pdf.SetHeaderFunc(func() {
      })
      queryDireccion := "SELECT ADDR_LINE_1,ADDR_LINE_2,ADDR_LINE_3,ADDR_LINE_4,ADDR_LINE_5 FROM ["+DB.(string)+"].[dbo].["+BUNIT+"_ADDR] WHERE ADDR_CODE = '0000000000'"
      rowsDireccion, _ := conn.Query(queryDireccion)
      var addr1 string
      var addr2 string
      var addr3 string
      var addr4 string
      var addr5 string
      for rowsDireccion.Next()  {
        rowsDireccion.Scan(&addr1,&addr2,&addr3,&addr4,&addr5)
      }
      pdf.AddPageFormat("P",gofpdf.SizeType{ 595.28/2.83464566929, 841.89/2.83464566929})
      pdf.Image("logo.png", 10, 8, 20, 0, false, "", 0, "")
      pdf.SetFont("Arial", "B", 16)
      pdf.SetXY(0, 13)
      pdf.CellFormat(0,0,tr(addr1),"",1,"C",false,0,"")
      pdf.SetFont("Arial", "", 10)
      pdf.SetXY(0, 20)
      pdf.CellFormat(0,0,tr(addr2),"",1,"C",false,0,"")
      pdf.SetXY(0, 24)
      pdf.CellFormat(0,0,tr(addr3),"",1,"C",false,0,"")
      pdf.SetXY(0, 28)
      pdf.CellFormat(0,0,tr(addr4),"",1,"C",false,0,"")
      pdf.SetXY(0, 32)
      pdf.CellFormat(0,0,tr(addr5),"",1,"C",false,0,"")
      pdf.SetFillColor(0, 0, 0)
      pdf.SetTextColor(255, 255, 255)
      pdf.SetXY(160, 20)
      pdf.SetFont("Arial", "B", 10)
      pdf.CellFormat(0,6,tr("Fecha:"),"",1,"C",true,0,"")
      pdf.SetXY(160, 32)
      pdf.CellFormat(0,6,tr("Número de Cheque"),"",1,"C",true,0,"")
      pdf.SetTextColor(0, 0, 0)
      pdf.SetFillColor(255, 255, 255)
      pdf.SetXY(160.5, 25)
      pdf.CellFormat(39,6,tr(fechaReal),"1",1,"C",false,0,"")
      pdf.SetXY(160.5, 37)

      queryX := `SELECT DISTINCT ISNULL(s.GNRL_DESCR_06,'') as seis, ISNULL(s.GNRL_DESCR_01,'') as uno 
      FROM [`+DB.(string)+`].[dbo].[`+BUNIT+`_`+libro+`_SALFLDG] f
       INNER JOIN [`+DB.(string)+`].[dbo].[`+BUNIT+`_`+libro+`_SALFLDG_LAD] s on s.JRNAL_NO = f.JRNAL_NO
       WHERE f.JRNAL_NO = `+diario+` `
      rows, _ := conn.Query(queryX)
      averSeis := ""
      averUno := ""
      for rows.Next()  {
        rows.Scan(&averSeis, &averUno)
        if averSeis != "" {
          VCHR_NUM = averSeis
        } else {
          if averUno != "" {
            VCHR_NUM = averUno
          }
        }
      }
      
      pdf.CellFormat(39,6,tr(VCHR_NUM),"1",1,"C",false,0,"")
      
      pdf.SetFont("Arial", "", 10)
      pdf.SetXY(15, 37)
      pdf.CellFormat(39,6,tr("Pagarse a:"),"",1,"L",false,0,"")
      pdf.SetXY(15, 42)
      pdf.CellFormat(39,6,tr("Cantidad:"),"",1,"L",false,0,"")
      pdf.SetXY(15, 47)
      pdf.CellFormat(39,6,tr("Concepto:"),"",1,"L",false,0,"")
      pdf.SetXY(40, 37)
      pdf.CellFormat(39,6,tr(guardaPrimeraLinea),"",1,"L",false,0,"")
      pdf.SetXY(40, 42)
      pdf.SetFillColor(255, 222, 0)
      pdf.CellFormat(30,6,tr(ac.FormatMoney(math.Abs(cantidadPrimeraLinea)) ),"",1,"C",true,0,"")
      pdf.SetFillColor(255, 255, 255)
      pdf.SetXY(70, 42)
      strImporte := FloatToString(cantidadPrimeraLinea)
      puntos := strings.Split(strImporte, ".")
      centavos := puntos[1]
      str := "(SON: "+numerosAPalabras.Convert(cantidadPrimeraLinea)+" "+centavos+"/100 M.N.)"
      pdf.CellFormat(139,6,tr(str ),"",1,"L",false,0,"")
      pdf.SetXY(40, 47)
      pdf.CellFormat(39,6,tr(guardaSegundaLinea),"",1,"L",false,0,"")
      pdf.SetDrawColor(0, 0, 0)
      pdf.SetLineWidth(.3)
      pdf.SetXY(20, 59)
      pdf.CellFormat(40,6,tr(JRNAL_SRCE),"",1,"C",false,0,"")
      pdf.SetXY(20, 65)
      pdf.CellFormat(40,6,tr("Procesado por"),"",1,"C",false,0,"")
      pdf.Line(20,65,60,65)

      pdf.SetXY(90, 65)
      pdf.CellFormat(50,6,tr("Aprobado por"),"",1,"C",false,0,"")
      pdf.Line(90,65,140,65)

      pdf.SetXY(150, 65)
      pdf.CellFormat(50,6,tr("Recibido por"),"",1,"C",false,0,"")
      pdf.Line(150,65,200,65)


      empiezo:=155.0
      pdf.SetXY(10, empiezo)
      pdf.CellFormat(15,6,tr("Cta."),"",1,"C",false,0,"")
      pdf.SetXY(25, empiezo)
      pdf.CellFormat(45,6,tr("Nombre de Cta."),"",1,"C",false,0,"")
      pdf.SetXY(70, empiezo)
      pdf.CellFormat(45,6,tr("Dimensiones"),"",1,"C",false,0,"")
      pdf.SetXY(105, empiezo)
      pdf.CellFormat(50,6,tr("CONCEPTO"),"",1,"C",false,0,"")
      pdf.SetXY(165, empiezo)
      pdf.SetFont("Arial", "", 8)
      pdf.CellFormat(17.5,6,tr("CARGO"),"",1,"L",false,0,"")
      pdf.SetXY(182.5, empiezo)
      pdf.CellFormat(17.5,6,tr("CRÉDITO"),"",1,"R",false,0,"")
      
      pdf.Line(10,empiezo,200,empiezo)
      empiezo+=6
      pdf.Line(10,empiezo,200,empiezo)
      
      pdf.SetDrawColor(202, 202, 202)
      pdf.SetLineWidth(.1)
      sumaAux := 0.0
      queryX = "SELECT c.TREFERENCE, c.ACCNT_CODE, SUBSTRING( a.DESCR,0,25) as DESCR , c.ANAL_T1, c.ANAL_T2, c.ANAL_T3, c.ANAL_T4, c.ANAL_T5, c.ANAL_T6, c.ANAL_T9, c.ANAL_T8, SUBSTRING( c.DESCRIPTN,0,35) as DESCRIPTN, c.AMOUNT, c.CONV_CODE, c.ANAL_T7, c.D_C, c.ALLOCATION, c.ANAL_T0, c.JRNAL_LINE FROM ["+DB.(string)+"].[dbo].["+BUNIT+"_"+libro+"_SALFLDG] c INNER JOIN ["+DB.(string)+"].[dbo].["+BUNIT+"_ACNT] a on a.ACNT_CODE = c.ACCNT_CODE WHERE c.JRNAL_NO = "+diario+" order by c.JRNAL_LINE asc"
      rows, _ = conn.Query(queryX)
      first := true
      for rows.Next()  {
        rows.Scan(&treference, &cuenta, &descripcionCuenta, &tfww, &fondo, &funcion, &restriccion, &orgId, &who, &detalle, &proyecto, &DESCRIPTN, &amount, &moneda, &flag, &D_C, &allocation, &anal_t0, &linea)
        treference = strings.TrimSpace(treference)
        anal_t0 = strings.TrimSpace(anal_t0)
        cuenta = strings.TrimSpace(cuenta)
        descripcionCuenta = strings.TrimSpace(descripcionCuenta)
        descripcionCuenta = strings.Replace(descripcionCuenta, "á", "a", -1)
        descripcionCuenta = strings.Replace(descripcionCuenta, "é", "e", -1)
        descripcionCuenta = strings.Replace(descripcionCuenta, "í", "i", -1)
        descripcionCuenta = strings.Replace(descripcionCuenta, "ó", "o", -1)
        descripcionCuenta = strings.Replace(descripcionCuenta, "ú", "u", -1)
        descripcionCuenta = strings.Replace(descripcionCuenta, "ñ", "n", -1)
        tfww = strings.TrimSpace(tfww)
        fondo = strings.TrimSpace(fondo)
        funcion = strings.TrimSpace(funcion)
        restriccion = strings.TrimSpace(restriccion)
        orgId = strings.TrimSpace(orgId)
        who = strings.TrimSpace(who)
        detalle = strings.TrimSpace(detalle)
        proyecto = strings.TrimSpace(proyecto)
        

        DESCRIPTN = strings.TrimSpace(DESCRIPTN)
        DESCRIPTN = strings.Replace(DESCRIPTN, "á", "a", -1)
        DESCRIPTN = strings.Replace(DESCRIPTN, "é", "e", -1)
        DESCRIPTN = strings.Replace(DESCRIPTN, "í", "i", -1)
        DESCRIPTN = strings.Replace(DESCRIPTN, "ó", "o", -1)
        DESCRIPTN = strings.Replace(DESCRIPTN, "ú", "u", -1)
        DESCRIPTN = strings.Replace(DESCRIPTN, "ñ", "n", -1)
        
        moneda = strings.TrimSpace(moneda)
        flag = strings.TrimSpace(flag)  

        amountPrima := math.Abs(amount.Float64())
        pdf.SetFont("Arial", "", 8)
        pdf.SetXY(10, empiezo)
        pdf.CellFormat(15,6,tr(cuenta),"",1,"C",false,0,"")
        pdf.SetXY(25, empiezo)
        pdf.CellFormat(45,6,tr(descripcionCuenta),"",1,"L",false,0,"")
        pdf.SetXY(60, empiezo)
        pdf.SetFont("Arial", "", 6)
        pdf.CellFormat(55, 6, tr(anal_t0)+"-"+tr(tfww)+"-"+tr(fondo)+"-"+tr(funcion)+"-"+tr(restriccion)+"-"+tr(orgId)+"-"+tr(who)+"-"+tr(flag)+"-"+tr(proyecto)+"-"+tr(detalle),"",1,"L",false,0,"")
        pdf.SetXY(110, empiezo)
        pdf.SetFont("Arial", "", 6)
        pdf.CellFormat(50,6,tr(DESCRIPTN),"",1,"R",false,0,"")
        pdf.SetXY(165, empiezo)
        cantidadCredito := 0.0
        cantidadCargo := 0.0
        if Compare(D_C,"C")==0 {
          cantidadCredito = amountPrima
          sumaAux+=amountPrima
        } else {
          cantidadCargo = amountPrima
        }
        pdf.SetFont("Arial", "", 8)
        pdf.CellFormat(17.5,6,tr(ac.FormatMoney(math.Abs(cantidadCargo)) ),"",1,"R",false,0,"")
        pdf.SetXY(182.5, empiezo)
        pdf.CellFormat(17.5,6,tr(ac.FormatMoney(math.Abs(cantidadCredito)) ),"",1,"R",false,0,"")
        pdf.Line(10,empiezo,200,empiezo)
        if empiezo < tope{
          empiezo+=6
        } else {
          if first {
            first = false
          }
          empiezo = 20
          pdf.AddPageFormat("P",gofpdf.SizeType{ 595.28/2.83464566929, 841.89/2.83464566929})
        }
      }
      pdf.SetFont("Arial", "", 8)
      pdf.SetXY(10, 265)
      pdf.CellFormat(15,6,tr("Diario No."),"",1,"C",false,0,"")
      pdf.SetFont("Arial", "B", 8)
      pdf.SetXY(10, 270)
      pdf.CellFormat(15,6,tr(diario),"",1,"C",false,0,"")

      pdf.SetFont("Arial", "", 8)
      pdf.SetXY(35, 265)
      pdf.CellFormat(15,6,tr("Hecho por:"),"",1,"C",false,0,"")
      pdf.SetFont("Arial", "B", 8)
      pdf.SetXY(35, 270)
      pdf.CellFormat(15,6,tr(JRNAL_SRCE),"",1,"C",false,0,"")
      
      pdf.SetFont("Arial", "", 8)
      pdf.SetXY(60, 265)
      pdf.CellFormat(15,6,tr("BD:"),"",1,"C",false,0,"")
      pdf.SetFont("Arial", "B", 8)
      pdf.SetXY(60, 270)
      pdf.CellFormat(15,6,tr(BUNIT),"",1,"C",false,0,"")
      pdf.SetFont("Arial", "", 8)
      pdf.SetXY(135, 265)
      pdf.CellFormat(15,6,tr("SUMAS IGUALES:"),"",1,"C",false,0,"")
      pdf.SetXY(165, 265)
      pdf.CellFormat(17.5,6,tr(ac.FormatMoney(math.Abs(sumaAux)) ),"",1,"R",false,0,"")
      pdf.SetXY(182.5, 265)
      pdf.CellFormat(17.5,6,tr(ac.FormatMoney(math.Abs(sumaAux)) ),"",1,"R",false,0,"")
    } 
  } 
  var b bytes.Buffer
    w := bufio.NewWriter(&b)
    pdf.Output(w)
    pdf.Close()
    w.Flush()
    c.Ctx.Output.ContentType("application/pdf")
    c.Ctx.Output.Body(b.Bytes())
}


func (c *GenerarBancoEnPDFController) Get() {
  connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
  conn, errS := sql.Open("mssql", connString2) 
  defer conn.Close()
  if errS != nil {
    fmt.Println("Perdon! Open connection failed:", errS.Error())
  }
  BUNIT := c.GetSession("BUNIT")
  idBanco := c.GetString("idBanco")
  query := `SELECT cuenta, importe, fecha, descripcion, STATUS, referencia, TREFERENCE, CuentaPropia, leyenda1, leyenda2, timbrado, Moneda
    FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos]
    WHERE idBanco = `+idBanco+``
  rowsD, errD:= conn.Query(query)
  if errD != nil {
    fmt.Println("que pasho:", errD.Error())
  }
  cuenta := ""
  importe := 0.0
  fecha := ""
  descripcion := ""
  STATUS := 0
  referencia := ""
  TREFERENCE := ""
  CuentaPropia := 0
  leyenda1 := "" 
  leyenda2 := "" 
  timbrado := 0 
  Moneda := ""
  for rowsD.Next()  {
    rowsD.Scan(&cuenta, &importe, &fecha, &descripcion, &STATUS, &referencia, &TREFERENCE, &CuentaPropia, &leyenda1, &leyenda2, &timbrado, &Moneda)
  }
  ac := accounting.Accounting{Symbol: "$", Precision: 2}
  pdf := gofpdf.New("L", "mm", "A4", "")
  tr := pdf.UnicodeTranslatorFromDescriptor("")
    pdf.SetHeaderFunc(func() {
  pdf.Image("logo.png", 10, 3, 30, 0, false, "", 0, "")
  pdf.SetFont("Arial", "", 18)
  pdf.SetXY(40, 10)
  pdf.Cell(0,0,tr(TREFERENCE))
  //pdf.CellFormat(0,0,tr(bunitD),"",1,"C",false,0,"")  
  pdf.SetFont("Arial", "B", 12)     
  pdf.SetXY(40, 22)
  pdf.Cell(0,0,tr("Cuenta : "+cuenta))
  pdf.SetXY(40, 30)
  pdf.Cell(0, 0, tr("Fecha: "+fecha))
  pdf.SetXY(40, 38)
  cu := ""
  if CuentaPropia == 1 {
    cu = "Transferencia entre cuenta propia"
  }
  pdf.Cell(0, 0, tr(cu))
  pdf.SetXY(40, 46)
  pdf.Cell(0, 0, tr(leyenda1))
  pdf.SetXY(40, 54)
  pdf.Cell(0, 0, tr(leyenda2))
  pdf.SetXY(40, 62)
  tu := "No timbrado"
  if timbrado == 1 {
    tu = "TIMBRADO"
  }
  pdf.Cell(0, 0, tu+" "+tr(Moneda))
  pdf.SetXY(105, 22)
  pdf.Cell(0, 0, tr("Descripción: "+descripcion))
  pdf.SetXY(105, 30)
  st := "GASTO"
  if STATUS == 2 {
    st = "INGRESO"
  }
  pdf.Cell(0, 0, "STATUS: "+st)
  pdf.SetFont("Arial", "B", 16)
  pdf.SetXY(215, 22)
  pdf.Cell(0, 0, tr(""+referencia))
  })
  pdf.SetFooterFunc(func() {
    pdf.SetY(-15)
    pdf.SetFont("Arial", "I", 8)
    pdf.CellFormat(0, 10, fmt.Sprintf("Page %d", pdf.PageNo()),
      "", 0, "C", false, 0, "")
  })
  y:=50.0
  pdf.SetFont("Arial", "", 12)
    pdf.AddPage()
    pdf.SetFont("Arial", "", 12)
  pdf.SetXY(170, y)
  pdf.Cell(0, 0,  "Importe:")
  pdf.SetFont("Arial", "", 12)
  pdf.SetXY(240, y)
  pdf.Cell(0, 0,  ac.FormatMoney(math.Abs(importe)))
  var b bytes.Buffer
    w := bufio.NewWriter(&b)
    pdf.Output(w)
    pdf.Close()
    w.Flush()
    c.Ctx.Output.ContentType("application/pdf")
    c.Ctx.Output.Body(b.Bytes())
}
func (c *GenerarDiarioEnPDFController) Get() {
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  diario := c.GetString("diario")
  fmt.Println(diario)
  fmt.Println(len(diario))
  entro := false
  libro := c.GetString("libro")
  fmt.Println("Hola")
  if len(diario) < 20 {
    if tienePermisosContador(tipoDeUsuario.(int)) {
      BUNIT := c.GetSession("BUNIT")
      if diario != "-1" {
        fmt.Println("Paso por aqui, no intento contabilizar")
        fmt.Println(entro)
        if _, err := strconv.Atoi(diario); err == nil {
            fmt.Printf("%q looks like a number.\n", diario)
            entro = true
        }
        fmt.Println(entro)
        if !entro {
          example := map[string]interface{}{ "success" : 0, "error": "Lo que escribiste no es un numero de diario" }
          c.Data["json"] = &example
          c.ServeJSON()
          return
        }
        
        generaDiarioFunction(diario, BUNIT.(string), c, libro) 
      } else {
        BUNIT := ""
        BUNITx := c.GetSession("BUNIT")
        BUNIT = BUNITx.(string)
        BTemp := c.GetString("BUNITViejito")
        if BTemp == "" {
        } else {
          BUNIT = c.GetString("BUNITViejito")
        }
        
        delPeriodo := c.GetString("delPeriodo")
        anio := delPeriodo[0:4]
        mes := delPeriodo[5:7]
        fecha := anio+"-"+mes+"-25"
        connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
        conn, errS := sql.Open("mssql", connString2) 
        defer conn.Close()
        if errS != nil {
          fmt.Println("Perdon! Open connection failed:", errS.Error())
        }
        query := `SELECT base, PCENT_AFROUMN, PCENT_SALUD, Parte_Exenta
          FROM [Sevenplus].[dbo].[zConfig]
          WHERE BUNIT = '`+BUNIT+`'`
          rowsD, errD:= conn.Query(query)
        if errD != nil {
          fmt.Println("que pasho:", errD.Error())
        }
        base := 0.0
        PCENT_AFROUMN := 0.0
        PCENT_SALUD := 0.0
        Parte_Exenta := 0.0
        for rowsD.Next()  {
          rowsD.Scan(&base, &PCENT_AFROUMN, &PCENT_SALUD, &Parte_Exenta)
        }
        query = `SELECT TOP 1 ACNT_CODE, Concepto
          FROM [Sevenplus].[dbo].[nominaConceptos]
          WHERE BUNIT = '`+BUNIT+`' AND tipo = 1 AND TipoSAT = '046'
          AND GravadoExcento = 2`
          rowsD, errD = conn.Query(query)
        if errD != nil {
          fmt.Println("que pasho:", errD.Error())
        }
        cuentaExenta := ""
        cuentaExentaConcepto := ""
        if rowsD.Next()  {
          rowsD.Scan(&cuentaExenta, &cuentaExentaConcepto)
        }
        query = `SELECT TOP 1 ACNT_CODE, Concepto
          FROM [Sevenplus].[dbo].[nominaConceptos]
          WHERE BUNIT = '`+BUNIT+`' AND tipo = 1 AND TipoSAT = '046'
          AND GravadoExcento = 1`
          rowsD, errD = conn.Query(query)
        if errD != nil {
          fmt.Println("que pasho:", errD.Error())
        }
        cuentaGravada := ""
        cuentaGravadaConcepto := ""
        if rowsD.Next()  {
          rowsD.Scan(&cuentaGravada, &cuentaGravadaConcepto)
        }
        query = `SELECT TOP 1 ACNT_CODE, Concepto
          FROM [Sevenplus].[dbo].[nominaConceptos]
          WHERE BUNIT = '`+BUNIT+`' AND tipo = 2 AND TipoSAT = '002'
          `
          rowsD, errD = conn.Query(query)
        if errD != nil {
          fmt.Println("que pasho:", errD.Error())
        }
        cuentaISR := ""
        conceptoISR := ""
        if rowsD.Next()  {
          rowsD.Scan(&cuentaISR, &conceptoISR)
        }

        queryDDD := `SELECT ER, nombre,
        ISNULL(PCENT_Manutencion,0),
        ISNULL(PCENT_Posgrado,0),
        ISNULL(PCENT_Ministerial,0),
        ISNULL(PCENT_Pulpito,0),
        ISNULL(PCENT_Extraordinaria,0),
        ISNULL(ayuda_renta,0),
        ISNULL(unidades_seguro,0),
        ISNULL(proyecto,''),
        ISNULL(Departamento,'')
          FROM [Sevenplus].[dbo].[nomina]
          WHERE BUNIT = '`+BUNIT+`'`
        rowsDDD, errDDD := conn.Query(queryDDD)
        if errDDD != nil {
          fmt.Println("que paso:", errDDD.Error())
        }
        PCENT_Manutencion := 0.0
        PCENT_Posgrado := 0.0
        PCENT_Ministerial := 0.0
        PCENT_Pulpito := 0.0
        PCENT_Extraordinaria := 0.0
        ayuda_renta := 0.0
        unidades_seguro := 0.0
        proyecto := ""
        ER := ""
        nombre := ""
        departamento := ""
        type Prepoliza struct {
          ACCNT_CODE string
          PERIOD string
          TRANS_DATETIME string
          AMOUNT float64
          D_C string
          TREFERENCE string
          DESCRIPTN string
          ANAL_T1 string
          ANAL_T2 string
          ANAL_T3 string
          ANAL_T4 string
          ANAL_T5 string
          ANAL_T6 string
          ANAL_T7 string
          ANAL_T8 string
          ANAL_T9 string
        }
        var (
          PrepolizaList map[string]*Prepoliza
        )
        PrepolizaList = make(map[string]*Prepoliza)
        type Calculo struct {
          S float64
          MD float64
          SS float64
          D float64
          TotalIngresos float64
          Diezmo float64
          DiezmoRenta float64
          Afroumn float64
          Salud float64
          TotalDescuentos float64
          Neto float64
          Exenta float64
          Gravada float64
          GravadaAnual float64
          LimiteInferior float64
          ExedenteLimiteInferior float64
          PcentImpuesto float64
          ImpuestoMarginal float64
          CuotaFija float64
          ImpuestoAnual float64
          ImpuestoMensual float64
          ER string
          Nombre string
          Proyecto string
          Departamento string
        }
        var (
          CalculoList map[string]*Calculo
        )
        CalculoList = make(map[string]*Calculo)
        for rowsDDD.Next()  {
          rowsDDD.Scan(&ER, &nombre, &PCENT_Manutencion, &PCENT_Posgrado, &PCENT_Ministerial,&PCENT_Pulpito,&PCENT_Extraordinaria, &ayuda_renta, &unidades_seguro, &proyecto, &departamento)
          PCENT_Manutencion /= 100
          PCENT_Posgrado /= 100
          PCENT_Ministerial /= 100
          PCENT_Pulpito /= 100
          PCENT_Extraordinaria /= 100

          s := Round(base * PCENT_Manutencion, 0.5, 2)
          md := Round(base * PCENT_Posgrado, 0.5, 2)
          ss := Round(base *  PCENT_Ministerial, 0.5, 2)
          d := Round(base * PCENT_Pulpito, 0.5, 2)
          total := Round(s + md +ss + d, 0.5, 2)
          unBono := Round(base*(PCENT_Manutencion+PCENT_Ministerial)*PCENT_Extraordinaria, 0.5, 2)
          dosBonos := Round(unBono * 2.0, 0.5, 2)
          diezmoBonos := Round(dosBonos * 0.1, 0.5, 2)
          diezmoMensualDeBonos := Round(diezmoBonos / 12.0, 0.5, 2)
        //  ingresoMensualDeBonos := Round(dosBonos / 12.0, 0.5, 2)
          diezmo := Round((total*0.1)+diezmoMensualDeBonos, 0.5, 2)
          diezmoRenta := Round(ayuda_renta * 0.1, 0.5, 2)
          afroumn := Round(s * PCENT_AFROUMN, 0.5, 2)
          salud := Round(((s+ss) * PCENT_SALUD) *0.25, 0.5, 2) //hardcode
          descuentos := Round(diezmo + diezmoRenta + afroumn + salud, 0.5, 2)
          neto := Round(total - descuentos, 0.5, 2)
          gravado := Round(neto - Parte_Exenta, 0.5, 2)
          gravadoAnual := Round(gravado * 12.0, 0.5, 2)
          limInferior, cuotaFija, percentImpuesto := LimiteInferior(gravadoAnual)
          exedenteLimInferior := Round(gravadoAnual - limInferior, 0.5, 2)
          impuestoMarginal := Round( exedenteLimInferior * (percentImpuesto/100), 0.5, 2)
          impuestoTotal := Round(impuestoMarginal+cuotaFija, 0.5, 2)
          impuestoMensual := Round(impuestoTotal / 12, 0.5, 2)
          if s > 0 {
            if departamento == "MINISTROS DE CULTO" {
              PrepolizaList[ER+"-1"] = &Prepoliza{cuentaExenta,delPeriodo,fecha, Parte_Exenta,"D", fecha,nombre,"","10", proyecto, "31", "", ER, "", "", ""}        
              PrepolizaList[ER+"-2"] = &Prepoliza{ER,delPeriodo,fecha, Parte_Exenta,"C", fecha,cuentaExentaConcepto,"","10", "", "", "", "", "", "", ""}        
              PrepolizaList[ER+"-3"] = &Prepoliza{cuentaGravada,delPeriodo,fecha, gravado,"D", fecha,nombre,"","10", proyecto, "31", "", ER, "", "", ""}        
              PrepolizaList[ER+"-4"] = &Prepoliza{ER,delPeriodo,fecha, gravado,"C", fecha,cuentaGravadaConcepto,"","10", "", "", "", "", "", "", ""}
              PrepolizaList[ER+"-5"] = &Prepoliza{ER,delPeriodo,fecha, impuestoMensual,"D", fecha,conceptoISR,"","10", "", "", "", "", "", "", ""}
              PrepolizaList[ER+"-6"] = &Prepoliza{cuentaISR,delPeriodo,fecha, impuestoMensual,"C", fecha,nombre,"","10", "", "", "", "", "", "", ""}
            }
            CalculoList[ER] = &Calculo{s,md,ss,d,total,diezmo,diezmoRenta,afroumn,salud,descuentos,neto,Parte_Exenta,gravado,gravadoAnual,limInferior,exedenteLimInferior,percentImpuesto,impuestoMarginal,cuotaFija,impuestoTotal,impuestoMensual,ER,nombre, proyecto, departamento}
          }   
        }//for  
        var cadOriginal bytes.Buffer
        cadOriginal.WriteString(`<SSC>
      <SunSystemsContext>
        <BusinessUnit>`+BUNIT+`</BusinessUnit>
        <BudgetCode>A</BudgetCode>
      </SunSystemsContext>
      <MethodContext>
        <LedgerPostingParameters>
          <JournalType>JV</JournalType>
          <PostingType>2</PostingType>
          <PostProvisional>N</PostProvisional>
          <PostToHold>N</PostToHold>
          <BalancingOptions>T2</BalancingOptions>
          <SuspenseAccount>338100</SuspenseAccount>
          <TransactionAmountAccount>338100</TransactionAmountAccount>
          <ReportingAccount>338100</ReportingAccount>
          <SupressSubstitutedMessages>N</SupressSubstitutedMessages>
          <ReportErrorsOnly>N</ReportErrorsOnly>
        </LedgerPostingParameters>
      </MethodContext>
      <Payload>
        <Ledger>`)  
        var keys []string
          for k := range PrepolizaList {
              keys = append(keys, k)
          }
          sort.Strings(keys)

//        for _, k := range keys {
//              fmt.Println("Key:", k, "Value:", m[k])
//          }
        //for _, linea := range PrepolizaList {
        for _, k := range keys {
          linea := PrepolizaList[k]
          fechaOriginal := linea.TRANS_DATETIME
          anioFecha := fechaOriginal[0:4]
          mesFecha := fechaOriginal[5:7]
          diaFecha := fechaOriginal[8:10]
          fechaFinal := diaFecha+mesFecha+anioFecha
          periodAux := linea.PERIOD
          anioP := periodAux[0:4]
          mesP := periodAux[4:]
          periodAux = mesP+anioP
          amo := fmt.Sprintf("%.2f",linea.AMOUNT)
          arreglo2 := strings.Split(amo, ".")
          if len(arreglo2) > 1 {//hay punto
            if len(arreglo2[1]) == 1 {//solo un decimal
              amo = amo +"0"
            }
          }
          cadOriginal.WriteString(`<Line>
                <TransactionReference>`+linea.TREFERENCE+`</TransactionReference>
                <AccountingPeriod>`+periodAux+`</AccountingPeriod>
                <TransactionDate>`+fechaFinal+`</TransactionDate>
                <AccountCode>`+linea.ACCNT_CODE+`</AccountCode>
                <AnalysisCode2/>
                <AnalysisCode3>`+linea.ANAL_T2+`</AnalysisCode3>
                <AnalysisCode4>`+linea.ANAL_T3+`</AnalysisCode4>
                <AnalysisCode5>`+linea.ANAL_T4+`</AnalysisCode5>
                <AnalysisCode6>`+linea.ANAL_T5+`</AnalysisCode6>
                <AnalysisCode7>`+linea.ANAL_T6+`</AnalysisCode7>
                <AnalysisCode8>`+linea.ANAL_T7+`</AnalysisCode8>
                <AnalysisCode9>`+linea.ANAL_T8+`</AnalysisCode9>
                <AnalysisCode10>`+linea.ANAL_T9+`</AnalysisCode10>
                <Description>`+linea.DESCRIPTN+`</Description>
                <Value4Amount>`+amo+`</Value4Amount>
                <DebitCredit>`+linea.D_C+`</DebitCredit>
                <Value4CurrencyCode>MXP1</Value4CurrencyCode>
                <DueDate>`+fechaFinal+`</DueDate>
              </Line>`) 
        }
        cadOriginal.WriteString(`</Ledger>
                  </Payload>
                </SSC>
                `)  
        fmt.Println(cadOriginal.String())
        soap, err := gosoap.SoapClient("http://localhost:8080/connect/wsdl/SecurityProvider?wsdl","http://localhost:8080/connect/soap/SecurityProvider")
        if err != nil {
          fmt.Errorf("error not expected: %s", err)
        }
        params := gosoap.Params{
          "name": "AOK",
          "password" : "123",
        }
        err = soap.Call("Authenticate", "SecurityProviderAuthenticateRequest", params)
        if err != nil {
          fmt.Errorf("error in soap call: %s", err)
        }
        vaucher := soap.GetResponse()
        fmt.Println(vaucher)
        soapJournal, err := gosoap.SoapClient("http://localhost:8080/connect/wsdl/ComponentExecutor?wsdl","http://localhost:8080/connect/soap/ComponentExecutor")
        if err != nil {
          fmt.Errorf("error not expected: %s", err)
        }

        params = gosoap.Params{
          "authentication": vaucher,
          "licensing" : "",
          "component" : "Journal",
          "method" : "Import",
          "group" : "",
          "payload" : cadOriginal.String(),
        }
        err = soapJournal.Call("Execute", "ComponentExecutorExecuteRequest", params)
        if err != nil {
          fmt.Errorf("error in soap call: %s", err)
        }
        diarioContabilizado := soapJournal.GetResponse()
        fmt.Println(diarioContabilizado)
        if diarioContabilizado != "error"{
          generaDiarioFunction(diarioContabilizado, BUNIT, c, libro)
        } else {
          fmt.Println("error, checar payload")
        }
      }
      
    }
  } else {
    hash := c.GetString("hash")
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.String() 
    substring := string(dateString[0:10])
      byteArray := []byte(substring)
    hasher := sha512.New()
      hasher.Write(byteArray)
    cryptoText := base64.StdEncoding.EncodeToString(  []byte(hex.EncodeToString(hasher.Sum(nil))))
    if Compare(cryptoText,hash)==0 {

      diario := c.GetString("diario")
      fmt.Println(diario)
      ///s := "D7CMDZgYQUQQWAKQGrHAFnVYAmADKAOx56HB7in5HAAcAzKKPXmKyAFQghQD2ATgBcApgAIAJgEsAhqIpUChALQZ0dEsAAiaTNmrFS5SoX1oCTVqFYBVAGIA5ACrlQ3KAGU4AGWuaCPAREJGTljfRVMdVZsVT1FEjJ5E0V1Jis2YDsnFzdPHz9XaECxKVkk8NU0egBWADpwWi0dLFx4w3KUiBwLDM0ABTzff24AoRKQjqIItXAa+saY3VaiBKMFGgYmFgzOEb4x4LKwxWmwdA1tWOWDROOaSjTLGwdnYeg+mAAldwB5Yf2gqVQutlJVQOdos04it2ncyLRzOl0llXoV3l9fv9iodgckppV8BcoddVpMyF0eul+h9vn80W5sUCyadCZCMNVoTc1njyfRaFAvABJGD2fzpEajQETOERaq4c5Ndmc0lwsyPDIonI8QYFSXjI4g2XytnoDkk2Eg1KU57ZN4ebxDQoA/W4iqmsC0dC1bqK03Ki08sDgbpI1j9HVvBkHJky9ker0+xbgf23S3MflCkVi9gS5045kYSA4Qh1ei+5Pm1OBh7WzIvLXQRA/ZBZp2M6WGwu4Eu1MtJlPc0wI9XI+t2pst0Vt6MdnkRIt4ACctUal3QFf0KrTwdr/QnrYlRRnBrnXfwy4WwCAA="
      //resultado, errR := encoding.DecompressFromEncodedUriComponent(diario)
      //if errR!=nil {
        //fmt.Println(errR) 
    //  }
    //  fmt.Println(resultado)
      JRNAL_SRCE := c.GetString("source")
      
    
      PASS_SSC := c.GetString("pass")
      //diarioString, _ := base64.StdEncoding.DecodeString(diario)
      arreglo := strings.Split(diario, "|")
      numLineasString := arreglo[2]
      BUNIT := arreglo[3]
      tipoDeDiario := arreglo[4]
      numLineas , _ := strconv.Atoi(numLineasString)
      var cadOriginal bytes.Buffer//<User><Name>`+JRNAL_SRCE+`</Name></User>
      cadOriginal.WriteString(`<SSC><User><Name>`+JRNAL_SRCE+`</Name></User>
    <SunSystemsContext>
      <BusinessUnit>`+BUNIT+`</BusinessUnit>
      <BudgetCode>`+libro+`</BudgetCode>
    </SunSystemsContext>
    <MethodContext>
      <LedgerPostingParameters>
        <JournalType>`+tipoDeDiario+`</JournalType>
        <PostingType>2</PostingType>
        <PostProvisional>N</PostProvisional>
        <PostToHold>N</PostToHold>
        <BalancingOptions>T2</BalancingOptions>
        <SuspenseAccount>338100</SuspenseAccount>
        <TransactionAmountAccount>338100</TransactionAmountAccount>
        <ReportingAccount>338100</ReportingAccount>
        <SupressSubstitutedMessages>N</SupressSubstitutedMessages>
        <ReportErrorsOnly>N</ReportErrorsOnly>`)
      if libro == "B" {
    cadOriginal.WriteString(`<AllowBalTran>0002</AllowBalTran>`)  
      }
      cadOriginal.WriteString(`</LedgerPostingParameters>
    </MethodContext>
    <Payload>
      <Ledger>`)  
      num := 17
      for i := 0; i < numLineas; i++ {
        //try to arreglar period
        periodAux := arreglo[6+(i*num)]
        anio := periodAux[0:4]
        mes := periodAux[4:]
        /*mmmes, _ := strconv.Atoi(mes)
        mes = "0"+strconv.Itoa(mmmes)
        if mmmes < 10 {
          mes = "00"+strconv.Itoa(mmmes)
        }*/
        periodAux = mes+anio
        cadOriginal.WriteString(`<Line>
              <TransactionReference>`+arreglo[5+(i*num)]+`</TransactionReference>
              <AccountingPeriod>`+periodAux+`</AccountingPeriod>
              <TransactionDate>`+arreglo[7+(i*num)]+`</TransactionDate>
              <AccountCode>`+arreglo[8+(i*num)]+`</AccountCode>
              <AnalysisCode1>`+arreglo[9+(i*num)]+`</AnalysisCode1>
              <AnalysisCode2>`+arreglo[10+(i*num)]+`</AnalysisCode2>
              <AnalysisCode3>`+arreglo[11+(i*num)]+`</AnalysisCode3>
              <AnalysisCode4>`+arreglo[12+(i*num)]+`</AnalysisCode4>
              <AnalysisCode5>`+arreglo[13+(i*num)]+`</AnalysisCode5>
              <AnalysisCode6>`+arreglo[14+(i*num)]+`</AnalysisCode6>
              <AnalysisCode7>`+arreglo[15+(i*num)]+`</AnalysisCode7>
              <AnalysisCode8>`+arreglo[16+(i*num)]+`</AnalysisCode8>
              <AnalysisCode9>`+arreglo[17+(i*num)]+`</AnalysisCode9>
              <AnalysisCode10>`+arreglo[18+(i*num)]+`</AnalysisCode10>
              <Description>`+arreglo[19+(i*num)]+`</Description>
              <Value4Amount>`+arreglo[20+(i*num)]+`</Value4Amount>
              <DebitCredit>`+arreglo[21+(i*num)]+`</DebitCredit>
              <Value4CurrencyCode>MXP1</Value4CurrencyCode>
              <DueDate>`+arreglo[7+(i*num)]+`</DueDate>`)
if i==3 && PASS_SSC == "activower" {
cadOriginal.WriteString(`<AssetCode>`+arreglo[22+(i*num)]+`</AssetCode>
                <AssetIndicator>`+arreglo[23+(i*num)]+`</AssetIndicator>
                <MemoAmount>1.00</MemoAmount>`) 
}
            cadOriginal.WriteString(`</Line>`)

         
               
      }
      cadOriginal.WriteString(`</Ledger>
                  </Payload>
                </SSC>
                `)  
      //cadOriginal.Reset()
fmt.Println("hardcodeo")
/*<Description>GONZALEZ ALCUDIA HUMBERTO</Description>
        <Value4Amount>3500</Value4Amount>
        <DebitCredit>D</DebitCredit>
        <Value4CurrencyCode>MXP1</Value4CurrencyCode>
        <DueDate>07052017</DueDate>*/
    /*  cadOriginal.WriteString(`<SSC>
          <SunSystemsContext>
            <BusinessUnit>CEA</BusinessUnit>
            <BudgetCode>A</BudgetCode>
          </SunSystemsContext>
          <MethodContext>
            <LedgerPostingParameters>
              <JournalType>CRDI</JournalType>
              <PostingType>2</PostingType>
              <PostProvisional>N</PostProvisional>
              <PostToHold>N</PostToHold>
              <BalancingOptions>T2</BalancingOptions>
              <SuspenseAccount>338100</SuspenseAccount>
              <TransactionAmountAccount>338100</TransactionAmountAccount>
              <ReportingAccount>338100</ReportingAccount>
              <SupressSubstitutedMessages>N</SupressSubstitutedMessages>
              <ReportErrorsOnly>Y</ReportErrorsOnly>
            </LedgerPostingParameters>
          </MethodContext>
          <Payload>
            <Ledger><Line>
                                <TransactionReference>EFECTIVO</TransactionReference>
                                <AccountingPeriod>0052017</AccountingPeriod>
                                <TransactionDate>16052017</TransactionDate>
                                <AccountCode>101110</AccountCode>
                                <AnalysisCode1></AnalysisCode1>
                                <AnalysisCode2></AnalysisCode2>
                                <AnalysisCode3>10</AnalysisCode3>
                                <AnalysisCode4></AnalysisCode4>
                                <AnalysisCode5></AnalysisCode5>
                                <AnalysisCode6></AnalysisCode6>
                                <AnalysisCode7></AnalysisCode7>
                                <AnalysisCode8></AnalysisCode8>
                                <AnalysisCode9></AnalysisCode9>
                                <AnalysisCode10></AnalysisCode10>
                                <Description>JONATHAN ORTEGA ANAYA</Description>

                                <Value4Amount>800</Value4Amount>
                                <DebitCredit>D</DebitCredit>
                                <Value4CurrencyCode>MXP1</Value4CurrencyCode>
                                <DueDate>16072015</DueDate>
                              </Line><Line>
                                <TransactionReference>EFECTIVO</TransactionReference>
                                <AccountingPeriod>0052017</AccountingPeriod>
                                <TransactionDate>16052017</TransactionDate>
                                <AccountCode>368CAMVE01</AccountCode>
                                <AnalysisCode1></AnalysisCode1>
                                <AnalysisCode2></AnalysisCode2>
                                <AnalysisCode3>10</AnalysisCode3>
                                <AnalysisCode4></AnalysisCode4>
                                <AnalysisCode5></AnalysisCode5>
                                <AnalysisCode6>TVILLA02</AnalysisCode6>
                                <AnalysisCode7></AnalysisCode7>
                                <AnalysisCode8>IN</AnalysisCode8>
                                <AnalysisCode9></AnalysisCode9>
                                <AnalysisCode10></AnalysisCode10>
                                <Description>CAMPAMENTO MENORES/JONATHAN ORTEGA ANAYA</Description>
                                <Value4Amount>800</Value4Amount>
                                <DebitCredit>C</DebitCredit>
                                <Value4CurrencyCode>MXP1</Value4CurrencyCode>
                                <DueDate>16072015</DueDate>
                              </Line></Ledger>
                                                                  </Payload>
                                                                </SSC>`)
                                                                */
      fmt.Println(cadOriginal.String())
      
      soap, err := gosoap.SoapClient("http://localhost:8080/connect/wsdl/SecurityProvider?wsdl","http://localhost:8080/connect/soap/SecurityProvider")
      if err != nil {
        fmt.Errorf("error not expected: %s", err)
      }
      //"name": JRNAL_SRCE,
      
      PASS_SSC = ""
      if JRNAL_SRCE == "TAS" {
        PASS_SSC = "WrepruPhuxA2t7CREspetrEj"
      }
      if JRNAL_SRCE == "ANR" {
        PASS_SSC = "$3tUDehKm_3RHf=3P4W3_JT2"
      }
      params := gosoap.Params{
        "name": JRNAL_SRCE,
        "password" : PASS_SSC,
      }
      err = soap.Call("Authenticate", "SecurityProviderAuthenticateRequest", params)
      if err != nil {
        PASS_SSC = "123"
        params := gosoap.Params{
          "name": JRNAL_SRCE,
          "password" : PASS_SSC,
        }
        err = soap.Call("Authenticate", "SecurityProviderAuthenticateRequest", params)
        if err != nil {
          JRNAL_SRCE = "ZC1"//hardcore maximus
          PASS_SSC = ""
          params := gosoap.Params{
            "name": JRNAL_SRCE,
            "password" : PASS_SSC,
          }
          err = soap.Call("Authenticate", "SecurityProviderAuthenticateRequest", params)
          if err != nil {
            fmt.Errorf("error in soap call: %s", err)
          }
        }
      }
      vaucher := soap.GetResponse()
      fmt.Println(vaucher)
      soapJournal, err := gosoap.SoapClient("http://localhost:8080/connect/wsdl/ComponentExecutor?wsdl","http://localhost:8080/connect/soap/ComponentExecutor")
      if err != nil {
        fmt.Errorf("error not expected: %s", err)
      }

      params = gosoap.Params{
        "authentication": vaucher,
        "licensing" : "",
        "component" : "Journal",
        "method" : "Import",
        "group" : "",
        "payload" : cadOriginal.String(),
      }
      err = soapJournal.Call("Execute", "ComponentExecutorExecuteRequest", params)
      if err != nil {
        fmt.Errorf("error in soap call: %s", err)
      }
      diarioContabilizado := soapJournal.GetResponse()
      
      
      fmt.Println(diarioContabilizado+" "+ JRNAL_SRCE)
      if diarioContabilizado != "error"{
        generaDiarioFunction(diarioContabilizado, BUNIT, c, libro)
      } else {
        correoA := BUNIT
        diarioContabilizado = soapJournal.GetResponseError()
        fmt.Println("error, checar payload "+ correoA)
        x := diarioContabilizado
        numDeCaracteres := 200 
        i := strings.Index(x, "error")
        var cadOriginal bytes.Buffer
        
        if i > -1 {
          for {
            ver := len (x)
            if ver < i+numDeCaracteres {
              numDeCaracteres = ver-i
            }
            chars := x[i:i+numDeCaracteres]
            cadOriginal.WriteString(chars+`\n`)
            x = x[i+numDeCaracteres:]
            i = strings.Index(x, "error")
            if i  > -1 {
            }else {
              break
            }
          }
        } else {
        }
        c.Data["mensaje"] = diarioContabilizado//cadOriginal.String()
        c.TplName = "error.tpl"
      }
    }//if
  }//else
}//get


func (c *DescargarConcentradoEmpleadosController) Get() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := `SELECT nombre, rfc, curp, NumSeguridadSocial, SDI FROM [Sevenplus].[dbo].[nomina] WHERE BUNIT = '`+BUNIT.(string)+`'`
      rows, err := conn.Query(query)
      var nombre string
    var rfc string
    var curp string
    var NumSeguridadSocial string
    var SDI float64
    i := 0
    records := [][]string{}
    for rows.Next()  {
      SDI=0.0
      NumSeguridadSocial = ""
      rows.Scan(&nombre, &rfc, &curp, &NumSeguridadSocial, &SDI)
      nombre = strings.TrimSpace(nombre)
      rfc = strings.TrimSpace(rfc)
      curp = strings.TrimSpace(curp)
      NumSeguridadSocial = strings.TrimSpace(NumSeguridadSocial)
      nombre = strings.Replace(nombre, "á", "a", -1)
      nombre = strings.Replace(nombre, "é", "e", -1)
      nombre = strings.Replace(nombre, "í", "i", -1)
      nombre = strings.Replace(nombre, "ó", "o", -1)
      nombre = strings.Replace(nombre, "ú", "u", -1)
      nombre = strings.Replace(nombre, "ñ", "n", -1)
      row1 := []string{nombre,rfc,curp,NumSeguridadSocial, fmt.Sprintf("%.2f",SDI)}
      records = append(records, row1)
      i = i + 1
    }
    c.Ctx.Output.ContentType("text/csv")
    c.Ctx.Output.Header("Content-Disposition", "attachment; filename=datosManuntencion.csv")
    writer := csv.NewWriter(c.Ctx.ResponseWriter)
    for _, record := range records {
        err := writer.Write(record)
        if err != nil {
            return
        }
    }
    writer.Flush()
  }
}



func (c *ObtenerDiarioAnteriormentePosteadoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    DB := c.GetSession("DB")
    diario := c.GetString("diarioAnterior")
    //connString2 := "Database="+DB.(string)+";Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT c.JRNAL_TYPE, ISNULL(c.VCHR_NUM,'') as VCHR_NUM, c.JRNAL_NO, c.JRNAL_LINE, c.TRANS_DATETIME, c.PERIOD, c.JRNAL_SRCE, c.TREFERENCE, c.ACCNT_CODE, a.DESCR, c.ANAL_T0, c.ANAL_T1, c.ANAL_T2, c.ANAL_T3, c.ANAL_T4, c.ANAL_T5, c.ANAL_T6, c.ANAL_T7, c.ANAL_T8, c.ANAL_T9,c.DESCRIPTN, c.AMOUNT, c.CONV_CODE, c.D_C, c.ALLOCATION FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] c INNER JOIN ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_ACNT] a on a.ACNT_CODE = c.ACCNT_CODE WHERE c.JRNAL_NO = "+diario+" order by c.JRNAL_LINE asc"
    rows, err := conn.Query(query)
    var D_C string
    var TRANS_DATETIME time.Time
    var JRNAL_SRCE string
    var PERIOD int
    var JRNAL_NO int
    var JRNAL_LINE int
    var VCHR_NUM string
    var DESCRIPTN string
    var descripcionCuenta string
    var recurso string
    var tfww string
    var fondo string
    var funcion string
    var moneda string
    var restriccion string
    var orgId string
    var who string
    var detalle string
    var proyecto string
    var flag string 
    var cuenta string
    var allocation string
    var treference string 
    var amount decimal.Dec
    var JRNAL_TYPE string
    type DiarioBuscar struct {
      Diario int
      Linea int
      AMOUNT float64
      D_C string
      TRANS_DATETIME string
      PERIOD int
      DESCRIPTN string
      TREFERENCE string
      VCHR_NUM string
      Cuenta string
      NombreDeCuenta string
      Recurso string
      TFWW string
      Fondo string
      Funcion string
      RSTR string
      OrgID string
      WHO string
      Flag string
      Proyecto string
      Detalle string
      JRNAL_SRCE string
      JRNAL_TYPE string
    }
    var (
      DiarioBuscarList map[string]*DiarioBuscar
    )
    DiarioBuscarList = make(map[string]*DiarioBuscar)
    
    for rows.Next()  {
      rows.Scan(&JRNAL_TYPE, &VCHR_NUM, &JRNAL_NO, &JRNAL_LINE, &TRANS_DATETIME, &PERIOD, &JRNAL_SRCE, &treference, &cuenta, &descripcionCuenta,&recurso, &tfww, &fondo, &funcion, &restriccion, &orgId, &who, &flag, &proyecto, &detalle, &DESCRIPTN, &amount, &moneda, &D_C, &allocation)
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      fechaReal := ""
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          }
        }
      }
      VCHR_NUM = strings.TrimSpace(VCHR_NUM)
      treference = strings.TrimSpace(treference)
      cuenta = strings.TrimSpace(cuenta)
      descripcionCuenta = strings.TrimSpace(descripcionCuenta)
      recurso = strings.TrimSpace(recurso)
      tfww = strings.TrimSpace(tfww)
      fondo = strings.TrimSpace(fondo)
      funcion = strings.TrimSpace(funcion)
      restriccion = strings.TrimSpace(restriccion)
      orgId = strings.TrimSpace(orgId)
      who = strings.TrimSpace(who)
      detalle = strings.TrimSpace(detalle)
      proyecto = strings.TrimSpace(proyecto)
      DESCRIPTN = strings.TrimSpace(DESCRIPTN)
      flag = strings.TrimSpace(flag)    
      amountPrima := amount.Float64()
      amountPrima = amountPrima*-1.0
      JRNAL_SRCE = strings.TrimSpace(JRNAL_SRCE)
      JRNAL_TYPE = strings.TrimSpace(JRNAL_TYPE)
      
      TREFERENCE := treference//cuenta+"|"+descripcionCuenta+"|"+ JRNAL_SRCE+"|"+fondo+"|"+funcion+"|"+restriccion+"|"+orgId+"|"+who+"|"+proyecto+"|"+detalle
      DiarioBuscarList[strconv.Itoa(JRNAL_LINE)] = &DiarioBuscar{JRNAL_NO, JRNAL_LINE, amountPrima, D_C, fechaReal, PERIOD, DESCRIPTN, TREFERENCE, VCHR_NUM, cuenta,descripcionCuenta, recurso,tfww,fondo,funcion,restriccion,orgId,who,flag,proyecto,detalle,JRNAL_SRCE,JRNAL_TYPE }
    }
    example := map[string]interface{}{ "success" : 1, "diarios": DiarioBuscarList }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
func (c *GenerarDiarioSevenController) Get() {
  BUNIT := c.GetString("bunit")
  diario := c.GetString("d")
  connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
  conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
  if err != nil {
    fmt.Println("Open connection failed:", err.Error())
  }
  query := "SELECT c.JRNAL_NO, c.JRNAL_LINE, c.TRANS_DATETIME, c.PERIOD, c.JRNAL_SRCE, c.TREFERENCE, c.ACCNT_CODE, a.DESCR, c.ANAL_T1, c.ANAL_T2, c.ANAL_T3, c.ANAL_T4, c.ANAL_T5, c.ANAL_T6, c.ANAL_T9, c.ANAL_T8,c.DESCRIPTN, c.AMOUNT, c.CONV_CODE, c.ANAL_T7, c.D_C, c.ALLOCATION FROM [SunSystemsData].[dbo].["+BUNIT+"_A_SALFLDG] c INNER JOIN [SunSystemsData].[dbo].["+BUNIT+"_ACNT] a on a.ACNT_CODE = c.ACCNT_CODE WHERE c.JRNAL_NO = "+diario+" order by c.JRNAL_LINE asc"
    rows, err := conn.Query(query)
    var D_C string
    var TRANS_DATETIME time.Time
    var JRNAL_SRCE string
    var PERIOD int
    var JRNAL_NO int
    var JRNAL_LINE int
  var DESCRIPTN string
  var descripcionCuenta string
  var tfww string
  var fondo string
  var funcion string
  var moneda string
  var restriccion string
  var orgId string
  var who string
  var detalle string
  var proyecto string
  var flag string 
  var cuenta string
  var allocation string
  var treference string 
  var amount decimal.Dec
  models.ClearDiarioBuscarCantidad()
  var cedul  models.DiarioBuscarCantidad
  
  for rows.Next()  {
    rows.Scan(&JRNAL_NO, &JRNAL_LINE, &TRANS_DATETIME, &PERIOD, &JRNAL_SRCE, &treference, &cuenta, &descripcionCuenta, &tfww, &fondo, &funcion, &restriccion, &orgId, &who, &detalle, &proyecto, &DESCRIPTN, &amount, &moneda, &flag, &D_C, &allocation)
    mes := int(TRANS_DATETIME.Month())
    dia :=  TRANS_DATETIME.Day()
    fechaReal := ""
    if mes > 9 && dia > 9 {
      fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
    } else {
      if mes > 9 && dia < 10 {
        fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes < 10 && dia > 9 {
          fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        }
      }
    }
    treference = strings.TrimSpace(treference)
    cuenta = strings.TrimSpace(cuenta)
    descripcionCuenta = strings.TrimSpace(descripcionCuenta)
    tfww = strings.TrimSpace(tfww)
    fondo = strings.TrimSpace(fondo)
    funcion = strings.TrimSpace(funcion)
    restriccion = strings.TrimSpace(restriccion)
    orgId = strings.TrimSpace(orgId)
    who = strings.TrimSpace(who)
    detalle = strings.TrimSpace(detalle)
    proyecto = strings.TrimSpace(proyecto)
    DESCRIPTN = strings.TrimSpace(DESCRIPTN)
    flag = strings.TrimSpace(flag)    
    amountPrima := amount.Float64()
    if Compare(D_C,"C")==0 {
      amountPrima = amountPrima*-1.0
    }
    JRNAL_SRCE = strings.TrimSpace(JRNAL_SRCE)
    TREFERENCE := cuenta+"|"+descripcionCuenta+"|"+ JRNAL_SRCE+"|"+fondo+"|"+funcion+"|"+restriccion+"|"+orgId+"|"+who+"|"+proyecto+"|"+detalle
    cedul = models.DiarioBuscarCantidad{JRNAL_NO, JRNAL_LINE, amountPrima, D_C, fechaReal, PERIOD, DESCRIPTN, TREFERENCE}
    llave := strconv.Itoa(JRNAL_NO)+"-"+strconv.Itoa(JRNAL_LINE)
    models.AddDiarioBuscarCantidad(cedul, llave )
  }
  example := map[string]interface{}{ "success" : 1, "diarios": models.GetAllDiarioBuscarCantidad() }
  c.Data["json"] = &example
  c.ServeJSON()
}

func (c *GenerarExcelTablaController) Get() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    //BUNIT := c.GetSession("BUNIT")
    DB := c.GetSession("DB")
    tabla := c.GetString("tabla")
    campos := c.GetString("campos")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    //x := strings.Split(campos, "|")
    //version := x[2]
  
    query := `SELECT ACCNT_CODE,PERIOD,TRANS_DATETIME,JRNAL_NO,JRNAL_LINE,AMOUNT,D_C,ALLOCATION,JRNAL_TYPE,JRNAL_SRCE,TREFERENCE,DESCRIPTN, ALLOC_REF,ASSET_IND,ASSET_CODE ,ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8,ANAL_T9,VCHR_NUM
    FROM [`+DB.(string)+`].[dbo].[`+tabla+`] order by PERIOD asc, JRNAL_NO asc, JRNAL_LINE asc`
    if campos != "" {
      x := strings.Split(campos, "|")
      cuantos := len(x)/3
      first := true
      var cadOriginal bytes.Buffer
      for i := 0; i < cuantos; i++ {
        if first {
          first = false
          cadOriginal.WriteString(` WHERE `+x[0+(i*3)]+` `+x[1+(i*3)]+` '`+x[2+(i*3)]+`' `)
        } else {
          cadOriginal.WriteString(` AND `+x[0+(i*3)]+` `+x[1+(i*3)]+` '`+x[2+(i*3)]+`' `)
        }       
      }
      query = `SELECT ACCNT_CODE,PERIOD,TRANS_DATETIME,JRNAL_NO,JRNAL_LINE,AMOUNT,D_C,ALLOCATION,JRNAL_TYPE,JRNAL_SRCE,TREFERENCE,DESCRIPTN, ALLOC_REF,ASSET_IND,ASSET_CODE ,ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8,ANAL_T9,VCHR_NUM
      FROM [`+DB.(string)+`].[dbo].[`+tabla+`] `+cadOriginal.String()+` order by PERIOD asc, JRNAL_NO asc, JRNAL_LINE asc`
      fmt.Println(cadOriginal.String())
    }
      rows, err := conn.Query(query)
      var D_C string
      var ALLOC_REF string
      var ASSET_IND string
      var ASSET_CODE string
      var JRNAL_TYPE string
      var JRNAL_SRCE string
      var diario int
      var linea int
      var amount decimal.Dec
      var PERIOD int
    var DESCRIPTN string
    var descripcionCuenta string
    var tfww string
    var fondo string
    var funcion string
    var recurso string
    var restriccion string
    var orgId string
    var who string
    var detalle string
    var proyecto string
    var flag string 
    var cuenta string
    var allocation string
    var treference string 
    var VCHR_NUM string
    var TRANS_DATETIME time.Time

    c.Ctx.Output.ContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    c.Ctx.Output.Header("Content-Disposition", "attachment; filename=LibroMayor.xlsx")
    var file *xlsx.File
      var sheet *xlsx.Sheet
      var row *xlsx.Row
      var cell *xlsx.Cell
    /*  var sheetPrima *xlsx.Sheet
      var rowPrima *xlsx.Row
      var cellPrima *xlsx.Cell
     */
      var errEx error
      file = xlsx.NewFile()
      sheet, errEx = file.AddSheet("Libro Mayor")
      if errEx != nil {
          fmt.Printf(errEx.Error())
      }

    records := [][]string{}
    var i int
    i = 0
    row = sheet.AddRow()
       
    cell = row.AddCell()
    font := xlsx.NewFont(12, "Arial Black")
        style := xlsx.NewStyle()
        style.Font = *font                    
        cell.SetStyle(style)  
    cell.Value = "ACCNT_CODE"
    ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "PERIOD"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "TRANS_DATETIME"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "JRNAL_NO"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "JRNAL_LINE"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "AMOUNT"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "D_C"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "ALLOCATION"
    ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "JRNAL_TYPE"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "JRNAL_SRCE"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "TREFERENCE"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "DESCRIPTN"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "ALLOC_REF"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "ASSET_IND"
     ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "ASSET_CODE"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "Recurso"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "TFWW"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "Fondo"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "Funcion"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "Reestriccion"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "Who"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "OrgID"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "Flag"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "Proyecto"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "Detalle"
      ////////////////////
    cell = row.AddCell()
    cell.SetStyle(style)  
      cell.Value = "VCHR_NUM"

    row1 := []string{"ACCNT_CODE","PERIOD","TRANS_DATETIME","JRNAL_NO","JRNAL_LINE","AMOUNT","D_C","ALLOCATION","JRNAL_TYPE","JRNAL_SRCE","TREFERENCE","DESCRIPTN","ALLOC_REF","ASSET_IND","ASSET_CODE","Recurso","TFWW","Fondo","Funcion","Reestriccion","Who","OrgID","Flag","Proyecto","Detalle","VCHR_NUM"}
    records = append(records, row1)
    i = i + 1
    for rows.Next()  {
      //ACCNT_CODE,PERIOD,TRANS_DATETIME,JRNAL_NO,JRNAL_LINE,AMOUNT,D_C,ALLOCATION,JRNAL_TYPE,JRNAL_SRCE,TREFERENCE,DESCRIPTN,ALLOC_REF,ASSET_IND,ASSET_CODE,ASSET_SUB,ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8,ANAL_T9,VCHR_NUM
      rows.Scan(&cuenta, &PERIOD, &TRANS_DATETIME, &diario, &linea, &amount, &D_C, &allocation, &JRNAL_TYPE, &JRNAL_SRCE, &treference, &descripcionCuenta, &ALLOC_REF, &ASSET_IND, &ASSET_CODE, &recurso, &tfww, &fondo, &funcion, &restriccion, &who, &orgId, &flag, &proyecto, &detalle, &VCHR_NUM)
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      fechaReal := ""
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          }
        }
      }
      treference = strings.TrimSpace(treference)
      cuenta = strings.TrimSpace(cuenta)
      descripcionCuenta = strings.TrimSpace(descripcionCuenta)
      descripcionCuenta = strings.Replace(descripcionCuenta, "á", "a", -1)
      descripcionCuenta = strings.Replace(descripcionCuenta, "é", "e", -1)
      descripcionCuenta = strings.Replace(descripcionCuenta, "í", "i", -1)
      descripcionCuenta = strings.Replace(descripcionCuenta, "ó", "o", -1)
      descripcionCuenta = strings.Replace(descripcionCuenta, "ú", "u", -1)
      descripcionCuenta = strings.Replace(descripcionCuenta, "ñ", "n", -1)
      tfww = strings.TrimSpace(tfww)
      fondo = strings.TrimSpace(fondo)
      funcion = strings.TrimSpace(funcion)
      restriccion = strings.TrimSpace(restriccion)
      orgId = strings.TrimSpace(orgId)
      who = strings.TrimSpace(who)
      detalle = strings.TrimSpace(detalle)
      proyecto = strings.TrimSpace(proyecto)
      DESCRIPTN = strings.TrimSpace(DESCRIPTN)
      DESCRIPTN = strings.Replace(DESCRIPTN, "á", "a", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "é", "e", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "í", "i", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "ó", "o", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "ú", "u", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "ñ", "n", -1)
      recurso = strings.TrimSpace(recurso)
      flag = strings.TrimSpace(flag)    
      amountPrima := math.Abs(amount.Float64())
      if Compare(D_C,"C")==0 {
        amountPrima = amountPrima*-1.0
      }
      amountString := fmt.Sprintf("%.2f", amountPrima)// strconv.FormatFloat(amountPrima, 'E', 2, 64)
      row = sheet.AddRow()
      cell = row.AddCell()
      font := xlsx.NewFont(12, "Arial")
          style := xlsx.NewStyle()
          style.Font = *font                    
          cell.SetStyle(style)  
      cell.Value = cuenta
      ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = strconv.Itoa(PERIOD)
        ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = fechaReal
        ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.SetInt(diario)
        ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.SetInt(linea)
         ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.SetFloat(amountPrima)
         ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = D_C
         ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = allocation
         ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = JRNAL_TYPE
         ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = JRNAL_SRCE
         ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = treference
        ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = descripcionCuenta
        ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = ALLOC_REF
        ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = ASSET_IND
        ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = ASSET_CODE
        ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = recurso
        ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = tfww
        ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = fondo
        ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = funcion
        ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = restriccion
        ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = who
        ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = orgId
        ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = flag
        ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = proyecto
        ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = detalle
        ////////////////////
      cell = row.AddCell()
      cell.SetStyle(style)  
        cell.Value = VCHR_NUM

      row1 := []string{cuenta, strconv.Itoa(PERIOD), fechaReal, strconv.Itoa(diario), strconv.Itoa(linea), amountString, D_C, allocation, JRNAL_TYPE, JRNAL_SRCE, treference, descripcionCuenta, ALLOC_REF, ASSET_IND, ASSET_CODE, recurso, tfww, fondo, funcion, restriccion, who, orgId, flag, proyecto, detalle, VCHR_NUM}
      records = append(records, row1)
      i = i + 1
    }
    errEx = file.Save("LibroMayor.xlsx")
      if errEx != nil {
          fmt.Printf(errEx.Error())
      }
      errEx = file.Write(c.Ctx.ResponseWriter)
      if errEx != nil {
          fmt.Printf(errEx.Error())
      }
    return

    c.Ctx.Output.ContentType("text/csv")
    c.Ctx.Output.Header("Content-Disposition", "attachment; filename=LibroMayor.csv")
    writer := csv.NewWriter(c.Ctx.ResponseWriter)
    for _, record := range records {
        err := writer.Write(record)
        if err != nil {
            return
        }
    }
    writer.Flush()
  }
}

func (c *GenerarDiarioEnExcelController) Get() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    diario := c.GetString("diario")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT c.TREFERENCE, c.ACCNT_CODE, a.DESCR, c.ANAL_T1, c.ANAL_T2, c.ANAL_T3, c.ANAL_T4, c.ANAL_T5, c.ANAL_T6, c.ANAL_T9, c.ANAL_T8,c.DESCRIPTN, c.AMOUNT, c.CONV_CODE, c.ANAL_T7, c.D_C, c.ALLOCATION FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] c INNER JOIN [SunSystemsData].[dbo].["+BUNIT.(string)+"_ACNT] a on a.ACNT_CODE = c.ACCNT_CODE WHERE c.JRNAL_NO = "+diario+" order by c.JRNAL_LINE asc"
      rows, err := conn.Query(query)
      var D_C string
    var DESCRIPTN string
    var descripcionCuenta string
    var tfww string
    var fondo string
    var funcion string
    var moneda string
    var restriccion string
    var orgId string
    var who string
    var detalle string
    var proyecto string
    var flag string 
    var cuenta string
    var allocation string
    var treference string 
    var amount decimal.Dec
    records := [][]string{}
    var i int
    i = 0
    for rows.Next()  {
      rows.Scan(&treference, &cuenta, &descripcionCuenta, &tfww, &fondo, &funcion, &restriccion, &orgId, &who, &detalle, &proyecto, &DESCRIPTN, &amount, &moneda, &flag, &D_C, &allocation)
      treference = strings.TrimSpace(treference)
      cuenta = strings.TrimSpace(cuenta)
      descripcionCuenta = strings.TrimSpace(descripcionCuenta)
      descripcionCuenta = strings.Replace(descripcionCuenta, "á", "a", -1)
      descripcionCuenta = strings.Replace(descripcionCuenta, "é", "e", -1)
      descripcionCuenta = strings.Replace(descripcionCuenta, "í", "i", -1)
      descripcionCuenta = strings.Replace(descripcionCuenta, "ó", "o", -1)
      descripcionCuenta = strings.Replace(descripcionCuenta, "ú", "u", -1)
      descripcionCuenta = strings.Replace(descripcionCuenta, "ñ", "n", -1)
      tfww = strings.TrimSpace(tfww)
      fondo = strings.TrimSpace(fondo)
      funcion = strings.TrimSpace(funcion)
      restriccion = strings.TrimSpace(restriccion)
      orgId = strings.TrimSpace(orgId)
      who = strings.TrimSpace(who)
      detalle = strings.TrimSpace(detalle)
      proyecto = strings.TrimSpace(proyecto)
      DESCRIPTN = strings.TrimSpace(DESCRIPTN)
      DESCRIPTN = strings.Replace(DESCRIPTN, "á", "a", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "é", "e", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "í", "i", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "ó", "o", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "ú", "u", -1)
      DESCRIPTN = strings.Replace(DESCRIPTN, "ñ", "n", -1)
      moneda = strings.TrimSpace(moneda)
      flag = strings.TrimSpace(flag)    
      amountPrima := math.Abs(amount.Float64())
      if Compare(D_C,"C")==0 {
        amountPrima = amountPrima*-1.0
      }
      amountString := fmt.Sprintf("%.2f", amountPrima)// strconv.FormatFloat(amountPrima, 'E', 2, 64)
      row1 := []string{treference,cuenta,descripcionCuenta,tfww,fondo,funcion,restriccion,orgId,who,detalle,proyecto,DESCRIPTN,amountString,moneda,flag,allocation}
      records = append(records, row1)
      i = i + 1
    }
    c.Ctx.Output.ContentType("text/csv")
    c.Ctx.Output.Header("Content-Disposition", "attachment; filename=diario"+diario+".csv")
    writer := csv.NewWriter(c.Ctx.ResponseWriter)
    for _, record := range records {
        err := writer.Write(record)
        if err != nil {
            return
        }
    }
    writer.Flush()
  }
}

func (c *MaximoDiarioController) Get() {
  BUNIT := c.GetString("bunit")
  connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
  conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
  if err != nil {
    fmt.Println("Open connection failed:", err.Error())
  }
  query := `SELECT ISNULL(MAX(JRNAL_NO),0) as JRNAL_NO
    FROM [SunSystemsData].[dbo].[`+BUNIT+`_A_SALFLDG]`
  rows, err := conn.Query(query)
    check(err)
    JRNAL_NO := 0
  for rows.Next()  {
    rows.Scan(&JRNAL_NO)
  }
  example := map[string]interface{}{ "Success":1 , "JRNAL_NO" : strconv.Itoa(JRNAL_NO)}
  c.Data["json"] = &example
  c.ServeJSON()
}


func (c *InfoAnticiposMinistrosController) Post() {
  BUNIT := c.GetSession("BUNIT")
  DB := c.GetSession("DB")
  connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
  conn, err := sql.Open("mssql", connString2) 
  defer conn.Close()
  if err != nil {
    fmt.Println("Open connection failed:", err.Error())
  }

  query := `SELECT n.ER, n.correo, n.nombre, n.rfc, n.curp, n.Departamento, ISNULL(n.SDI,0),
    ISNULL(n.proyecto,''), n.numEmpleado, n.c_Banco, n.CuentaBancaria, n.c_Estado, ISNULL(n.FechaInicioRelLaboral,''), ISNULL(n.NumSeguridadSocial,'')
    FROM [Sevenplus].[dbo].[nomina]  n
    INNER JOIN [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_ANL_CODE] a on a.ANL_CODE = n.ER COLLATE SQL_Latin1_General_CP1_CI_AS
    WHERE n.BUNIT = '`+BUNIT.(string)+`' AND a.ANL_CAT_ID = '07' AND a.PROHIBIT_POSTING = 0 order by n.ER asc`

    rows, err := conn.Query(query)
    check(err)
    ER := ""
    correo := ""
    nombre := ""
    rfc := ""
    curp := ""
    Departamento := ""
    SDI := 0.0
    Proyecto := ""
    num := ""
    Banco := ""
    Estado := ""
    CuentaBancaria := ""
    FechaInicioRelLaboral := ""
    NumSeguridadSocial := ""
    type Payroll struct {
      ER string
      Correo string
      Nombre string
      Rfc string
      Curp string
      Departamento string
      SDI float64
      Proyecto string
      Num string
      Banco string
      CuentaBancaria string
      Estado string
      FechaInicioRelLaboral string
      NumSeguridadSocial string
    }
    var (
      PayrollList map[string]*Payroll
    )
    PayrollList = make(map[string]*Payroll)
    for rows.Next()  {
      rows.Scan(&ER, &correo, &nombre, &rfc, &curp, &Departamento, &SDI, &Proyecto, &num, &Banco, &CuentaBancaria, &Estado, &FechaInicioRelLaboral, &NumSeguridadSocial)
      PayrollList[ER] = &Payroll{ER, correo, nombre, rfc, curp, Departamento, SDI, Proyecto, num, Banco, CuentaBancaria, Estado, FechaInicioRelLaboral, NumSeguridadSocial}
    }
    
      type Periodos struct {
      Periodo int
    }
    var (
      PeriodosList map[string]*Periodos
    )
    PeriodosList = make(map[string]*Periodos)

    queryDatos := "SELECT DISTINCT PERIOD FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] ORDER BY PERIOD DESC"
    rowsDatos, err := conn.Query(queryDatos)
    var PERIOD int
    for rowsDatos.Next()  {
      rowsDatos.Scan(&PERIOD)
      PeriodosList[strconv.Itoa(PERIOD)] = &Periodos{PERIOD}
    }

    type TipoDiario struct {
      Tipo string
    }
    TipoDiarioList := make(map[string]*TipoDiario)
    queryDatos = "SELECT DISTINCT JRNAL_TYPE FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE JRNAL_TYPE like '%JV%' OR JRNAL_TYPE like '%MG%' OR JRNAL_TYPE like '%PC%' OR JRNAL_TYPE like '%TE%' ORDER BY JRNAL_TYPE ASC"
    rowsDatos, err = conn.Query(queryDatos)
    var tipoDiario string
    for rowsDatos.Next()  {
      rowsDatos.Scan(&tipoDiario)
      TipoDiarioList[tipoDiario] = &TipoDiario{tipoDiario}
    }

    type Cuentas struct {
      Cuenta string
    }
    CuentasList := make(map[string]*Cuentas)
    queryDatos = "SELECT DISTINCT ACCNT_CODE FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE ACCNT_CODE like '101%' OR ACCNT_CODE like '102%' OR ACCNT_CODE like '178%' ORDER BY ACCNT_CODE ASC"
    rowsDatos, err = conn.Query(queryDatos)
    var cuenta string
    for rowsDatos.Next()  {
      rowsDatos.Scan(&cuenta)
      CuentasList[cuenta] = &Cuentas{cuenta}
    }




    


    queryDatos = "SELECT rfc, regimen, razonSocial, regPatronal, lugarExpedicion FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '"+BUNIT.(string)+"'"
    rowsDatos, err = conn.Query(queryDatos)
    var rfcEmisor string
    var regimen string
    var razonSocial string
    var regPatronal string
    var lugarExpedicion string
    for rowsDatos.Next()  {
      rowsDatos.Scan(&rfcEmisor, &regimen, &razonSocial, &regPatronal, &lugarExpedicion)
      rfcEmisor = strings.TrimSpace(rfcEmisor)
      regimen = strings.TrimSpace(regimen)
      razonSocial = strings.TrimSpace(razonSocial)
      regPatronal = strings.TrimSpace(regPatronal)
      lugarExpedicion = strings.TrimSpace(lugarExpedicion)
    }

    queryD := `SELECT  (COUNT(idCFDINomina)+1) as folio
      FROM [Sevenplus].[dbo].[zNominaFacturas]
      WHERE BUNIT = '`+BUNIT.(string)+`' AND timbrado = 1`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    folioQueSigue:=1
    for rowsD.Next()  {
      rowsD.Scan(&folioQueSigue)
    }
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.Format(time.RFC3339)
    dateStringSubString := string(dateString[0:19])
    
    

  example := map[string]interface{}{ "success":1 , "CuentasList" : CuentasList, "TipoDiarioList" : TipoDiarioList, "PayrollList" : PayrollList, "lugarExpedicion" : lugarExpedicion, "regPatronal" : regPatronal, "razonSocial" : razonSocial, "regimen" : regimen, "rfc" : rfcEmisor, "periodos": PeriodosList, "folio" : folioQueSigue, "date" : dateStringSubString }
  c.Data["json"] = &example
  c.ServeJSON()
}

func (c *InfoAnticiposController) Post() {
  BUNIT := c.GetSession("BUNIT")
  DB := c.GetSession("DB")
  connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
  conn, err := sql.Open("mssql", connString2) 
  defer conn.Close()
  if err != nil {
    fmt.Println("Open connection failed:", err.Error())
  }

  query := `SELECT n.ER, n.correo, n.nombre, n.rfc, n.curp, n.Departamento, ISNULL(n.SDI,0),
    ISNULL(n.proyecto,''), n.numEmpleado, n.c_Banco, n.CuentaBancaria, n.c_Estado, ISNULL(n.FechaInicioRelLaboral,''), ISNULL(n.NumSeguridadSocial,'')
    FROM [Sevenplus].[dbo].[nomina]  n
    INNER JOIN [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_ANL_CODE] a on a.ANL_CODE = n.ER COLLATE SQL_Latin1_General_CP1_CI_AS
    WHERE n.BUNIT = '`+BUNIT.(string)+`' AND (n.Departamento like 'ASO%' OR n.Departamento like 'TRA%') AND a.ANL_CAT_ID = '07' AND a.PROHIBIT_POSTING = 0 order by n.ER asc`

    rows, err := conn.Query(query)
    check(err)
    ER := ""
    correo := ""
    nombre := ""
    rfc := ""
    curp := ""
    Departamento := ""
    SDI := 0.0
    Proyecto := ""
    num := ""
    Banco := ""
    Estado := ""
    CuentaBancaria := ""
    FechaInicioRelLaboral := ""
    NumSeguridadSocial := ""
    type Payroll struct {
      ER string
      Correo string
      Nombre string
      Rfc string
      Curp string
      Departamento string
      SDI float64
      Proyecto string
      Num string
      Banco string
      CuentaBancaria string
      Estado string
      FechaInicioRelLaboral string
      NumSeguridadSocial string
    }
    var (
      PayrollList map[string]*Payroll
    )
    PayrollList = make(map[string]*Payroll)
    for rows.Next()  {
      rows.Scan(&ER, &correo, &nombre, &rfc, &curp, &Departamento, &SDI, &Proyecto, &num, &Banco, &CuentaBancaria, &Estado, &FechaInicioRelLaboral, &NumSeguridadSocial)
      PayrollList[ER] = &Payroll{ER, correo, nombre, rfc, curp, Departamento, SDI, Proyecto, num, Banco, CuentaBancaria, Estado, FechaInicioRelLaboral, NumSeguridadSocial}
    }
    
      type Periodos struct {
      Periodo int
    }
    var (
      PeriodosList map[string]*Periodos
    )
    PeriodosList = make(map[string]*Periodos)

    queryDatos := "SELECT DISTINCT PERIOD FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] ORDER BY PERIOD DESC"
    rowsDatos, err := conn.Query(queryDatos)
    var PERIOD int
    for rowsDatos.Next()  {
      rowsDatos.Scan(&PERIOD)
      PeriodosList[strconv.Itoa(PERIOD)] = &Periodos{PERIOD}
    }

    type TipoDiario struct {
      Tipo string
    }
    TipoDiarioList := make(map[string]*TipoDiario)
    queryDatos = "SELECT DISTINCT JRNAL_TYPE FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE JRNAL_TYPE like '%JV%' OR JRNAL_TYPE like '%MG%' OR JRNAL_TYPE like '%TE%' ORDER BY JRNAL_TYPE ASC"
    rowsDatos, err = conn.Query(queryDatos)
    var tipoDiario string
    for rowsDatos.Next()  {
      rowsDatos.Scan(&tipoDiario)
      TipoDiarioList[tipoDiario] = &TipoDiario{tipoDiario}
    }

    type Cuentas struct {
      Cuenta string
    }
    CuentasList := make(map[string]*Cuentas)
    queryDatos = "SELECT DISTINCT ACCNT_CODE FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE ACCNT_CODE like '101%' OR ACCNT_CODE like '102%' OR ACCNT_CODE like '178%' ORDER BY ACCNT_CODE ASC"
    rowsDatos, err = conn.Query(queryDatos)
    var cuenta string
    for rowsDatos.Next()  {
      rowsDatos.Scan(&cuenta)
      CuentasList[cuenta] = &Cuentas{cuenta}
    }




    


    queryDatos = "SELECT rfc, regimen, razonSocial, regPatronal, lugarExpedicion FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '"+BUNIT.(string)+"'"
    rowsDatos, err = conn.Query(queryDatos)
    var rfcEmisor string
    var regimen string
    var razonSocial string
    var regPatronal string
    var lugarExpedicion string
    for rowsDatos.Next()  {
      rowsDatos.Scan(&rfcEmisor, &regimen, &razonSocial, &regPatronal, &lugarExpedicion)
      rfcEmisor = strings.TrimSpace(rfcEmisor)
      regimen = strings.TrimSpace(regimen)
      razonSocial = strings.TrimSpace(razonSocial)
      regPatronal = strings.TrimSpace(regPatronal)
      lugarExpedicion = strings.TrimSpace(lugarExpedicion)
    }

    queryD := `SELECT  (COUNT(idCFDINomina)+1) as folio
      FROM [Sevenplus].[dbo].[zNominaFacturas]
      WHERE BUNIT = '`+BUNIT.(string)+`' AND timbrado = 1`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    folioQueSigue:=1
    for rowsD.Next()  {
      rowsD.Scan(&folioQueSigue)
    }
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.Format(time.RFC3339)
    dateStringSubString := string(dateString[0:19])
    
    

  example := map[string]interface{}{ "success":1 , "CuentasList" : CuentasList, "TipoDiarioList" : TipoDiarioList, "PayrollList" : PayrollList, "lugarExpedicion" : lugarExpedicion, "regPatronal" : regPatronal, "razonSocial" : razonSocial, "regimen" : regimen, "rfc" : rfcEmisor, "periodos": PeriodosList, "folio" : folioQueSigue, "date" : dateStringSubString }
  c.Data["json"] = &example
  c.ServeJSON()
}


func (c *CuentasSevenController) Get() {
  cuenta := c.GetString("c")
  cuenta = strings.ToUpper(strings.TrimSpace(cuenta))
  BUNIT := c.GetString("bunit")
  connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
  conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
  if err != nil {
    fmt.Println("Open connection failed:", err.Error())
  }
  query := `SELECT ACNT_CODE, DESCR
  FROM [SunSystemsData].[dbo].[`+BUNIT+`_ACNT]
  WHERE UPPER(DESCR) like '%`+cuenta+`%'
  order by ACNT_CODE asc`
    rows, err := conn.Query(query)
    check(err)
    //models.ClearArchivos()
  //var cedul models.Archivos
  type Archivos struct {
      Nombre string
      Completo string
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)

  var ACNT_CODE string
  var DESCR string
  for rows.Next()  {
    rows.Scan(&ACNT_CODE, &DESCR)
    ACNT_CODE = strings.TrimSpace(ACNT_CODE)
    DESCR = strings.TrimSpace(DESCR)    
    ArchivosList[ACNT_CODE] = &Archivos{ACNT_CODE, DESCR}
    //cedul = models.Archivos{ACNT_CODE, DESCR}
    //models.AddArchivos(cedul, ACNT_CODE)      
  }
  example := map[string]interface{}{ "success":1 , "cuentas" : ArchivosList}
  c.Data["json"] = &example
  c.ServeJSON()
}


func (c *GenerarBalanzaSevenController) Get() {
  period := c.GetString("period")
  BUNIT := c.GetString("bunit")
  connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
  conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
  if err != nil {
    fmt.Println("Open connection failed:", err.Error())
  }
  cuenta := ""
  DESCR := ""
  query := `SELECT ACNT_CODE, DESCR
  FROM [SunSystemsData].[dbo].[`+BUNIT+`_ACNT]
  WHERE LEN(ACNT_CODE)>=6
  order by ACNT_CODE asc`
    rows, _ := conn.Query(query)
    
    var saldoAnterior decimal.Dec
    var saldoC decimal.Dec
    var saldoD decimal.Dec
    var saldoFinal float64

    var saldoAnterior_B decimal.Dec
    var saldoC_B decimal.Dec
    var saldoD_B decimal.Dec
    var saldoFinal_B float64
    
    type Balanza struct {
      DESCR string
    Inicial string
    Creditos string
    Debitos string
    Final string
    Inicial_B string
    Creditos_B string
    Debitos_B string
    Final_B string
  }
  BalanzaList := make(map[string]*Balanza)
  for rows.Next()  {
    rows.Scan(&cuenta, &DESCR)
    cuenta = strings.TrimSpace(cuenta)
    DESCR = strings.TrimSpace(DESCR)
    queryT := `SELECT ISNULL(SUM(AMOUNT),0) as amount
  FROM [SunSystemsData].[dbo].[`+BUNIT+`_A_SALFLDG]
  WHERE ACCNT_CODE = '`+cuenta+`' AND ALLOCATION != 'C'
  AND PERIOD < `+period
      rowsT, _ := conn.Query(queryT)
    for rowsT.Next()  {
      rowsT.Scan(&saldoAnterior)
    }
    queryT = `SELECT ISNULL(SUM(AMOUNT),0) as amount
  FROM [SunSystemsData].[dbo].[`+BUNIT+`_B_SALFLDG]
  WHERE ACCNT_CODE = '`+cuenta+`' AND ALLOCATION != 'C'
  AND PERIOD < `+period
      rowsT, _ = conn.Query(queryT)
    for rowsT.Next()  {
      rowsT.Scan(&saldoAnterior_B)
    }

    queryC := `SELECT ISNULL(SUM(AMOUNT),0) as amount
  FROM [SunSystemsData].[dbo].[`+BUNIT+`_A_SALFLDG]
  WHERE ACCNT_CODE = '`+cuenta+`' AND ALLOCATION != 'C'
  AND D_C = 'C'
  AND PERIOD = `+period
      rowsC, _ := conn.Query(queryC)
    for rowsC.Next()  {
      rowsC.Scan(&saldoC)
    }
    queryC = `SELECT ISNULL(SUM(AMOUNT),0) as amount
  FROM [SunSystemsData].[dbo].[`+BUNIT+`_B_SALFLDG]
  WHERE ACCNT_CODE = '`+cuenta+`' AND ALLOCATION != 'C'
  AND D_C = 'C'
  AND PERIOD = `+period
      rowsC, _ = conn.Query(queryC)
    for rowsC.Next()  {
      rowsC.Scan(&saldoC_B)
    }

    queryD := `SELECT ISNULL(SUM(AMOUNT),0) as amount
  FROM [SunSystemsData].[dbo].[`+BUNIT+`_A_SALFLDG]
  WHERE ACCNT_CODE = '`+cuenta+`' AND ALLOCATION != 'C'
  AND D_C = 'D'
  AND PERIOD = `+period
      rowsD, _ := conn.Query(queryD)
      
    for rowsD.Next()  {
      rowsD.Scan(&saldoD)
    }
    queryD = `SELECT ISNULL(SUM(AMOUNT),0) as amount
  FROM [SunSystemsData].[dbo].[`+BUNIT+`_B_SALFLDG]
  WHERE ACCNT_CODE = '`+cuenta+`' AND ALLOCATION != 'C'
  AND D_C = 'D'
  AND PERIOD = `+period
      rowsD, _ = conn.Query(queryD)
      
    for rowsD.Next()  {
      rowsD.Scan(&saldoD_B)
    }
    
    saldoFinal = 0.0    
    saldoFinal =  saldoFinal + (saldoAnterior.Float64()*-1)+math.Abs(saldoC.Float64())-math.Abs(saldoD.Float64())
    saldoFinal_B = 0.0    
    saldoFinal_B =  saldoFinal_B + (saldoAnterior_B.Float64()*-1)+math.Abs(saldoC_B.Float64())-math.Abs(saldoD_B.Float64())

    BalanzaList[cuenta] =&Balanza{DESCR, fmt.Sprintf("%.2f",saldoAnterior.Float64()*-1), fmt.Sprintf("%.2f",math.Abs(saldoC.Float64())), fmt.Sprintf("%.2f",math.Abs(saldoD.Float64() ) ), fmt.Sprintf("%.2f",saldoFinal), fmt.Sprintf("%.2f",saldoAnterior_B.Float64()*-1), fmt.Sprintf("%.2f",math.Abs(saldoC_B.Float64())), fmt.Sprintf("%.2f",math.Abs(saldoD_B.Float64() ) ), fmt.Sprintf("%.2f",saldoFinal_B)}
      
  }
  example := map[string]interface{}{ "success":1 , "balanza" : BalanzaList}
  c.Data["json"] = &example
  c.ServeJSON()
}



func (c *GenerarEstadosDeCuentaCombinadoSevenController) Get() {
    acnt := c.GetString("c")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }

    


    delPeriodo := c.GetString("delPeriodo")
    alPeriodo := c.GetString("alPeriodo")
    
  
    
    query := "SELECT  D_C, SUBSTRING( DESCRIPTN,0,29) as DESCRIPTN, JRNAL_NO, JRNAL_LINE, ANAL_T0, PERIOD, TRANS_DATETIME, ALLOCATION, TREFERENCE, AMOUNT,   ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T9, ANAL_T8, JRNAL_SRCE FROM [SunSystemsData].[dbo].[SNE_A_SALFLDG] WHERE ACCNT_CODE = '"+acnt+"' AND PERIOD >= "+delPeriodo+" AND PERIOD <= "+alPeriodo+" AND ALLOCATION != 'C' "
    query = query+" order by PERIOD desc, JRNAL_NO desc, JRNAL_LINE desc, TRANS_DATETIME desc"      
      rows, err := conn.Query(query)
      if err!=nil {
        fmt.Println(query)
        fmt.Println(err.Error())
      }
    var D_C string
    var DESCRIPTN string
    var diario int
    var linea int
    var ref2 string
    var PERIOD int
    var trans time.Time
    var allocation string
    var treference string 
    var amount decimal.Dec
    err = nil
    
    var periodoActual int
    periodoActual,_ = strconv.Atoi(delPeriodo)
  
    //var nuevoNumero = 0
    //var totalDelPeriodo = 0
    models.ClearDiarioBuscarCantidad()
    var cedul  models.DiarioBuscarCantidad
      var tfww string
    var fondo string
    var funcion string
    var JRNAL_SRCE string
    var restriccion string
    var orgId string
    var who string
    var detalle string
    var proyecto string
    //var flag string 
    var TRANS_DATETIME time.Time
    contador := "a"
    type Archivos struct {
      Nombre string
      Completo string
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)
    //models.ClearArchivos()
    //var archi models.Archivos
    acumulador := 0.0

    for rows.Next()  {
      rows.Scan( &D_C, &DESCRIPTN, &diario, &linea, &ref2, &PERIOD, &trans, &allocation, &treference,&amount , &tfww, &fondo, &funcion, &restriccion, &orgId, &who, &detalle, &proyecto, &JRNAL_SRCE)
      if PERIOD != periodoActual {
        ArchivosList[strconv.Itoa(periodoActual)] =&Archivos{strconv.Itoa(periodoActual), fmt.Sprintf("%.2f",acumulador)}
        //archi = models.Archivos{strconv.Itoa(periodoActual), fmt.Sprintf("%.2f",acumulador)}
        //models.AddArchivos(archi, strconv.Itoa(periodoActual))
        acumulador = 0
        periodoActual = PERIOD
      }
      acumulador += amount.Float64()
      TRANS_DATETIME = trans
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      fechaReal := ""
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          }
        }
      }
      fondo = strings.TrimSpace(fondo)
      funcion = strings.TrimSpace(funcion)
      restriccion = strings.TrimSpace(restriccion)
      orgId = strings.TrimSpace(orgId)
      who = strings.TrimSpace(who)
      detalle = strings.TrimSpace(detalle)
      proyecto = strings.TrimSpace(proyecto)
      JRNAL_SRCE = strings.TrimSpace(JRNAL_SRCE)    
      TREFERENCE := acnt+"| |"+ JRNAL_SRCE+"|"+fondo+"|"+funcion+"|"+restriccion+"|"+orgId+"|"+who+"|"+proyecto+"|"+detalle
      cedul = models.DiarioBuscarCantidad{diario, linea, amount.Float64(), D_C, fechaReal, PERIOD, DESCRIPTN, TREFERENCE}
      //llave := strconv.Itoa(PERIOD)+"-"+strconv.Itoa(diario)+"-"+strconv.Itoa(linea)
      models.AddDiarioBuscarCantidad(cedul, contador) 
      contador = contador + "a"
    }
    ArchivosList[strconv.Itoa(periodoActual)] =&Archivos{strconv.Itoa(periodoActual), fmt.Sprintf("%.2f",acumulador)}
//    archi = models.Archivos{strconv.Itoa(periodoActual), fmt.Sprintf("%.2f",acumulador)}
//    models.AddArchivos(archi, strconv.Itoa(periodoActual))
    query = "SELECT  D_C, SUBSTRING( DESCRIPTN,0,29) as DESCRIPTN, JRNAL_NO, JRNAL_LINE, ANAL_T0, PERIOD, TRANS_DATETIME, ALLOCATION, TREFERENCE, AMOUNT,   ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T9, ANAL_T8, JRNAL_SRCE FROM [SunSystemsData].[dbo].[SRM_A_SALFLDG] WHERE ACCNT_CODE = '"+acnt+"' AND PERIOD >= "+delPeriodo+" AND PERIOD <= "+alPeriodo+" AND ALLOCATION != 'C' "
    query = query+" order by PERIOD desc, JRNAL_NO desc, JRNAL_LINE desc, TRANS_DATETIME desc"      
      rows, err = conn.Query(query)
      if err!=nil {
        fmt.Println(query)
        fmt.Println(err.Error())
      }
      periodoActual,_ = strconv.Atoi(delPeriodo)
  var archi *Archivos
      archi = ArchivosList[strconv.Itoa( periodoActual)]
      cantidadFloat, _ := strconv.ParseFloat(archi.Completo, 64)
      acumulador = cantidadFloat
      for rows.Next()  {
      rows.Scan( &D_C, &DESCRIPTN, &diario, &linea, &ref2, &PERIOD, &trans, &allocation, &treference,&amount , &tfww, &fondo, &funcion, &restriccion, &orgId, &who, &detalle, &proyecto, &JRNAL_SRCE)
      if PERIOD != periodoActual {
        archi = ArchivosList[strconv.Itoa( periodoActual)]
        archi.Completo = fmt.Sprintf("%.2f",acumulador)
        periodoActual = PERIOD
        archi = ArchivosList[strconv.Itoa( periodoActual)]
        cantidadFloat, _ := strconv.ParseFloat(archi.Completo, 64)
          acumulador = cantidadFloat
        
      }
      acumulador += amount.Float64()
      TRANS_DATETIME = trans
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      fechaReal := ""
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          }
        }
      }
      fondo = strings.TrimSpace(fondo)
      funcion = strings.TrimSpace(funcion)
      restriccion = strings.TrimSpace(restriccion)
      orgId = strings.TrimSpace(orgId)
      who = strings.TrimSpace(who)
      detalle = strings.TrimSpace(detalle)
      proyecto = strings.TrimSpace(proyecto)
      JRNAL_SRCE = strings.TrimSpace(JRNAL_SRCE)    
      TREFERENCE := acnt+"| |"+ JRNAL_SRCE+"|"+fondo+"|"+funcion+"|"+restriccion+"|"+orgId+"|"+who+"|"+proyecto+"|"+detalle
      cedul = models.DiarioBuscarCantidad{diario, linea, amount.Float64(), D_C, fechaReal, PERIOD, DESCRIPTN, TREFERENCE}
      //llave := strconv.Itoa(PERIOD)+"-"+strconv.Itoa(diario)+"-"+strconv.Itoa(linea)
      models.AddDiarioBuscarCantidad(cedul, contador) 
      contador = contador + "a"
    }
        
    archi = ArchivosList[strconv.Itoa(periodoActual)]
    archi.Completo = fmt.Sprintf("%.2f",acumulador)
        








    example := map[string]interface{}{ "success":1 , "acumulados" : ArchivosList ,  "diarios": models.GetAllDiarioBuscarCantidad() }
    c.Data["json"] = &example
    c.ServeJSON()
}



func (c *GenerarEstadosDeCuentaSevenController) Get() {
    acnt := c.GetString("c")
    
    BUNIT := c.GetString("bunit")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }

    


    delPeriodo := c.GetString("delPeriodo")
    alPeriodo := c.GetString("alPeriodo")
    
    
    

  //Saldo inicial de periodos
    queryAnterior := "SELECT ISNULL( SUM(AMOUNT),0)  as AMOUNT FROM [SunSystemsData].[dbo].["+BUNIT+"_A_SALFLDG] WHERE PERIOD < "+delPeriodo+" AND ALLOCATION != 'C' AND ACCNT_CODE = '"+acnt+"' "
        
    query := "SELECT  D_C, SUBSTRING( DESCRIPTN,0,29) as DESCRIPTN, JRNAL_NO, JRNAL_LINE, ANAL_T0, PERIOD, TRANS_DATETIME, ALLOCATION, TREFERENCE, AMOUNT,   ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T9, ANAL_T8, JRNAL_SRCE FROM [SunSystemsData].[dbo].["+BUNIT+"_A_SALFLDG] WHERE ACCNT_CODE = '"+acnt+"' AND PERIOD >= "+delPeriodo+" AND PERIOD <= "+alPeriodo+" AND ALLOCATION != 'C' "
    
    query = query+" order by PERIOD asc, JRNAL_NO asc, JRNAL_LINE asc, TRANS_DATETIME asc"
      
      rows, err := conn.Query(query)
      if err!=nil {
        fmt.Println(query)
        fmt.Println(err.Error())
      }
    var D_C string
    var DESCRIPTN string
    var diario int
    var linea int
    var ref2 string
    var PERIOD int
    var trans time.Time
    var allocation string
    var treference string 
    var amount decimal.Dec
    err = nil
    
    var periodoActual int
    periodoActual,_ = strconv.Atoi(delPeriodo)
  
    //var nuevoNumero = 0
    //var totalDelPeriodo = 0
    models.ClearDiarioBuscarCantidad()
    var cedul  models.DiarioBuscarCantidad
      var tfww string
    var fondo string
    var funcion string
    var JRNAL_SRCE string
    var restriccion string
    var orgId string
    var who string
    var detalle string
    var proyecto string
    //var flag string 
    var TRANS_DATETIME time.Time
    contador := "a"
    type Archivos struct {
      Nombre string
      Completo string
      Acumulado string
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)

//    models.ClearArchivos()
//    var archi models.Archivos
    var amountInical decimal.Dec
    rowsInicial, err := conn.Query(queryAnterior)
    var acumulador2 float64
    acumulador2 = 0.0
    for rowsInicial.Next()  {
      rowsInicial.Scan(&amountInical)
      acumulador2 = amountInical.Float64()
    }
    acumulador := acumulador2

    for rows.Next()  {
      rows.Scan( &D_C, &DESCRIPTN, &diario, &linea, &ref2, &PERIOD, &trans, &allocation, &treference,&amount , &tfww, &fondo, &funcion, &restriccion, &orgId, &who, &detalle, &proyecto, &JRNAL_SRCE)
      if PERIOD != periodoActual {
        ArchivosList[strconv.Itoa(periodoActual)] = &Archivos{strconv.Itoa(periodoActual), fmt.Sprintf("%.2f",acumulador2), fmt.Sprintf("%.2f",acumulador)}
        //archi = models.Archivos{strconv.Itoa(periodoActual), fmt.Sprintf("%.2f",acumulador)}
        //models.AddArchivos(archi, strconv.Itoa(periodoActual))
        acumulador = 0
        periodoActual = PERIOD
      }
      acumulador += amount.Float64()
      acumulador2 += amount.Float64()
      TRANS_DATETIME = trans
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      fechaReal := ""
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          }
        }
      }
      fondo = strings.TrimSpace(fondo)
      funcion = strings.TrimSpace(funcion)
      restriccion = strings.TrimSpace(restriccion)
      orgId = strings.TrimSpace(orgId)
      who = strings.TrimSpace(who)
      detalle = strings.TrimSpace(detalle)
      proyecto = strings.TrimSpace(proyecto)
      JRNAL_SRCE = strings.TrimSpace(JRNAL_SRCE)    
      TREFERENCE := acnt+"| |"+ JRNAL_SRCE+"|"+fondo+"|"+funcion+"|"+restriccion+"|"+orgId+"|"+who+"|"+proyecto+"|"+detalle
      cedul = models.DiarioBuscarCantidad{diario, linea, amount.Float64(), D_C, fechaReal, PERIOD, DESCRIPTN, TREFERENCE}
      //llave := strconv.Itoa(PERIOD)+"-"+strconv.Itoa(diario)+"-"+strconv.Itoa(linea)
      models.AddDiarioBuscarCantidad(cedul, contador) 
      contador = contador + "a"
    }
    ArchivosList[strconv.Itoa(periodoActual)] = &Archivos{strconv.Itoa(periodoActual), fmt.Sprintf("%.2f",acumulador2), fmt.Sprintf("%.2f",acumulador)}
//    archi = models.Archivos{strconv.Itoa(periodoActual), fmt.Sprintf("%.2f",acumulador)}
//    models.AddArchivos(archi, strconv.Itoa(periodoActual))
    
    example := map[string]interface{}{ "success":1 , "saldoinicial" : acumulador2, "acumulados" : ArchivosList ,  "diarios": models.GetAllDiarioBuscarCantidad() }
    c.Data["json"] = &example
    c.ServeJSON()
}



func (c *ISRAnualExcelController) Get() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    periodo := c.GetString("periodo")



    anio := periodo[0:4]

    delPeriodo := anio+"001"
    alPeriodo := anio+"012"
    DB := c.GetSession("DB")
    BUNIT := c.GetSession("BUNIT")
    BUNITS := c.GetString("BUNIT")
    bu := BUNIT.(string)
    if len(BUNITS) == 3 {
      bu = BUNITS
    } 
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    queryDireccion := `SELECT ADDR_LINE_1,ADDR_LINE_2,ADDR_LINE_3,ADDR_LINE_4,ADDR_LINE_5 
    FROM [`+DB.(string)+`].[dbo].[`+bu+`_ADDR] WHERE ADDR_CODE = '0000000000'`
    rowsDireccion, err := conn.Query(queryDireccion)
    var addr1 string
    var addr2 string
    var addr3 string
    var addr4 string
    var addr5 string
    for rowsDireccion.Next()  {
      rowsDireccion.Scan(&addr1,&addr2,&addr3,&addr4,&addr5)
    }
    query := `SELECT n.cadOriginal, nn.nombre
      FROM [Sevenplus].[dbo].[zNominaFacturas] n
      INNER JOIN [Sevenplus].[dbo].[nomina] nn on nn.ER = n.ER AND nn.BUNIT = n.BUNIT
      WHERE n.timbrado = 1 AND n.BUNIT = '`+bu+`'
      AND n.periodo >= `+delPeriodo+` AND n.periodo <= `+alPeriodo+`
        order by nn.nombre asc`
    rows, err := conn.Query(query)
    var cad string
    var nombre string

    mapa := make(map[string]float64)
    mapaIMSS := make(map[string]float64)
    mapaRCV := make(map[string]float64)
    mapaEXENTO := make(map[string]float64)
    mapaGravado := make(map[string]float64)
    mapaPrima := make(map[string]float64)
    mapaAguinaldo := make(map[string]float64)

records := [][]string{}
    
    for rows.Next()  {
      rows.Scan(&cad, &nombre)
      cad = strings.TrimSpace(cad)
      x := strings.Split(cad, "|")
      cuantos := len(x)
      nombre = strings.TrimSpace(nombre)
      if _, ok := mapa[nombre]; ok {
        } else {
        mapa[nombre] = 0.00
      }
      if _, ok := mapaIMSS[nombre]; ok {
        } else {
        mapaIMSS[nombre] = 0.00
      }
      if _, ok := mapaRCV[nombre]; ok {
        } else {
        mapaRCV[nombre] = 0.00
      }
      if _, ok := mapaEXENTO[nombre]; ok {
        } else {
        mapaEXENTO[nombre] = 0.00
      }
      if _, ok := mapaGravado[nombre]; ok {
        } else {
        mapaGravado[nombre] = 0.00
      }
      for i := 0; i < cuantos; i++ {
        if strings.TrimSpace(x[i]) == "ISR" {
          cantidadFloat, _ := strconv.ParseFloat(x[i+1], 64)
          mapa[nombre]+=cantidadFloat
        }

        if strings.TrimSpace(x[i]) == "MANUTENCION" {
          cantidadFloat, _ := strconv.ParseFloat(x[i+1], 64)
          mapaGravado[nombre]+=cantidadFloat  
          cantidadFloat, _ = strconv.ParseFloat(x[i+2], 64)
          mapaEXENTO[nombre]+=cantidadFloat 
        }
        if strings.TrimSpace(x[i]) == "IMSS" {
          cantidadFloat, _ := strconv.ParseFloat(x[i+1], 64)
          mapaIMSS[nombre]+=cantidadFloat
        }
        
          
        if strings.TrimSpace(x[i]) == "RCV" {
          cantidadFloat, _ := strconv.ParseFloat(x[i+1], 64)
          mapaRCV[nombre]+=cantidadFloat
        }
        if strings.TrimSpace(x[i]) == "AGUINALDO" {
          cantidadFloat, _ := strconv.ParseFloat(x[i+1], 64)
          cantidadFloat2, _ := strconv.ParseFloat(x[i+2], 64)
          cantidadFloat = cantidadFloat + cantidadFloat2
          mapaAguinaldo[nombre]+=cantidadFloat
        }
        if  strings.Contains(strings.TrimSpace(strings.ToUpper(x[i])), "PRIMA") {
          cantidadFloat, _ := strconv.ParseFloat(x[i+1], 64)
          cantidadFloat2, _ := strconv.ParseFloat(x[i+2], 64)
          cantidadFloat = cantidadFloat + cantidadFloat2
          mapaPrima[nombre]+=cantidadFloat
        }
      }
    }



    //ww, _ := pdf.GetPageSize()
    //pixelesParaWidthDeCantidades := (ww / 8) - 10
    isrAcumulador := 0.0
    imssAcumulador := 0.0
    rcvAcumulador := 0.0
    exentaAcumulador := 0.0
    gravadaAcumulador := 0.0
    aguinaldoAcumulador := 0.0
    primaAcumulador := 0.0
row1 := []string{"Nombre","Gravado","Excento","ISR","RCV","IMSS","PRIMA","AGUINALDO"}
      records = append(records, row1)
      

    for k, v := range mapa {

      
      isrAcumulador+=v
      

      gravado := mapaGravado[k]
      gravadaAcumulador+=gravado
      gravadoString := fmt.Sprintf("%.2f",gravado)
      


      exento := mapaEXENTO[k]
      exentaAcumulador+=exento
      exentoString := fmt.Sprintf("%.2f",exento)
      


      imss := mapaIMSS[k]
      imssAcumulador+=imss
      imssString := fmt.Sprintf("%.2f",imss)
      

      rcv := mapaRCV[k]
      rcvAcumulador+=rcv

      rcvString := fmt.Sprintf("%.2f",rcv)

      vString := fmt.Sprintf("%.2f",v)


      prim := mapaPrima[k]
      primaAcumulador+=prim
      primaString := fmt.Sprintf("%.2f",prim)

      agui := mapaAguinaldo[k]
      aguinaldoAcumulador+=agui
      aguiString := fmt.Sprintf("%.2f",agui)
      
      
      
      row1 := []string{k,gravadoString,exentoString,vString,rcvString,imssString,primaString,aguiString}
      records = append(records, row1)
        
      
      }
  
    gravadaAcumuladorString := fmt.Sprintf("%.2f",gravadaAcumulador)
    exentaAcumuladorString := fmt.Sprintf("%.2f",exentaAcumulador)
    isrAcumuladorString := fmt.Sprintf("%.2f",isrAcumulador)
    rcvAcumuladorString := fmt.Sprintf("%.2f",rcvAcumulador)
    imssAcumuladorString := fmt.Sprintf("%.2f",imssAcumulador)

    primaAcumuladorString := fmt.Sprintf("%.2f",primaAcumulador)
    aguinaldoAcumuladorString := fmt.Sprintf("%.2f",aguinaldoAcumulador)
      
    row1 = []string{"Totales: ",gravadaAcumuladorString,exentaAcumuladorString,isrAcumuladorString,rcvAcumuladorString,imssAcumuladorString,primaAcumuladorString,aguinaldoAcumuladorString}
    records = append(records, row1)
  

  


    c.Ctx.Output.ContentType("text/csv")
    c.Ctx.Output.Header("Content-Disposition", "attachment; filename=mantaAnual_"+bu+".csv")
    writer := csv.NewWriter(c.Ctx.ResponseWriter)
    for _, record := range records {
        err := writer.Write(record)
        if err != nil {
            return
        }
    }
    writer.Flush()
    }
}

func (c *ISRAnualController) Get() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    periodo := c.GetString("periodo")



    anio := periodo[0:4]

    delPeriodo := anio+"001"
    alPeriodo := anio+"012"
    DB := c.GetSession("DB")
    BUNIT := c.GetSession("BUNIT")
    BUNITS := c.GetString("BUNIT")
    bu := BUNIT.(string)
    if len(BUNITS) == 3 {
      bu = BUNITS
    } 
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    queryDireccion := `SELECT ADDR_LINE_1,ADDR_LINE_2,ADDR_LINE_3,ADDR_LINE_4,ADDR_LINE_5 
    FROM [`+DB.(string)+`].[dbo].[`+bu+`_ADDR] WHERE ADDR_CODE = '0000000000'`
    rowsDireccion, err := conn.Query(queryDireccion)
    var addr1 string
    var addr2 string
    var addr3 string
    var addr4 string
    var addr5 string
    for rowsDireccion.Next()  {
      rowsDireccion.Scan(&addr1,&addr2,&addr3,&addr4,&addr5)
    }
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.String() 
    substring := string(dateString[0:10])
    pdf := gofpdf.New("L", "mm", "A4", "")
    tr := pdf.UnicodeTranslatorFromDescriptor("")
      pdf.SetHeaderFunc(func() {
      pdf.Image("logo.png", 10, 3, 30, 0, false, "", 0, "")
      pdf.SetFont("Arial", "", 16)
      if  pdf.PageNo() == 1 {
        pdf.SetXY(0, 8)
      } else {
        pdf.SetXY(0, 18)
      }
      pdf.CellFormat(0,0,tr(addr1),"",1,"C",false,0,"")
      
      pdf.SetFont("Arial", "", 10)
      if  pdf.PageNo() == 1 {
        pdf.SetXY(40, 28)
      } else {
        pdf.SetXY(140, 12)
      }
      pdf.SetFont("Arial", "", 12)
      if  pdf.PageNo() == 1 {
        pdf.SetXY(0, 14)
        pdf.CellFormat(0,0,tr(addr2),"",1,"C",false,0,"")
        pdf.SetXY(0, 18)
        pdf.CellFormat(0,0,tr(addr3),"",1,"C",false,0,"")
        pdf.SetXY(0, 22)
        pdf.CellFormat(0,0,tr(addr4),"",1,"C",false,0,"")
        pdf.SetXY(0, 26)
        pdf.CellFormat(0,0,tr(addr5),"",1,"C",false,0,"")
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(0, 18)
        pdf.CellFormat(0,0,tr("Fecha de generación: "+substring),"",1,"R",false,0,"")
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(0, 26)
        pdf.CellFormat(0,0,tr("Periodo: "+periodo),"",1,"R",false,0,"")
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(0, 22)
        //pdf.CellFormat(0,0,tr("Periodo final: "+alPeriodo),"",1,"R",false,0,"")
      } else {
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(140, 7)
        pdf.Cell(0,0,tr(periodo))
      }
      //pdf.SetY(5)
      pdf.SetFont("Arial", "B", 9)
      pdf.SetXY(10, 40)
      pdf.Cell(0, 0, "Nombre")
      pdf.SetXY(180, 40)
      pdf.Cell(0, 0, "IMSS")
      pdf.SetXY(70, 40)
      pdf.Cell(0, 0, "M.Gravada")
      pdf.SetXY(100, 40)
      pdf.Cell(0, 0, "M. Exenta")
      pdf.SetXY(140, 40)
      pdf.Cell(0, 0, "ISR")
      pdf.SetXY(160, 40)
      pdf.Cell(0, 0, "RCV")

      pdf.SetXY(200, 40)
      pdf.Cell(0, 0, "Prima")
      
      pdf.SetXY(240, 40)
      pdf.Cell(0, 0, "Aguinaldo")
      

      pdf.Ln(20)
    })
    pdf.SetFooterFunc(func() {
      pdf.SetY(-15)
      pdf.SetFont("Arial", "I", 8)
      ///{nb}
      pdf.CellFormat(0, 10, fmt.Sprintf("Page %d", pdf.PageNo()),
        "", 0, "C", false, 0, "")
    })
    //pdf.AddPage()
      pdf.SetFont("Arial", "", 8)
      query := `SELECT n.cadOriginal, nn.nombre
      FROM [Sevenplus].[dbo].[zNominaFacturas] n
      INNER JOIN [Sevenplus].[dbo].[nomina] nn on nn.ER = n.ER AND nn.BUNIT = n.BUNIT
      WHERE n.timbrado = 1 AND n.BUNIT = '`+bu+`'
      AND n.periodo >= `+delPeriodo+` AND n.periodo <= `+alPeriodo+`
        order by nn.nombre asc`
    ac := accounting.Accounting{Symbol: "$", Precision: 2}
      rows, err := conn.Query(query)
    var cad string
    var nombre string

    mapa := make(map[string]float64)
    mapaIMSS := make(map[string]float64)
    mapaRCV := make(map[string]float64)
    mapaEXENTO := make(map[string]float64)
    mapaGravado := make(map[string]float64)
    mapaPrima := make(map[string]float64)
    mapaAguinaldo := make(map[string]float64)

    for rows.Next()  {
      rows.Scan(&cad, &nombre)
      cad = strings.TrimSpace(cad)
      x := strings.Split(cad, "|")
      cuantos := len(x)
      nombre = strings.TrimSpace(nombre)
      if _, ok := mapa[nombre]; ok {
        } else {
        mapa[nombre] = 0.00
      }
      if _, ok := mapaIMSS[nombre]; ok {
        } else {
        mapaIMSS[nombre] = 0.00
      }
      if _, ok := mapaRCV[nombre]; ok {
        } else {
        mapaRCV[nombre] = 0.00
      }
      if _, ok := mapaEXENTO[nombre]; ok {
        } else {
        mapaEXENTO[nombre] = 0.00
      }
      if _, ok := mapaGravado[nombre]; ok {
        } else {
        mapaGravado[nombre] = 0.00
      }
      if _, ok := mapaPrima[nombre]; ok {
        } else {
        mapaPrima[nombre] = 0.00
      }
      if _, ok := mapaAguinaldo[nombre]; ok {
        } else {
        mapaAguinaldo[nombre] = 0.00
      }
      for i := 0; i < cuantos; i++ {
        if strings.TrimSpace(x[i]) == "ISR" {
          cantidadFloat, _ := strconv.ParseFloat(x[i+1], 64)
          mapa[nombre]+=cantidadFloat
        }

        if strings.TrimSpace(x[i]) == "MANUTENCION" {
          cantidadFloat, _ := strconv.ParseFloat(x[i+1], 64)
          mapaGravado[nombre]+=cantidadFloat  
          cantidadFloat, _ = strconv.ParseFloat(x[i+2], 64)
          mapaEXENTO[nombre]+=cantidadFloat 
        }
        if strings.TrimSpace(x[i]) == "IMSS" {
          cantidadFloat, _ := strconv.ParseFloat(x[i+1], 64)
          mapaIMSS[nombre]+=cantidadFloat
        }
        
          
        if strings.TrimSpace(x[i]) == "RCV" {
          cantidadFloat, _ := strconv.ParseFloat(x[i+1], 64)
          mapaRCV[nombre]+=cantidadFloat
        }
        if strings.TrimSpace(x[i]) == "AGUINALDO" {
          cantidadFloat, _ := strconv.ParseFloat(x[i+1], 64)
          cantidadFloat2, _ := strconv.ParseFloat(x[i+2], 64)
          cantidadFloat = cantidadFloat + cantidadFloat2
          mapaAguinaldo[nombre]+=cantidadFloat
        }
        if  strings.Contains(strings.TrimSpace(strings.ToUpper(x[i])), "PRIMA") {
          cantidadFloat, _ := strconv.ParseFloat(x[i+1], 64)
          cantidadFloat2, _ := strconv.ParseFloat(x[i+2], 64)
          cantidadFloat = cantidadFloat + cantidadFloat2
          mapaPrima[nombre]+=cantidadFloat
        }
      }
    }



    err = nil
    pdf.AddPage()
    yPrima := 45.0
    //ww, _ := pdf.GetPageSize()
    //pixelesParaWidthDeCantidades := (ww / 8) - 10
    isrAcumulador := 0.0
    imssAcumulador := 0.0
    rcvAcumulador := 0.0
    exentaAcumulador := 0.0
    gravadaAcumulador := 0.0

    aguinaldoAcumulador := 0.0
    primaAcumulador := 0.0

    for k, v := range mapa {

      pdf.SetXY(10, yPrima)
      pdf.Cell(0, 0, tr(k))//key es nombre
      
      isrAcumulador+=v
      checar := ac.FormatMoney(v)
      pdf.SetXY(140, yPrima)
      pdf.Cell(0, 0, tr(checar))


      gravado := mapaGravado[k]
      gravadaAcumulador+=gravado
      checar = ac.FormatMoney(gravado)
      pdf.SetXY(70, yPrima)
      pdf.Cell(0, 0, tr(checar))



      exento := mapaEXENTO[k]
      exentaAcumulador+=exento
      checar = ac.FormatMoney(exento)
      pdf.SetXY(100, yPrima)
      pdf.Cell(0, 0, tr(checar))



      imss := mapaIMSS[k]
      imssAcumulador+=imss
      checar = ac.FormatMoney(imss)
      pdf.SetXY(180, yPrima)
      pdf.Cell(0, 0, tr(checar))


      rcv := mapaRCV[k]
      rcvAcumulador+=rcv
      checar = ac.FormatMoney(rcv)
      pdf.SetXY(160, yPrima)
      pdf.Cell(0, 0, tr(checar))

      agui := mapaAguinaldo[k]
      aguinaldoAcumulador+=agui
      checar = ac.FormatMoney(agui)
      pdf.SetXY(240, yPrima)
      pdf.Cell(0, 0, tr(checar))

      prim := mapaPrima[k]
      primaAcumulador+=prim
      checar = ac.FormatMoney(agui)
      pdf.SetXY(200, yPrima)
      pdf.Cell(0, 0, tr(checar))





      if yPrima < 180.0 {
        yPrima = yPrima + 5.0
      } else {
        yPrima = 45.0
        pdf.AddPage()
      }
        
      
      }
  
    pdf.SetXY(10, yPrima)
    pdf.Cell(0, 0, tr("Totales: "))
    pdf.SetXY(140, yPrima)
    checar := ac.FormatMoney(isrAcumulador)
    pdf.Cell(0, 0, tr(checar))

    pdf.SetXY(160, yPrima)
    checar = ac.FormatMoney(rcvAcumulador)
    pdf.Cell(0, 0, tr(checar))

    pdf.SetXY(180, yPrima)
    checar = ac.FormatMoney(imssAcumulador)
    pdf.Cell(0, 0, tr(checar))

    pdf.SetXY(70, yPrima)
    checar = ac.FormatMoney(gravadaAcumulador)
    pdf.Cell(0, 0, tr(checar))

    pdf.SetXY(100, yPrima)
    checar = ac.FormatMoney(exentaAcumulador)
    pdf.Cell(0, 0, tr(checar))


    pdf.SetXY(200, yPrima)
    checar = ac.FormatMoney(primaAcumulador)
    pdf.Cell(0, 0, tr(checar))

    pdf.SetXY(240, yPrima)
    checar = ac.FormatMoney(aguinaldoAcumulador)
    pdf.Cell(0, 0, tr(checar))



  


    var b bytes.Buffer
      w := bufio.NewWriter(&b)
      pdf.Output(w)
      pdf.Close()
      w.Flush()
      c.Ctx.Output.ContentType("application/pdf")
      c.Ctx.Output.Body(b.Bytes())
    }
}


func (c *ISRController) Get() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    periodo := c.GetString("periodo")
    DB := c.GetSession("DB")
    BUNIT := c.GetSession("BUNIT")
    BUNITS := c.GetString("BUNIT")
    bu := BUNIT.(string)
    if len(BUNITS) == 3 {
      bu = BUNITS
    } 
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    queryDireccion := `SELECT ADDR_LINE_1,ADDR_LINE_2,ADDR_LINE_3,ADDR_LINE_4,ADDR_LINE_5 
    FROM [`+DB.(string)+`].[dbo].[`+bu+`_ADDR] WHERE ADDR_CODE = '0000000000'`
    rowsDireccion, err := conn.Query(queryDireccion)
    var addr1 string
    var addr2 string
    var addr3 string
    var addr4 string
    var addr5 string
    for rowsDireccion.Next()  {
      rowsDireccion.Scan(&addr1,&addr2,&addr3,&addr4,&addr5)
    }
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.String() 
    substring := string(dateString[0:10])
    pdf := gofpdf.New("P", "mm", "A4", "")
    tr := pdf.UnicodeTranslatorFromDescriptor("")
      pdf.SetHeaderFunc(func() {
      pdf.Image("logo.png", 10, 3, 30, 0, false, "", 0, "")
      pdf.SetFont("Arial", "", 16)
      if  pdf.PageNo() == 1 {
        pdf.SetXY(0, 8)
      } else {
        pdf.SetXY(0, 18)
      }
      pdf.CellFormat(0,0,tr(addr1),"",1,"C",false,0,"")
      
      pdf.SetFont("Arial", "", 10)
      if  pdf.PageNo() == 1 {
        pdf.SetXY(40, 28)
      } else {
        pdf.SetXY(140, 12)
      }
      pdf.SetFont("Arial", "", 12)
      if  pdf.PageNo() == 1 {
        pdf.SetXY(0, 14)
        pdf.CellFormat(0,0,tr(addr2),"",1,"C",false,0,"")
        pdf.SetXY(0, 18)
        pdf.CellFormat(0,0,tr(addr3),"",1,"C",false,0,"")
        pdf.SetXY(0, 22)
        pdf.CellFormat(0,0,tr(addr4),"",1,"C",false,0,"")
        pdf.SetXY(0, 26)
        pdf.CellFormat(0,0,tr(addr5),"",1,"C",false,0,"")
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(0, 18)
        pdf.CellFormat(0,0,tr("Fecha de generación: "+substring),"",1,"R",false,0,"")
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(0, 26)
        pdf.CellFormat(0,0,tr("Periodo: "+periodo),"",1,"R",false,0,"")
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(0, 22)
        //pdf.CellFormat(0,0,tr("Periodo final: "+alPeriodo),"",1,"R",false,0,"")
      } else {
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(140, 7)
        pdf.Cell(0,0,tr(periodo))
      }
      //pdf.SetY(5)
      pdf.SetFont("Arial", "B", 9)
      pdf.SetXY(10, 40)
      pdf.Cell(0, 0, "Nombre")
      pdf.SetXY(180, 40)
      pdf.Cell(0, 0, "IMSS")
      pdf.SetXY(70, 40)
      pdf.Cell(0, 0, "M.Gravada")
      pdf.SetXY(100, 40)
      pdf.Cell(0, 0, "M. Exenta")
      pdf.SetXY(140, 40)
      pdf.Cell(0, 0, "ISR")
      pdf.SetXY(160, 40)
      pdf.Cell(0, 0, "RCV")
      pdf.Ln(20)
    })
    pdf.SetFooterFunc(func() {
      pdf.SetY(-15)
      pdf.SetFont("Arial", "I", 8)
      ///{nb}
      pdf.CellFormat(0, 10, fmt.Sprintf("Page %d", pdf.PageNo()),
        "", 0, "C", false, 0, "")
    })
    //pdf.AddPage()
      pdf.SetFont("Arial", "", 8)
      query := `SELECT n.cadOriginal, nn.nombre
      FROM [Sevenplus].[dbo].[zNominaFacturas] n
      INNER JOIN [Sevenplus].[dbo].[nomina] nn on nn.ER = n.ER AND nn.BUNIT = n.BUNIT
      WHERE n.timbrado = 1 AND n.BUNIT = '`+bu+`'
      AND n.periodo = `+periodo+` order by nn.nombre asc`
    ac := accounting.Accounting{Symbol: "$", Precision: 2}
      rows, err := conn.Query(query)
    var cad string
    var nombre string
    err = nil
    pdf.AddPage()
    yPrima := 45.0
    //ww, _ := pdf.GetPageSize()
    //pixelesParaWidthDeCantidades := (ww / 8) - 10
    isrAcumulador := 0.0
    imssAcumulador := 0.0
    rcvAcumulador := 0.0
    exentaAcumulador := 0.0
    gravadaAcumulador := 0.0
    for rows.Next()  {
      rows.Scan(&cad, &nombre)
      cad = strings.TrimSpace(cad)
      x := strings.Split(cad, "|")
      cuantos := len(x)
      nombre = strings.TrimSpace(nombre)
      pdf.SetXY(10, yPrima)
      pdf.Cell(0, 0, tr(nombre))
      for i := 0; i < cuantos; i++ {
        
        if strings.TrimSpace(x[i]) == "MANUTENCION" {
          cantidadFloat, _ := strconv.ParseFloat(x[i+1], 64)
          gravadaAcumulador+=cantidadFloat
          checar := ac.FormatMoney(cantidadFloat)
          pdf.SetXY(70, yPrima)
          pdf.Cell(0, 0, tr(checar))
          cantidadFloat, _ = strconv.ParseFloat(x[i+2], 64)
          exentaAcumulador+=cantidadFloat
          checar = ac.FormatMoney(cantidadFloat)
          pdf.SetXY(100, yPrima)
          pdf.Cell(0, 0, tr(checar))
        }
        if strings.TrimSpace(x[i]) == "IMSS" {
          cantidadFloat, _ := strconv.ParseFloat(x[i+1], 64)
          imssAcumulador+=cantidadFloat
          checar := ac.FormatMoney(cantidadFloat)
          pdf.SetXY(180, yPrima)
          pdf.Cell(0, 0, tr(checar))
        }
        
        
          
        if strings.TrimSpace(x[i]) == "ISR" {
          cantidadFloat, _ := strconv.ParseFloat(x[i+1], 64)
          isrAcumulador+=cantidadFloat
          checar := ac.FormatMoney(cantidadFloat)
          pdf.SetXY(140, yPrima)
          pdf.Cell(0, 0, tr(checar))
        }
        if strings.TrimSpace(x[i]) == "RCV" {
          cantidadFloat, _ := strconv.ParseFloat(x[i+1], 64)
          rcvAcumulador+=cantidadFloat
          checar := ac.FormatMoney(cantidadFloat)
          pdf.SetXY(160, yPrima)
          pdf.Cell(0, 0, tr(checar))
        }
      }
      if yPrima < 270.0 {
        yPrima = yPrima + 5.0
      } else {
        yPrima = 45.0
        pdf.AddPage()
      }
    }
    pdf.SetXY(10, yPrima)
    pdf.Cell(0, 0, tr("Totales: "))
    pdf.SetXY(140, yPrima)
    checar := ac.FormatMoney(isrAcumulador)
    pdf.Cell(0, 0, tr(checar))

    pdf.SetXY(160, yPrima)
    checar = ac.FormatMoney(rcvAcumulador)
    pdf.Cell(0, 0, tr(checar))

    pdf.SetXY(180, yPrima)
    checar = ac.FormatMoney(imssAcumulador)
    pdf.Cell(0, 0, tr(checar))

    pdf.SetXY(70, yPrima)
    checar = ac.FormatMoney(gravadaAcumulador)
    pdf.Cell(0, 0, tr(checar))

    pdf.SetXY(100, yPrima)
    checar = ac.FormatMoney(exentaAcumulador)
    pdf.Cell(0, 0, tr(checar))



    var b bytes.Buffer
      w := bufio.NewWriter(&b)
      pdf.Output(w)
      pdf.Close()
      w.Flush()
      c.Ctx.Output.ContentType("application/pdf")
      c.Ctx.Output.Body(b.Bytes())
    }
}



func (c *GenerarEstadosDeCuentaPorFNCTyPROJController) Get() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    acnt := c.GetString("cuenta")
    descr := c.GetString("descr")
    busca := c.GetString("busca")
    DB := c.GetSession("DB")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    if Compare(busca,"1")==0 {
      queryCuenta := "SELECT ACNT_CODE FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_ACNT] WHERE UPPER(DESCR) like '%"+acnt+"%'"
      rowsCuenta, _ := conn.Query(queryCuenta)
      for rowsCuenta.Next()  {
        rowsCuenta.Scan(&acnt)
      }
    }
    delPeriodo := c.GetString("delPeriodo")
    alPeriodo := c.GetString("alPeriodo")
    var ANAL_T3 string
    var ANAL_T8 string
    ANAL_T3_START := c.GetString("d3s")
    ANAL_T3_END := c.GetString("d3e")
    ANAL_T8_START := c.GetString("d8s")
    ANAL_T8_END := c.GetString("d8e")
    
    queryDireccion := "SELECT ADDR_LINE_1,ADDR_LINE_2,ADDR_LINE_3,ADDR_LINE_4,ADDR_LINE_5 FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_ADDR] WHERE ADDR_CODE = '0000000000'"
    rowsDireccion, err := conn.Query(queryDireccion)
    var addr1 string
    var addr2 string
    var addr3 string
    var addr4 string
    var addr5 string
    for rowsDireccion.Next()  {
      rowsDireccion.Scan(&addr1,&addr2,&addr3,&addr4,&addr5)
    }
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.String() 
    substring := string(dateString[0:10])
    pdf := gofpdf.New("P", "mm", "A4", "")
    tr := pdf.UnicodeTranslatorFromDescriptor("")
      pdf.SetHeaderFunc(func() {
      pdf.Image("logo.png", 10, 3, 30, 0, false, "", 0, "")
      pdf.SetFont("Arial", "", 16)
      if  pdf.PageNo() == 1 {
        pdf.SetXY(0, 8)
      } else {
        pdf.SetXY(0, 18)
      }
      pdf.CellFormat(0,0,tr(addr1),"",1,"C",false,0,"")
      
      pdf.SetFont("Arial", "", 10)
      if  pdf.PageNo() == 1 {
        pdf.SetXY(40, 28)
      } else {
        pdf.SetXY(140, 12)
      }
      pdf.Cell(0,0,tr(descr))
      pdf.SetFont("Arial", "", 12)
      if  pdf.PageNo() == 1 {
        pdf.SetXY(0, 14)
        pdf.CellFormat(0,0,tr(addr2),"",1,"C",false,0,"")
        pdf.SetXY(0, 18)
        pdf.CellFormat(0,0,tr(addr3),"",1,"C",false,0,"")
        pdf.SetXY(0, 22)
        pdf.CellFormat(0,0,tr(addr4),"",1,"C",false,0,"")
        pdf.SetXY(0, 26)
        pdf.CellFormat(0,0,tr(addr5),"",1,"C",false,0,"")
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(0, 18)
        pdf.CellFormat(0,0,tr("Fecha de generación: "+substring),"",1,"R",false,0,"")
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(0, 26)
        pdf.CellFormat(0,0,tr("Código de cuenta: "+acnt),"",1,"R",false,0,"")
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(0, 22)
        pdf.CellFormat(0,0,tr("Periodo final: "+alPeriodo),"",1,"R",false,0,"")
      } else {
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(140, 7)
        pdf.Cell(0,0,tr(acnt))
      }
      //pdf.SetY(5)
      pdf.SetFont("Arial", "B", 9)
      pdf.SetXY(10, 40)
      pdf.Cell(0, 0, "Fecha")
      pdf.SetXY(30, 40)
      pdf.Cell(0, 0, "Poliza")
      pdf.SetXY(45, 40)
      if acnt == "" {
        pdf.Cell(0, 0, "Cuenta")
      } else{
        pdf.Cell(0, 0, "Reference 2")
      }
      
      
      pdf.SetXY(70, 40)
      pdf.Cell(0, 0, "Transaction")
      pdf.SetXY(95, 40)
      pdf.Cell(0, 0, "Descripcion")
      pdf.SetXY(145, 40)
      pdf.Cell(0, 0, "Debito")
      pdf.SetXY(165, 40)
      pdf.Cell(0, 0, "Credito")
      pdf.SetXY(187, 40)
      pdf.Cell(0, 0, "Balanza")
      //pdf.CellFormat(30, 10, "Title", "1", 0, "C", false, 0, "")
      pdf.Ln(20)
    })
    pdf.SetFooterFunc(func() {
      pdf.SetY(-15)
      pdf.SetFont("Arial", "I", 8)
      ///{nb}
      pdf.CellFormat(0, 10, fmt.Sprintf("Page %d", pdf.PageNo()),
        "", 0, "C", false, 0, "")
    })
    //pdf.AddPage()
      pdf.SetFont("Arial", "", 8)
     

    
    

//cambiar
      
   //   para cada distrito
     // hacer una nueva hoja
      //agarrar saldo inicial
      //estado de cuenta por proyecto
      //sumar todos los proyectos y poner un total
      //empezar nuevo distrito
      
      DTAnterior := ""
      DTActual := ""
      primeraDimension:= true
      pdf.AddPage()
    yPrima := 45.0
    ww, _ := pdf.GetPageSize()
    pixelesParaWidthDeCantidades := (ww / 8) - 10
    
    proyectos := []string{}
    ac := accounting.Accounting{Symbol: "$", Precision: 2}
      
      var D_C string
    var DESCRIPTN string
    var diario int
    var linea int
    var ref2 string
    var PERIOD int
    var trans time.Time
    var allocation string
    var treference string 
    var amount decimal.Dec
    err = nil
    
    var periodoActual int
    var contador int
    periodoActual,_ = strconv.Atoi(delPeriodo)
    contador = 0
    
    cuentaNuevaVariable := ""
    var amountInical decimal.Dec
    var acumulador float64
    acumulador = 0.0
    if Compare(ANAL_T8_START,"")!= 0  {//cada proyecto
      queryDimension := "SELECT DISTINCT ANAL_T8 FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE ANAL_T8 >= '"+ANAL_T8_START+"' AND ANAL_T8 <= '"+ANAL_T8_END+"' order by ANAL_T8 asc"
      rowsDimension, _ := conn.Query(queryDimension)
      for rowsDimension.Next()  {
        rowsDimension.Scan(&ANAL_T8)
        proyectos = append(proyectos, strings.TrimSpace(ANAL_T8))
      }
    }
    type Saldos struct {
      Proyecto string
      Saldo float64
    }
    /*var (
      ArchivosList map[string]*Archivos
    )*/
    


    
    saldoInicialDelDistrito := 0.0
      if Compare(ANAL_T3_START,"")!= 0  {//para cada distrito
      queryDimension := "SELECT DISTINCT ANAL_T3 FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE ANAL_T3 >= '"+ANAL_T3_START+"' AND ANAL_T3 <= '"+ANAL_T3_END+"' order by ANAL_T3 asc"
      rowsDimension, _ := conn.Query(queryDimension)
      for rowsDimension.Next()  {
        rowsDimension.Scan(&ANAL_T3)
        DTActual = strings.TrimSpace(ANAL_T3)
        if primeraDimension || true {
          DTAnterior = strings.TrimSpace(ANAL_T3)
          primeraDimension = false
          queryAnterior := "SELECT ISNULL( SUM(AMOUNT),0)  as AMOUNT FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE PERIOD < "+delPeriodo+" AND ALLOCATION != 'C' AND ACCNT_CODE = '"+acnt+"'  AND ANAL_T3 = '"+DTActual+"'"
          rowsSaldoInicial, _ := conn.Query(queryAnterior)
          SaldosList := make(map[string]*Saldos)
          if rowsSaldoInicial.Next()  {
            rowsSaldoInicial.Scan(&saldoInicialDelDistrito)
            pdf.ClipPolygon([]gofpdf.PointType{{10, yPrima -2.5}, {200, yPrima-2.5},{200, yPrima-2.5 }}, true)
            pdf.ClipEnd()
            pdf.SetXY(10, yPrima)
            checar := ac.FormatMoney(saldoInicialDelDistrito)
            if Compare(checar,"$-0.00") == 0 {
              saldoInicialDelDistrito = 0.00
            }         
            pdf.SetFont("Arial", "", 14)
            pdf.CellFormat(0,0,tr(""+strconv.Itoa(periodoActual)+ " Saldo Inicial Del Distrito "+DTActual+": "+ ac.FormatMoney(saldoInicialDelDistrito)),"",1,"C",false,0,"")
            pdf.SetFont("Arial", "", 8)
            if yPrima < 270.0 {
              yPrima = yPrima + 5.0
            } else {
              yPrima = 45.0
              pdf.AddPage()
            }
          }
          for _, proyectoSimple := range proyectos {
            queryAnterior2 := "SELECT ISNULL( SUM(AMOUNT),0)  as AMOUNT FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE PERIOD < "+delPeriodo+" AND ALLOCATION != 'C' AND ACCNT_CODE = '"+acnt+"'  AND ANAL_T3 = '"+DTActual+"' AND ANAL_T8 = '"+proyectoSimple+"'"
            rowsInicial, _ := conn.Query(queryAnterior2)
            for rowsInicial.Next()  {
              rowsInicial.Scan(&amountInical)
              acumulador = amountInical.Float64()*-1.0
            }
              query := "SELECT ACCNT_CODE, D_C,  ISNULL( DESCRIPTN,'') as DESCRIPTN, JRNAL_NO, JRNAL_LINE,  ISNULL( VCHR_NUM,'') as VCHR_NUM, PERIOD, TRANS_DATETIME, ALLOCATION,  ISNULL( TREFERENCE,'') as TREFERENCE , AMOUNT FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE  PERIOD >= "+delPeriodo+" AND PERIOD <= "+alPeriodo+" AND ALLOCATION != 'C' AND ACCNT_CODE = '"+acnt+"' AND ANAL_T3 = '"+DTActual+"' AND ANAL_T8 = '"+proyectoSimple+"' order by PERIOD, JRNAL_NO asc, JRNAL_LINE asc, TRANS_DATETIME asc"
              rows, _ := conn.Query(query)
              firstPrimero := true
            for rows.Next()  {
              if firstPrimero {
                firstPrimero = false
                pdf.ClipPolygon([]gofpdf.PointType{{10, yPrima -2.5}, {200, yPrima-2.5},{200, yPrima-2.5 }}, true)
                pdf.ClipEnd()
                pdf.SetXY(10, yPrima)
                pdf.SetFont("Arial", "", 12)
                pdf.CellFormat(0,0,tr("Empieza el proyecto "+proyectoSimple),"",1,"C",false,0,"")
                pdf.SetFont("Arial", "", 8)
                if yPrima < 270.0 {
                  yPrima = yPrima + 5.0
                } else {
                  yPrima = 45.0
                  pdf.AddPage()
                }
                pdf.ClipPolygon([]gofpdf.PointType{{10, yPrima -2.5}, {200, yPrima-2.5},{200, yPrima-2.5 }}, true)
                pdf.ClipEnd()
                pdf.SetXY(10, yPrima)
                checar := ac.FormatMoney(acumulador)//acumulador
                if Compare(checar,"$-0.00") == 0 {
                  acumulador = 0.00
                }         
                pdf.CellFormat(0,0,tr(" Saldo inicial de periodos anteriores para el proyecto "+proyectoSimple+": "+ ac.FormatMoney(acumulador)),"",1,"C",false,0,"")
                if yPrima < 270.0 {
                  yPrima = yPrima + 5.0
                } else {
                  yPrima = 45.0
                  pdf.AddPage()
                }
                pdf.ClipPolygon([]gofpdf.PointType{{10, yPrima -2.5}, {200, yPrima-2.5},{200, yPrima-2.5 }}, true)
                pdf.ClipEnd()
                pdf.SetXY(10, yPrima)
              }
              rows.Scan(&cuentaNuevaVariable, &D_C, &DESCRIPTN, &diario, &linea, &ref2, &PERIOD, &trans, &allocation, &treference,&amount)
              DESCRIPTN = strings.TrimSpace(DESCRIPTN)
              treference = strings.TrimSpace(treference)
              if len(DESCRIPTN) > 40 {
                DESCRIPTN = DESCRIPTN[0:40]
              }
              if len(treference) > 13 {
                treference = treference[0:13]
              }
              contador = contador + 1
              
              if PERIOD != periodoActual {
                pdf.ClipPolygon([]gofpdf.PointType{{10, yPrima -2.5}, {200, yPrima-2.5},{200, yPrima-2.5 }}, true)
                pdf.ClipEnd()
                pdf.SetXY(10, yPrima)
                checar := ac.FormatMoney(acumulador)
                if Compare(checar,"$-0.00") == 0 {
                  acumulador = 0.00
                }         
                pdf.CellFormat(0,0,tr(""+strconv.Itoa(periodoActual)+ " Total de Periodo: "+ ac.FormatMoney(acumulador)),"",1,"C",false,0,"")
                if yPrima < 270.0 {
                  yPrima = yPrima + 5.0
                } else {
                  yPrima = 45.0
                  pdf.AddPage()
                }
                pdf.ClipPolygon([]gofpdf.PointType{{10, yPrima -2.5}, {200, yPrima-2.5},{200, yPrima-2.5 }}, true)
                pdf.ClipEnd()
                pdf.SetXY(10, yPrima)
                periodoActual = PERIOD
              }
              pdf.SetXY(5, yPrima)
              mes := int(trans.Month())
              dia :=  trans.Day()
              if mes > 9 && dia > 9 {
                pdf.Cell(0, 0, fmt.Sprintf("%d-%d-%d", trans.Year(), mes, dia))
              } else {
                if mes > 9 && dia < 10 {
                  pdf.Cell(0, 0, fmt.Sprintf("%d-%d-0%d", trans.Year(), mes, dia))
                } else {
                  if mes < 10 && dia > 9 {
                    pdf.Cell(0, 0, fmt.Sprintf("%d-0%d-%d", trans.Year(), mes, dia))
                  } else {
                    pdf.Cell(0, 0, fmt.Sprintf("%d-0%d-0%d", trans.Year(), mes, dia)) 
                  }
                }
              }
              pdf.SetXY(22, yPrima)
              debito := 0.0
              credito := 0.0
              pdf.SetTextColor(50, 50, 255)
              pdf.CellFormat(0, 0, strconv.Itoa(diario)+"-"+strconv.Itoa(linea), "", 0,  "L", false, 0, "/generarDiario?diario="+strconv.Itoa(diario))
              pdf.SetTextColor(0, 0, 0)
              pdf.SetXY(35, yPrima)
              if acnt == ""{
                pdf.Cell(0, 0, cuentaNuevaVariable)   
              } else {
                pdf.Cell(0, 0, ref2)    
              }
              amountPrima := math.Abs(amount.Float64())
              if Compare(D_C,"D")==0{
                debito:=amountPrima 
                acumulador = acumulador + amountPrima
                pdf.SetXY(145, yPrima)
                pdf.CellFormat(pixelesParaWidthDeCantidades, 0, ac.FormatMoney(debito), "", 0, "R", false, 0 , "")
                pdf.SetXY(165, yPrima)
                pdf.CellFormat(pixelesParaWidthDeCantidades, 0, ac.FormatMoney(credito), "", 0, "R", false, 0 , "")
              } else {
                credito := amountPrima
                acumulador = acumulador - amountPrima
                pdf.SetXY(145, yPrima)
                pdf.CellFormat(pixelesParaWidthDeCantidades, 0, ac.FormatMoney(debito), "", 0, "R", false, 0 , "")
                pdf.SetXY(165, yPrima)
                pdf.CellFormat(pixelesParaWidthDeCantidades, 0, ac.FormatMoney(credito), "", 0, "R", false, 0 , "")
              }
              //totalDelPeriodo = totalDelPeriodo + amountPrima
              pdf.SetXY(55, yPrima)
              pdf.Cell(0, 0, tr(treference))
              pdf.SetXY(80, yPrima)
              pdf.Cell(0, 0, tr(DESCRIPTN))
              pdf.SetXY(187, yPrima)
              pdf.CellFormat(pixelesParaWidthDeCantidades, 0, ac.FormatMoney(acumulador), "", 0, "R", false, 0 , "")
              if yPrima < 270.0 {
                yPrima = yPrima + 5.0
              } else {
                yPrima = 45.0
                pdf.AddPage()
              }
            }//for cuentanuevavariable ///aqui se acabo el copy paste
            if !firstPrimero {
              pdf.ClipPolygon([]gofpdf.PointType{{10, yPrima -2.5}, {200, yPrima-2.5},{200, yPrima-2.5 }}, true)
              pdf.ClipEnd()
              pdf.SetXY(10, yPrima)
              pdf.SetFont("Arial", "", 12)
              palabraVariable := " a favor "
              if acumulador > 0 {
                palabraVariable = " en contra "
              }
              pdf.CellFormat(0,0,tr("Termina el proyecto "+proyectoSimple+" con saldo"+palabraVariable+": "+ ac.FormatMoney(acumulador)),"",1,"C",false,0,"")
              pdf.SetFont("Arial", "", 8)
              SaldosList[proyectoSimple] = &Saldos{proyectoSimple, acumulador}
              if yPrima < 270.0 {
                yPrima = yPrima + 5.0
              } else {
                yPrima = 45.0
                pdf.AddPage()
              } 
            }// if !firstPrimero
          } // for proyecto simple ... proyectos
          pdf.ClipPolygon([]gofpdf.PointType{{10, yPrima -2.5}, {200, yPrima-2.5},{200, yPrima-2.5 }}, true)
          pdf.ClipEnd()
          pdf.SetXY(10, yPrima)
          pdf.SetFont("Arial", "", 14)
          pdf.CellFormat(0,0,tr("Resumen del distrito "+DTActual),"",1,"C",false,0,"")        
          if yPrima < 270.0 {
            yPrima = yPrima + 5.0
          } else {
            yPrima = 45.0
            pdf.AddPage()
          }
          acumuladorProyectos := 0.0  
          for _, saldoSimple := range SaldosList {
            pdf.ClipPolygon([]gofpdf.PointType{{10, yPrima -2.5}, {200, yPrima-2.5},{200, yPrima-2.5 }}, true)
            pdf.ClipEnd()
            pdf.SetXY(10, yPrima)
            pdf.SetFont("Arial", "", 12)
            palabraVariable := " a favor "
            if saldoSimple.Saldo > 0 {
              palabraVariable = " en contra "
            }
            acumuladorProyectos += saldoSimple.Saldo
            pdf.CellFormat(0,0,tr("Proyecto "+saldoSimple.Proyecto+" con saldo"+palabraVariable+": "+ ac.FormatMoney(saldoSimple.Saldo)),"",1,"C",false,0,"")             
            if yPrima < 270.0 {
              yPrima = yPrima + 5.0
            } else {
              yPrima = 45.0
              pdf.AddPage()
            } 
          }
          pdf.ClipPolygon([]gofpdf.PointType{{10, yPrima -2.5}, {200, yPrima-2.5},{200, yPrima-2.5 }}, true)
          pdf.ClipEnd()
          pdf.SetXY(10, yPrima)
          pdf.SetFont("Arial", "", 14)
          palabraVariable := " a favor "
          if acumuladorProyectos > 0 {
            palabraVariable = " en contra "
          }
          pdf.CellFormat(0,0,tr(""+DTActual+" con saldo "+palabraVariable+": "+ ac.FormatMoney(acumuladorProyectos)),"",1,"C",false,0,"")       
          yPrima = 45.0
          pdf.AddPage()
        }
        if DTActual != DTAnterior {

        }
        DTAnterior = strings.TrimSpace(ANAL_T3)
      }
    }   
    var b bytes.Buffer
      w := bufio.NewWriter(&b)
      pdf.Output(w)
      pdf.Close()
      w.Flush()
      c.Ctx.Output.ContentType("application/pdf")
      c.Ctx.Output.Body(b.Bytes())
    }
}



func (c *GenerarEstadosDeCuentaController) Get() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    acnt := c.GetString("cuenta")
    acnt = strings.TrimSpace(acnt)
    descr := c.GetString("descr")
    busca := c.GetString("busca")
    DB := c.GetSession("DB")
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    todoCompleto := ""
    queryCuenta := "SELECT DESCR FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_ACNT] WHERE ACNT_CODE = '"+acnt+"'"
    rowsCuenta, errVer := conn.Query(queryCuenta)
    fmt.Println(errVer)
    if rowsCuenta != nil {
      for rowsCuenta.Next()  {
        rowsCuenta.Scan(&todoCompleto)
        todoCompleto = strings.TrimSpace(todoCompleto)
      }
  
    }
    
    if Compare(busca,"1")==0 {
      queryCuenta := "SELECT ACNT_CODE FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_ACNT] WHERE UPPER(DESCR) like '%"+acnt+"%'"
      rowsCuenta, _ := conn.Query(queryCuenta)
      for rowsCuenta.Next()  {
        rowsCuenta.Scan(&acnt)
      }
    }



    delPeriodo := c.GetString("delPeriodo")
    alPeriodo := c.GetString("alPeriodo")
    var ANAL_T0 string
    var ANAL_T1 string
    var ANAL_T2 string
    var ANAL_T3 string
    var ANAL_T4 string
    var ANAL_T5 string
    var ANAL_T6 string
    var ANAL_T7 string
    var ANAL_T8 string
    var ANAL_T9 string
    ANAL_T0_START := c.GetString("d0s")
    ANAL_T0_END := c.GetString("d0e")

    ANAL_T1_START := c.GetString("d1s")
    ANAL_T1_END := c.GetString("d1e")
    
    ANAL_T2_START := c.GetString("d2s")
    ANAL_T2_END := c.GetString("d2e")
    
    ANAL_T3_START := c.GetString("d3s")
    ANAL_T3_END := c.GetString("d3e")
    
    ANAL_T4_START := c.GetString("d4s")
    ANAL_T4_END := c.GetString("d4e")
    
    ANAL_T5_START := c.GetString("d5s")
    ANAL_T5_END := c.GetString("d5e")
    
    ANAL_T6_START := c.GetString("d6s")
    ANAL_T6_END := c.GetString("d6e")
    
    ANAL_T7_START := c.GetString("d7s")
    ANAL_T7_END := c.GetString("d7e")
    
    ANAL_T8_START := c.GetString("d8s")
    ANAL_T8_END := c.GetString("d8e")
    
    ANAL_T9_START := c.GetString("d9s")
    ANAL_T9_END := c.GetString("d9e")
    
    
    

    queryDireccion := "SELECT ADDR_LINE_1,ADDR_LINE_2,ADDR_LINE_3,ADDR_LINE_4,ADDR_LINE_5 FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_ADDR] WHERE ADDR_CODE = '0000000000'"
    rowsDireccion, err := conn.Query(queryDireccion)
    var addr1 string
    var addr2 string
    var addr3 string
    var addr4 string
    var addr5 string
    for rowsDireccion.Next()  {
      rowsDireccion.Scan(&addr1,&addr2,&addr3,&addr4,&addr5)
    }
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.String() 
    substring := string(dateString[0:10])
    pdf := gofpdf.New("P", "mm", "A4", "")
    tr := pdf.UnicodeTranslatorFromDescriptor("")
      pdf.SetHeaderFunc(func() {
      pdf.Image("logo.png", 10, 3, 30, 0, false, "", 0, "")
      pdf.SetFont("Arial", "", 16)
      if  pdf.PageNo() == 1 {
        pdf.SetXY(0, 8)
      } else {
        pdf.SetXY(0, 18)
      }
      pdf.CellFormat(0,0,tr(addr1),"",1,"C",false,0,"")
      
      pdf.SetFont("Arial", "", 10)
      if  pdf.PageNo() == 1 {
        pdf.SetXY(40, 28)
      } else {
        pdf.SetXY(140, 12)
        pdf.Cell(0,0,tr(descr))
      }
      
      pdf.SetFont("Arial", "", 12)
      if  pdf.PageNo() == 1 {
        pdf.SetXY(0, 14)
        pdf.CellFormat(0,0,tr(addr2),"",1,"C",false,0,"")
        pdf.SetXY(0, 18)
        pdf.CellFormat(0,0,tr(addr3),"",1,"C",false,0,"")
        pdf.SetXY(0, 22)
        pdf.CellFormat(0,0,tr(addr4),"",1,"C",false,0,"")
        pdf.SetXY(0, 26)
        pdf.CellFormat(0,0,tr(addr5),"",1,"C",false,0,"")
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(0, 18)
        pdf.CellFormat(0,0,tr("Fecha de generación: "+substring),"",1,"R",false,0,"")
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(0, 26)
        pdf.CellFormat(0,0,tr("Código de cuenta: "+acnt),"",1,"R",false,0,"")
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(0, 22)
        pdf.CellFormat(0,0,tr("Periodo final: "+alPeriodo),"",1,"R",false,0,"")
        pdf.SetXY(0, 30)
        pdf.CellFormat(0,0,tr(todoCompleto),"",1,"R",false,0,"")
        
      } else {
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(140, 7)
        pdf.Cell(0,0,tr(acnt))
      }
      //pdf.SetY(5)
      pdf.SetFont("Arial", "B", 9)
      pdf.SetXY(10, 40)
      pdf.Cell(0, 0, "Fecha")
      pdf.SetXY(30, 40)
      pdf.Cell(0, 0, "Poliza")
      pdf.SetXY(45, 40)
      if acnt == "" {
        pdf.Cell(0, 0, "Cuenta")
      } else{
        pdf.Cell(0, 0, "Reference 2")
      }
      
      
      pdf.SetXY(70, 40)
      pdf.Cell(0, 0, "Transaction")
      pdf.SetXY(95, 40)
      pdf.Cell(0, 0, "Descripcion")
      pdf.SetXY(145, 40)
      pdf.Cell(0, 0, "Debito")
      pdf.SetXY(165, 40)
      pdf.Cell(0, 0, "Credito")
      pdf.SetXY(187, 40)
      pdf.Cell(0, 0, "Balanza")
      //pdf.CellFormat(30, 10, "Title", "1", 0, "C", false, 0, "")
      pdf.Ln(20)
    })
    pdf.SetFooterFunc(func() {
      pdf.SetY(-15)
      pdf.SetFont("Arial", "I", 8)
      ///{nb}
      pdf.CellFormat(0, 10, fmt.Sprintf("Page %d", pdf.PageNo()),
        "", 0, "C", false, 0, "")
    })
    //pdf.AddPage()
      pdf.SetFont("Arial", "", 8)
     

    
    

//cambiar

      queryAnterior := "SELECT ISNULL( SUM(AMOUNT),0)  as AMOUNT FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE PERIOD < "+delPeriodo+" AND ALLOCATION != 'C'  "
      deboPonerDesdePrincipioDelAño := false
if acnt[0:1] == "5" || acnt[0:1] == "6" || acnt[0:1] == "7" || acnt[0:1] == "8" || acnt[0:1] == "9" {
  deboPonerDesdePrincipioDelAño = true
}
if deboPonerDesdePrincipioDelAño {
  anioUno := delPeriodo[0:4]
  anioU , _ := strconv.Atoi(anioUno)
  anioU--
  queryAnterior = "SELECT ISNULL( SUM(AMOUNT),0)  as AMOUNT FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE PERIOD < "+strconv.Itoa(anioU)+"012 AND ALLOCATION != 'C'  "
}
    query := "SELECT ACCNT_CODE, D_C,  ISNULL( DESCRIPTN,'') as DESCRIPTN, JRNAL_NO, JRNAL_LINE,  ISNULL( VCHR_NUM,'') as VCHR_NUM, PERIOD, TRANS_DATETIME, ALLOCATION,  ISNULL( TREFERENCE,'') as TREFERENCE , AMOUNT FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE  PERIOD >= "+delPeriodo+" AND PERIOD <= "+alPeriodo+" AND ALLOCATION != 'C' "


    if acnt != "" {
      queryAnterior = queryAnterior + " AND ACCNT_CODE = '"+acnt+"' "
      query = query + " AND ACCNT_CODE = '"+acnt+"' "
    }
    queryAux := ""
    ANL_CAT_ID := "01"
    auxiliarTodo := ""
    if Compare(ANAL_T0_START,"")!= 0  {
      queryDimension := "SELECT DISTINCT ANAL_T0 FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE ANAL_T0 >= '"+ANAL_T0_START+"' AND ANAL_T0 <= '"+ANAL_T0_END+"' order by ANAL_T0 asc"
      rowsDimension, _ := conn.Query(queryDimension)
      primeraVez := true
      auxS := " AND ANAL_T0 IN ("
      for rowsDimension.Next()  {
        rowsDimension.Scan(&ANAL_T0)
        queryAux = `SELECT  NAME
          FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE]
          WHERE ANL_CAT_ID = '`+ANL_CAT_ID+`' AND ANL_CODE = '`+strings.TrimSpace(ANAL_T0)+`'`
          rowsAux, _ := conn.Query(queryAux)
          for rowsAux.Next()  {
          rowsAux.Scan(&auxiliarTodo)
          todoCompleto = todoCompleto+", "+auxiliarTodo
        }
      
        if primeraVez {
          primeraVez = false
          auxS=auxS+"'"+strings.TrimSpace(ANAL_T0)+"'"
        } else {
          auxS=auxS+",'"+strings.TrimSpace(ANAL_T0)+"'"
        }
      }
      auxS = auxS + ") "
      query = query + auxS
      queryAnterior = queryAnterior + auxS
    }

    ANL_CAT_ID = "02"
    if Compare(ANAL_T1_START,"")!= 0  {
      queryDimension := "SELECT DISTINCT ANAL_T1 FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE ANAL_T1 >= '"+ANAL_T1_START+"' AND ANAL_T1 <= '"+ANAL_T1_END+"' order by ANAL_T1 asc"
      rowsDimension, _ := conn.Query(queryDimension)
      primeraVez := true
      auxS := " AND ANAL_T1 IN ("
      for rowsDimension.Next()  {
        rowsDimension.Scan(&ANAL_T1)
        queryAux = `SELECT  NAME
          FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE]
          WHERE ANL_CAT_ID = '`+ANL_CAT_ID+`' AND ANL_CODE = '`+strings.TrimSpace(ANAL_T1)+`'`
          rowsAux, _ := conn.Query(queryAux)
          for rowsAux.Next()  {
          rowsAux.Scan(&auxiliarTodo)
          todoCompleto = todoCompleto+", "+auxiliarTodo
        }
      
        if primeraVez {
          primeraVez = false
          auxS=auxS+"'"+strings.TrimSpace(ANAL_T1)+"'"
        } else {
          auxS=auxS+",'"+strings.TrimSpace(ANAL_T1)+"'"
        }
      }
      auxS = auxS + ") "
      query = query + auxS
      queryAnterior = queryAnterior + auxS
    }
    ANL_CAT_ID = "03"
    if Compare(ANAL_T2_START,"")!= 0  {
      queryDimension := "SELECT DISTINCT ANAL_T2 FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE ANAL_T2 >= '"+ANAL_T2_START+"' AND ANAL_T2 <= '"+ANAL_T2_END+"' order by ANAL_T2 asc"
      rowsDimension, _ := conn.Query(queryDimension)
      primeraVez := true
      auxS := " AND ANAL_T2 IN ("
      for rowsDimension.Next()  {
        rowsDimension.Scan(&ANAL_T2)
        
        queryAux = `SELECT  NAME
          FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE]
          WHERE ANL_CAT_ID = '`+ANL_CAT_ID+`' AND ANL_CODE = '`+strings.TrimSpace(ANAL_T2)+`'`
          rowsAux, _ := conn.Query(queryAux)
          for rowsAux.Next()  {
          rowsAux.Scan(&auxiliarTodo)
          todoCompleto = todoCompleto+", "+auxiliarTodo
        }
      
        if primeraVez {
          primeraVez = false
          auxS=auxS+"'"+strings.TrimSpace(ANAL_T2)+"'"
        } else {
          auxS=auxS+",'"+strings.TrimSpace(ANAL_T2)+"'"
        }
      }
      auxS = auxS + ") "
      query = query + auxS
      queryAnterior = queryAnterior + auxS
    }
    ANL_CAT_ID = "04"
    if Compare(ANAL_T3_START,"")!= 0  {
      queryDimension := "SELECT DISTINCT ANAL_T3 FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE ANAL_T3 >= '"+ANAL_T3_START+"' AND ANAL_T3 <= '"+ANAL_T3_END+"' order by ANAL_T3 asc"
      rowsDimension, _ := conn.Query(queryDimension)
      primeraVez := true
      auxS := " AND ANAL_T3 IN ("
      for rowsDimension.Next()  {
        rowsDimension.Scan(&ANAL_T3)
        queryAux = `SELECT  NAME
          FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE]
          WHERE ANL_CAT_ID = '`+ANL_CAT_ID+`' AND ANL_CODE = '`+strings.TrimSpace(ANAL_T3)+`'`
          rowsAux, _ := conn.Query(queryAux)
          for rowsAux.Next()  {
          rowsAux.Scan(&auxiliarTodo)
          todoCompleto = todoCompleto+", "+auxiliarTodo
        }
      
        if primeraVez {
          primeraVez = false
          auxS=auxS+"'"+strings.TrimSpace(ANAL_T3)+"'"
        } else {
          auxS=auxS+",'"+strings.TrimSpace(ANAL_T3)+"'"
        }
      }
      auxS = auxS + ") "
      query = query + auxS
      queryAnterior = queryAnterior + auxS
    }
    ANL_CAT_ID = "05"
    if Compare(ANAL_T4_START,"")!= 0  {
      queryDimension := "SELECT DISTINCT ANAL_T4 FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE ANAL_T4 >= '"+ANAL_T4_START+"' AND ANAL_T4 <= '"+ANAL_T4_END+"' order by ANAL_T4 asc"
      rowsDimension, _ := conn.Query(queryDimension)
      primeraVez := true
      auxS := " AND ANAL_T4 IN ("
      for rowsDimension.Next()  {
        rowsDimension.Scan(&ANAL_T4)
        queryAux = `SELECT  NAME
          FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE]
          WHERE ANL_CAT_ID = '`+ANL_CAT_ID+`' AND ANL_CODE = '`+strings.TrimSpace(ANAL_T4)+`'`
          rowsAux, _ := conn.Query(queryAux)
          for rowsAux.Next()  {
          rowsAux.Scan(&auxiliarTodo)
          todoCompleto = todoCompleto+", "+auxiliarTodo
        }
      
        if primeraVez {
          primeraVez = false
          auxS=auxS+"'"+strings.TrimSpace(ANAL_T4)+"'"
        } else {
          auxS=auxS+",'"+strings.TrimSpace(ANAL_T4)+"'"
        }
      }
      auxS = auxS + ") "
      query = query + auxS
      queryAnterior = queryAnterior + auxS
    }
    ANL_CAT_ID = "06"
    if Compare(ANAL_T5_START,"")!= 0  {
      queryDimension := "SELECT DISTINCT ANAL_T5 FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE ANAL_T5 >= '"+ANAL_T5_START+"' AND ANAL_T5 <= '"+ANAL_T5_END+"' order by ANAL_T5 asc"
      rowsDimension, _ := conn.Query(queryDimension)
      primeraVez := true
      auxS := " AND ANAL_T5 IN ("
      for rowsDimension.Next()  {
        rowsDimension.Scan(&ANAL_T5)
        queryAux = `SELECT  NAME
          FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE]
          WHERE ANL_CAT_ID = '`+ANL_CAT_ID+`' AND ANL_CODE = '`+strings.TrimSpace(ANAL_T5)+`'`
          rowsAux, _ := conn.Query(queryAux)
          for rowsAux.Next()  {
          rowsAux.Scan(&auxiliarTodo)
          todoCompleto = todoCompleto+", "+auxiliarTodo
        }
      
        if primeraVez {
          primeraVez = false
          auxS=auxS+"'"+strings.TrimSpace(ANAL_T5)+"'"
        } else {
          auxS=auxS+",'"+strings.TrimSpace(ANAL_T5)+"'"
        }
      }
      auxS = auxS + ") "
      query = query + auxS
      queryAnterior = queryAnterior + auxS
    }
    ANL_CAT_ID = "07"
    if Compare(ANAL_T6_START,"")!= 0  {
      queryDimension := "SELECT DISTINCT ANAL_T6 FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE ANAL_T6 >= '"+ANAL_T6_START+"' AND ANAL_T6 <= '"+ANAL_T6_END+"' order by ANAL_T6 asc"
      rowsDimension, _ := conn.Query(queryDimension)
      primeraVez := true
      auxS := " AND ANAL_T6 IN ("
      for rowsDimension.Next()  {
        rowsDimension.Scan(&ANAL_T6)
        queryAux = `SELECT  NAME
          FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE]
          WHERE ANL_CAT_ID = '`+ANL_CAT_ID+`' AND ANL_CODE = '`+strings.TrimSpace(ANAL_T6)+`'`
          rowsAux, _ := conn.Query(queryAux)
          for rowsAux.Next()  {
          rowsAux.Scan(&auxiliarTodo)
          todoCompleto = todoCompleto+", "+auxiliarTodo
        }
      
        if primeraVez {
          primeraVez = false
          auxS=auxS+"'"+strings.TrimSpace(ANAL_T6)+"'"
        } else {
          auxS=auxS+",'"+strings.TrimSpace(ANAL_T6)+"'"
        }
      }
      auxS = auxS + ") "
      query = query + auxS
      queryAnterior = queryAnterior + auxS
    }
    ANL_CAT_ID = "08"
    if Compare(ANAL_T7_START,"")!= 0  {
      queryDimension := "SELECT DISTINCT ANAL_T7 FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE ANAL_T7 >= '"+ANAL_T7_START+"' AND ANAL_T7 <= '"+ANAL_T7_END+"' order by ANAL_T7 asc"
      rowsDimension, _ := conn.Query(queryDimension)
      primeraVez := true
      auxS := " AND ANAL_T7 IN ("
      for rowsDimension.Next()  {
        rowsDimension.Scan(&ANAL_T7)
        queryAux = `SELECT  NAME
          FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE]
          WHERE ANL_CAT_ID = '`+ANL_CAT_ID+`' AND ANL_CODE = '`+strings.TrimSpace(ANAL_T7)+`'`
          rowsAux, _ := conn.Query(queryAux)
          for rowsAux.Next()  {
          rowsAux.Scan(&auxiliarTodo)
          todoCompleto = todoCompleto+", "+auxiliarTodo
        }
      
        if primeraVez {
          primeraVez = false
          auxS=auxS+"'"+strings.TrimSpace(ANAL_T7)+"'"
        } else {
          auxS=auxS+",'"+strings.TrimSpace(ANAL_T7)+"'"
        }
      }
      auxS = auxS + ") "
      query = query + auxS
      queryAnterior = queryAnterior + auxS
    }
    ANL_CAT_ID = "09"
    if Compare(ANAL_T8_START,"")!= 0  {
      queryDimension := "SELECT DISTINCT ANAL_T8 FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE ANAL_T8 >= '"+ANAL_T8_START+"' AND ANAL_T8 <= '"+ANAL_T8_END+"' order by ANAL_T8 asc"
      rowsDimension, _ := conn.Query(queryDimension)
      primeraVez := true
      auxS := " AND ANAL_T8 IN ("
      for rowsDimension.Next()  {
        rowsDimension.Scan(&ANAL_T8)
        queryAux = `SELECT  NAME
          FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE]
          WHERE ANL_CAT_ID = '`+ANL_CAT_ID+`' AND ANL_CODE = '`+strings.TrimSpace(ANAL_T8)+`'`
          rowsAux, _ := conn.Query(queryAux)
          for rowsAux.Next()  {
          rowsAux.Scan(&auxiliarTodo)
          todoCompleto = todoCompleto+", "+auxiliarTodo
        }
      
        if primeraVez {
          primeraVez = false
          auxS=auxS+"'"+strings.TrimSpace(ANAL_T8)+"'"
        } else {
          auxS=auxS+",'"+strings.TrimSpace(ANAL_T8)+"'"
        }
      }
      auxS = auxS + ") "
      query = query + auxS
      queryAnterior = queryAnterior + auxS
    }
    ANL_CAT_ID = "10"
    if Compare(ANAL_T9_START,"")!= 0  {
      queryDimension := "SELECT DISTINCT ANAL_T9 FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE ANAL_T9 >= '"+ANAL_T9_START+"' AND ANAL_T9 <= '"+ANAL_T9_END+"' order by ANAL_T9 asc"
      rowsDimension, _ := conn.Query(queryDimension)
      primeraVez := true
      auxS := " AND ANAL_T9 IN ("
      for rowsDimension.Next()  {
        rowsDimension.Scan(&ANAL_T9)
        queryAux = `SELECT  NAME
          FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE]
          WHERE ANL_CAT_ID = '`+ANL_CAT_ID+`' AND ANL_CODE = '`+strings.TrimSpace(ANAL_T9)+`'`
          rowsAux, _ := conn.Query(queryAux)
          for rowsAux.Next()  {
          rowsAux.Scan(&auxiliarTodo)
          todoCompleto = todoCompleto+", "+auxiliarTodo
        }
      
        if primeraVez {
          primeraVez = false
          auxS=auxS+"'"+strings.TrimSpace(ANAL_T9)+"'"
        } else {
          auxS=auxS+",'"+strings.TrimSpace(ANAL_T9)+"'"
        }
      }
      auxS = auxS + ") "
      query = query + auxS
      queryAnterior = queryAnterior + auxS
    }
    var amountInical decimal.Dec
    rowsInicial, err := conn.Query(queryAnterior)
    var acumulador float64
    acumulador = 0.0
    //if acnt != "" { ISNULL
      for rowsInicial.Next()  {
        rowsInicial.Scan(&amountInical)
        acumulador = amountInical.Float64()*-1.0
      }
    //}
    
    query = query+" order by PERIOD, JRNAL_NO asc, JRNAL_LINE asc, TRANS_DATETIME asc"
    ac := accounting.Accounting{Symbol: "$", Precision: 2}
      rows, err := conn.Query(query)
    var D_C string
    var DESCRIPTN string
    var diario int
    var linea int
    var ref2 string
    var PERIOD int
    var trans time.Time
    var allocation string
    var treference string 
    var amount decimal.Dec
    err = nil
    
    var periodoActual int
    var contador int
    periodoActual,_ = strconv.Atoi(delPeriodo)
    contador = 0
    
    pdf.AddPage()
    //var nuevoNumero = 0
    yPrima := 45.0
    ww, _ := pdf.GetPageSize()
    pixelesParaWidthDeCantidades := (ww / 8) - 10
    //var totalDelPeriodo = 0
    cuentaNuevaVariable := ""
    for rows.Next()  {
      rows.Scan(&cuentaNuevaVariable, &D_C, &DESCRIPTN, &diario, &linea, &ref2, &PERIOD, &trans, &allocation, &treference,&amount)
      DESCRIPTN = strings.TrimSpace(DESCRIPTN)
      treference = strings.TrimSpace(treference)
      if len(DESCRIPTN) > 40 {
        DESCRIPTN = DESCRIPTN[0:40]
      }
      if len(treference) > 13 {
        treference = treference[0:13]
      }
      contador = contador + 1
      if contador==1 {
        pdf.ClipPolygon([]gofpdf.PointType{{10, yPrima -2.5}, {200, yPrima-2.5},{200, yPrima-2.5 }}, true)
        pdf.ClipEnd()
        pdf.SetXY(10, yPrima)
        //if contador != 1 {
          checar := ac.FormatMoney(acumulador)
          if Compare(checar,"$-0.00") == 0 {
            acumulador = 0.00
          }         
          pdf.CellFormat(0,0,tr(" Saldo inicial de periodos anteriores: "+ ac.FormatMoney(acumulador)),"",1,"C",false,0,"")
          if yPrima < 270.0 {
            yPrima = yPrima + 5.0
          } else {
            yPrima = 45.0
            pdf.AddPage()
          }
        
      }
      //nuevoNumero := contador%46
      //yPrima := float64((nuevoNumero*5.0)+45.0)
      if PERIOD != periodoActual {
        pdf.ClipPolygon([]gofpdf.PointType{{10, yPrima -2.5}, {200, yPrima-2.5},{200, yPrima-2.5 }}, true)
        pdf.ClipEnd()
        pdf.SetXY(10, yPrima)
        //if contador != 1 {
          checar := ac.FormatMoney(acumulador)
          if Compare(checar,"$-0.00") == 0 {
            acumulador = 0.00
          }         
          pdf.CellFormat(0,0,tr(""+strconv.Itoa(periodoActual)+ " Total de Periodo: "+ ac.FormatMoney(acumulador)),"",1,"C",false,0,"")
          if yPrima < 270.0 {
            yPrima = yPrima + 5.0
          } else {
            yPrima = 45.0
            pdf.AddPage()
          }
          /*if nuevoNumero < 46 {
            nuevoNumero = nuevoNumero + 1 
          } else {
            nuevoNumero = 0
          }
          yPrima = float64((nuevoNumero*5.0)+45.0)*/
        //}
        periodoActual = PERIOD
      }

    /*  if contador%46==0{
        pdf.AddPage()
      }*/
      pdf.SetXY(5, yPrima)
      mes := int(trans.Month())
      dia :=  trans.Day()
      if mes > 9 && dia > 9 {
        pdf.Cell(0, 0, fmt.Sprintf("%d-%d-%d", trans.Year(), mes, dia))
      } else {
        if mes > 9 && dia < 10 {
          pdf.Cell(0, 0, fmt.Sprintf("%d-%d-0%d", trans.Year(), mes, dia))
        } else {
          if mes < 10 && dia > 9 {
            pdf.Cell(0, 0, fmt.Sprintf("%d-0%d-%d", trans.Year(), mes, dia))
          } else {
            pdf.Cell(0, 0, fmt.Sprintf("%d-0%d-0%d", trans.Year(), mes, dia)) 
          }
        }
      }


      pdf.SetXY(22, yPrima)
      debito := 0.0
      credito := 0.0

      //pdf.Cell(0, 0, strconv.Itoa(diario)+"-"+strconv.Itoa(linea))
      pdf.SetTextColor(50, 50, 255)
      pdf.CellFormat(0, 0, strconv.Itoa(diario)+"-"+strconv.Itoa(linea), "", 0,  "L", false, 0, "/generarDiario?diario="+strconv.Itoa(diario))
      pdf.SetTextColor(0, 0, 0)
      pdf.SetXY(35, yPrima)
      if acnt == ""{
        pdf.Cell(0, 0, cuentaNuevaVariable)   
      } else {
        pdf.SetFont("Arial", "", 4)
        pdf.Cell(0, 0, ref2)  
        pdf.SetFont("Arial", "", 8) 
      }
      
    
      amountPrima := math.Abs(amount.Float64())
      if Compare(D_C,"D")==0{
        debito:=amountPrima 
        acumulador = acumulador + amountPrima
        pdf.SetXY(145, yPrima)
        pdf.CellFormat(pixelesParaWidthDeCantidades, 0, ac.FormatMoney(debito), "", 0, "R", false, 0 , "")
        pdf.SetXY(165, yPrima)
        pdf.CellFormat(pixelesParaWidthDeCantidades, 0, ac.FormatMoney(credito), "", 0, "R", false, 0 , "")
      }else{
        credito:=amountPrima
        acumulador = acumulador - amountPrima
        pdf.SetXY(145, yPrima)
        pdf.CellFormat(pixelesParaWidthDeCantidades, 0, ac.FormatMoney(debito), "", 0, "R", false, 0 , "")
        pdf.SetXY(165, yPrima)
        pdf.CellFormat(pixelesParaWidthDeCantidades, 0, ac.FormatMoney(credito), "", 0, "R", false, 0 , "")
      }
      //totalDelPeriodo = totalDelPeriodo + amountPrima
      pdf.SetFont("Arial", "", 6)
      pdf.SetXY(55, yPrima)
      pdf.Cell(0, 0, tr(treference))
      pdf.SetXY(80, yPrima)
      pdf.Cell(0, 0, tr(DESCRIPTN))
      pdf.SetFont("Arial", "", 8)
      pdf.SetXY(187, yPrima)
      pdf.CellFormat(pixelesParaWidthDeCantidades, 0, ac.FormatMoney(acumulador), "", 0, "R", false, 0 , "")
      if yPrima < 270.0 {
        yPrima = yPrima + 5.0
      } else {
        yPrima = 45.0
        pdf.AddPage()
      }
    }
    var b bytes.Buffer
      w := bufio.NewWriter(&b)
      pdf.Output(w)
      pdf.Close()
      w.Flush()
      c.Ctx.Output.ContentType("application/pdf")
      c.Ctx.Output.Body(b.Bytes())
    }
}




func (c *ObtieneDimensionController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    numero := c.GetString("numero")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT ANL_CAT_ID, ENTRY_NUM FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ANL_ENT_ID = "+numero+" order by ENTRY_NUM asc"
    rows, err1 := conn.Query(query)
    if err1 != nil {
      fmt.Println("que paso:", err.Error())
    }
    var ANL_CAT_ID string
    //var S_HEAD string
    var ENTRY_NUM int64
    //err = nil
    models.ClearDimensionA()
    var dimen models.DimensionAsignada
        //_ = cuenta
      for rows.Next()  {
      rows.Scan(&ANL_CAT_ID, &ENTRY_NUM)
      dimen = models.DimensionAsignada{ANL_CAT_ID,ENTRY_NUM}
      models.AddDimensionA(dimen, ANL_CAT_ID)
    }
    example := map[string]interface{}{ "dimensiones": models.GetAllDimensionA() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
func (c *ClasificacionDimensionController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT ANL_CAT_ID, S_HEAD,DESCR FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CAT] order by ANL_CAT_ID asc"
    rows, err := conn.Query(query)
    var ANL_CAT_ID string
    var S_HEAD string
    var DESCR string
    //err = nil
    var dimen models.Dimensiones
        //_ = cuenta
      for rows.Next()  {
      rows.Scan(&ANL_CAT_ID, &S_HEAD, &DESCR)
      dimen = models.Dimensiones{ANL_CAT_ID,S_HEAD,DESCR}
      models.AddDimension(dimen, ANL_CAT_ID)
    }
    example := map[string]interface{}{ "dimensiones": models.GetAllDimensiones() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *CargaERController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetString("BUNIT")
    DB := c.GetSession("DB")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    //AND PROHIBIT_POSTING = 0
    //
    var ANL_CODE string
    var NAME string
    var Depar string
    type Esperma struct {
      Nombre string
      ER string
      Departamento string
    }
    EspermaList := make(map[string]*Esperma)

    queryEsperma := `SELECT a.NAME, a.ANL_CODE , n.Departamento
 FROM [SunSystemsData].[dbo].[`+BUNIT+`_ANL_CODE] a
INNER JOIN [Sevenplus].[dbo].[nomina] n on n.ER = a.ANL_CODE COLLATE SQL_Latin1_General_CP1_CI_AS AND n.BUNIT = '`+BUNIT+`'
 WHERE a.PROHIBIT_POSTING = '0' AND a.ANL_CAT_ID = '07' AND (a.ANL_CODE like 'ER%' OR a.ANL_CODE like 'R%' OR a.ANL_CODE like 'ES%')  
 AND (n.Departamento like 'ASO%' OR n.Departamento like 'MIN%') 
order by a.ANL_CODE asc`
rowsEsperma, _ := conn.Query(queryEsperma)
for rowsEsperma.Next()  {
      rowsEsperma.Scan(&NAME, &ANL_CODE, &Depar)
      EspermaList[ANL_CODE] = &Esperma{NAME,ANL_CODE,Depar}
      
    }

    

query := "SELECT NAME, ANL_CODE  FROM ["+DB.(string)+"].[dbo].["+BUNIT+"_ANL_CODE] WHERE ANL_CAT_ID = '07' AND (ANL_CODE like 'ER%' OR ANL_CODE like 'R%' OR ANL_CODE like 'ES%')  order by ANL_CODE asc"
    rows, err := conn.Query(query)
    var dimen models.DimensionSencilla
        models.ClearDimensionSencillaList()
      for rows.Next()  {
      rows.Scan(&NAME, &ANL_CODE)
      dimen = models.DimensionSencilla{ANL_CODE,NAME}
      models.AddDimensionSencilla(dimen, ANL_CODE)
    }
    queryDatos := "SELECT rfc, regimen, razonSocial, regPatronal, lugarExpedicion FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '"+BUNIT+"'"
    rowsDatos, err := conn.Query(queryDatos)
    var rfcEmisor string
    var regimen string
    var razonSocial string
    var regPatronal string
    var lugarExpedicion string
    for rowsDatos.Next()  {
      rowsDatos.Scan(&rfcEmisor, &regimen, &razonSocial, &regPatronal, &lugarExpedicion)
      rfcEmisor = strings.TrimSpace(rfcEmisor)
      regimen = strings.TrimSpace(regimen)
      razonSocial = strings.TrimSpace(razonSocial)
      regPatronal = strings.TrimSpace(regPatronal)
      lugarExpedicion = strings.TrimSpace(lugarExpedicion)
    }

    example := map[string]interface{}{ "success" : 1, "esperma" : EspermaList, "rfc" : rfcEmisor, "regimen" : regimen, "razonSocial" : razonSocial, "regPatronal" : regPatronal, "lugarExpedicion" : lugarExpedicion, "personas": models.GetAllDimensionSencilla() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *DimensionesController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT c.S_HEAD, a.ANL_CAT_ID, a.ANL_CODE, a.NAME, a.STATUS, a.PROHIBIT_POSTING FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CODE] a INNER JOIN [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CAT] c on c.ANL_CAT_ID = a.ANL_CAT_ID"
    rows, err := conn.Query(query)
    var ANL_CODE string
    var ANL_CAT_ID string
    var S_HEAD string
    var NAME string
    var STATUS int64
    var PROHIBIT_POSTING int64
    //err = nil
    var dimen models.Dimension
        //_ = cuenta
      for rows.Next()  {
      rows.Scan(&S_HEAD, &ANL_CAT_ID, &ANL_CODE, &NAME, &STATUS, &PROHIBIT_POSTING)
      dimen = models.Dimension{ANL_CAT_ID,S_HEAD,ANL_CODE, NAME, STATUS, PROHIBIT_POSTING}
      models.AddDimensionU(dimen, ANL_CODE)
    }
    example := map[string]interface{}{ "dimensiones": models.GetAllDimension() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
type Cedula struct {
  cedula string
  idCedula int64
}


func (c *GenerarCedulaPorLineaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    idLinea := c.GetString("idLinea")
    delPeriodo := c.GetString("delPeriodo")
    alPeriodo := c.GetString("alPeriodo")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT cc.nombre, cl.cuenta, cl.D_C_Tipo, cl.ANAL_T0, cl.ANAL_T1, cl.ANAL_T2, cl.ANAL_T3, cl.ANAL_T4, cl.ANAL_T5, cl.ANAL_T6, cl.ANAL_T7, cl.ANAL_T8, cl.ANAL_T9 FROM [SunSystemsData].[dbo].[CedulasLinea] cl INNER JOIN [SunSystemsData].[dbo].[CedulasConceptos] cc on cc.idConcepto = cl.idConcepto WHERE cl.idLinea = "+idLinea+" order by cl.idLinea asc"
    rows, err := conn.Query(query)
    var nombre string
    var cuenta string
    var D_C_Tipo int64
    var ANAL_T0 string
    var ANAL_T1 string
    var ANAL_T2 string
    var ANAL_T3 string
    var ANAL_T4 string
    var ANAL_T5 string
    var ANAL_T6 string
    var ANAL_T7 string
    var ANAL_T8 string
    var ANAL_T9 string
    D_C := ""
    models.ClearCedulasConceptosLineas()
    for rows.Next()  {
      rows.Scan( &nombre, &cuenta, &D_C_Tipo, &ANAL_T0, &ANAL_T1, &ANAL_T2, &ANAL_T3, &ANAL_T4, &ANAL_T5, &ANAL_T6, &ANAL_T7, &ANAL_T8, &ANAL_T9)



      if D_C_Tipo == 1 {
        D_C = "'D'"
      }
      if D_C_Tipo == 2 {
        D_C = "'C'"
      }
      if D_C_Tipo == 4 {
        D_C = "'D','C'"
      }
      queryC := "SELECT JRNAL_NO, JRNAL_LINE, AMOUNT FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE ACCNT_CODE = '"+cuenta+"' AND D_C in ("+D_C+") AND PERIOD >= "+delPeriodo+" AND PERIOD <= "+alPeriodo+" "
      if Compare(ANAL_T0,"") != 0 {
        queryC = queryC+"AND ANAL_T0 = '"+ANAL_T0+"' "
      }
      if Compare(ANAL_T1,"") != 0 {
        queryC = queryC+"AND ANAL_T1 = '"+ANAL_T1+"' "
      }
      if Compare(ANAL_T2,"") != 0 {
        queryC = queryC+"AND ANAL_T2 = '"+ANAL_T2+"' "
      }
      if Compare(ANAL_T3,"") != 0 {
        queryC = queryC+"AND ANAL_T3 = '"+ANAL_T3+"' "
      }
      if Compare(ANAL_T4,"") != 0 {
        queryC = queryC+"AND ANAL_T4 = '"+ANAL_T4+"' "
      }
      if Compare(ANAL_T5,"") != 0 {
        queryC = queryC+"AND ANAL_T5 = '"+ANAL_T5+"' "
      }
      if Compare(ANAL_T6,"") != 0 {
        queryC = queryC+"AND ANAL_T6 = '"+ANAL_T6+"' "
      }
      if Compare(ANAL_T6,"") != 0 {
        queryC = queryC+"AND ANAL_T6 = '"+ANAL_T7+"' "
      }
      if Compare(ANAL_T8,"") != 0 {
        queryC = queryC+"AND ANAL_T8 = '"+ANAL_T8+"' "
      }
      if Compare(ANAL_T9,"") != 0 {
        queryC = queryC+"AND ANAL_T9 = '"+ANAL_T9+"' "
      }
      queryC = queryC + " order by PERIOD asc, TRANS_DATETIME asc"
      rowsC, errC := conn.Query(queryC)
      if errC != nil {
        fmt.Println("Open connection failed:", err.Error())
      }
      var amount decimal.Dec
      var JRNAL_NO int
      var JRNAL_LINE int
      for rowsC.Next()  {
        rowsC.Scan(&JRNAL_NO, &JRNAL_LINE, &amount)
        var conceLinea models.CedulasConceptoLineas
        var diarioLinea = strconv.Itoa(JRNAL_NO)+"-"+strconv.Itoa(JRNAL_LINE)
            conceLinea = models.CedulasConceptoLineas{1,diarioLinea, amount.Float64()}
        models.AddCedulasConceptosLineas(conceLinea, diarioLinea)
          }
    }
    example := map[string]interface{}{ "cedulasAcumulador": models.GetAllCedulasConceptosLineas() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
func (c *GenerarCedulaPorConceptoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    idConcepto := c.GetString("idConcepto")
    delPeriodo := c.GetString("delPeriodo")
    alPeriodo := c.GetString("alPeriodo")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT cl.idLinea,  cc.nombre, cl.cuenta, cl.D_C_Tipo, cl.ANAL_T0, cl.ANAL_T1, cl.ANAL_T2, cl.ANAL_T3, cl.ANAL_T4, cl.ANAL_T5, cl.ANAL_T6, cl.ANAL_T7, cl.ANAL_T8, cl.ANAL_T9 FROM [SunSystemsData].[dbo].[CedulasLinea] cl INNER JOIN [SunSystemsData].[dbo].[CedulasConceptos] cc on cc.idConcepto = cl.idConcepto WHERE cc.idConcepto = "+idConcepto+" order by cl.idLinea asc"
    rows, err := conn.Query(query)
    var idLinea int64
    var nombre string
    var cuenta string
    var D_C_Tipo int64
    var ANAL_T0 string
    var ANAL_T1 string
    var ANAL_T2 string
    var ANAL_T3 string
    var ANAL_T4 string
    var ANAL_T5 string
    var ANAL_T6 string
    var ANAL_T7 string
    var ANAL_T8 string
    var ANAL_T9 string
    D_C := ""
    acumulador := 0.0
    var cuentaAnterior string
    cuentaAnterior = ""
    primeraVez := true
    var IdConceptoOLinea int64
    IdConceptoOLinea = -1
    models.ClearCedulasConceptosLineas()
    for rows.Next()  {
      rows.Scan(&idLinea, &nombre, &cuenta, &D_C_Tipo, &ANAL_T0, &ANAL_T1, &ANAL_T2, &ANAL_T3, &ANAL_T4, &ANAL_T5, &ANAL_T6, &ANAL_T7, &ANAL_T8, &ANAL_T9)
          if Compare(cuentaAnterior, cuenta) !=0 {
            if primeraVez  {
              primeraVez = false
            } else {
              var conceLinea models.CedulasConceptoLineas
              conceLinea = models.CedulasConceptoLineas{IdConceptoOLinea,cuentaAnterior,acumulador}
          models.AddCedulasConceptosLineas(conceLinea, cuentaAnterior)
            }
            acumulador = 0.0
            
          }
      if D_C_Tipo == 1 {
        D_C = "'D'"
      }
      if D_C_Tipo == 2 {
        D_C = "'C'"
      }
      if D_C_Tipo == 4 {
        D_C = "'D','C'"
      }
      queryC := "SELECT SUM(AMOUNT) as amount FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE ACCNT_CODE = '"+cuenta+"' AND D_C in ("+D_C+") AND PERIOD >= "+delPeriodo+" AND PERIOD <= "+alPeriodo+" "
      if Compare(ANAL_T0,"") != 0 {
        queryC = queryC+"AND ANAL_T0 = '"+ANAL_T0+"' "
      }
      if Compare(ANAL_T1,"") != 0 {
        queryC = queryC+"AND ANAL_T1 = '"+ANAL_T1+"' "
      }
      if Compare(ANAL_T2,"") != 0 {
        queryC = queryC+"AND ANAL_T2 = '"+ANAL_T2+"' "
      }
      if Compare(ANAL_T3,"") != 0 {
        queryC = queryC+"AND ANAL_T3 = '"+ANAL_T3+"' "
      }
      if Compare(ANAL_T4,"") != 0 {
        queryC = queryC+"AND ANAL_T4 = '"+ANAL_T4+"' "
      }
      if Compare(ANAL_T5,"") != 0 {
        queryC = queryC+"AND ANAL_T5 = '"+ANAL_T5+"' "
      }
      if Compare(ANAL_T6,"") != 0 {
        queryC = queryC+"AND ANAL_T6 = '"+ANAL_T6+"' "
      }
      if Compare(ANAL_T6,"") != 0 {
        queryC = queryC+"AND ANAL_T6 = '"+ANAL_T7+"' "
      }
      if Compare(ANAL_T8,"") != 0 {
        queryC = queryC+"AND ANAL_T8 = '"+ANAL_T8+"' "
      }
      if Compare(ANAL_T9,"") != 0 {
        queryC = queryC+"AND ANAL_T9 = '"+ANAL_T9+"' "
      }
      rowsC, errC := conn.Query(queryC)
      if errC != nil {
        fmt.Println("Open connection failed:", err.Error())
      }
      var amount decimal.Dec
      for rowsC.Next()  {
        rowsC.Scan(&amount)
          }
          acumulador+= amount.Float64()
      cuentaAnterior = cuenta
      IdConceptoOLinea = idLinea
    }
    var conceLinea models.CedulasConceptoLineas
        conceLinea = models.CedulasConceptoLineas{IdConceptoOLinea,cuentaAnterior,acumulador}
    models.AddCedulasConceptosLineas(conceLinea, cuentaAnterior)
    example := map[string]interface{}{ "cedulasAcumulador": models.GetAllCedulasConceptosLineas() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
func (c *GenerarCedulasController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    idCedula := c.GetString("idCedula")
    delPeriodo := c.GetString("delPeriodo")
    alPeriodo := c.GetString("alPeriodo")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT cl.idLinea,  cc.nombre, cl.cuenta, cl.D_C_Tipo, cl.ANAL_T0, cl.ANAL_T1, cl.ANAL_T2, cl.ANAL_T3, cl.ANAL_T4, cl.ANAL_T5, cl.ANAL_T6, cl.ANAL_T7, cl.ANAL_T8, cl.ANAL_T9, cl.idConcepto FROM [SunSystemsData].[dbo].[CedulasLinea] cl INNER JOIN [SunSystemsData].[dbo].[CedulasConceptos] cc on cc.idConcepto = cl.idConcepto WHERE cc.idCedula = "+idCedula+" order by cl.idLinea asc"
    rows, err := conn.Query(query)
    var idLinea int64
    var idConcepto int64
    var nombre string
    var cuenta string
    var D_C_Tipo int64
    var ANAL_T0 string
    var ANAL_T1 string
    var ANAL_T2 string
    var ANAL_T3 string
    var ANAL_T4 string
    var ANAL_T5 string
    var ANAL_T6 string
    var ANAL_T7 string
    var ANAL_T8 string
    var ANAL_T9 string
    D_C := ""
    acumulador := 0.0
    var idConceptoAnterior int64
    idConceptoAnterior = -1
    primeraVez := true
    nombreAnterior := ""
    var IdConceptoOLinea int64
    IdConceptoOLinea = -1
    models.ClearCedulasConceptosLineas()
    for rows.Next()  {
      rows.Scan(&idLinea, &nombre, &cuenta, &D_C_Tipo, &ANAL_T0, &ANAL_T1, &ANAL_T2, &ANAL_T3, &ANAL_T4, &ANAL_T5, &ANAL_T6, &ANAL_T7, &ANAL_T8, &ANAL_T9, &idConcepto)
          if idConceptoAnterior != idConcepto {
            if primeraVez  {
              primeraVez = false
            } else {
              var conceLinea models.CedulasConceptoLineas
              conceLinea = models.CedulasConceptoLineas{IdConceptoOLinea,nombreAnterior,acumulador}
          models.AddCedulasConceptosLineas(conceLinea, nombreAnterior)
            }
            acumulador = 0.0
            idConceptoAnterior = idConcepto
          }
      if D_C_Tipo == 1 {
        D_C = "'D'"
      }
      if D_C_Tipo == 2 {
        D_C = "'C'"
      }
      if D_C_Tipo == 4 {
        D_C = "'D','C'"
      }
      queryC := "SELECT SUM(AMOUNT) as amount FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE ACCNT_CODE = '"+cuenta+"' AND D_C in ("+D_C+") AND PERIOD >= "+delPeriodo+" AND PERIOD <= "+alPeriodo+" "
      if Compare(ANAL_T0,"") != 0 {
        queryC = queryC+"AND ANAL_T0 = '"+ANAL_T0+"' "
      }
      if Compare(ANAL_T1,"") != 0 {
        queryC = queryC+"AND ANAL_T1 = '"+ANAL_T1+"' "
      }
      if Compare(ANAL_T2,"") != 0 {
        queryC = queryC+"AND ANAL_T2 = '"+ANAL_T2+"' "
      }
      if Compare(ANAL_T3,"") != 0 {
        queryC = queryC+"AND ANAL_T3 = '"+ANAL_T3+"' "
      }
      if Compare(ANAL_T4,"") != 0 {
        queryC = queryC+"AND ANAL_T4 = '"+ANAL_T4+"' "
      }
      if Compare(ANAL_T5,"") != 0 {
        queryC = queryC+"AND ANAL_T5 = '"+ANAL_T5+"' "
      }
      if Compare(ANAL_T6,"") != 0 {
        queryC = queryC+"AND ANAL_T6 = '"+ANAL_T6+"' "
      }
      if Compare(ANAL_T6,"") != 0 {
        queryC = queryC+"AND ANAL_T6 = '"+ANAL_T7+"' "
      }
      if Compare(ANAL_T8,"") != 0 {
        queryC = queryC+"AND ANAL_T8 = '"+ANAL_T8+"' "
      }
      if Compare(ANAL_T9,"") != 0 {
        queryC = queryC+"AND ANAL_T9 = '"+ANAL_T9+"' "
      }
      rowsC, errC := conn.Query(queryC)
      if errC != nil {
        fmt.Println("Open connection failed:", err.Error())
      }
      var amount decimal.Dec
      for rowsC.Next()  {
        rowsC.Scan(&amount)
          }
          acumulador+= amount.Float64()
      nombreAnterior = nombre
      IdConceptoOLinea = idConcepto
    }
    var conceLinea models.CedulasConceptoLineas
        conceLinea = models.CedulasConceptoLineas{IdConceptoOLinea,nombreAnterior,acumulador}
    models.AddCedulasConceptosLineas(conceLinea, nombreAnterior)
    example := map[string]interface{}{ "cedulasAcumulador": models.GetAllCedulasConceptosLineas() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

  
func check(e error) {
    if e != nil {
        fmt.Println(e)
    }
}

func (c *TimbresUsadosTODOSController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.Format(time.RFC3339)
    substring := string(dateString[0:10])
    
    type RFCs struct{
      RazonSocial string
      Mov string
    }
    
    rfcArray := make(map[string]*RFCs)
      
      rfcArray["IAS9306298H0"] = &RFCs{"IGLESIA ADVENTISTA DEL SEPTIMO DIA UNION DEL NORTE","0"}
      rfcArray["IAS930629UM9"] = &RFCs{"IGLESIA ADVENTISTA DEL SEPTIMO DIA SECCION DE BAJA CALIFORNIA",""}
      rfcArray["IAS070503CY8"] = &RFCs{"IGLESIA ADVENTISTA DEL SEPTIMO DIA SECCION DE BAJA CALIFORNIA SUR, A.R.",""}
      rfcArray["IAS930629FV4"] = &RFCs{"IGLESIA ADVENTISTA DEL SEPTIMO DIA SECCION DE CHIHUAHUA AR",""}
      rfcArray["IAS980303TZ7"] = &RFCs{"IGLESIA ADVENTISTA DEL SEPTIMO DIA SECCION DEL GOLFO AR",""}
      rfcArray["IAS930629HZ1"] = &RFCs{"IGLESIA ADVENTISTA DEL SEPTIMO DIA SECCION DEL NORESTE",""}
      rfcArray["IAS111206KZ9"] = &RFCs{"IGLESIA ADVENTISTA DEL SEPTIMO DIA SECCION NOROCCIDENTAL, A.R.",""}
      rfcArray["IAS930629F7A"] = &RFCs{"IGLESIA ADVENTISTA DEL SEPTIMO DIA SECCION OCCIDENTE",""}
      rfcArray["IAS9306294E7"] = &RFCs{"IGLESIA ADVENTISTA DEL SEPTIMO DIA SECCION DE SINALOA, A.R.",""}
      rfcArray["IAS930629AN4"] = &RFCs{"IGLESIA ADVENTISTA DEL SEPTIMO DIA SECCION DE SONORA",""}
      rfcArray["IAS090129EP5"] = &RFCs{"IGLESIA ADVENTISTA DEL SÉPTIMO DIA SECCION NORTE DE TAMAULIPAS A.R.",""}
//IAS111206KZ9
      byteArray := []byte(substring)
    hasher := sha512.New()
      hasher.Write(byteArray)
    cryptoText := base64.StdEncoding.EncodeToString(  []byte(hex.EncodeToString(hasher.Sum(nil))))
    type TypeDocument struct{
      Return string
    }
    
    //  k:="IAS9306298H0"
      for k := range rfcArray {
    
      hc := http.Client{}
      form := url.Values{}
      form.Add("cryptoText", cryptoText)
      form.Add("rfc", k)
      req, err := http.NewRequest("POST", "http://miscuentas.adventistasumn.org/cuantos.php", strings.NewReader(form.Encode()))
      check(err)
      req.PostForm = form
      req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
      resp, err := hc.Do(req)  
      DocumentObject := TypeDocument {Return:"hola"}
      err = json.NewDecoder(resp.Body).Decode(&DocumentObject)
      fmt.Println(DocumentObject)
    if strings.Contains(DocumentObject.Return, "ErrorCode") || strings.Contains(DocumentObject.Return, "hola")  {
          rfcArray[k].Mov = "0"
          fmt.Println(k)
        } else {  
          if strings.Contains(DocumentObject.Return, "movements")   {
            indexM := strings.Index(DocumentObject.Return, "movements")
        mov := ""
        if indexM != -1 {
          movAux := DocumentObject.Return[indexM+11:]
          indexMPrima := strings.Index(movAux, "\"")
          mov = movAux[:indexMPrima]
        } else {
          mov = "0"
        }
        rfcArray[k].Mov = mov
          }
        }
    }

       /* k="IAS930629UM9"

      hc = http.Client{}
      form = url.Values{}
      form.Add("cryptoText", cryptoText)
      form.Add("rfc", k)
      req, err = http.NewRequest("POST", "http://miscuentas.adventistasumn.org/cuantos.php", strings.NewReader(form.Encode()))
      check(err)
      req.PostForm = form
      req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
      resp, err = hc.Do(req)   
      DocumentObject = TypeDocument {Return:"hola"}
      err = json.NewDecoder(resp.Body).Decode(&DocumentObject)
      fmt.Println(DocumentObject)
    if strings.Contains(DocumentObject.Return, "ErrorCode") || strings.Contains(DocumentObject.Return, "hola")  {
          rfcArray[k].Mov = "0"
        } else {  
          if strings.Contains(DocumentObject.Return, "movements")   {
            indexM := strings.Index(DocumentObject.Return, "movements")
        mov := ""
        if indexM != -1 {
          movAux := DocumentObject.Return[indexM+11:]
          indexMPrima := strings.Index(movAux, "\"")
          mov = movAux[:indexMPrima]
        } else {
          mov = "0"
        }
        rfcArray[k].Mov = mov
          }
        }
     
     */
      
      example := map[string]interface{}{"success" : 1, "mov" : rfcArray}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *TimbresUsadosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.Format(time.RFC3339)
    substring := string(dateString[0:10])
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    queryFolio := "SELECT rfc, razonSocial FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '"+BUNIT.(string)+"'"
    rowsFolio, err := conn.Query(queryFolio)
    rfc := ""
    razonSocial := ""
    for rowsFolio.Next()  {
      rowsFolio.Scan(&rfc, &razonSocial)
    }
    
    
    byteArray := []byte(substring)
    hasher := sha512.New()
      hasher.Write(byteArray)
    cryptoText := base64.StdEncoding.EncodeToString(  []byte(hex.EncodeToString(hasher.Sum(nil))))
    type TypeDocument struct{
      Return string
    }
    hc := http.Client{}
      form := url.Values{}
      form.Add("cryptoText", cryptoText)
      form.Add("rfc", rfc)
      form.Add("deVerdad", "1")
    req, err := http.NewRequest("POST", "http://miscuentas.adventistasumn.org/cuantos.php", strings.NewReader(form.Encode()))
      req.PostForm = form
      req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
      resp, err := hc.Do(req)  
      DocumentObject := TypeDocument {Return:"hola"}
     
      err = json.NewDecoder(resp.Body).Decode(&DocumentObject)
     
      fmt.Println(DocumentObject)
    if strings.Contains(DocumentObject.Return, "ErrorCode") || strings.Contains(DocumentObject.Return, "hola")  {
          example := map[string]interface{}{"success" : -1, "error" :  DocumentObject.Return, "revisar" : "nose"}
      c.Data["json"] = &example
      c.ServeJSON()
        } else {  
          if strings.Contains(DocumentObject.Return, "movements")   {
            indexM := strings.Index(DocumentObject.Return, "movements")
        mov := ""
        if indexM != -1 {
          movAux := DocumentObject.Return[indexM+11:]
          indexMPrima := strings.Index(movAux, "\"")
          mov = movAux[:indexMPrima]
        } else {
          mov = "0"
        }
        //fmt.Println(DocumentObject.Return)
        example := map[string]interface{}{"success" : 1, "mov" : mov, "rfc" : rfc, "razonSocial" : razonSocial}
        c.Data["json"] = &example
        c.ServeJSON()
      } else {
        example := map[string]interface{}{"success" : -1}
        c.Data["json"] = &example
        c.ServeJSON()
      }

    }
  }
}

func (c *CancelaTimbradoNominaMasivoController) Get() {
    BUNIT :="MU1"
    fmt.Println(BUNIT)
    UUID := ""
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.Format(time.RFC3339)
    substring := string(dateString[0:10])
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    queryFolio := "SELECT rfc FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '"+BUNIT+"'"
    fmt.Println(queryFolio)
    rowsFolio, err := conn.Query(queryFolio)
    rfc := ""
    for rowsFolio.Next()  {
      rowsFolio.Scan(&rfc)
    }
    queryCorreo := "SELECT cadOriginal,UUID FROM [Sevenplus].[dbo].[zNominaFacturas] WHERE timbrado = 1 AND periodo >= 2018001 AND periodo <= 2018005  AND BUNIT = '"+BUNIT+"' AND manual = 0"
    rowsCorreo, errC := conn.Query(queryCorreo)
    fmt.Println(queryCorreo)
    

    //timbra3.3.php
    if errC != nil {
      fmt.Println(errC)
    }
    cadOriginal := ""
    for rowsCorreo.Next()  {
      rowsCorreo.Scan(&cadOriginal,&UUID)
      fmt.Println(UUID)//
      //cfdi33timbrado := `<?xml version="1.0" encoding="UTF-8"?><cfdi:Comprobante Certificado="MIIGqDCCBJCgAwIBAgIUMDAwMDEwMDAwMDA0MDY3MjA0OTEwDQYJKoZIhvcNAQELBQAwggGyMTgwNgYDVQQDDC9BLkMuIGRlbCBTZXJ2aWNpbyBkZSBBZG1pbmlzdHJhY2nDs24gVHJpYnV0YXJpYTEvMC0GA1UECgwmU2VydmljaW8gZGUgQWRtaW5pc3RyYWNpw7NuIFRyaWJ1dGFyaWExODA2BgNVBAsML0FkbWluaXN0cmFjacOzbiBkZSBTZWd1cmlkYWQgZGUgbGEgSW5mb3JtYWNpw7NuMR8wHQYJKoZIhvcNAQkBFhBhY29kc0BzYXQuZ29iLm14MSYwJAYDVQQJDB1Bdi4gSGlkYWxnbyA3NywgQ29sLiBHdWVycmVybzEOMAwGA1UEEQwFMDYzMDAxCzAJBgNVBAYTAk1YMRkwFwYDVQQIDBBEaXN0cml0byBGZWRlcmFsMRQwEgYDVQQHDAtDdWF1aHTDqW1vYzEVMBMGA1UELRMMU0FUOTcwNzAxTk4zMV0wWwYJKoZIhvcNAQkCDE5SZXNwb25zYWJsZTogQWRtaW5pc3RyYWNpw7NuIENlbnRyYWwgZGUgU2VydmljaW9zIFRyaWJ1dGFyaW9zIGFsIENvbnRyaWJ1eWVudGUwHhcNMTcwNjI5MTYyOTEyWhcNMjEwNjI5MTYyOTEyWjCCAUcxPjA8BgNVBAMTNUlHTEVTSUEgQURWRU5USVNUQSBERUwgU0VQVElNTyBESUEgVU5JT04gREVMIE5PUlRFIEFSMT4wPAYDVQQpEzVJR0xFU0lBIEFEVkVOVElTVEEgREVMIFNFUFRJTU8gRElBIFVOSU9OIERFTCBOT1JURSBBUjE+MDwGA1UEChM1SUdMRVNJQSBBRFZFTlRJU1RBIERFTCBTRVBUSU1PIERJQSBVTklPTiBERUwgTk9SVEUgQVIxJTAjBgNVBC0THElBUzE2MDcwN1U2MiAvIFZJTU42OTA1MDZNUjIxHjAcBgNVBAUTFSAvIFZJTU42OTA1MDZNQ1NMUlIwNjE+MDwGA1UECxM1SUdMRVNJQSBBRFZFTlRJU1RBIERFTCBTRVBUSU1PIERJQSBVTklPTiBERUwgTk9SVEUgQVIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC1ysoSYRlfIxmeBaEFbWb7+FWJP0hvbpRvhn4Khrr3oxAnqezy0ZRrWwrYpTEL4RG1a/9FVE9EDEDEvnHWZQfgojdnVTUcQlUnvvrGlfdm0G6mZBlRUop5Z+1MO8KnTXN2vyHNC4N+ZPUaB6pYItiw385IBCHWULaj50wFvXN+9aEqFSqf5zB1dsL4su0LvfTJfC3KgJljd/O4vpI5YRyKy8q2pdI6BHCbRqZheOx2iXYldsuROwMPaz8UUR4nJfqHvCtyrINb/IWGfCb8kNErDjhRN2PHBdXyVYnhPoVSf4btLwz7y9tP5zusQGbFTd/iqDOmZHJSZK2DL3736MtXAgMBAAGjHTAbMAwGA1UdEwEB/wQCMAAwCwYDVR0PBAQDAgbAMA0GCSqGSIb3DQEBCwUAA4ICAQBwbiP20Krz3eTghiMX2AIRwPcGZhkclg6pDaI678pqBULZrDOWhO/jUWliEe2H5yTcvXoeHhyr2aPg5iQgFj9HxgdSs/7gtjNrlpxEvz2JFSgLhaOpA9pSFhqbKMMFatPMJhOpxdeEVi1rGvDNQlP8DrpjfPKNsE3LVDz0FGmgzoHogxtlUIlCpwqLWNfKOclMXbhpMv6CrRoOC4a8HXRJZRCBWLt3tfaW2nfu445iqyXO/dVr/nBNmOmaCK45AdsJywbB/pdqM95dZnat4M9gpKXoOSJ8bvPX9Z7JnUFS18RWBM2iPtYxOtWakKviAfMsNEbiNVTkP87uwOiTsFFrqZY8CnDkw1hTd9Pr5Yank97k0VS8BwAiwySKGYbWAsqiJEOH7RJS8vdQ0Kn/kXME/Sq8WGU4MgL/6Wk+IEqco84If0ARDO80khTh5FPf17i0pj3L6UK7IiLahPIdpaEX00WSnqRUk4Wy9FMGnB/b5/G/z8MHVUaIJnasn7mETwNP8K1NPbejlzyU7T0BJFfdoUElIgjN7E8NdTNaFySm+J7eAEZZkcqjdfHSwvvu7SRPosmyO0WUTS5bpSrqnj/c5iZd2iZANN1ipNRCAP9sVnTfO4DSlbmKp7IJZTZeoE2KRGirnCeeB0mn3C/uH3dMNAlkoDlUwzcvXYXoGrh3pA==" Descuento="4957.19" Fecha="2018-05-30T16:40:36" Folio="1" FormaPago="99" LugarExpedicion="67500" MetodoPago="PUE" Moneda="MXN" NoCertificado="00001000000406720491" Sello="flEofwOe3HPFe7hCkxES6n+sJ88rT1T9Ej6xz0inuGGYK8hSMu/VSbPKNvEtLL8Cv/L4ZH6W7GMb/sY3raFaonip08m3PoLEQ1sO5ML0QRo6ZXP0SVrLDGTldlU/nqgtV3IA1CM8CEdggvEwave6hDX8Rc/3r4hCH1y40Nx9sNUNWH2cXkNkpVxsKtsoECcXgF0Oco5OVHBGVhcDdQsvjrWkjYjHYHEzqjJlDf2yM77PsSxMgDJxSkOhkDAGN8f1ML9Ke27GtIb+z4td6fhGzo4gEapFyA1r8hEchJ18v2CAtBDPinzHvb+pe6gZyHTf4Ik1ifxas5uQBMOkYyn31g==" Serie="N" SubTotal="20377.93" TipoDeComprobante="N" Total="15420.74" Version="3.3" xsi:schemaLocation="http://www.sat.gob.mx/cfd/3 http://www.sat.gob.mx/sitio_internet/cfd/3/cfdv33.xsd http://www.sat.gob.mx/nomina http://www.sat.gob.mx/sitio_internet/cfd/nomina/nomina12.xsd" xmlns:cfdi="http://www.sat.gob.mx/cfd/3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><cfdi:Emisor Nombre="IGLESIA ADVENTISTA DEL SEPTIMO DIA UNION DEL NORTE A.R." RegimenFiscal="603" Rfc="IAS160707U62"/><cfdi:Receptor Nombre="Fernando Alonso Pecina" Rfc="AOPF890809EN6" UsoCFDI="P01"/><cfdi:Conceptos><cfdi:Concepto Cantidad="1" ClaveProdServ="84111505" ClaveUnidad="ACT" Descripcion="Pago de nómina" Descuento="4957.19" Importe="20377.93" ValorUnitario="20377.93"/></cfdi:Conceptos><cfdi:Complemento><tfd:TimbreFiscalDigital Version="1.1" SelloCFD="flEofwOe3HPFe7hCkxES6n+sJ88rT1T9Ej6xz0inuGGYK8hSMu/VSbPKNvEtLL8Cv/L4ZH6W7GMb/sY3raFaonip08m3PoLEQ1sO5ML0QRo6ZXP0SVrLDGTldlU/nqgtV3IA1CM8CEdggvEwave6hDX8Rc/3r4hCH1y40Nx9sNUNWH2cXkNkpVxsKtsoECcXgF0Oco5OVHBGVhcDdQsvjrWkjYjHYHEzqjJlDf2yM77PsSxMgDJxSkOhkDAGN8f1ML9Ke27GtIb+z4td6fhGzo4gEapFyA1r8hEchJ18v2CAtBDPinzHvb+pe6gZyHTf4Ik1ifxas5uQBMOkYyn31g==" UUID="`+UUID+`" FechaTimbrado="2018-05-30T16:40:54" RfcProvCertif="STO020301G28" NoCertificadoSAT="00001000000404627119" SelloSAT="MqWuVjgpIPjmvrrf6a4qI/LNeugpiod0voyKwZ8Y3QlqBkdhZixYk9GFknzkys33db0YgnvqZGVgoRBXzxEwo7dQ09oxFO/ZTuW2LzVkjGGUyn60OtRDAxx+PcR0EI1Zh0051hbL3JoMUHQrb7AoRKCkXLBp9lY1ZJcqIWie0ZomykBCbx3qqVer1FzX5oT4PTn/JrOVK/jjNKZpQhzzk0w+U1iOmD/j6HWI4JwQdSBWgqOutPH8bjC0XgoANkclWbMj+EhEAPAvbwQUJax+aI5sIzW2x8Y6pfAqdA2HQLTHXFp0kDNr7C/sT6J8jx7Sae2Owrdo3CJO0Pv/zZeCQ==" xsi:schemaLocation="http://www.sat.gob.mx/TimbreFiscalDigital http://www.sat.gob.mx/sitio_internet/cfd/TimbreFiscalDigital/TimbreFiscalDigitalv11.xsd" xmlns:tfd="http://www.sat.gob.mx/TimbreFiscalDigital"/><nomina12:Nomina FechaFinalPago="2018-05-31" FechaInicialPago="2018-05-01" FechaPago="2018-05-25" NumDiasPagados="31" TipoNomina="O" TotalDeducciones="4957.19" TotalOtrosPagos="0.00" TotalPercepciones="20377.93" Version="1.2" xmlns:nomina12="http://www.sat.gob.mx/nomina12"><nomina12:Emisor RegistroPatronal="D4918553105"/><nomina12:Receptor Antigüedad="P51W" Banco="044" ClaveEntFed="NLE" CuentaBancaria="25300060496" Curp="AOPF890809HTSLCR09" Departamento="ASOCIADOS RELIGIOSOS" FechaInicioRelLaboral="2017-06-01" NumEmpleado="018" NumSeguridadSocial="09118903963" PeriodicidadPago="05" Puesto="Ninguno" RiesgoPuesto="1" SalarioDiarioIntegrado="679.82" TipoContrato="01" TipoJornada="01" TipoRegimen="02"/><nomina12:Percepciones TotalExento="7355.00" TotalGravado="13022.93" TotalSueldos="20377.93"><nomina12:Percepcion Clave="015" Concepto="MANUTENCION" ImporteExento="7355.00" ImporteGravado="13022.93" TipoPercepcion="038"/></nomina12:Percepciones><nomina12:Deducciones TotalImpuestosRetenidos="1488.24" TotalOtrasDeducciones="3468.95"><nomina12:Deduccion Clave="030" Concepto="ANTICIPO" Importe="2917" TipoDeduccion="012"/><nomina12:Deduccion Clave="001" Concepto="IMSS" Importe="314.86" TipoDeduccion="001"/><nomina12:Deduccion Clave="003" Concepto="RCV" Importe="237.09" TipoDeduccion="003"/><nomina12:Deduccion Clave="010" Concepto="ISR" Importe="1488.24" TipoDeduccion="002"/></nomina12:Deducciones></nomina12:Nomina></cfdi:Complemento></cfdi:Comprobante>`
//cfdi33timbrado = strings.Replace(cfdi33timbrado, `"`, `\"`, -1)
//    fmt.Println(cfdi33timbrado)

      byteArray := []byte(substring)
      hasher := sha512.New()
        hasher.Write(byteArray)
      cryptoText := base64.StdEncoding.EncodeToString(  []byte(hex.EncodeToString(hasher.Sum(nil))))
      type TypeDocument struct{
        CancelResponse string
      }
      hc := http.Client{}
        form := url.Values{}
        form.Add("cryptoText", cryptoText)
        form.Add("tipo", "3")//3 = cancelacion!
        form.Add("UUID", UUID)
        form.Add("rfc", rfc)
        form.Add("cadOriginal", cadOriginal)
        //form.Add("cfdi", cfdi33timbrado)
        form.Add("deVerdad", "1")
        //masivo, no le muevas
      req, err := http.NewRequest("POST", "https://miscuentas.adventistasumn.org/cancelCFDI.php", strings.NewReader(form.Encode()))
        req.PostForm = form
        req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
        resp, err := hc.Do(req)  
        DocumentObject := TypeDocument {CancelResponse:"hola"}
        fmt.Println(resp.Body)
        err = json.NewDecoder(resp.Body).Decode(&DocumentObject)
        check(err)
        fmt.Println(DocumentObject)
      if strings.Contains(DocumentObject.CancelResponse, "Codigo>-1") || strings.Contains(DocumentObject.CancelResponse, "hola")  {
            example := map[string]interface{}{"success" : -1, "error" :  DocumentObject.CancelResponse, "revisar" : "nose"}
        c.Data["json"] = &example
        c.ServeJSON()
          } else {  
            if strings.Contains(DocumentObject.CancelResponse, "UUID Cancelado") || strings.Contains(DocumentObject.CancelResponse, "UUID Previamente cancelado")  {
            queryDD := `UPDATE [Sevenplus].[dbo].[zNominaFacturas] SET timbrado = 0 WHERE UUID = '`+UUID+`'`
          conn.Exec(queryDD)
        } 
      }
    } 
}



func (c *CancelaTimbradoNominaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    UUID := c.GetString("UUID")
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.Format(time.RFC3339)
    substring := string(dateString[0:10])
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    queryFolio := "SELECT rfc FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '"+BUNIT.(string)+"'"
    rowsFolio, err := conn.Query(queryFolio)
    rfc := ""
    for rowsFolio.Next()  {
      rowsFolio.Scan(&rfc)
    }
    cadOriginal := ""
    queryCorreo := "SELECT cadOriginal FROM [Sevenplus].[dbo].[zNominaFacturas] WHERE UUID = '"+UUID+"'"
    rowsCorreo, errC := conn.Query(queryCorreo)
    if errC != nil {
      fmt.Println(queryCorreo)
      fmt.Println(errC)
    }
    //correoPersona := ""
    if rowsCorreo.Next()  {
      rowsCorreo.Scan(&cadOriginal)
    }
    byteArray := []byte(substring)
    hasher := sha512.New()
      hasher.Write(byteArray)
    cryptoText := base64.StdEncoding.EncodeToString(  []byte(hex.EncodeToString(hasher.Sum(nil))))
    type CancelDocument struct{
      Mensaje string
    }
    type TypeDocument struct{
      CancelResponse CancelDocument
    }
    hc := http.Client{}
      form := url.Values{}

      form.Add("cryptoText", cryptoText)
      form.Add("tipo", "3")//3 = cancelacion!
      form.Add("UUID", UUID)
      form.Add("rfc", rfc)
      form.Add("cadOriginal", cadOriginal)
        
          
      form.Add("deVerdad", "1")
      //cancelar nomina
    req, err := http.NewRequest("POST", "https://miscuentas.adventistasumn.org/cancelCFDI.php", strings.NewReader(form.Encode()))
      req.PostForm = form
      req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
      resp, err := hc.Do(req)  
      docxml := CancelDocument {Mensaje : "hola"}
      DocumentObject := TypeDocument {CancelResponse: docxml}
      err = json.NewDecoder(resp.Body).Decode(&DocumentObject)
      check(err)
      fmt.Println(DocumentObject)
      if strings.Contains(DocumentObject.CancelResponse.Mensaje, "ErrorCode") || strings.Contains(DocumentObject.CancelResponse.Mensaje, "Codigo>-1") || strings.Contains(DocumentObject.CancelResponse.Mensaje, "hola")  {
          example := map[string]interface{}{"success" : -1, "error" :  DocumentObject.CancelResponse, "revisar" : "nomina"}
      c.Data["json"] = &example
      c.ServeJSON()
        } else {  
        queryDD := `UPDATE [Sevenplus].[dbo].[zNominaFacturas] SET timbrado = 0 WHERE UUID = '`+UUID+`'`
      conn.Exec(queryDD)
      example := map[string]interface{}{"success" : 1}
      c.Data["json"] = &example
      c.ServeJSON()
    }
  }
}

func (c *VerTimbradoNominaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    ER := c.GetString("ER")
    UUID := c.GetString("UUID")
    periodo := c.GetString("periodo")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    queryFolio := `SELECT ISNULL(n.pdf,'') as pdf, ISNULL(n.xml,'') as xml, nn.nombre FROM [Sevenplus].[dbo].[zNominaFacturas] n
INNER JOIN [Sevenplus].[dbo].[nomina] nn on nn.ER = n.ER 
 WHERE n.BUNIT = '`+BUNIT.(string)+`'
    AND n.ER = '`+ER+`' AND n.periodo = `+periodo+` AND n.UUID = '`+UUID+`' AND n.timbrado = 1`
    rowsFolio, err := conn.Query(queryFolio)
    pdf := ""
    xml := ""
    nombre :=""
    for rowsFolio.Next()  {
      rowsFolio.Scan(&pdf, &xml, &nombre)
      pdf = strings.TrimSpace(pdf)
      if pdf == ""  {
        fmt.Println(queryFolio)
        fmt.Println(nombre)
        //Antiguedad = strings.Replace(Antiguedad, "P", "", -1)
        anio := periodo[0:4]
        mes := periodo[5:]
        FechaPago := anio+"-"+mes+"-25"
        pdf = "static/manuntencion/3.3/"+BUNIT.(string)+"/"+periodo+"/"+FechaPago+"/"+ nombre+"_TIMBRADO.pdf"
      } 
      
      example := map[string]interface{}{"success" : 1, "pdf" : pdf }
      c.Data["json"] = &example
      c.ServeJSON()
    }
    example := map[string]interface{}{"success" : 0}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *VistaPreviaFacturaIngresoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    cantidad := c.GetString("cantidad")
    nombre := c.GetString("nombre")
    diario := c.GetString("diario")
    linea := c.GetString("linea")
    RFC := c.GetString("RFC")
    RazonSocial := c.GetString("RazonSocial")
    //correoPersona := c.GetString("correo")
    NumCtaPago := c.GetString("NumCtaPago")
    MetodoDePago := c.GetString("MetodoDePago")

    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.Format(time.RFC3339)
    //substring := string(dateString[0:10])
    dateStringSubString := string(dateString[0:19])

    if _, err := os.Stat("static/ingresos/"+BUNIT.(string)+"/"+diario+"-"+linea+"/"); os.IsNotExist(err) {
        os.MkdirAll("static/ingresos/"+BUNIT.(string)+"/"+diario+"-"+linea+"/", 0777)
    }
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    queryFolio := "SELECT ISNULL(MAX(folio),0) as folio FROM [Sevenplus].[dbo].["+BUNIT.(string)+"_zFacturas] WHERE BUNIT = '"+BUNIT.(string)+"'"
    rowsFolio, err := conn.Query(queryFolio)
    folioQueSigue := 0
    for rowsFolio.Next()  {
      rowsFolio.Scan(&folioQueSigue)
      folioQueSigue++
    }

    queryDatos := "SELECT rfc, regimen, razonSocial, regPatronal, lugarExpedicion FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '"+BUNIT.(string)+"'"
    rowsDatos, err := conn.Query(queryDatos)
    var rfcEmisor string
    var regimen string
    var razonSocial string
    var regPatronal string
    var lugarExpedicion string
    for rowsDatos.Next()  {
      rowsDatos.Scan(&rfcEmisor, &regimen, &razonSocial, &regPatronal, &lugarExpedicion)
      rfcEmisor = strings.TrimSpace(rfcEmisor)
      regimen = strings.TrimSpace(regimen)
      razonSocial = strings.TrimSpace(razonSocial)
      regPatronal = strings.TrimSpace(regPatronal)
      lugarExpedicion = strings.TrimSpace(lugarExpedicion)
    }

    
      MetodoDePagoString := ""
      if Compare(MetodoDePago,"01")==0 {
        MetodoDePagoString = "Efectivo"
      }
      if Compare(MetodoDePago,"02")==0 {
        MetodoDePagoString = "Cheque"
      }
      if Compare(MetodoDePago,"03")==0 {
        MetodoDePagoString = "Transferencia"
      }
      if Compare(MetodoDePago,"04")==0 {
        MetodoDePagoString = "Tarjeta de credito"
      }
      if Compare(MetodoDePago,"05")==0 {
        MetodoDePagoString = "Monedero electronico"
      }
      if Compare(MetodoDePago,"06")==0 {
        MetodoDePagoString = "Dinero electronico"
      }
      if Compare(MetodoDePago,"08")==0 {
        MetodoDePagoString = "Vales de despensa"
      }
      if Compare(MetodoDePago,"28")==0 {
        MetodoDePagoString = "Tarjeta de debito"
      }
      if Compare(MetodoDePago,"29")==0 {
        MetodoDePagoString = "Tarjeta de servicio"
      }
      if Compare(MetodoDePago,"99")==0 {
        MetodoDePagoString = "Otros"
      }
    nombrePDF := "static/ingresos/"+BUNIT.(string)+"/"+diario+"-"+linea+"/S"+strconv.Itoa(folioQueSigue)+"_"+BUNIT.(string)+".pdf"

    pdf := gofpdf.New("P", "mm", "A4", "")
    tr := pdf.UnicodeTranslatorFromDescriptor("")
    pdf.SetHeaderFunc(func() {
        
    })
    pdf.SetFooterFunc(func() {
    //  pdf.SetY(-15)
    //  pdf.SetFont("Arial", "I", 8)
    //  pdf.CellFormat(0, 10, fmt.Sprintf("Page %d", pdf.PageNo()),"", 0, "C", false, 0, "")
    })
    pdf.AddPage()
    pdf.Image("logo.png", 10, 3, 30, 0, false, "", 0, "")
    pdf.SetFont("Arial", "", 16)
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(0, 10)
    pdf.CellFormat(0,0,tr("Lugar de expedición: "+lugarExpedicion),"",1,"R",false,0,"")
    pdf.SetXY(0, 14)
    pdf.CellFormat(0,0,tr("Num. Cta. de Pago: "+NumCtaPago),"",1,"R",false,0,"")
    pdf.SetXY(0, 18)
    pdf.CellFormat(0,0,tr("Fecha de generación: "+dateStringSubString),"",1,"R",false,0,"")
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(0, 22)
    //pdf.CellFormat(0,0,tr(""),"",1,"R",false,0,"")
    pdf.SetXY(0, 26)
    pdf.CellFormat(0,0,tr("RFC Emisor: "+rfcEmisor),"",1,"R",false,0,"")
    pdf.SetXY(0, 30)
    pdf.CellFormat(0,0,tr("Reg Fiscal: "+regimen),"",1,"R",false,0,"")
    pdf.SetFont("Arial", "", 10)
    
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(140, 7)
    pdf.SetFont("Arial", "", 8)
        
    pdf.SetFont("Arial", "B", 11)
    pdf.SetXY(10, 40)
    pdf.Cell(0, 0, " Tipo de comprobante: ingreso ")
    pdf.SetXY(10, 47)
    pdf.SetFont("Arial", "", 11)
    pdf.Cell(0, 0, "RFC: "+RFC)
    pdf.SetXY(10, 54)
    pdf.Cell(0, 0, "Razon social: "+tr(RazonSocial))
    pdf.SetXY(10, 61)
    pdf.Cell(0, 0, tr("Metodo de pago: "+MetodoDePagoString))
    pdf.SetXY(10, 68)
    pdf.Cell(0, 0, "Serie: S")
    pdf.SetXY(10, 75)
    pdf.Cell(0, 0, "Folio: "+strconv.Itoa(folioQueSigue))
    pdf.SetXY(10, 82)
    ac := accounting.Accounting{Symbol: "$", Precision: 2}
      /*
      pdf.Cell(0, 0, "Tipo de salario: "+TipoContrato)
      pdf.SetFont("Arial", "B", 11)
      pdf.SetXY(0, 40)
      pdf.CellFormat(0,0,tr("Periodo: "+periodo+" "+PeriodicidadPago+"    "+deFecha+"-"+aFecha),"",1,"R",false,0,"")
      pdf.SetXY(0, 47)
      pdf.SetFont("Arial", "", 11)
      pdf.CellFormat(0, 0, tr("Días de pago: "+NumDiasPagados),"",1,"R",false,0,"")
      pdf.SetXY(0, 54)
      pdf.CellFormat(0, 0, "Fecha Pago: "+FechaPago,"",1,"R",false,0,"")
      pdf.SetXY(0, 61)
      pdf.CellFormat(0, 0, "Puesto: (ninguno)" ,"",1,"R",false,0,"")
      pdf.SetXY(10, 68)
      pdf.CellFormat(0, 0, "Departamento: "+Departamento,"",1,"R",false,0,"")
      pdf.SetXY(0, 75)
      pdf.CellFormat(0, 0, "SDI: "+SDIstring,"",1,"R",false,0,"")
      */
    w := []float64{15, 25, 50, 30, 30}
    wSum := 0.0
    for _, v := range w {
        wSum += v
    }
    pdf.SetXY(0, 89)
    pdf.CellFormat(0,0,tr("         Conceptos: "),"",1,"L",false,0,"")
    pdf.Ln(5)
    pdf.CellFormat(0,0,tr("         "),"",1,"L",false,0,"")
    pdf.SetFont("Arial", "", 10)
    pdf.SetFillColor(173, 173, 173)
    pdf.SetTextColor(255, 255, 255)
    pdf.SetDrawColor(128, 0, 0)
    pdf.SetLineWidth(.3)
    pdf.SetFont("Arial", "B", 0)
      //  Header
      pdf.CellFormat(w[0], 7, "Cantidad", "1", 0, "C", true, 0, "")
      pdf.CellFormat(w[1], 7, "Unidad", "1", 0, "C", true, 0, "")
    pdf.CellFormat(w[2], 7, "Concepto", "1", 0, "C", true, 0, "")
    pdf.CellFormat(w[3], 7, "Valor unitario", "1", 0, "C", true, 0, "")
    pdf.CellFormat(w[4], 7, "Importe", "1", 0, "C", true, 0, "")
    pdf.Ln(-1)
      // Color and font restoration
      pdf.SetFillColor(224, 235, 255)
      pdf.SetTextColor(0, 0, 0)
      pdf.SetFont("", "", 0)
      //  Data
    fill := false
      cantidadFloat, _ := strconv.ParseFloat(cantidad, 64)
      cuantosMeSalto := 6
      pdf.CellFormat(w[0], 6, "1", "LR", 0, "", fill, 0, "")
    pdf.CellFormat(w[1], 6, "No aplica", "LR", 0, "", fill, 0, "")
    pdf.CellFormat(w[2], 6, nombre, "LR", 0, "", fill, 0, "")
    pdf.CellFormat(w[3], 6, ac.FormatMoney(cantidadFloat), "LR", 0, "", fill, 0, "")
    pdf.CellFormat(w[4], 6, ac.FormatMoney(cantidadFloat), "LR", 0, "", fill, 0, "")
    pdf.Ln(-1)
      cuantosMeSalto = cuantosMeSalto + 6
      fill = !fill
    pdf.CellFormat(wSum, 6, "Total: "+ac.FormatMoney(cantidadFloat), "LR", 0, "", fill, 0, "")
    pdf.Ln(-1)
    cuantosMeSalto = cuantosMeSalto + 6
    fill = !fill
    pdf.CellFormat(wSum, 0, "", "T", 0, "", false, 0, "")
      pdf.Ln(-1)
      cuantosMeSalto = cuantosMeSalto + 6
    cuantosMeSalto = cuantosMeSalto + 6
    nuevoNumero := float64(89.0 + cuantosMeSalto)
    
      pdf.SetXY(0, nuevoNumero)
      nuevoNumero+=60
    pdf.SetXY(15, nuevoNumero)
    
      pdf.CellFormat(0,0,tr("ESTE PDF NO REPRESENTA UN CFDI"),"",1,"L",false,0,"")
      pdf.Ln(4)
      
    
    pdf.OutputFileAndClose(nombrePDF)
  
    example := map[string]interface{}{"success" : 1, "pdf" : nombrePDF }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
func FloatToString(input_num float64) string {
    return strconv.FormatFloat(input_num, 'f', 2, 64)
}
func GeneraPDFDeNomina(nombreXMLTimbrado, deVerdad, TipoContratoOriginal, idCFDINomina, cadOriginal, nombreXML, StampedDocument, BUNIT, periodo, ER string, cuantasPercepciones, cuantasDeducciones, cuantasOtrosPagos int, cantidad float64, c *TimbraNominaController) {
  connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
  conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
  if err != nil {
    fmt.Println("Open connection failed:", err.Error())
  }
  x := strings.Split(cadOriginal, "|")
  version := x[2]
      fechaExpedicion := x[3]
    lugarExpedicion := x[12]
    rfcEmisor := x[13]
    razonEmisor := x[14]
    regimen := x[15]
    RFC := x[16]
    nombre := x[17]
    versionNomina := x[23]
    FechaPago := x[25]
    deFecha := x[26]
    aFecha := x[27]
    NumDiasPagados := x[28]
    //TotalPercepciones := x[32]
    //TotalDeducciones := x[33]
    //TotalOtrosPagos := x[34]
    
    
    indexregPatronal := strings.Index(StampedDocument, "RegistroPatronal")
    regPatronal := ""
    if indexregPatronal != -1 {
      regPatronal = StampedDocument[indexregPatronal+18:indexregPatronal+29]  
    }

    indexCURP := strings.Index(StampedDocument, "Curp")
    CURP := ""
    if indexCURP != -1 {
      CURP = StampedDocument[indexCURP+6:indexCURP+24]  
    }
      

      indexNumSeguridadSocial := strings.Index(StampedDocument, "NumSeguridadSocial")
    NumSeguridadSocial := ""
    if indexNumSeguridadSocial != -1 {
      NumSeguridadSocial = StampedDocument[indexNumSeguridadSocial+20:indexNumSeguridadSocial+31] 
    }

    indexFechaInicioRelLaboral := strings.Index(StampedDocument, "FechaInicioRelLaboral")
    FechaInicioRelLaboral := ""
    if indexFechaInicioRelLaboral != -1 {
      FechaInicioRelLaboral = StampedDocument[indexFechaInicioRelLaboral+23:indexFechaInicioRelLaboral+33]  
    }

    indexAntiguedad := strings.Index(StampedDocument, "Antigüedad")
    Antiguedad := ""
    if indexAntiguedad != -1 {
      Antiguedad = StampedDocument[indexAntiguedad+13:] 
        AntiguedadPrima := strings.Index(Antiguedad, "\"")
          Antiguedad = Antiguedad[:AntiguedadPrima]
          Antiguedad = strings.Replace(Antiguedad, "P", "", -1)
          Antiguedad = strings.Replace(Antiguedad, "W", "", -1)+" Semanas"
    }

    indexTipoContrato := strings.Index(StampedDocument, "TipoContrato")
    TipoContrato := ""
    if indexTipoContrato != -1 {
      TipoContrato = StampedDocument[indexTipoContrato+14:indexTipoContrato+16] 
    }

    indexTipoJornada := strings.Index(StampedDocument, "TipoJornada")
    TipoJornada := ""
    if indexTipoJornada != -1 {
      TipoJornada = StampedDocument[indexTipoJornada+13:indexTipoJornada+15]  
    }

    indexNumEmpleado := strings.Index(StampedDocument, "NumEmpleado")
    NumEmpleado := ""
    if indexNumEmpleado != -1 {
      NumEmpleado = StampedDocument[indexNumEmpleado+13:] 
        NumEmpleadoPrima := strings.Index(NumEmpleado, "\"")
          NumEmpleado = NumEmpleado[:NumEmpleadoPrima]
    }

    indexDepartamento := strings.Index(StampedDocument, "Departamento")
    Departamento := ""
    if indexDepartamento != -1 {
      Departamento = StampedDocument[indexDepartamento+14:] 
        DepartamentoPrima := strings.Index(Departamento, "\"")
          Departamento = Departamento[:DepartamentoPrima]
    }

    indexPuesto := strings.Index(StampedDocument, "Puesto")
    Puesto := ""
    if indexPuesto != -1 {
      Puesto = StampedDocument[indexPuesto+8:]  
        PuestoPrima := strings.Index(Puesto, "\"")
          Puesto = Puesto[:PuestoPrima]
    }

    indexdeducciones := strings.Index(StampedDocument, "TotalOtrasDeducciones")
    deducciones := ""
    if indexdeducciones != -1 {
      deducciones = StampedDocument[indexdeducciones+23:] 
        deduccionesPrima := strings.Index(deducciones, "\"")
          deducciones = deducciones[:deduccionesPrima]
    }

    indextotalImpuestosRetenidos := strings.Index(StampedDocument, "TotalImpuestosRetenidos")
    totalImpuestosRetenidos := ""
    if indextotalImpuestosRetenidos != -1 {
      totalImpuestosRetenidos = StampedDocument[indextotalImpuestosRetenidos+25:] 
        totalImpuestosRetenidosPrima := strings.Index(totalImpuestosRetenidos, "\"")
          totalImpuestosRetenidos = totalImpuestosRetenidos[:totalImpuestosRetenidosPrima]
    }

  

    indexc_Banco := strings.Index(StampedDocument, "Banco")
    c_Banco := ""
    if indexc_Banco != -1 {
      c_Banco = StampedDocument[indexc_Banco+7:]  
        c_BancoPrima := strings.Index(c_Banco, "\"")
          c_Banco = c_Banco[:c_BancoPrima]
    }

    indexCuentaBancaria := strings.Index(StampedDocument, "CuentaBancaria")
    CuentaBancaria := ""
    if indexCuentaBancaria != -1 {
      CuentaBancaria = StampedDocument[indexCuentaBancaria+16:] 
        CuentaBancariaPrima := strings.Index(CuentaBancaria, "\"")
          CuentaBancaria = CuentaBancaria[:CuentaBancariaPrima]
    }

    indexSDIstring := strings.Index(StampedDocument, "SalarioDiarioIntegrado")
    SDIstring := ""
    if indexSDIstring != -1 {
      SDIstring = StampedDocument[indexSDIstring+24:] 
        SDIstringPrima := strings.Index(SDIstring, "\"")
          SDIstring = SDIstring[:SDIstringPrima]
    }

    indextotalDeSueldos := strings.Index(StampedDocument, "TotalSueldos")
    totalDeSueldos := ""
    if indextotalDeSueldos != -1 {
      totalDeSueldos = StampedDocument[indextotalDeSueldos+14:] 
        totalDeSueldosPrima := strings.Index(totalDeSueldos, "\"")
          totalDeSueldos = totalDeSueldos[:totalDeSueldosPrima]
    }


    //PeriodicidadPago := x[empiezo+14]//46
    //c_Estado := x[empiezo+17]
    //totalPercepcionesGravado := x[51]
    //totalPercepcionesExento := x[52]
    
      indexUUID := strings.Index(StampedDocument, "UUID")
    UUID := ""
    if indexUUID != -1 {
      UUID = StampedDocument[indexUUID+6:indexUUID+42]  
    } else {
      UUID = "VISTA PREVIA"
    }

    indexFechaTimbrado := strings.Index(StampedDocument, "FechaTimbrado=")
    FechaTimbrado := ""
    if indexFechaTimbrado != -1 {
      FechaTimbrado = StampedDocument[indexFechaTimbrado+15:indexFechaTimbrado+34]  
    } else {
      FechaTimbrado = "VISTA PREVIA"
    }

    indexnoCertificadoSAT := strings.Index(StampedDocument, "NoCertificadoSAT=")
    noCertificadoSAT := ""
    if indexnoCertificadoSAT != -1 {
      noCertificadoSAT = StampedDocument[indexnoCertificadoSAT+18:indexnoCertificadoSAT+38] 
    } else {
      noCertificadoSAT = "VISTA PREVIA"
    }

    selloCFDIndex := strings.Index(StampedDocument, "selloCFD")
    selloCFD := ""
    if selloCFDIndex != -1 {
      selloCFD = StampedDocument[selloCFDIndex+10:] 
        selloCFDIndexPrima := strings.Index(selloCFD, "\"")
          selloCFD = selloCFD[:selloCFDIndexPrima]
    } else {
      selloCFD = "VISTA PREVIA"
    }

    selloSATIndex := strings.Index(StampedDocument, "selloSAT")
    selloSAT := ""
    if selloSATIndex != -1 {
      selloSAT = StampedDocument[selloSATIndex+10:] 
        selloSATIndexPrima := strings.Index(selloSAT, "\"")
          selloSAT = selloSAT[:selloSATIndexPrima]
    } else {
      selloSAT = "VISTA PREVIA"
    }

    

      
    

       
      //MetodoDePagoString := "NA"
      
      nombrePDF := "static/manuntencion/"+BUNIT+"/"+periodo+"/"+ nombre+".pdf"
      nombrePDFTimbrado := "static/manuntencion/"+BUNIT+"/"+periodo+"/"+ nombre+"_TIMBRADO.pdf"
    
      
    pdf := gofpdf.New("P", "mm", "A4", "")
    tr := pdf.UnicodeTranslatorFromDescriptor("")
    pdf.SetHeaderFunc(func() {
        
    })
    pdf.SetFooterFunc(func() {
    })
    pdf.AddPage()
    pdf.SetFillColor(173, 173, 173)
    pdf.SetFont("Arial", "", 8)
    pdf.SetXY(14, 6)
    pdf.CellFormat(0,0,tr("Comprobante Fiscal Digital por Internet"),"",1,"L",false,0,"")
    
    
    xx := 10.0
    w := 190.0
    enter := 4.0
    inicioPrimero := 14.0
    pdf.Rect(xx, 10, w, 22, "DF")
      pdf.SetFont("Arial", "B", 12)
    pdf.SetXY(12, inicioPrimero)
    pdf.CellFormat(0,0,tr(razonEmisor),"",1,"L",false,0,"")
    pdf.SetFont("Arial", "B", 10)
    pdf.SetXY(16, inicioPrimero+enter)
    pdf.CellFormat(0,0,tr(rfcEmisor),"",1,"L",false,0,"")
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(16, inicioPrimero+(enter*2))
    pdf.CellFormat(0,0,tr("Reg Fiscal: "+regimen),"",1,"L",false,0,"")
    pdf.SetXY(16, inicioPrimero+(enter*3))
    pdf.CellFormat(0,0,tr("Lugar de expedición: "+lugarExpedicion),"",1,"L",false,0,"")
    pdf.SetXY(16, inicioPrimero+(enter*2))
    pdf.CellFormat(0,0,tr("Reg Fiscal: "+regimen),"",1,"L",false,0,"")
    if regPatronal!= "" {
      pdf.SetXY(66, inicioPrimero+(enter*1))
      pdf.CellFormat(0,0,tr("Reg Pat: "+regPatronal),"",1,"L",false,0,"")
    }
    pdf.SetXY(12, inicioPrimero)
    pdf.CellFormat(0,0,tr(fechaExpedicion),"",1,"R",false,0,"")
  
    inicioSegundo := 44.0
    pdf.Rect(xx, 40, w, 30, "")
    pdf.SetFont("Arial", "B", 10)
    pdf.SetXY(12, inicioSegundo)
    pdf.CellFormat(0,0,tr(NumEmpleado+" - "+nombre),"",1,"L",false,0,"")
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(12, inicioSegundo+enter)
    pdf.CellFormat(0,0,tr("RFC: "+RFC),"",1,"L",false,0,"")
    pdf.SetXY(12, inicioSegundo+(enter*2))
    pdf.CellFormat(0,0,tr("CURP: "+CURP),"",1,"L",false,0,"")
    if FechaInicioRelLaboral != "" {
      pdf.SetXY(12, inicioSegundo+(enter*3))
      pdf.CellFormat(0,0,tr("Fecha Ini Relación Lab: "+FechaInicioRelLaboral),"",1,"L",false,0,"")
    }
    pdf.SetXY(12, inicioSegundo+(enter*4))
    pdf.CellFormat(0,0,tr("Jornada: "+TipoJornada),"",1,"L",false,0,"")
    pdf.SetXY(12, inicioSegundo+(enter*4))
    pdf.CellFormat(0,0,tr("CuentaBancaria: "+CuentaBancaria),"",1,"R",false,0,"")
  
    if NumSeguridadSocial != "" {
      pdf.SetXY(12, inicioSegundo+(enter*5))
      pdf.CellFormat(0,0,tr("NSS: "+NumSeguridadSocial),"",1,"L",false,0,"")
    }
    
    pdf.SetXY(12, inicioSegundo+(enter*6))
    pdf.CellFormat(0,0,tr("Tipo Contrato: "+TipoContrato),"",1,"L",false,0,"")
    if Antiguedad!= "" {
      pdf.SetXY(12, inicioSegundo+(enter*6))
      pdf.CellFormat(0,0,tr("Antigüedad: "+Antiguedad),"",1,"R",false,0,"")
    }
    pdf.Rect(xx+w/2, 40, 0, 30, "")
    pdf.SetFont("Arial", "B", 10)
    pdf.SetXY(xx+(w/2)+2, inicioSegundo)
    pdf.CellFormat(0,0,tr("Periodo: "+periodo),"",1,"L",false,0,"")
    pdf.CellFormat(0,0,tr(deFecha + " - "+aFecha),"",1,"R",false,0,"")
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(xx+(w/2)+2, inicioSegundo+enter)
    pdf.CellFormat(0,0,tr("Días de pago: "+NumDiasPagados),"",1,"L",false,0,"")
    pdf.SetXY(xx+(w/2)+2, inicioSegundo+(enter*2))
    pdf.CellFormat(0,0,tr("Puesto: "+Puesto),"",1,"L",false,0,"")
    pdf.SetXY(xx+(w/2)+2, inicioSegundo+(enter*3))
    pdf.CellFormat(0,0,tr("Departamento: "+Departamento),"",1,"L",false,0,"")
    if SDIstring!= "" {
      pdf.SetXY(xx+(w/2)+2, inicioSegundo+(enter*4))
      pdf.CellFormat(0,0,tr("SDI: $ "+SDIstring),"",1,"L",false,0,"")
    }
    pdf.SetXY(xx+(w/2)+2, inicioSegundo+(enter*5))
    pdf.CellFormat(0,0,tr("Fecha Pago:  "+FechaPago),"",1,"L",false,0,"")
    pdf.SetXY(xx+(w/2)+2, inicioSegundo+(enter*6))
    pdf.CellFormat(0,0,tr("Banco: "+c_Banco),"",1,"L",false,0,"")

    pdf.SetFont("Arial", "B", 10)
    pdf.Rect(xx, 75, 3*w/5, 5, "DF")
    pdf.SetXY(xx, 75)
    pdf.CellFormat(3*w/5,5,tr("Percepciones"),"",1,"C",false,0,"")
    pdf.Rect(xx+ (3*w/5) , 75, 2*w/5, 5, "DF")
    pdf.SetXY(xx+ (3*w/5), 75)
    pdf.CellFormat(2*w/5,5,tr("Deducciones"),"",1,"C",false,0,"")

    //inicioTercero := 83
    inicioTerceroFloat := 83.0
  
    wTablaPercepciones := (3*w/5)
    wAGrupSAT := wTablaPercepciones / 10.0
    wClave := wTablaPercepciones / 10.0
    wConcepto := 4* wTablaPercepciones / 10.0
    wGravado := 2* wTablaPercepciones / 10.0
    wExento := 2* wTablaPercepciones / 10.0

    pdf.Rect(xx, inicioTerceroFloat, wTablaPercepciones, 5, "F")
    pdf.SetXY(xx, inicioTerceroFloat)
    pdf.CellFormat(wAGrupSAT,5,tr("SAT"),"",1,"C",false,0,"")

    pdf.SetXY(xx+wAGrupSAT, inicioTerceroFloat)
    pdf.CellFormat(wClave,5,tr("No."),"",1,"C",false,0,"")
    
    pdf.SetXY(xx+wAGrupSAT+wClave, inicioTerceroFloat)
    pdf.CellFormat(wConcepto,5,tr("Concepto"),"",1,"C",false,0,"")
    
    pdf.SetXY(xx +wAGrupSAT+wClave+wConcepto, inicioTerceroFloat)
    pdf.CellFormat(wGravado,5,tr("Gravado"),"",1,"C",false,0,"")
    
    pdf.SetXY(xx+wAGrupSAT+wClave+wConcepto+wGravado, inicioTerceroFloat)
    pdf.CellFormat(wExento,5,tr("Exento"),"",1,"C",false,0,"")
    
    wTablaDeducciones := (2*w/5)
    pdf.Rect(xx+wTablaPercepciones, inicioTerceroFloat, wTablaDeducciones, 5, "F")

    wAGrupSATD := wTablaDeducciones / 6.0
    wClaveD := wTablaDeducciones / 6.0
    wConceptoD := 3* wTablaDeducciones / 6.0
    wImporteD :=  wTablaDeducciones / 6.0
    
    pdf.SetXY(xx+wTablaPercepciones, inicioTerceroFloat)
    pdf.CellFormat(wAGrupSATD,5,tr("SAT"),"",1,"C",false,0,"")

    pdf.SetXY(xx+wTablaPercepciones+wAGrupSATD, inicioTerceroFloat)
    pdf.CellFormat(wClaveD,5,tr("No."),"",1,"C",false,0,"")

    pdf.SetXY(xx+wTablaPercepciones+wAGrupSATD+wClaveD, inicioTerceroFloat)
    pdf.CellFormat(wConceptoD,5,tr("Concepto"),"",1,"C",false,0,"")

    pdf.SetXY(xx+wTablaPercepciones+wAGrupSATD+wClaveD+wConceptoD, inicioTerceroFloat)
    pdf.CellFormat(wImporteD,5,tr("Importe"),"",1,"R",false,0,"")
    
    pdf.SetFont("Arial", "", 10)
    esCLABE := len(CuentaBancaria)
    menos := 0
    if esCLABE == 18 {
      menos = 1//sin Banco
    }
    if cuantasDeducciones == 0 {
      menos++
      menos++
    }
    inicioGlobal := 47-menos
    if Antiguedad== "" {//ministro
      inicioGlobal = 41-menos // -SDI - riesgoPuesto - FechaIniRelLaboral - NSS - Antiguedad
    }
    inicio := inicioGlobal
    ac := accounting.Accounting{Symbol: "$", Precision: 2}
    siguiente := 0
    siguienteFloat := 0.0
    iFloat := 0.0
    for i := 1; i <= cuantasPercepciones; i++ {
        siguiente = i*5
        iFloat = float64(i)
        siguienteFloat = iFloat*5.0
        pdf.SetXY(xx, inicioTerceroFloat+siguienteFloat)
      pdf.CellFormat(wAGrupSAT,5,tr(x[inicio+siguiente]),"",1,"L",false,0,"")
      pdf.SetXY(xx+wAGrupSAT, inicioTerceroFloat+siguienteFloat)
      pdf.CellFormat(wClave,5,tr(x[inicio+siguiente+1]),"",1,"L",false,0,"")
      pdf.SetXY(xx+wAGrupSAT+wClave, inicioTerceroFloat+siguienteFloat)
      pdf.CellFormat(wConcepto,5,tr(x[inicio+siguiente+2]),"",1,"L",false,0,"")
      pdf.SetXY(xx+wAGrupSAT+wClave+wConcepto, inicioTerceroFloat+siguienteFloat)
      cantidadEnFloat, _ := strconv.ParseFloat(x[inicio+siguiente+3], 64)
      cantidadEnFloat2, _ := strconv.ParseFloat(x[inicio+siguiente+4], 64)
      pdf.CellFormat(wGravado,5,tr(ac.FormatMoney(cantidadEnFloat)),"",1,"L",false,0,"")
      pdf.SetXY(xx+wAGrupSAT+wClave+wConcepto+wGravado, inicioTerceroFloat+siguienteFloat)
      pdf.CellFormat(wExento,5,tr(ac.FormatMoney(cantidadEnFloat2)),"",1,"L",false,0,"")
    }
    siguienteFloatGuardado := siguienteFloat
    inicio = inicioGlobal+3 + (cuantasPercepciones*5)
    //totalDeducciones := 0.0
    if totalImpuestosRetenidos == "" {
      inicio-- //hardcode maximus
    }
    for i := 1; i <= cuantasDeducciones; i++ {
        siguiente = i*4
        iFloat = float64(i)
        siguienteFloat = iFloat*5.0
        pdf.SetXY(xx+wTablaPercepciones, inicioTerceroFloat+siguienteFloat)
      pdf.CellFormat(wAGrupSATD,5,tr(x[inicio+siguiente]),"",1,"L",false,0,"")
      pdf.SetXY(xx+wTablaPercepciones+wAGrupSATD, inicioTerceroFloat+siguienteFloat)
      pdf.CellFormat(wClaveD,5,tr(x[inicio+siguiente+1]),"",1,"L",false,0,"")
      pdf.SetXY(xx+wTablaPercepciones+wAGrupSATD+wClaveD, inicioTerceroFloat+siguienteFloat)
      pdf.CellFormat(wConceptoD,5,tr(x[inicio+siguiente+2]),"",1,"L",false,0,"")
      pdf.SetXY(xx+wTablaPercepciones+wAGrupSATD+wClaveD+wConceptoD, inicioTerceroFloat+siguienteFloat)
      cantidadEnFloat, _ := strconv.ParseFloat(x[inicio+siguiente+3], 64)
      pdf.CellFormat(wImporteD,5,tr(ac.FormatMoney(cantidadEnFloat)),"",1,"R",false,0,"")
    }
    inicio +=(cuantasDeducciones*4)
    if cuantasDeducciones == 0 {
      inicio--
    }
    for i := 1; i <= cuantasOtrosPagos; i++ {
        siguiente = i*4
        iFloat = float64(i)
        siguienteFloat = (iFloat*5.0)+siguienteFloatGuardado
        pdf.SetXY(xx, inicioTerceroFloat+siguienteFloat)
      pdf.CellFormat(wAGrupSATD,5,tr(x[inicio+siguiente]),"",1,"L",false,0,"")
      pdf.SetXY(xx+wAGrupSATD, inicioTerceroFloat+siguienteFloat)
      pdf.CellFormat(wClaveD,5,tr(x[inicio+siguiente+1]),"",1,"L",false,0,"")
      pdf.SetXY(xx+wAGrupSATD+wClaveD, inicioTerceroFloat+siguienteFloat)
      pdf.CellFormat(wConceptoD,5,tr(x[inicio+siguiente+2]),"",1,"L",false,0,"")
      pdf.SetXY(xx+wAGrupSATD+wClaveD+wConceptoD, inicioTerceroFloat+siguienteFloat)
      cantidadEnFloat, _ := strconv.ParseFloat(x[inicio+siguiente+3], 64)
      pdf.CellFormat(wImporteD,5,tr(ac.FormatMoney(cantidadEnFloat)),"",1,"R",false,0,"")
    }
    


    
    
    pdf.Rect(xx, inicioTerceroFloat, 3*w/5, 45, "")
    pdf.Rect(xx + (3*w/5), inicioTerceroFloat, 2*w/5, 45, "")

    inicioCuarto := 130.0
    pdf.Rect(xx , inicioCuarto, 3*w/5, 8, "")
    pdf.SetXY(xx, inicioCuarto)
    totalDeSueldosFloat, _ := strconv.ParseFloat(totalDeSueldos, 64)      
    pdf.CellFormat( 3*w/5,8,tr("Total Percep. más otros pagos: "+ac.FormatMoney(totalDeSueldosFloat)),"",1,"C",false,0,"")
    pdf.Rect(xx + (3*w/5), inicioCuarto, 2*w/5, 25, "")

    pdf.SetXY(xx+ (3*w/5), inicioCuarto)
    pdf.CellFormat( w/5,5,tr("Subtotal: "),"",1,"R",false,0,"")
    pdf.SetXY(xx+ (4*w/5), inicioCuarto)
    pdf.CellFormat( w/5,5,tr(ac.FormatMoney(totalDeSueldosFloat)),"",1,"R",false,0,"")
      

    pdf.SetXY(xx+ (3*w/5), inicioCuarto+5)
    pdf.CellFormat( w/5,5,tr("Descuentos: "),"",1,"R",false,0,"")
    pdf.SetXY(xx+ (4*w/5), inicioCuarto+5)
    deduccionesFloat, _ := strconv.ParseFloat(deducciones, 64)      
    pdf.CellFormat( w/5,5,tr(ac.FormatMoney(deduccionesFloat)),"",1,"R",false,0,"")
    



    pdf.SetXY(xx+ (3*w/5), inicioCuarto+10)
    pdf.CellFormat( w/5,5,tr("Retenciones: "),"",1,"R",false,0,"")
    pdf.SetXY(xx+ (4*w/5), inicioCuarto+10)
    if totalImpuestosRetenidos != "" {
      totalImpuestosRetenidosFloat, _ := strconv.ParseFloat(totalImpuestosRetenidos, 64)      
      pdf.CellFormat( w/5,5,tr(ac.FormatMoney(totalImpuestosRetenidosFloat)),"",1,"R",false,0,"")
    }
    
    pdf.SetXY(xx+ (3*w/5), inicioCuarto+15)
    pdf.CellFormat( w/5,5,tr("Total: "),"",1,"R",false,0,"")
    pdf.SetXY(xx+ (4*w/5), inicioCuarto+15)
    pdf.CellFormat( w/5,5,tr(ac.FormatMoney(cantidad)),"",1,"R",false,0,"")
    pdf.SetTextColor(0,0,255)
    pdf.SetXY(xx+ (3*w/5), inicioCuarto+20)
    pdf.CellFormat( w/5,5,tr("Neto del recibo: "),"",1,"R",false,0,"")
    pdf.SetXY(xx+ (4*w/5), inicioCuarto+20)
    pdf.CellFormat( w/5,5,tr(ac.FormatMoney(cantidad)),"",1,"R",false,0,"")
    pdf.SetTextColor(0, 0, 0)

    pdf.SetFont("Arial", "", 8)
    pdf.SetXY(xx, inicioCuarto+12)
    pdf.CellFormat( 3*w/5,5,tr("Se puso a mi disposición el archivo XML correspondiente y recibí de la empresa"),"",1,"L",false,0,"")
    pdf.SetXY(xx, inicioCuarto+17)
    pdf.CellFormat( 3*w/5,5,tr("arriba mencionada la cantidad neta a que este documento se refiere estando"),"",1,"L",false,0,"")
    pdf.SetXY(xx, inicioCuarto+22)
    pdf.CellFormat( 3*w/5,5,tr("conforme con las percepciones y deducciones que en él aparecen especificados."),"",1,"L",false,0,"")
    
      pdf.SetFont("Arial", "", 12)
    pdf.SetXY(xx+ (3*w/5), inicioCuarto+51)
    pdf.CellFormat( 2*w/5,5,tr("Firma del Ministro/Asociado Religioso"),"",1,"C",false,0,"")
    pdf.Rect(xx+ (3*w/5), inicioCuarto+48, 2*w/5, 0, "")

    inicioQuinto := inicioCuarto + 60
    pdf.Rect(xx+ (2*w/5), inicioQuinto, 3*w/5, 5, "DF")
    pdf.SetXY(xx+ (2*w/5), inicioQuinto)
    
    pdf.CellFormat( 3*w/5,5,tr("Este documento es una representación impresa de un CFDI"),"",1,"C",false,0,"")
    pdf.SetXY(xx+ (2*w/5), inicioQuinto+5)
    pdf.CellFormat( 3*w/5,5,tr("Pago en una sola exhibicion"),"",1,"C",false,0,"")
    pdf.SetXY(xx+ (2*w/5), inicioQuinto+10)
    pdf.CellFormat( 3*w/5,5,tr("Emitido desde:            Sevenplus"),"",1,"C",false,0,"")
    pdf.Image("sevenplus.png", xx+ (7*w/10), inicioQuinto+10, 7, 7, false, "", 0, "")


    pdf.SetFont("Arial", "", 8)
    
    pdf.SetXY(xx+ (2*w/5), inicioQuinto+18)
    pdf.CellFormat( 3*w/10,5,tr("Folio Fiscal UUID:"),"",1,"R",false,0,"")
    pdf.SetFont("Arial", "", 7)
    pdf.SetXY(xx+ (2*w/5)+(3*w/10), inicioQuinto+18)
    pdf.CellFormat( 3*w/10,5,tr(UUID),"",1,"L",false,0,"")
    pdf.SetFont("Arial", "", 8)
    

    pdf.SetXY(xx+ (2*w/5), inicioQuinto+23)
    pdf.CellFormat( 3*w/10,5,tr("Serie del certificado del SAT:"),"",1,"R",false,0,"")
    pdf.SetXY(xx+ (2*w/5)+(3*w/10), inicioQuinto+23)
    pdf.CellFormat( 3*w/10,5,tr(noCertificadoSAT),"",1,"L",false,0,"")
    
    pdf.SetXY(xx+ (2*w/5), inicioQuinto+28)
    pdf.CellFormat( 3*w/10,5,tr("Fecha y hora de certificación:"),"",1,"R",false,0,"")
    pdf.SetXY(xx+ (2*w/5)+(3*w/10), inicioQuinto+28)
    pdf.CellFormat( 3*w/10,5,tr(FechaTimbrado),"",1,"L",false,0,"")
    

    
    
    pdf.Rect(xx+ (2*w/5), inicioQuinto, 3*w/5, 18, "")
    pdf.Rect(xx+ (2*w/5), inicioQuinto+18, 3*w/5, 18, "")
    pdf.Rect(xx+ (7*w/10), inicioQuinto+18,   0  , 18, "")

    pdf.SetXY(xx, inicioCuarto+30)
      key := barcode.RegisterQR(pdf, "?re="+rfcEmisor+"&rr="+RFC+"&id="+UUID, qr.H, qr.Unicode)
    barcode.Barcode(pdf, key, xx+10, inicioCuarto+30, 40,40, false)

    pdf.SetFillColor(255, 202, 94)
    inicioSexto := inicioQuinto + 18.0 + 18.0+3.0
    pdf.Rect(xx, inicioSexto, w, 5, "F")
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(xx, inicioSexto)
    pdf.CellFormat( w,5,tr("Sello digital del CFDI"),"",1,"L",false,0,"")
    
    pdf.SetXY(xx, inicioSexto+5)
    pdf.MultiCell( w,4,tr(selloCFD),"","L",false)
    pdf.Rect(xx, inicioSexto+20, w, 5, "F")
    pdf.SetXY(xx, inicioSexto+20)
    pdf.MultiCell( w,5,tr("Sello del SAT"),"","L",false)
    pdf.SetXY(xx, inicioSexto+25)
    pdf.MultiCell( w,4,tr(selloSAT),"","L",false)
    
    pdf.SetFont("Arial", "", 7)
    pdf.SetXY(xx, inicioSexto+42)
    pdf.CellFormat( w/5,4,tr("Versión del comprobante: "+version),"",1,"L",false,0,"")
    
    pdf.SetXY(xx+(w/5), inicioSexto+42)
    pdf.CellFormat( w/5,4,tr("Versión del complemento "+versionNomina),"",1,"L",false,0,"")
    pdf.OutputFileAndClose(nombrePDF)
    queryCorreo := "SELECT correo FROM [Sevenplus].[dbo].[nomina] WHERE ER = '"+ER+"' AND BUNIT = '"+BUNIT+"'"
    rowsCorreo, errC := conn.Query(queryCorreo)
    if errC != nil {
      fmt.Println(queryCorreo)
      fmt.Println(errC)
    }
    correoPersona := ""
    if rowsCorreo.Next()  {
      rowsCorreo.Scan(&correoPersona)
    }

    

    
    if deVerdad == "1" {
      
      UUID = strings.TrimSpace(UUID)
      if UUID != "VISTA PREVIA" {
        queonda := os.Rename(nombreXML, nombreXMLTimbrado)
        check(queonda)
        queonda = os.Rename(nombrePDF, nombrePDFTimbrado)
        check(queonda)

        queryZ := `UPDATE [Sevenplus].[dbo].[zNominaFacturas] SET timbrado = 1, UUID = '`+UUID+`', xml = '`+nombreXMLTimbrado+`', pdf = '`+nombrePDFTimbrado+`' 
        WHERE idCFDINomina = `+idCFDINomina
        conn.Exec(queryZ)
        
        d := gomail.NewDialer("smtp.gmail.com", 587, "alonsopf@gmail.com", "dank_Gott1863")
          //d.TLSConfig = &tls.Config{InsecureSkipVerify: true}
          m := gomail.NewMessage()
        m.SetHeader("From", "alonsopf@gmail.com")
        correo := c.GetSession("usuario")
        m.SetHeader("To", correo.(string), correoPersona)
        //m.SetHeader("To", correoPersona)
        //m.SetAddressHeader("Cc", "dan@example.com", "Dan")
        m.SetHeader("Subject", "CFDI de recibo electrónico de "+nombre+" periodo "+periodo)
        m.SetBody("text/html", `Buen d&iacute;a.<br><br>
          Servicio de entrega de CFDI de recibos electr&oacute;nicos, emitido y enviado por:<br><br>
          <b>RFC:</b> `+rfcEmisor+` <br>
          <b>Raz&oacute;n Social:</b> `+razonEmisor+`<br>
          <br>
          Datos CFDI del recibo electr&oacute;nico:<br>
          <b>Nombre empleado:</b> `+nombre+`<br>
          <b>Periodo:</b> `+periodo+` del `+deFecha+` al `+aFecha+`<br>
          <b>UUID:</b> `+UUID+`<br><br>

          Se adjunta el archivo del CFDI correspondiente.<br><br>Favor de no responder este correo.`)
        m.Attach("C:/work/src/sevenplus/"+nombrePDFTimbrado)
        m.Attach("C:/work/src/sevenplus/"+nombreXMLTimbrado)

        if err := d.DialAndSend(m); err != nil {
            fmt.Println(err)
        }
      }
  
      
      example := map[string]interface{}{"success" : 1, "pdf" : nombrePDFTimbrado, "xml" : nombreXMLTimbrado }
      c.Data["json"] = &example
      c.ServeJSON()
    }
    example := map[string]interface{}{"success" : 1, "pdf" : nombrePDF, "xml" : nombreXML }
    c.Data["json"] = &example
    c.ServeJSON()
}

func (c *TimbraNomina33Controller) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    ER := c.GetString("ER")
    manual := c.GetString("manual")
    fini := c.GetString("fini")
    tieneFiniquito := "0"
    if fini == "nil" || fini == "" || fini == "0" {
    } else {
      tieneFiniquito = "1"
    }
    inde := c.GetString("inde")
    tieneIndemnizacion := "0"
    if inde == "nil" || inde == "" || inde == "0" {
    } else {
      tieneIndemnizacion = "1"
    }
    
    //TimeStamp := c.GetString("TimeStamp")
    deVerdad := c.GetString("deVerdad")
    cadOriginal := c.GetString("cadOriginal")
    type TypeDocument struct{
      StampedDocument string
    }
    DocumentObject := TypeDocument {StampedDocument:"hola"}
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.Format(time.RFC3339)
    substring := string(dateString[0:10])
    byteArray := []byte(substring)
    hasher := sha512.New()
      hasher.Write(byteArray)
    cryptoText := base64.StdEncoding.EncodeToString(  []byte(hex.EncodeToString(hasher.Sum(nil))))
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    cuantasPercepciones := c.GetString("cuantasPercepciones")
    cuantasDeducciones := c.GetString("cuantasDeducciones")
    cuantasOtrosPagos := c.GetString("cuantasOtrosPagos")
    TipoContrato := c.GetString("TipoContrato")
    //idCFDINomina := 0
    //cantidad := 0.0
    periodo := c.GetString("periodo")
    nombre := c.GetString("nombre") 
      
      hc := http.Client{}
      form := url.Values{}
      form.Add("originalCad", cadOriginal)
      form.Add("cryptoText", cryptoText)
      form.Add("TipoContrato", TipoContrato)
      
      form.Add("tipo", "1")//1 = nomina
      form.Add("deVerdad", deVerdad)//1 = de verdad, 0 = vista previa
      form.Add("cuantosConceptos", "1")
      form.Add("tieneFiniquito", tieneFiniquito)
      form.Add("tieneIndemnizacion", tieneIndemnizacion)
      
      form.Add("cuantasPercepciones", cuantasPercepciones)
      form.Add("cuantasDeducciones", cuantasDeducciones)
      form.Add("cuantasOtrosPagos", cuantasOtrosPagos)

      //req, _ := http.NewRequest("POST", "http://miscuentas.adventistasumn.org/timbra3.3.php", strings.NewReader(form.Encode()))
      req, _ := http.NewRequest("POST", "http://miscuentas.unionnorte.org/timbra3.3.php", strings.NewReader(form.Encode()))
      req.PostForm = form
      req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
      resp, _ := hc.Do(req)  
      err = json.NewDecoder(resp.Body).Decode(&DocumentObject)
  
     

      

    if _, err := os.Stat("static/manuntencion/3.3/"+BUNIT.(string)+"/"+periodo+"/"); os.IsNotExist(err) {
        os.MkdirAll("static/manuntencion/3.3/"+BUNIT.(string)+"/"+periodo+"/", 0777)
    }
    nombreXML := "static/manuntencion/3.3/"+BUNIT.(string)+"/"+periodo+"/"+ nombre+".xml"
    fmt.Println(nombreXML)
    nombreXMLTimbrado := "static/manuntencion/3.3/"+BUNIT.(string)+"/"+periodo+"/"+ nombre+"_TIMBRADO.xml"
    fmt.Println(nombreXMLTimbrado)
    f, err := os.Create(nombreXML)
      check(err)
      n3, errF := f.WriteString(DocumentObject.StampedDocument)
      fmt.Println("wrote %d bytes\n", n3)
      check(errF)
      f.Sync()
    conn.Close()
    f.Close()
      
    fmt.Println(DocumentObject.StampedDocument)
      if strings.Contains(DocumentObject.StampedDocument, "ErrorCode") {
          example := map[string]interface{}{"success" : -1, "error" :  DocumentObject.StampedDocument, "revisar" : cadOriginal}
      c.Data["json"] = &example
      c.ServeJSON()
        } else {
          //GeneraPDFDeNomina(nombreXMLTimbrado, deVerdad, TipoContrato, strconv.Itoa(idCFDINomina), cadOriginal,nombreXML, DocumentObject.StampedDocument, BUNIT.(string), periodo, ER, cuantasPercepciones, cuantasDeducciones, cuantasOtrosPagos, cantidad, c)
          connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
      conn, err := sql.Open("mssql", connString2) 
      defer conn.Close()
      if err != nil {
        fmt.Println("Open connection failed:", err.Error())
      }
      StampedDocument := DocumentObject.StampedDocument
      BUNIT := BUNIT.(string)

      x := strings.Split(cadOriginal, "|")
      cuantasDeduccionesInt , _ := strconv.Atoi(cuantasDeducciones)
      restale := 0
      restale1 := 0

      if cuantasDeduccionesInt == 0 {
        restale = 2
        restale1 = 1
      } 
      version := x[2]
      //serie := x[3]
      //folio := x[4]
      fechaExpedicion := x[5]
      totalNeto := x[11-restale1]
      cantidad , _ := strconv.ParseFloat(totalNeto, 64)
      lugarExpedicion := x[14-restale1]
      rfcEmisor := x[15-restale1]
      razonEmisor := x[16-restale1]
      regimen := x[17-restale1]
      RFC := x[18-restale1]
      nombre := x[19-restale1]
      //usoCFDI := x[20]
      versionNomina := x[28-restale]
      FechaPago := x[30-restale]
      deFecha := x[31-restale]
      aFecha := x[32-restale]
      NumDiasPagados := x[33-restale]
        //TotalPercepciones := x[32]
        //TotalDeducciones := x[33]
        //TotalOtrosPagos := x[34]
        
        
        indexregPatronal := strings.Index(StampedDocument, "RegistroPatronal")
        regPatronal := ""
        if indexregPatronal != -1 {
          regPatronal = StampedDocument[indexregPatronal+18:indexregPatronal+29]  
        }

        indexCURP := strings.Index(StampedDocument, "Curp")
        CURP := ""
        if indexCURP != -1 {
          CURP = StampedDocument[indexCURP+6:indexCURP+24]  
        }
          

          indexNumSeguridadSocial := strings.Index(StampedDocument, "NumSeguridadSocial")
        NumSeguridadSocial := ""
        if indexNumSeguridadSocial != -1 {
          NumSeguridadSocial = StampedDocument[indexNumSeguridadSocial+20:indexNumSeguridadSocial+31] 
        }

        indexFechaInicioRelLaboral := strings.Index(StampedDocument, "FechaInicioRelLaboral")
        FechaInicioRelLaboral := ""
        if indexFechaInicioRelLaboral != -1 {
          FechaInicioRelLaboral = StampedDocument[indexFechaInicioRelLaboral+23:indexFechaInicioRelLaboral+33]  
        }

        indexAntiguedad := strings.Index(StampedDocument, "Antigüedad")
        Antiguedad := ""
        if indexAntiguedad != -1 {
          Antiguedad = StampedDocument[indexAntiguedad+13:] 
            AntiguedadPrima := strings.Index(Antiguedad, "\"")
              Antiguedad = Antiguedad[:AntiguedadPrima]
              Antiguedad = strings.Replace(Antiguedad, "P", "", -1)
              Antiguedad = strings.Replace(Antiguedad, "W", "", -1)+" Semanas"
        }

        indexTipoContrato := strings.Index(StampedDocument, "TipoContrato")
        TipoContrato := ""
        if indexTipoContrato != -1 {
          TipoContrato = StampedDocument[indexTipoContrato+14:indexTipoContrato+16] 
        }

        indexTipoJornada := strings.Index(StampedDocument, "TipoJornada")
        TipoJornada := ""
        if indexTipoJornada != -1 {
          TipoJornada = StampedDocument[indexTipoJornada+13:indexTipoJornada+15]  
        }

        indexNumEmpleado := strings.Index(StampedDocument, "NumEmpleado")
        NumEmpleado := ""
        if indexNumEmpleado != -1 {
          NumEmpleado = StampedDocument[indexNumEmpleado+13:] 
            NumEmpleadoPrima := strings.Index(NumEmpleado, "\"")
              NumEmpleado = NumEmpleado[:NumEmpleadoPrima]
        }

        indexDepartamento := strings.Index(StampedDocument, "Departamento")
        Departamento := ""
        if indexDepartamento != -1 {
          Departamento = StampedDocument[indexDepartamento+14:] 
            DepartamentoPrima := strings.Index(Departamento, "\"")
              Departamento = Departamento[:DepartamentoPrima]
        }

        indexPuesto := strings.Index(StampedDocument, "Puesto")
        Puesto := ""
        if indexPuesto != -1 {
          Puesto = StampedDocument[indexPuesto+8:]  
            PuestoPrima := strings.Index(Puesto, "\"")
              Puesto = Puesto[:PuestoPrima]
        }

        indexdeducciones := strings.Index(StampedDocument, "TotalOtrasDeducciones")
        deducciones := ""
        if indexdeducciones != -1 {
          deducciones = StampedDocument[indexdeducciones+23:] 
            deduccionesPrima := strings.Index(deducciones, "\"")
              deducciones = deducciones[:deduccionesPrima]
        }

        indextotalImpuestosRetenidos := strings.Index(StampedDocument, "TotalImpuestosRetenidos")
        totalImpuestosRetenidos := ""
        if indextotalImpuestosRetenidos != -1 {
          totalImpuestosRetenidos = StampedDocument[indextotalImpuestosRetenidos+25:] 
            totalImpuestosRetenidosPrima := strings.Index(totalImpuestosRetenidos, "\"")
              totalImpuestosRetenidos = totalImpuestosRetenidos[:totalImpuestosRetenidosPrima]
        }

      

        indexc_Banco := strings.Index(StampedDocument, "Banco")
        c_Banco := ""
        if indexc_Banco != -1 {
          c_Banco = StampedDocument[indexc_Banco+7:]  
            c_BancoPrima := strings.Index(c_Banco, "\"")
              c_Banco = c_Banco[:c_BancoPrima]
        }

        indexCuentaBancaria := strings.Index(StampedDocument, "CuentaBancaria")
        CuentaBancaria := ""
        if indexCuentaBancaria != -1 {
          CuentaBancaria = StampedDocument[indexCuentaBancaria+16:] 
            CuentaBancariaPrima := strings.Index(CuentaBancaria, "\"")
              CuentaBancaria = CuentaBancaria[:CuentaBancariaPrima]
        }

        indexSDIstring := strings.Index(StampedDocument, "SalarioDiarioIntegrado")
        SDIstring := ""
        if indexSDIstring != -1 {
          SDIstring = StampedDocument[indexSDIstring+24:] 
            SDIstringPrima := strings.Index(SDIstring, "\"")
              SDIstring = SDIstring[:SDIstringPrima]
        }

        indextotalDeSueldos := strings.Index(StampedDocument, "TotalSueldos")
        totalDeSueldos := ""
        if indextotalDeSueldos != -1 {
          totalDeSueldos = StampedDocument[indextotalDeSueldos+14:] 
            totalDeSueldosPrima := strings.Index(totalDeSueldos, "\"")
              totalDeSueldos = totalDeSueldos[:totalDeSueldosPrima]
        }


        //PeriodicidadPago := x[empiezo+14]//46
        //c_Estado := x[empiezo+17]
        //totalPercepcionesGravado := x[51]
        //totalPercepcionesExento := x[52]
        
          indexUUID := strings.Index(StampedDocument, "UUID")
        UUID := ""
        if indexUUID != -1 {
          UUID = StampedDocument[indexUUID+6:indexUUID+42]  
        } else {
          UUID = "VISTA PREVIA"
        }

        indexFechaTimbrado := strings.Index(StampedDocument, "FechaTimbrado=")
        FechaTimbrado := ""
        if indexFechaTimbrado != -1 {
          FechaTimbrado = StampedDocument[indexFechaTimbrado+15:indexFechaTimbrado+34]  
        } else {
          FechaTimbrado = "VISTA PREVIA"
        }

        indexnoCertificadoSAT := strings.Index(StampedDocument, "NoCertificadoSAT=")
        noCertificadoSAT := ""
        if indexnoCertificadoSAT != -1 {
          noCertificadoSAT = StampedDocument[indexnoCertificadoSAT+18:indexnoCertificadoSAT+38] 
        } else {
          noCertificadoSAT = "VISTA PREVIA"
        }

        selloCFDIndex := strings.Index(StampedDocument, "SelloCFD")
        selloCFD := ""
        if selloCFDIndex != -1 {
          selloCFD = StampedDocument[selloCFDIndex+10:] 
            selloCFDIndexPrima := strings.Index(selloCFD, "\"")
              selloCFD = selloCFD[:selloCFDIndexPrima]
        } else {
          selloCFD = "VISTA PREVIA"
        }

        selloSATIndex := strings.Index(StampedDocument, "SelloSAT")
        selloSAT := ""
        if selloSATIndex != -1 {
          selloSAT = StampedDocument[selloSATIndex+10:] 
            selloSATIndexPrima := strings.Index(selloSAT, "\"")
              selloSAT = selloSAT[:selloSATIndexPrima]
        } else {
          selloSAT = "VISTA PREVIA"
        }

        

          
        

           
          //MetodoDePagoString := "NA"
          
          nombrePDF := "static/manuntencion/3.3/"+BUNIT+"/"+periodo+"/"+FechaPago+"/"+ nombre+".pdf"
          nombrePDFTimbrado := "static/manuntencion/3.3/"+BUNIT+"/"+periodo+"/"+FechaPago+"/"+ nombre+"_TIMBRADO.pdf"
        if _, err := os.Stat("static/manuntencion/3.3/"+BUNIT+"/"+periodo+"/"+FechaPago); os.IsNotExist(err) {
            os.MkdirAll("static/manuntencion/3.3/"+BUNIT+"/"+periodo+"/"+FechaPago, 0777)
        }
          
        pdf := gofpdf.New("P", "mm", "A4", "")
        tr := pdf.UnicodeTranslatorFromDescriptor("")
        pdf.SetHeaderFunc(func() {
            
        })
        pdf.SetFooterFunc(func() {
        })
        pdf.AddPage()
        pdf.SetFillColor(173, 173, 173)
        pdf.SetFont("Arial", "", 8)
        pdf.SetXY(14, 6)
        pdf.CellFormat(0,0,tr("Comprobante Fiscal Digital por Internet"),"",1,"L",false,0,"")
        
        
        xx := 10.0
        w := 190.0
        enter := 4.0
        inicioPrimero := 14.0
        pdf.Rect(xx, 10, w, 22, "DF")
          pdf.SetFont("Arial", "B", 12)
        pdf.SetXY(12, inicioPrimero)
        pdf.CellFormat(0,0,tr(razonEmisor),"",1,"L",false,0,"")
        pdf.SetFont("Arial", "B", 10)
        pdf.SetXY(16, inicioPrimero+enter)
        pdf.CellFormat(0,0,tr(rfcEmisor),"",1,"L",false,0,"")
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(16, inicioPrimero+(enter*2))
        pdf.CellFormat(0,0,tr("Reg Fiscal: "+regimen),"",1,"L",false,0,"")
        pdf.SetXY(16, inicioPrimero+(enter*3))
        pdf.CellFormat(0,0,tr("Lugar de expedición: "+lugarExpedicion),"",1,"L",false,0,"")
        pdf.SetXY(16, inicioPrimero+(enter*2))
        pdf.CellFormat(0,0,tr("Reg Fiscal: "+regimen),"",1,"L",false,0,"")
        if regPatronal!= "" {
          pdf.SetXY(66, inicioPrimero+(enter*1))
          pdf.CellFormat(0,0,tr("Reg Pat: "+regPatronal),"",1,"L",false,0,"")
        }
        pdf.SetXY(12, inicioPrimero)
        pdf.CellFormat(0,0,tr(fechaExpedicion),"",1,"R",false,0,"")
      
        inicioSegundo := 44.0
        pdf.Rect(xx, 40, w, 30, "")
        pdf.SetFont("Arial", "B", 10)
        pdf.SetXY(12, inicioSegundo)
        pdf.CellFormat(0,0,tr(NumEmpleado+" - "+nombre),"",1,"L",false,0,"")
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(12, inicioSegundo+enter)
        pdf.CellFormat(0,0,tr("RFC: "+RFC),"",1,"L",false,0,"")
        pdf.SetXY(12, inicioSegundo+(enter*2))
        pdf.CellFormat(0,0,tr("CURP: "+CURP),"",1,"L",false,0,"")
        if FechaInicioRelLaboral != "" {
          pdf.SetXY(12, inicioSegundo+(enter*3))
          pdf.CellFormat(0,0,tr("Fecha Ini Relación Lab: "+FechaInicioRelLaboral),"",1,"L",false,0,"")
        }
        pdf.SetXY(12, inicioSegundo+(enter*4))
        pdf.CellFormat(0,0,tr("Jornada: "+TipoJornada),"",1,"L",false,0,"")
        pdf.SetXY(12, inicioSegundo+(enter*4))
        pdf.CellFormat(0,0,tr("CuentaBancaria: "+CuentaBancaria),"",1,"R",false,0,"")
      
        if NumSeguridadSocial != "" {
          pdf.SetXY(12, inicioSegundo+(enter*5))
          pdf.CellFormat(0,0,tr("NSS: "+NumSeguridadSocial),"",1,"L",false,0,"")
        }
        
        pdf.SetXY(12, inicioSegundo+(enter*6))
        pdf.CellFormat(0,0,tr("Tipo Contrato: "+TipoContrato),"",1,"L",false,0,"")
        if Antiguedad!= "" {
          pdf.SetXY(12, inicioSegundo+(enter*6))
          pdf.CellFormat(0,0,tr("Antigüedad: "+Antiguedad),"",1,"R",false,0,"")
        }
        pdf.Rect(xx+w/2, 40, 0, 30, "")
        pdf.SetFont("Arial", "B", 10)
        pdf.SetXY(xx+(w/2)+2, inicioSegundo)
        pdf.CellFormat(0,0,tr("Periodo: "+periodo),"",1,"L",false,0,"")
        pdf.CellFormat(0,0,tr(deFecha + " - "+aFecha),"",1,"R",false,0,"")
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(xx+(w/2)+2, inicioSegundo+enter)
        pdf.CellFormat(0,0,tr("Días de pago: "+NumDiasPagados),"",1,"L",false,0,"")
        pdf.SetXY(xx+(w/2)+2, inicioSegundo+(enter*2))
        pdf.CellFormat(0,0,tr("Puesto: "+Puesto),"",1,"L",false,0,"")
        pdf.SetXY(xx+(w/2)+2, inicioSegundo+(enter*3))
        pdf.CellFormat(0,0,tr("Departamento: "+Departamento),"",1,"L",false,0,"")
        if SDIstring!= "" {
          pdf.SetXY(xx+(w/2)+2, inicioSegundo+(enter*4))
          pdf.CellFormat(0,0,tr("SDI: $ "+SDIstring),"",1,"L",false,0,"")
        }
        pdf.SetXY(xx+(w/2)+2, inicioSegundo+(enter*5))
        pdf.CellFormat(0,0,tr("Fecha Pago:  "+FechaPago),"",1,"L",false,0,"")
        pdf.SetXY(xx+(w/2)+2, inicioSegundo+(enter*6))
        pdf.CellFormat(0,0,tr("Banco: "+c_Banco),"",1,"L",false,0,"")

        pdf.SetFont("Arial", "B", 10)
        pdf.Rect(xx, 75, 3*w/5, 5, "DF")
        pdf.SetXY(xx, 75)
        tituloPer := "Percepciones"
        cuantasPercepcionesInt , _ := strconv.Atoi(cuantasPercepciones)
        cuantasOtrosPagosInt , _ := strconv.Atoi(cuantasOtrosPagos)
        
        if cuantasDeduccionesInt == 0 && cuantasPercepcionesInt == 0 && cuantasOtrosPagosInt > 0 {
          tituloPer = "Otros Pagos"
        }
        
        pdf.CellFormat(3*w/5,5,tr(tituloPer),"",1,"C",false,0,"")
        pdf.Rect(xx+ (3*w/5) , 75, 2*w/5, 5, "DF")
        pdf.SetXY(xx+ (3*w/5), 75)
        pdf.CellFormat(2*w/5,5,tr("Deducciones"),"",1,"C",false,0,"")

        //inicioTercero := 83
        inicioTerceroFloat := 83.0
      
        wTablaPercepciones := (3*w/5)
        wAGrupSAT := wTablaPercepciones / 10.0
        wClave := wTablaPercepciones / 10.0
        wConcepto := 4* wTablaPercepciones / 10.0
        wGravado := 2* wTablaPercepciones / 10.0
        wExento := 2* wTablaPercepciones / 10.0

        pdf.Rect(xx, inicioTerceroFloat, wTablaPercepciones, 5, "F")
        pdf.SetXY(xx, inicioTerceroFloat)
        pdf.CellFormat(wAGrupSAT,5,tr("SAT"),"",1,"C",false,0,"")

        pdf.SetXY(xx+wAGrupSAT, inicioTerceroFloat)
        pdf.CellFormat(wClave,5,tr("No."),"",1,"C",false,0,"")
        
        pdf.SetXY(xx+wAGrupSAT+wClave, inicioTerceroFloat)
        pdf.CellFormat(wConcepto,5,tr("Concepto"),"",1,"C",false,0,"")
        if cuantasDeduccionesInt == 0 && cuantasPercepcionesInt == 0 && cuantasOtrosPagosInt > 0 {
          pdf.SetXY(xx +wAGrupSAT+wClave+wConcepto, inicioTerceroFloat)
          pdf.CellFormat(wGravado,5,tr("Importe"),"",1,"C",false,0,"")
        } else {
          pdf.SetXY(xx +wAGrupSAT+wClave+wConcepto, inicioTerceroFloat)
          pdf.CellFormat(wGravado,5,tr("Gravado"),"",1,"C",false,0,"")
          
          pdf.SetXY(xx+wAGrupSAT+wClave+wConcepto+wGravado, inicioTerceroFloat)
          pdf.CellFormat(wExento,5,tr("Exento"),"",1,"C",false,0,"")
            
        }
        
        
        wTablaDeducciones := (2*w/5)
        pdf.Rect(xx+wTablaPercepciones, inicioTerceroFloat, wTablaDeducciones, 5, "F")

        wAGrupSATD := wTablaDeducciones / 6.0
        wClaveD := wTablaDeducciones / 6.0
        wConceptoD := 3* wTablaDeducciones / 6.0
        wImporteD :=  wTablaDeducciones / 6.0
        
        pdf.SetXY(xx+wTablaPercepciones, inicioTerceroFloat)
        pdf.CellFormat(wAGrupSATD,5,tr("SAT"),"",1,"C",false,0,"")

        pdf.SetXY(xx+wTablaPercepciones+wAGrupSATD, inicioTerceroFloat)
        pdf.CellFormat(wClaveD,5,tr("No."),"",1,"C",false,0,"")

        pdf.SetXY(xx+wTablaPercepciones+wAGrupSATD+wClaveD, inicioTerceroFloat)
        pdf.CellFormat(wConceptoD,5,tr("Concepto"),"",1,"C",false,0,"")

        pdf.SetXY(xx+wTablaPercepciones+wAGrupSATD+wClaveD+wConceptoD, inicioTerceroFloat)
        pdf.CellFormat(wImporteD,5,tr("Importe"),"",1,"R",false,0,"")
        
        pdf.SetFont("Arial", "", 10)
        esCLABE := len(CuentaBancaria)
        menos := 0
        if esCLABE == 18 {
          menos = 1//sin Banco
        }
        
        if tieneFiniquito == "1" {// si tiene finiquito
          menos--
          menos--
          //menos--
        }
        if tieneIndemnizacion == "1" {// si tiene finiquito
          menos--
          menos--
          menos--
          menos--
          //menos--
        }

        if cuantasDeduccionesInt == 0 {
          menos++
          menos++
          if manual == "0" {
            menos++
            menos++ 
          }
          //para algunos casos, parece que se necesitaran los 4 menos, en lugar de dos... habra que ver que onda, si es lo del subsidio
          //2 con prima vacacional, sin subsidio, sin ISR
        }
        if cuantasDeduccionesInt == 0 && cuantasPercepcionesInt == 0 && cuantasOtrosPagosInt > 0 {
          menos++
        }
        inicioGlobal := 47-menos+5-restale
        if Antiguedad== "" {//ministro
          inicioGlobal = 41-menos+5 // -SDI - riesgoPuesto - FechaIniRelLaboral - NSS - Antiguedad
        }
        inicio := inicioGlobal
        ac := accounting.Accounting{Symbol: "$", Precision: 2}
        siguiente := 0
        siguienteFloat := 0.0
        iFloat := 0.0
        for i := 1; i <= cuantasPercepcionesInt; i++ {
            siguiente = i*5
            iFloat = float64(i)
            siguienteFloat = iFloat*5.0
            pdf.SetXY(xx, inicioTerceroFloat+siguienteFloat)
          pdf.CellFormat(wAGrupSAT,5,tr(x[inicio+siguiente]),"",1,"L",false,0,"")
          pdf.SetXY(xx+wAGrupSAT, inicioTerceroFloat+siguienteFloat)
          pdf.CellFormat(wClave,5,tr(x[inicio+siguiente+1]),"",1,"L",false,0,"")
          pdf.SetXY(xx+wAGrupSAT+wClave, inicioTerceroFloat+siguienteFloat)
          pdf.CellFormat(wConcepto,5,tr(x[inicio+siguiente+2]),"",1,"L",false,0,"")
          pdf.SetXY(xx+wAGrupSAT+wClave+wConcepto, inicioTerceroFloat+siguienteFloat)
          cantidadEnFloat, _ := strconv.ParseFloat(x[inicio+siguiente+3], 64)
          cantidadEnFloat2, _ := strconv.ParseFloat(x[inicio+siguiente+4], 64)
          pdf.CellFormat(wGravado,5,tr(ac.FormatMoney(cantidadEnFloat)),"",1,"L",false,0,"")
          pdf.SetXY(xx+wAGrupSAT+wClave+wConcepto+wGravado, inicioTerceroFloat+siguienteFloat)
          pdf.CellFormat(wExento,5,tr(ac.FormatMoney(cantidadEnFloat2)),"",1,"L",false,0,"")
        }
        siguienteFloatGuardado := siguienteFloat
        inicio = inicioGlobal+3 + (cuantasPercepcionesInt*5)
        //totalDeducciones := 0.0
        if totalImpuestosRetenidos == "" {
          inicio-- //hardcode maximus
        }
        if tieneFiniquito == "1" {// si tiene finiquito
          inicio++
          inicio++
          //inicio++
        }
        if tieneIndemnizacion == "1" {// si tiene indemnizacion
          inicio++
          inicio++
          //inicio++
          //inicio++
          //inicio++
        }
        for i := 1; i <= cuantasDeduccionesInt; i++ {
            siguiente = i*4
            iFloat = float64(i)
            siguienteFloat = iFloat*5.0
            pdf.SetXY(xx+wTablaPercepciones, inicioTerceroFloat+siguienteFloat)
          pdf.CellFormat(wAGrupSATD,5,tr(x[inicio+siguiente]),"",1,"L",false,0,"")
          pdf.SetXY(xx+wTablaPercepciones+wAGrupSATD, inicioTerceroFloat+siguienteFloat)
          pdf.CellFormat(wClaveD,5,tr(x[inicio+siguiente+1]),"",1,"L",false,0,"")
          pdf.SetXY(xx+wTablaPercepciones+wAGrupSATD+wClaveD, inicioTerceroFloat+siguienteFloat)
          pdf.CellFormat(wConceptoD,5,tr(x[inicio+siguiente+2]),"",1,"L",false,0,"")
          pdf.SetXY(xx+wTablaPercepciones+wAGrupSATD+wClaveD+wConceptoD, inicioTerceroFloat+siguienteFloat)
          cantidadEnFloat, _ := strconv.ParseFloat(x[inicio+siguiente+3], 64)
          pdf.CellFormat(wImporteD,5,tr(ac.FormatMoney(cantidadEnFloat)),"",1,"R",false,0,"")
        }
        inicio +=(cuantasDeduccionesInt*4)
        if cuantasDeduccionesInt == 0 &&cuantasPercepcionesInt>0 {
          inicio--
        }
        if cuantasDeduccionesInt == 0 && cuantasPercepcionesInt == 0 && cuantasOtrosPagosInt > 0 {
          inicio--
          inicio--
          inicio--
        }
        for i := 1; i <= cuantasOtrosPagosInt; i++ {
            siguiente = i*4
            iFloat = float64(i)
            siguienteFloat = (iFloat*5.0)+siguienteFloatGuardado
            pdf.SetXY(xx, inicioTerceroFloat+siguienteFloat)
          pdf.CellFormat(wAGrupSATD,5,tr(x[inicio+siguiente]),"",1,"L",false,0,"")
          pdf.SetXY(xx+wAGrupSATD, inicioTerceroFloat+siguienteFloat)
          pdf.CellFormat(wClaveD,5,tr(x[inicio+siguiente+1]),"",1,"L",false,0,"")
          pdf.SetXY(xx+wAGrupSATD+wClaveD, inicioTerceroFloat+siguienteFloat)
          pdf.CellFormat(wConceptoD,5,tr(x[inicio+siguiente+2]),"",1,"L",false,0,"")
          pdf.SetXY(xx+wAGrupSATD+wClaveD+wConceptoD, inicioTerceroFloat+siguienteFloat)
          cantidadEnFloat, _ := strconv.ParseFloat(x[inicio+siguiente+3], 64)
          pdf.CellFormat(wImporteD,5,tr(ac.FormatMoney(cantidadEnFloat)),"",1,"R",false,0,"")
        }
        


        
        
        pdf.Rect(xx, inicioTerceroFloat, 3*w/5, 45, "")
        pdf.Rect(xx + (3*w/5), inicioTerceroFloat, 2*w/5, 45, "")

        inicioCuarto := 130.0
        pdf.Rect(xx , inicioCuarto, 3*w/5, 8, "")
        pdf.SetXY(xx, inicioCuarto)
        totalDeSueldosFloat, _ := strconv.ParseFloat(totalDeSueldos, 64)      
        pdf.CellFormat( 3*w/5,8,tr("Total Percep. más otros pagos: "+ac.FormatMoney(totalDeSueldosFloat)),"",1,"C",false,0,"")
        pdf.Rect(xx + (3*w/5), inicioCuarto, 2*w/5, 25, "")

        pdf.SetXY(xx+ (3*w/5), inicioCuarto)
        pdf.CellFormat( w/5,5,tr("Subtotal: "),"",1,"R",false,0,"")
        pdf.SetXY(xx+ (4*w/5), inicioCuarto)
        pdf.CellFormat( w/5,5,tr(ac.FormatMoney(totalDeSueldosFloat)),"",1,"R",false,0,"")
          

        pdf.SetXY(xx+ (3*w/5), inicioCuarto+5)
        pdf.CellFormat( w/5,5,tr("Descuentos: "),"",1,"R",false,0,"")
        pdf.SetXY(xx+ (4*w/5), inicioCuarto+5)
        deduccionesFloat, _ := strconv.ParseFloat(deducciones, 64)      
        pdf.CellFormat( w/5,5,tr(ac.FormatMoney(deduccionesFloat)),"",1,"R",false,0,"")
        



        pdf.SetXY(xx+ (3*w/5), inicioCuarto+10)
        pdf.CellFormat( w/5,5,tr("Retenciones: "),"",1,"R",false,0,"")
        pdf.SetXY(xx+ (4*w/5), inicioCuarto+10)
        if totalImpuestosRetenidos != "" {
          totalImpuestosRetenidosFloat, _ := strconv.ParseFloat(totalImpuestosRetenidos, 64)      
          pdf.CellFormat( w/5,5,tr(ac.FormatMoney(totalImpuestosRetenidosFloat)),"",1,"R",false,0,"")
        }
        
        pdf.SetXY(xx+ (3*w/5), inicioCuarto+15)
        pdf.CellFormat( w/5,5,tr("Total: "),"",1,"R",false,0,"")
        pdf.SetXY(xx+ (4*w/5), inicioCuarto+15)
        pdf.CellFormat( w/5,5,tr(ac.FormatMoney(cantidad)),"",1,"R",false,0,"")
        pdf.SetTextColor(0,0,255)
        pdf.SetXY(xx+ (3*w/5), inicioCuarto+20)
        pdf.CellFormat( w/5,5,tr("Neto del recibo: "),"",1,"R",false,0,"")
        pdf.SetXY(xx+ (4*w/5), inicioCuarto+20)
        pdf.CellFormat( w/5,5,tr(ac.FormatMoney(cantidad)),"",1,"R",false,0,"")
        pdf.SetTextColor(0, 0, 0)

        pdf.SetFont("Arial", "", 8)
        pdf.SetXY(xx, inicioCuarto+12)
        pdf.CellFormat( 3*w/5,5,tr("Se puso a mi disposición el archivo XML correspondiente y recibí de la empresa"),"",1,"L",false,0,"")
        pdf.SetXY(xx, inicioCuarto+17)
        pdf.CellFormat( 3*w/5,5,tr("arriba mencionada la cantidad neta a que este documento se refiere estando"),"",1,"L",false,0,"")
        pdf.SetXY(xx, inicioCuarto+22)
        pdf.CellFormat( 3*w/5,5,tr("conforme con las percepciones y deducciones que en él aparecen especificados."),"",1,"L",false,0,"")
        
          pdf.SetFont("Arial", "", 12)
        pdf.SetXY(xx+ (3*w/5), inicioCuarto+51)
        pdf.CellFormat( 2*w/5,5,tr("Firma del Ministro/Asociado Religioso"),"",1,"C",false,0,"")
        pdf.Rect(xx+ (3*w/5), inicioCuarto+48, 2*w/5, 0, "")

        inicioQuinto := inicioCuarto + 60
        pdf.Rect(xx+ (2*w/5), inicioQuinto, 3*w/5, 5, "DF")
        pdf.SetXY(xx+ (2*w/5), inicioQuinto)
        
        pdf.CellFormat( 3*w/5,5,tr("Este documento es una representación impresa de un CFDI"),"",1,"C",false,0,"")
        pdf.SetXY(xx+ (2*w/5), inicioQuinto+5)
        pdf.CellFormat( 3*w/5,5,tr("Pago en una sola exhibicion"),"",1,"C",false,0,"")
        pdf.SetXY(xx+ (2*w/5), inicioQuinto+10)
        pdf.CellFormat( 3*w/5,5,tr("Emitido desde:            Sevenplus"),"",1,"C",false,0,"")
        pdf.Image("sevenplus.png", xx+ (7*w/10), inicioQuinto+10, 7, 7, false, "", 0, "")


        pdf.SetFont("Arial", "", 8)
        
        pdf.SetXY(xx+ (2*w/5), inicioQuinto+18)
        pdf.CellFormat( 3*w/10,5,tr("Folio Fiscal UUID:"),"",1,"R",false,0,"")
        pdf.SetFont("Arial", "", 7)
        pdf.SetXY(xx+ (2*w/5)+(3*w/10), inicioQuinto+18)
        pdf.CellFormat( 3*w/10,5,tr(UUID),"",1,"L",false,0,"")
        pdf.SetFont("Arial", "", 8)
        

        pdf.SetXY(xx+ (2*w/5), inicioQuinto+23)
        pdf.CellFormat( 3*w/10,5,tr("Serie del certificado del SAT:"),"",1,"R",false,0,"")
        pdf.SetXY(xx+ (2*w/5)+(3*w/10), inicioQuinto+23)
        pdf.CellFormat( 3*w/10,5,tr(noCertificadoSAT),"",1,"L",false,0,"")
        
        pdf.SetXY(xx+ (2*w/5), inicioQuinto+28)
        pdf.CellFormat( 3*w/10,5,tr("Fecha y hora de certificación:"),"",1,"R",false,0,"")
        pdf.SetXY(xx+ (2*w/5)+(3*w/10), inicioQuinto+28)
        pdf.CellFormat( 3*w/10,5,tr(FechaTimbrado),"",1,"L",false,0,"")
        

        
        
        pdf.Rect(xx+ (2*w/5), inicioQuinto, 3*w/5, 18, "")
        pdf.Rect(xx+ (2*w/5), inicioQuinto+18, 3*w/5, 18, "")
        pdf.Rect(xx+ (7*w/10), inicioQuinto+18,   0  , 18, "")

        pdf.SetXY(xx, inicioCuarto+30)
          key := barcode.RegisterQR(pdf, "?re="+rfcEmisor+"&rr="+RFC+"&id="+UUID, qr.H, qr.Unicode)
        barcode.Barcode(pdf, key, xx+10, inicioCuarto+30, 40,40, false)

        pdf.SetFillColor(255, 202, 94)
        inicioSexto := inicioQuinto + 18.0 + 18.0+3.0
        pdf.Rect(xx, inicioSexto, w, 5, "F")
        pdf.SetFont("Arial", "", 10)
        pdf.SetXY(xx, inicioSexto)
        pdf.CellFormat( w,5,tr("Sello digital del CFDI"),"",1,"L",false,0,"")
        
        pdf.SetXY(xx, inicioSexto+5)
        pdf.MultiCell( w,4,tr(selloCFD),"","L",false)
        pdf.Rect(xx, inicioSexto+20, w, 5, "F")
        pdf.SetXY(xx, inicioSexto+20)
        pdf.MultiCell( w,5,tr("Sello del SAT"),"","L",false)
        pdf.SetXY(xx, inicioSexto+25)
        pdf.MultiCell( w,4,tr(selloSAT),"","L",false)
        
        pdf.SetFont("Arial", "", 7)
        pdf.SetXY(xx, inicioSexto+42)
        pdf.CellFormat( w/5,4,tr("Versión del comprobante: "+version),"",1,"L",false,0,"")
        
        pdf.SetXY(xx+(w/5), inicioSexto+42)
        pdf.CellFormat( w/5,4,tr("Versión del complemento "+versionNomina),"",1,"L",false,0,"")
        pdf.OutputFileAndClose(nombrePDF)
        queryCorreo := "SELECT correo FROM [Sevenplus].[dbo].[nomina] WHERE ER = '"+ER+"' AND BUNIT = '"+BUNIT+"'"
        rowsCorreo, errC := conn.Query(queryCorreo)
        if errC != nil {
          fmt.Println(queryCorreo)
          fmt.Println(errC)
        }
        correoPersona := ""
        if rowsCorreo.Next()  {
          rowsCorreo.Scan(&correoPersona)
        }

        
fmt.Println(cadOriginal)
        
        if deVerdad == "1" {
          
          UUID = strings.TrimSpace(UUID)
          if UUID != "VISTA PREVIA" {
            queonda := os.Rename(nombreXML, nombreXMLTimbrado)
            check(queonda)
            queonda = os.Rename(nombrePDF, nombrePDFTimbrado)
            check(queonda)
            currentTime := int(time.Now().Unix())
    
            queryW := `INSERT INTO [Sevenplus].[dbo].[zNominaFacturas] (manual, ER, cadOriginal,timestamp,periodo,timbrado,UUID,cantidad,BUNIT, cuantasPercepciones, cuantasDeducciones, cuantasOtrosPagos)
            VALUES (`+manual+`,'`+ER+`','`+cadOriginal+`',`+strconv.Itoa(currentTime)+`,`+periodo+`,1,'`+UUID+`',`+totalNeto+`, '`+BUNIT+`', `+strconv.Itoa(cuantasPercepcionesInt)+`, `+strconv.Itoa(cuantasDeduccionesInt)+`, `+strconv.Itoa(cuantasOtrosPagosInt)+`)`
            result, err11 := conn.Exec(queryW)
            if err11 != nil {
              fmt.Println(queryW)
              fmt.Println(err11)
            }
            afectados, _ := result.RowsAffected()
            if afectados == 1 {
              d := gomail.NewDialer("smtp.gmail.com", 587, "alonsopf@gmail.com", "dank_Gott1863")
                //d.TLSConfig = &tls.Config{InsecureSkipVerify: true}
                m := gomail.NewMessage()
              m.SetHeader("From", "alonsopf@gmail.com")
              correo := c.GetSession("usuario")
              m.SetHeader("To", correo.(string), correoPersona)
              //m.SetHeader("To", correoPersona)
              //m.SetAddressHeader("Cc", "dan@example.com", "Dan")
              m.SetHeader("Subject", "CFDI de recibo electrónico de "+nombre+" periodo "+periodo)
              m.SetBody("text/html", `Buen d&iacute;a.<br><br>
                Servicio de entrega de CFDI de recibos electr&oacute;nicos, emitido y enviado por:<br><br>
                <b>RFC:</b> `+rfcEmisor+` <br>
                <b>Raz&oacute;n Social:</b> `+razonEmisor+`<br>
                <br>
                Datos CFDI del recibo electr&oacute;nico:<br>
                <b>Nombre empleado:</b> `+nombre+`<br>
                <b>Periodo:</b> `+periodo+` del `+deFecha+` al `+aFecha+`<br>
                <b>UUID:</b> `+UUID+`<br><br>

                Se adjunta el archivo del CFDI correspondiente.<br><br>Favor de no responder este correo.`)
              m.Attach("C:/work/src/sevenplus/"+nombrePDFTimbrado)
              m.Attach("C:/work/src/sevenplus/"+nombreXMLTimbrado)

              if err := d.DialAndSend(m); err != nil {
                fmt.Println(err)
                  //fmt.Println(err)
              }
            }
          }
          example := map[string]interface{}{"success" : 1, "pdf" : nombrePDFTimbrado, "xml" : nombreXMLTimbrado }
          c.Data["json"] = &example
          c.ServeJSON()
        }
        example := map[string]interface{}{"success" : 1, "pdf" : nombrePDF, "xml" : nombreXML }
        c.Data["json"] = &example
        c.ServeJSON()
        }
  }
}
func (c *TimbraNominaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    ER := c.GetString("ER")
    TimeStamp := c.GetString("TimeStamp")
    deVerdad := c.GetString("deVerdad")
    esManual := c.GetString("esManual")
    type TypeDocument struct{
      StampedDocument string
    }
    DocumentObject := TypeDocument {StampedDocument:"hola"}
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.Format(time.RFC3339)
    substring := string(dateString[0:10])
    byteArray := []byte(substring)
    hasher := sha512.New()
      hasher.Write(byteArray)
    cryptoText := base64.StdEncoding.EncodeToString(  []byte(hex.EncodeToString(hasher.Sum(nil))))
    //dateStringSubString := string(dateString[0:19])
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    cuantasPercepciones := 0
    cuantasDeducciones := 0
    cuantasOtrosPagos := 0
    var cadOriginal string
    TipoContrato := ""
    idCFDINomina := 0
      cantidad := 0.0
      periodo := ""
      nombre :="" 
    if esManual == "1" {// es manual

    } else {//es automatico
      queryFolio := "SELECT cantidad, cadOriginal, cuantasPercepciones, cuantasDeducciones, cuantasOtrosPagos, periodo, idCFDINomina FROM [Sevenplus].[dbo].[zNominaFacturas] WHERE timestamp = "+TimeStamp+" AND ER = '"+ER+"'"    
      ER = strings.TrimSpace(ER)
      rowsFolio, _ := conn.Query(queryFolio)
      if rowsFolio.Next()  {
        rowsFolio.Scan(&cantidad, &cadOriginal, &cuantasPercepciones, &cuantasDeducciones, &cuantasOtrosPagos, &periodo, &idCFDINomina)
      }
      fmt.Println(queryFolio)
      
      x := strings.Split(cadOriginal, "|")
      nombre = x[17]
      if !strings.Contains(cadOriginal, "MINISTRO") {
        TipoContrato = "02"
          } else {
            TipoContrato = "09"
          }
          fmt.Println(TipoContrato)
    }
      hc := http.Client{}
      form := url.Values{}
      form.Add("originalCad", cadOriginal)
      form.Add("cryptoText", cryptoText)
      form.Add("TipoContrato", TipoContrato)
      
      form.Add("tipo", "1")//1 = nomina
      form.Add("deVerdad", deVerdad)//1 = de verdad, 0 = vista previa
      form.Add("cuantosConceptos", "1")
      form.Add("cuantasPercepciones", strconv.Itoa(cuantasPercepciones))
      form.Add("cuantasDeducciones", strconv.Itoa(cuantasDeducciones))
      form.Add("cuantasOtrosPagos", strconv.Itoa(cuantasOtrosPagos))

    


      if esManual == "1" {// es manual
        req, _ := http.NewRequest("POST", "http://miscuentas.unionnorte.org/timbra3.3.php", strings.NewReader(form.Encode()))
        //req, _ := http.NewRequest("POST", "http://miscuentas.adventistasumn.org/timbra3.3.php", strings.NewReader(form.Encode()))
        req.PostForm = form
        req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
        resp, _ := hc.Do(req)  
        err = json.NewDecoder(resp.Body).Decode(&DocumentObject)
    } else {//es automatico
      req, _ := http.NewRequest("POST", "http://miscuentas.unionnorte.org/timbra3.3.php", strings.NewReader(form.Encode()))
      //req, _ := http.NewRequest("POST", "http://miscuentas.adventistasumn.org/timbra3.3.php", strings.NewReader(form.Encode()))
        req.PostForm = form
        req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
        resp, _ := hc.Do(req)  
        err = json.NewDecoder(resp.Body).Decode(&DocumentObject)
    }


       

      

    if _, err := os.Stat("static/manuntencion/3.3/"+BUNIT.(string)+"/"+periodo+"/"); os.IsNotExist(err) {
        os.MkdirAll("static/manuntencion/3.3/"+BUNIT.(string)+"/"+periodo+"/", 0777)
    }
    nombreXML := "static/manuntencion/3.3/"+BUNIT.(string)+"/"+periodo+"/"+ nombre+".xml"
    nombreXMLTimbrado := "static/manuntencion/3.3/"+BUNIT.(string)+"/"+periodo+"/"+ nombre+"_TIMBRADO.xml"
    f, err := os.Create(nombreXML)
      check(err)
      n3, errF := f.WriteString(DocumentObject.StampedDocument)
      fmt.Printf("wrote %d bytes\n", n3)
      check(errF)
      f.Sync()
    conn.Close()
    f.Close()
      
    fmt.Println(DocumentObject.StampedDocument)
      if strings.Contains(DocumentObject.StampedDocument, "ErrorCode") {
          example := map[string]interface{}{"success" : -1, "error" :  DocumentObject.StampedDocument, "revisar" : cadOriginal}
      c.Data["json"] = &example
      c.ServeJSON()
        } else {
          GeneraPDFDeNomina(nombreXMLTimbrado, deVerdad, TipoContrato, strconv.Itoa(idCFDINomina), cadOriginal,nombreXML, DocumentObject.StampedDocument, BUNIT.(string), periodo, ER, cuantasPercepciones, cuantasDeducciones, cuantasOtrosPagos, cantidad, c)
        }
  }
}




func (c *CancelarIngresosNewController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    UUID := c.GetString("UUID")
    idBanco := c.GetString("idBanco")
    
    
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.Format(time.RFC3339)
    substring := string(dateString[0:10])
    //dateStringSubString := string(dateString[0:19])

  

    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    queryFolio := "SELECT rfc FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '"+BUNIT.(string)+"'"
    rowsFolio, err := conn.Query(queryFolio)
    rfc := ""
    for rowsFolio.Next()  {
      rowsFolio.Scan(&rfc)
    }

    byteArray := []byte(substring)
    hasher := sha512.New()
      hasher.Write(byteArray)
    cryptoText := base64.StdEncoding.EncodeToString(  []byte(hex.EncodeToString(hasher.Sum(nil))))
    type CancelDocument struct{
      Mensaje string
    }
    type TypeDocument struct{
      CancelResponse CancelDocument
    }
    hc := http.Client{}
      form := url.Values{}
      form.Add("cryptoText", cryptoText)
      form.Add("tipo", "3")//3 = cancelacion!
      form.Add("UUID", UUID)
      form.Add("rfc", rfc)
      form.Add("deVerdad", "1")
      form.Add("esxml", "1")
      cadOriginal := ""
    queryCorreo := "SELECT xmlText FROM [Sevenplus].[dbo].["+BUNIT.(string)+"_zFacturas] WHERE UUID = '"+UUID+"'"
    rowsCorreo, errC := conn.Query(queryCorreo)
    if errC != nil {
      fmt.Println(queryCorreo)
      fmt.Println(errC)
    }
    //correoPersona := ""
    if rowsCorreo.Next()  {
      rowsCorreo.Scan(&cadOriginal)
    }
      form.Add("cadOriginal", cadOriginal)
      //cancelar ingresos
    req, err := http.NewRequest("POST", "https://miscuentas.adventistasumn.org/cancelCFDI.php", strings.NewReader(form.Encode()))
      req.PostForm = form
      req.Header.Add("Content-Type", "application/x-www-form-urlencoded")

      resp, err := hc.Do(req)  
      docxml := CancelDocument {Mensaje : "hola"}
      DocumentObject := TypeDocument {CancelResponse: docxml}
            fmt.Println(resp)
      fmt.Println(resp.Body)
      err = json.NewDecoder(resp.Body).Decode(&DocumentObject)
          
      fmt.Println(DocumentObject)
    if strings.Contains(DocumentObject.CancelResponse.Mensaje, "ErrorCode") || strings.Contains(DocumentObject.CancelResponse.Mensaje, "Codigo>-1") || strings.Contains(DocumentObject.CancelResponse.Mensaje, "hola")  {
          example := map[string]interface{}{"success" : -1, "error" :  DocumentObject.CancelResponse, "revisar" : "idBanco"}
      c.Data["json"] = &example
      c.ServeJSON()
        } else {  
          if strings.Contains(DocumentObject.CancelResponse.Mensaje, "UUID Cancelado") || strings.Contains(DocumentObject.CancelResponse.Mensaje, "UUID Previamente cancelado")  {
          queryDD := `UPDATE [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] SET timbrado = 2, UUID = '`+UUID+`' WHERE idBanco = `+idBanco
        conn.Exec(queryDD)

        queryZ := `UPDATE [Sevenplus].[dbo].[`+BUNIT.(string)+`_zFacturas] set cancelada = 1
        WHERE UUID = '`+UUID+`'
        `
        conn.Exec(queryZ)
        queryD := `DELETE FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] WHERE FOLIO_FISCAL= '`+UUID+`'`
        conn.Exec(queryD)
        example := map[string]interface{}{"success" : 1}
        c.Data["json"] = &example
        c.ServeJSON()
      } else {
        example := map[string]interface{}{"success" : -1}
        c.Data["json"] = &example
        c.ServeJSON()
      }
    }//else
  }
}
func (c *RegeneraXMLDeIngresosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    uuid := c.GetString("uuid")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }

    queryFolio := "SELECT xml FROM [Sevenplus].[dbo].["+BUNIT.(string)+"_zFacturas] WHERE BUNIT = '"+BUNIT.(string)+"' AND UUID = '"+uuid+"'"
    rowsFolio, err := conn.Query(queryFolio)
    xmlPath := ""
    for rowsFolio.Next()  {
      rowsFolio.Scan(&xmlPath)
    }

    b, err := ioutil.ReadFile(xmlPath) // just pass the file name
      if err != nil {
          fmt.Print(err)
      }
      xmlString := string(b)
      v := new(CFDI)
      err = xml.Unmarshal([]byte(xmlString), v)
      if err != nil {
          fmt.Printf("error: %v", err)
          return
      }
      /*version := v.Version
      if version == "3.3" {

      }*/



  
      //UUID := uuid

      selloCFD := v.Complementos[0].TimbreFiscalDigitals[0].SelloCFD
         


        selloSAT := v.Complementos[0].TimbreFiscalDigitals[0].SelloSAT
    metodoDePago := v.MetodoDePago
    lugarExpedicion := v.LugarExpedicion
    NumCtaPago :=  v.LugarExpedicion
      MetodoDePagoString := v.MetodoDePago
      if Compare(metodoDePago,"01")==0 {
        MetodoDePagoString = "Efectivo"
      }
      if Compare(metodoDePago,"02")==0 {
        MetodoDePagoString = "Cheque"
      }
      if Compare(metodoDePago,"03")==0 {
        MetodoDePagoString = "Transferencia"
      }
      if Compare(metodoDePago,"04")==0 {
        MetodoDePagoString = "Tarjeta de credito"
      }
      if Compare(metodoDePago,"05")==0 {
        MetodoDePagoString = "Monedero electronico"
      }
      if Compare(metodoDePago,"06")==0 {
        MetodoDePagoString = "Dinero electronico"
      }
      if Compare(metodoDePago,"08")==0 {
        MetodoDePagoString = "Vales de despensa"
      }
      if Compare(metodoDePago,"28")==0 {
        MetodoDePagoString = "Tarjeta de debito"
      }
      if Compare(metodoDePago,"29")==0 {
        MetodoDePagoString = "Tarjeta de servicio"
      }
      if Compare(metodoDePago,"99")==0 {
        MetodoDePagoString = "Otros"
      }
    nombrePDF := c.GetString("pdf")

    pdf := gofpdf.New("P", "mm", "A4", "")
    tr := pdf.UnicodeTranslatorFromDescriptor("")
    pdf.SetHeaderFunc(func() {
        
    })
    pdf.SetFooterFunc(func() {
    })
    dateStringSubString := v.Fecha
    moneda:=v.Moneda
    totalAbsoluto:= fmt.Sprintf("%.2f",  v.Total)
    subTotal := fmt.Sprintf("%.2f",  v.SubTotal) 
    folio := v.Folio
    impTrasladados :=  fmt.Sprintf("%.2f",  v.Impuestoss[0].TotalImpuestosTrasladados)
        
    tipoDeCambio:=v.TipoCambio
    rfcEmisor := v.Emisors[0].RFCEmisor
    razonSocial := v.Emisors[0].NombreRazonSocial
    rfc := v.Receptors[0].RFCReceptor
    RazonSocialReceptor := v.Receptors[0].NombreRazonSocial
    regimen := v.Emisors[0].RegimenFiscals[0].Regimen
    nombre := v.Conceptoss[0].Conceptos[0].Descripcion

    pdf.AddPage()
    pdf.Image("logo.png", 10, 3, 30, 0, false, "", 0, "")
    pdf.SetFont("Arial", "", 16)
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(0, 10)
    pdf.CellFormat(0,0,tr("Lugar de expedición: "+lugarExpedicion),"",1,"R",false,0,"")
    pdf.SetXY(0, 14)
    pdf.CellFormat(0,0,tr("Num. Cta. de Pago: "+NumCtaPago),"",1,"R",false,0,"")
    pdf.SetXY(0, 18)
    pdf.CellFormat(0,0,tr("Fecha de generación: "+dateStringSubString),"",1,"R",false,0,"")
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(0, 22)
    pdf.CellFormat(0,0,tr("UUID: "+uuid),"",1,"R",false,0,"")
    pdf.SetXY(0, 26)
    pdf.CellFormat(0,0,tr("Emisor: "+rfcEmisor+"-"+razonSocial),"",1,"R",false,0,"")
    pdf.SetXY(0, 30)
    pdf.CellFormat(0,0,tr("Reg Fiscal: "+regimen),"",1,"R",false,0,"")
    pdf.SetXY(0, 34)
    pdf.CellFormat(0,0,tr("Moneda: "+moneda),"",1,"R",false,0,"")
    pdf.SetXY(0, 38)
    pdf.CellFormat(0,0,tr("Tipo de cambio: $ "+tipoDeCambio),"",1,"R",false,0,"")
    pdf.SetXY(0, 42)
    
    pdf.CellFormat(0,0,tr("Total del comprobante: $ "+totalAbsoluto),"",1,"R",false,0,"")     
    
    pdf.SetXY(0, 46)
    pdf.CellFormat(0,0,tr("Subtotal: $ "+subTotal),"",1,"R",false,0,"")     
    
    



    
    pdf.SetFont("Arial", "", 10)
    
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(140, 7)
    pdf.SetFont("Arial", "", 8)
        
    pdf.SetFont("Arial", "B", 11)
    pdf.SetXY(10, 40)
    pdf.Cell(0, 0, " Tipo de comprobante: ingreso ")
    pdf.SetXY(10, 47)
    pdf.SetFont("Arial", "", 11)
    pdf.Cell(0, 0, "RFC: "+rfc)
    pdf.SetXY(10, 54)
    pdf.Cell(0, 0, "Razon social: "+tr(RazonSocialReceptor))
    pdf.SetXY(10, 61)
    pdf.Cell(0, 0, tr("Metodo de pago: "+metodoDePago+" - "+MetodoDePagoString))
    pdf.SetXY(10, 68)
    pdf.Cell(0, 0, "Serie: S")
    pdf.SetXY(10, 75)
    pdf.Cell(0, 0, "Folio: "+folio)
    pdf.SetXY(10, 82)
    ac := accounting.Accounting{Symbol: "$", Precision: 2}
    
    w := []float64{15, 25, 80, 30, 30}
    wSum := 0.0
    for _, v := range w {
        wSum += v
    }
    pdf.SetXY(0, 89)
    pdf.CellFormat(0,0,tr("         Conceptos: "),"",1,"L",false,0,"")
    pdf.Ln(5)
    pdf.CellFormat(0,0,tr("         "),"",1,"L",false,0,"")
    pdf.SetFont("Arial", "", 10)
    pdf.SetFillColor(173, 173, 173)
    pdf.SetTextColor(255, 255, 255)
    pdf.SetDrawColor(128, 0, 0)
    pdf.SetLineWidth(.3)
    pdf.SetFont("Arial", "B", 0)
      //  Header
      pdf.CellFormat(w[0], 7, "Cantidad", "1", 0, "C", true, 0, "")
      pdf.CellFormat(w[1], 7, "Unidad", "1", 0, "C", true, 0, "")
    pdf.CellFormat(w[2], 7, "Concepto", "1", 0, "C", true, 0, "")
    pdf.CellFormat(w[3], 7, "Valor unitario", "1", 0, "C", true, 0, "")
    pdf.CellFormat(w[4], 7, "Importe", "1", 0, "C", true, 0, "")
    pdf.Ln(-1)
      // Color and font restoration
      pdf.SetFillColor(224, 235, 255)
      pdf.SetTextColor(0, 0, 0)
      pdf.SetFont("", "", 0)
      //  Data
    fill := false
      cantidadFloat, _ := strconv.ParseFloat(subTotal, 64)
      cantidadFloatTotal, _ := strconv.ParseFloat(totalAbsoluto, 64)
      iva := fmt.Sprintf("%.2f",cantidadFloatTotal-cantidadFloat)
      
      cuantosMeSalto := 6
      pdf.CellFormat(w[0], 6, "1", "LR", 0, "", fill, 0, "")
    pdf.CellFormat(w[1], 6, "No aplica", "LR", 0, "", fill, 0, "")
    pdf.SetFont("Arial", "", 8)
    nombre1:=""
    nombre2:=""
      
    if len(nombre) > 47 {
      nombre1=nombre[0:47]
      nombre2=nombre[47:]
      pdf.CellFormat(w[2], 6, nombre1, "LR", 0, "", fill, 0, "")  
      
      
    } else {
        pdf.CellFormat(w[2], 6, nombre, "LR", 0, "", fill, 0, "")   
    }
    
    
    pdf.SetFont("", "", 0)
    pdf.CellFormat(w[3], 6, ac.FormatMoney(cantidadFloat), "LR", 0, "", fill, 0, "")
    pdf.CellFormat(w[4], 6, ac.FormatMoney(cantidadFloat), "LR", 0, "", fill, 0, "")
    pdf.Ln(-1)
      cuantosMeSalto = cuantosMeSalto + 6
    if len(nombre) > 47 {
        pdf.CellFormat(w[0], 6, "", "LR", 0, "", fill, 0, "")
      pdf.CellFormat(w[1], 6, "", "LR", 0, "", fill, 0, "")
      pdf.CellFormat(w[2]+w[3]+w[4], 6, nombre2, "LR", 0, "", fill, 0, "")    
        pdf.Ln(-1)
        cuantosMeSalto = cuantosMeSalto + 6
      }


      fill = !fill
    pdf.CellFormat(wSum, 6, "Total: "+ac.FormatMoney(cantidadFloat), "LR", 0, "", fill, 0, "")
    pdf.Ln(-1)
    cuantosMeSalto = cuantosMeSalto + 6
    fill = !fill
    pdf.CellFormat(wSum, 0, "", "T", 0, "", false, 0, "")
      pdf.Ln(5)
      ////////////
      w = []float64{15, 25, 50, 30, 30}
    
      pdf.CellFormat(0,0,tr("Impuestos: "),"",1,"L",false,0,"")
    pdf.Ln(5)
    ww := []float64{30, 30, 30}
    wwSum := 0.0
    for _, v := range ww {
        wwSum += v
    }
    pdf.SetFont("Arial", "", 10)
    pdf.SetFillColor(173, 173, 173)
    pdf.SetTextColor(255, 255, 255)
    pdf.SetDrawColor(128, 0, 0)
    pdf.SetLineWidth(.3)
    pdf.SetFont("Arial", "B", 0)
      //  Header
      pdf.CellFormat(w[0], 7, "Importe", "1", 0, "C", true, 0, "")
      pdf.CellFormat(w[1], 7, "Impuesto", "1", 0, "C", true, 0, "")
    pdf.CellFormat(w[2], 7, "Tasa", "1", 0, "C", true, 0, "")
    pdf.Ln(-1)
      // Color and font restoration
      pdf.SetFillColor(224, 235, 255)
      pdf.SetTextColor(0, 0, 0)
      pdf.SetFont("", "", 0)
      //  Data
    cuantosMeSalto += 6
      pdf.CellFormat(w[0], 6, "$"+iva, "LR", 0, "", fill, 0, "")
      pdf.CellFormat(w[1], 6,"IVA", "LR", 0, "", fill, 0, "")
      pdf.CellFormat(w[2], 6,"16 %", "LR", 0, "", fill, 0, "")
    pdf.Ln(-1)
      cuantosMeSalto = cuantosMeSalto + 6
      fill = !fill
    pdf.CellFormat(wwSum, 6, "Impuestos trasladados: $"+impTrasladados, "LR", 0, "", fill, 0, "")
    pdf.Ln(-1)
    pdf.CellFormat(wwSum, 0, "", "T", 0, "", false, 0, "")
      
    cuantosMeSalto = cuantosMeSalto + 6
    fill = !fill
    
    

      cuantosMeSalto = cuantosMeSalto + 6
    cuantosMeSalto = cuantosMeSalto + 6
    cuantosMeSalto = cuantosMeSalto + 6
    cuantosMeSalto = cuantosMeSalto + 6
    cuantosMeSalto = cuantosMeSalto + 6
    nuevoNumero := float64(89.0 + cuantosMeSalto)
    
      pdf.SetXY(0, nuevoNumero)
      key := barcode.RegisterQR(pdf, "?re="+rfcEmisor+"&rr="+rfc+"&id="+uuid, qr.H, qr.Unicode)
    barcode.Barcode(pdf, key, 15, nuevoNumero, 50, 50, false)
    nuevoNumero+=60
    pdf.SetXY(15, nuevoNumero)
    //pdf.SetAutoPageBreak(true, 170.0)
    lineaSello := "Sello digital del CFDI: "+selloCFD
    lengthSello := len(lineaSello)
    terceraParteSello := lengthSello/2
    lineaSello1 := lineaSello[:terceraParteSello]
    lineaSello2 := lineaSello[terceraParteSello:]
    //lineaSello3 := lineaSello[terceraParteSello*2:]

    lineaSelloSAT := "Sello del SAT: "+selloSAT
    lengthSelloSAT := len(lineaSelloSAT)
    terceraParteSelloSAT := lengthSelloSAT/4
    lineaSelloSAT1 := lineaSelloSAT[:terceraParteSelloSAT]
    lineaSelloSAT2 := lineaSelloSAT[terceraParteSelloSAT:terceraParteSelloSAT*2]
    lineaSelloSAT3 := lineaSelloSAT[terceraParteSelloSAT*2:terceraParteSelloSAT*3]
    lineaSelloSAT4 := lineaSelloSAT[terceraParteSelloSAT*3:]
   
      pdf.CellFormat(0,0,tr(lineaSello1),"",1,"L",false,0,"")
      pdf.Ln(4)
      pdf.CellFormat(0,0,tr(lineaSello2),"",2,"L",false,0,"")
      pdf.Ln(4)
    //  pdf.CellFormat(0,0,tr(lineaSello3),"",2,"L",false,0,"")
      pdf.Ln(5)
      pdf.CellFormat(0,0,tr(lineaSelloSAT1),"",1,"L",false,0,"")
      pdf.Ln(4)
      pdf.CellFormat(0,0,tr(lineaSelloSAT2),"",2,"L",false,0,"")
      pdf.Ln(4)
      pdf.CellFormat(0,0,tr(lineaSelloSAT3),"",2,"L",false,0,"")
      pdf.Ln(4)
      pdf.CellFormat(0,0,tr(lineaSelloSAT4),"",2,"L",false,0,"")
      pdf.Ln(5)
      
    pdf.OutputFileAndClose(nombrePDF)
    
    

    example := map[string]interface{}{"success" : 1, "pdf" : nombrePDF }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
func dameNoCertificadoSegunRFC (rfc string) string {
  if rfc=="IAS930628FA8" {//TAMBO
    return "00001000000307190478"
  }
  if rfc=="IAS1610245E2" {//ANT
    return "00001000000406760642"
  }
  if rfc=="IAS161024N33" {//SONORA
    return "00001000000407084128"
  }
  if rfc=="IAS161024KU0" {//GOLFO
    return "00001000000407047411"
  }
  if rfc=="IAS160707FS4" {//Sinaloa
    return "00001000000406730421"
  }
  if rfc=="IAS161024796" {//Chihuahua
    return "00001000000406465085"
  }
  if rfc=="IAS161024RK9" {//Occidente
    return "00001000000406629683"
  }
  if rfc=="IAS160707U62" {//UMN
    return "00001000000406720491"
  }
  if rfc=="IAS161020KZ6" {//Noroccidental
    return "00001000000412126996"
  }
  if rfc=="IAS161024ER2" {//Baja Norte
    return "00001000000406656019"
  }
  if rfc=="IAS1610243N1" {//Baja Sur
    return "00001000000406557389"
  }
  if rfc=="IAS930629HZ1" {//Noreste 
    return "00001000000305906415"
  }
  if rfc=="IAS1610243P6" {//Noreste nuevo
    return "00001000000411704960"
  }
  if rfc=="IAS180719LX2" {//Regio nuevo
    return "00001000000411998935"
  }
  
  return ""
}
func (c *TimbraIngresosNewController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    //iva := c.GetString("iva")
    //ivaInput := c.GetString("ivaInput")
    idCliente := c.GetString("idCliente")
    idBanco := c.GetString("idBanco")
    conceptoAdicional := c.GetString("conceptoAdicional")
    metodoDePago := c.GetString("metodoDePago")
    deVerdad := c.GetString("deVerdad")
    //NumCtaPago := c.GetString("NumCtaPago")
    mes := c.GetString("mes")
    cuenta := c.GetString("cuenta")
    version := c.GetString("version")
    claveConcepto := c.GetString("claveConcepto")
    ClaveUnidad := c.GetString("ClaveUnidad")
    label := c.GetString("label")
    
    
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.Format(time.RFC3339)
    substring := string(dateString[0:10])
    dateStringSubString := string(dateString[0:19])

  

    if _, err := os.Stat("static/ingresos/"+BUNIT.(string)+"/"+idBanco+"-"+idCliente+"/"); os.IsNotExist(err) {
        checarError := os.MkdirAll("static/ingresos/"+BUNIT.(string)+"/"+idBanco+"-"+idCliente+"/", 0777)
        check(checarError)
    }
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    queryFolio := "SELECT ISNULL(MAX(folio),0) as folio FROM [Sevenplus].[dbo].["+BUNIT.(string)+"_zFacturas] WHERE BUNIT = '"+BUNIT.(string)+"'"
    rowsFolio, err := conn.Query(queryFolio)
    folioQueSigue := 0
    for rowsFolio.Next()  {
      rowsFolio.Scan(&folioQueSigue)
      folioQueSigue++
    }

    rfcEmisor := ""
    razonSocialOrigen := ""
    lugarExpedicion := ""
    regimen := ""
    direccion := ""
    telefono := ""
    correoCFDI := ""
    web := ""
    queryF := "SELECT rfc, razonSocial, lugarExpedicion, regimen, direccion, telefono, correoCFDI, web FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '"+BUNIT.(string)+"'"
    rowsF, err := conn.Query(queryF)

    if rowsF.Next()  {
      rowsF.Scan(&rfcEmisor, &razonSocialOrigen, &lugarExpedicion, &regimen, &direccion, &telefono, &correoCFDI, &web)
    }
    

    queryCliente := "SELECT rfc, razonSocial,  correo FROM [Sevenplus].[dbo].["+BUNIT.(string)+"_zClientes] WHERE idCliente = "+idCliente
    rowsCliente, err := conn.Query(queryCliente)
    rfc := ""
    razonSocial := ""
    correoPersona := ""
    if rowsCliente.Next()  {
      rowsCliente.Scan(&rfc, &razonSocial, &correoPersona)
    }
    //usoCFDI := ""
    importe := 0.0
    queryDatos := ""
        importe, _ = strconv.ParseFloat(c.GetString("importe"), 64)
    
    moneda := c.GetString("moneda")
    tipoDeCambio := c.GetString("tipoDeCambio")
      
    
    cantidad := fmt.Sprintf("%.2f", importe)
    
    var cadOriginal bytes.Buffer
    
    nombre := strings.TrimSpace(label)+conceptoAdicional 
    
    cadOriginal.WriteString(`||`+version+`|`)
    noCertificado := dameNoCertificadoSegunRFC(rfcEmisor)
    if version == "3.2" {
      /*if Compare(dateStringSubString,"") != 0 {
        cadOriginal.WriteString(dateStringSubString+`|ingreso|Pago en una sola exhibicion|`)
      }
      if Compare(cantidad,"") != 0 {
        cadOriginal.WriteString(cantidad+`|`)
      }
      cadOriginal.WriteString(``+tipoDeCambio+`|`+moneda+`|`)
      if Compare(cantidad,"") != 0 {
        if iva=="1" {
          cantidadFloat, _ := strconv.ParseFloat(cantidad, 64)
          ivaFloat, _ := strconv.ParseFloat(ivaInput, 64)
          totalAbsoluto := fmt.Sprintf("%.2f",cantidadFloat+ivaFloat)
          cadOriginal.WriteString(totalAbsoluto+`|`)
        } else {
          cadOriginal.WriteString(cantidad+`|`)       
        }
      }
      if Compare(metodoDePago,"") != 0 {
        cadOriginal.WriteString(metodoDePago+`|`)
      }
      if Compare(lugarExpedicion,"") != 0 {
        cadOriginal.WriteString(lugarExpedicion+`|`)
      }
      if Compare(NumCtaPago,"") != 0 {
        cadOriginal.WriteString(NumCtaPago+`|`)
      }
      
      cadOriginal.WriteString(``+rfcEmisor+`|`+razonSocialOrigen+`|`+regimen+`|`+rfc+`|`+razonSocial+`|1|No Aplica|`+nombre+`|`+cantidad+`|`+cantidad+`|`)
      
      if iva=="1" {
        cadOriginal.WriteString(`IVA|16.00|`+ivaInput+`|`+ivaInput+`||`) 
      } else {
        cadOriginal.WriteString(`IVA|0.00|0.00|0.00||`) 
      }*/
    } else {
      if version == "3.3" {
        cadOriginal.WriteString(`S|`+strconv.Itoa(folioQueSigue)+`|`+dateStringSubString+`|`+metodoDePago+`|`+noCertificado+`|`+cantidad+`|0.00|`+moneda+`|`+tipoDeCambio+`|`)
        cadOriginal.WriteString(cantidad+`|I|PUE|`+lugarExpedicion+`|`)
        cadOriginal.WriteString(rfcEmisor+`|`+razonSocialOrigen+`|`+regimen+`|`+rfc+`|`+razonSocial+`|G03|`+claveConcepto+`|777|1.00000|`+ClaveUnidad+`|`+nombre+`|`+cantidad+`|`+cantidad+`||`)
      }
    }
      

    
    fmt.Println(cadOriginal.String())
    byteArray := []byte(substring)
    hasher := sha512.New()
      hasher.Write(byteArray)
    cryptoText := base64.StdEncoding.EncodeToString(  []byte(hex.EncodeToString(hasher.Sum(nil))))
    type TypeDocument struct{
      StampedDocument string
    }
    hc := http.Client{}
      form := url.Values{}
      form.Add("originalCad", cadOriginal.String())
      form.Add("cryptoText", cryptoText)
      form.Add("tipo", "2")//2 = ingresos
      form.Add("cuantosConceptos", "1")
      form.Add("deVerdad", deVerdad)
      form.Add("folio", strconv.Itoa(folioQueSigue))
      form.Add("serie", "S")
      
    req, err := http.NewRequest("POST", "http://miscuentas.adventistasumn.org/timbra3.3.php", strings.NewReader(form.Encode()))
    if version == "3.3" {
      req, err = http.NewRequest("POST", "http://miscuentas.unionnorte.org/timbra3.3.php", strings.NewReader(form.Encode()))
      //req, err = http.NewRequest("POST", "http://miscuentas.adventistasumn.org/timbra3.3.php", strings.NewReader(form.Encode()))
    }   
      req.PostForm = form
      req.Header.Add("Content-Type", "application/x-www-form-urlencoded")

      resp, err := hc.Do(req)  
      DocumentObject := TypeDocument {StampedDocument:"hola"}
      err = json.NewDecoder(resp.Body).Decode(&DocumentObject)
          
      fmt.Println(DocumentObject)
    if strings.Contains(DocumentObject.StampedDocument, "ErrorCode") || strings.Contains(DocumentObject.StampedDocument, "hola")  {
          example := map[string]interface{}{"success" : -1, "error" :  DocumentObject.StampedDocument, "revisar" : cadOriginal}
      c.Data["json"] = &example
      c.ServeJSON()
        } else {  
      //nombreXML := "static/ingresos/"+BUNIT.(string)+"/"+idBanco+"-"+idCliente+"/S"+ strconv.Itoa(folioQueSigue)+"_"+BUNIT.(string)+".xml"
        nombreXML := "static/ingresos/"+BUNIT.(string)+"/S"+ strconv.Itoa(folioQueSigue)+"_"+BUNIT.(string)+".xml"
    f, err := os.Create(nombreXML)
      check(err)//MkdirAll
      defer f.Close()
      n3, err := f.WriteString(DocumentObject.StampedDocument)
      fmt.Printf("wrote %d bytes\n", n3)
      f.Sync()
      indexUUID := strings.Index(DocumentObject.StampedDocument, "UUID")
      UUID := DocumentObject.StampedDocument[indexUUID+6:indexUUID+42]

      selloCFDIndex := strings.Index(DocumentObject.StampedDocument, "SelloCFD")
      selloCFDPreview := DocumentObject.StampedDocument[selloCFDIndex+10:]
      selloCFDIndexPrima := strings.Index(selloCFDPreview, "\"")
        selloCFD := selloCFDPreview[:selloCFDIndexPrima]

        selloIndex := strings.Index(DocumentObject.StampedDocument, "Sello=")
      selloPreview := DocumentObject.StampedDocument[selloIndex+7:]
      selloIndexPrima := strings.Index(selloPreview, "\"")
        sello := selloPreview[:selloIndexPrima]



        selloSATIndex := strings.Index(DocumentObject.StampedDocument, "SelloSAT")
      selloSATPreview := DocumentObject.StampedDocument[selloSATIndex+10:]
      selloSATIndexPrima := strings.Index(selloSATPreview, "\"")
        selloSAT := selloSATPreview[:selloSATIndexPrima]

        NoCertificadoSATIndex := strings.Index(DocumentObject.StampedDocument, "NoCertificadoSAT")
      NoCertificadoSATPreview := DocumentObject.StampedDocument[NoCertificadoSATIndex+18:]
      NoCertificadoSATIndexPrima := strings.Index(NoCertificadoSATPreview, "\"")
        NoCertificadoSAT := NoCertificadoSATPreview[:NoCertificadoSATIndexPrima]

        FechaTimbradoIndex := strings.Index(DocumentObject.StampedDocument, "FechaTimbrado")
      FechaTimbradoPreview := DocumentObject.StampedDocument[FechaTimbradoIndex+15:]
      FechaTimbradoIndexPrima := strings.Index(FechaTimbradoPreview, "\"")
        FechaTimbrado := FechaTimbradoPreview[:FechaTimbradoIndexPrima]

        RfcProvCertifIndex := strings.Index(DocumentObject.StampedDocument, "RfcProvCertif")
      RfcProvCertifPreview := DocumentObject.StampedDocument[RfcProvCertifIndex+15:]
      RfcProvCertifIndexPrima := strings.Index(RfcProvCertifPreview, "\"")
        RfcProvCertif := RfcProvCertifPreview[:RfcProvCertifIndexPrima]



      MetodoDePagoString := ""
      if Compare(metodoDePago,"01")==0 {
        MetodoDePagoString = "Efectivo"
      }
      if Compare(metodoDePago,"02")==0 {
        MetodoDePagoString = "Cheque"
      }
      if Compare(metodoDePago,"03")==0 {
        MetodoDePagoString = "Transferencia"
      }
      if Compare(metodoDePago,"04")==0 {
        MetodoDePagoString = "Tarjeta de credito"
      }
      if Compare(metodoDePago,"05")==0 {
        MetodoDePagoString = "Monedero electronico"
      }
      if Compare(metodoDePago,"06")==0 {
        MetodoDePagoString = "Dinero electronico"
      }
      if Compare(metodoDePago,"08")==0 {
        MetodoDePagoString = "Vales de despensa"
      }
      if Compare(metodoDePago,"28")==0 {
        MetodoDePagoString = "Tarjeta de debito"
      }
      if Compare(metodoDePago,"29")==0 {
        MetodoDePagoString = "Tarjeta de servicio"
      }
      if Compare(metodoDePago,"99")==0 {
        MetodoDePagoString = "Otros"
      }
    //nombrePDF := "static/ingresos/"+BUNIT.(string)+"/"+idBanco+"-"+idCliente+"/S"+strconv.Itoa(folioQueSigue)+"_"+BUNIT.(string)+".pdf"
    nombrePDF := "static/ingresos/"+BUNIT.(string)+"/S"+strconv.Itoa(folioQueSigue)+"_"+BUNIT.(string)+".pdf"

    pdf := gofpdf.New("P", "pt", "A4", "")//mm
    tr := pdf.UnicodeTranslatorFromDescriptor("")
    pdf.SetHeaderFunc(func() {
        
    })
    pdf.SetFooterFunc(func() {
    //  pdf.SetY(-15)
    //  pdf.SetFont("Arial", "I", 8)
    //  pdf.CellFormat(0, 10, fmt.Sprintf("Page %d", pdf.PageNo()),"", 0, "C", false, 0, "")
    })
    pdf.AddPage()
    //f.stdPageSizes["a4"] = SizeType{595.28, 841.89}
    //595.28/7 = 85.04
    //85.04 * 6 = 510.24
    //85.04 - 14 = 71.04
    //255.12-58=197.12
    //509.24       21
    pdf.Image("logo.png", 517.24, 720, 71.04, 71.04, false, "", 0, "")
    pdf.Image("static/flama.png", 517.24, 0, 242.08, 601.04, false, "", 0, "")
   // pdf.AddFont("Advent Sans", "", "static/Advent.json")
    //pdf.SetFont("Advent Sans", "", 16)
    pdf.SetFont("Arial", "", 14)
    pdf.SetTextColor(5, 121, 134)
    pdf.SetXY(0, 8)
    pdf.MultiCell(510.24,20,tr(razonSocialOrigen),"","C",false)

    

    pdf.SetFillColor(5, 121, 134)
    pdf.SetDrawColor(5, 121, 134)
    pdf.Line(509.24,110,509.24,790)
    pdf.Line(508.24,110,508.24,790)
    
    
    pdf.Line(21,90,498.24,90)
    pdf.Line(21,91,498.24,91)
    
    pdf.SetFillColor(234, 230, 228)
    pdf.SetDrawColor(234, 230, 228)
    
    
    pdf.SetFont("Arial", "", 12)
    pdf.SetXY(197.12, 42)
    fill := false
    fill = !fill
    
    pdf.CellFormat(116,18,tr("RFC: "+rfcEmisor),"",1,"C",fill,0,"")
    
    pdf.SetFont("Arial", "", 6)

    pdf.Image("static/gps.png", 15, 40, 15, 15, false, "", 0, "")//direccion
    pdf.SetXY(29, 40)
    pdf.MultiCell( 100,6,tr(direccion),"","L",false)
    
    pdf.Image("static/tel.png", 15, 70, 15, 15, false, "", 0, "")//telefono
    pdf.SetXY(29, 75)
    pdf.MultiCell( 100,6,tr(telefono),"","L",false)

    pdf.Image("static/mail.png", 481.24, 40, 15, 15, false, "", 0, "")//correo
    pdf.SetXY(381.24, 45)
    pdf.MultiCell( 100,6,tr(correoCFDI),"","R",false)


    pdf.Image("static/web.png", 481.24, 70, 15, 15, false, "", 0, "")//web
    pdf.SetXY(381.24, 75)
    pdf.MultiCell( 100,6,tr(web),"","R",false)

    
    
    //499.24-20=479.24
    //479.24/9=53.2489
    //53.2489*2=106.4978
    //53.2489*5=266.2445
    pdf.SetTextColor(0, 0, 0)
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(20, 100)
    pdf.MultiCell(266.2445,12,tr("RÉGIMEN FISCAL:"),"","L",fill)

    pdf.SetXY(20+266.2445, 100)
    pdf.MultiCell(106.4978,12,tr("FECHA:"),"","L",fill)

    pdf.SetXY(20+266.2445+106.4978, 100)
    pdf.MultiCell(106.4978,12,tr("HORA:"),"","L",fill)

    pdf.Line(20,100,20,125)
    pdf.Line(20+266.2445,100,20+266.2445,125)
    pdf.Line(20+266.2445+106.4978,100,20+266.2445+106.4978,125)
    pdf.Line(20+266.2445+106.4978+106.4978,100,20+266.2445+106.4978+106.4978,125)
    pdf.Line(20,125,20+266.2445+106.4978+106.4978,125)

    pdf.SetTextColor(5, 121, 134)
    pdf.SetXY(20, 113)
    rs := "Personas morales con fines no lucrativos"
    if regimen != "603" {
      rs = "HEY CHECA TU REGIMEN, ESTÁ MAL"
    }
    pdf.MultiCell(266.2445,12,tr(regimen+" - "+rs),"","C",false)

    x := strings.Split(dateStringSubString, "T")

    pdf.SetXY(20+266.2445, 113)
    pdf.MultiCell(106.4978,12,tr(x[0]),"","C",false)
    pdf.SetXY(20+266.2445+106.4978, 113)
    pdf.MultiCell(106.4978,12,tr(x[1]),"","C",false)

    //RECEPTOR
    pdf.SetTextColor(0, 0, 0)
    pdf.SetXY(20, 130)
    pdf.MultiCell(479.24,12,tr("RECEPTOR:"),"","L",fill)

    pdf.Line(20,130,20,179)
    pdf.Line(20+479.24,130,20+479.24,179)
    pdf.Line(20,179,20+479.24,179)

    pdf.SetTextColor(5, 121, 134)
    pdf.SetXY(20, 143)
    pdf.MultiCell(479.24,12,tr(razonSocial),"","L",false)
    pdf.SetXY(20, 155)
    pdf.MultiCell(479.24,12,tr("RFC: "+rfc),"","L",false)
    pdf.SetXY(20, 167)
    pdf.MultiCell(479.24,12,tr("Uso CFDI: G03"),"","L",false)

    //UUID
    pdf.SetTextColor(0, 0, 0)
    pdf.SetXY(20, 184)
    pdf.MultiCell(479.24,12,tr("FOLIO FISCAL:"),"","L",fill)
    pdf.Line(20,184,20,209)
    pdf.Line(20+479.24,184,20+479.24,209)
    pdf.Line(20,209,20+479.24,209)
    pdf.SetTextColor(5, 121, 134)
    pdf.SetXY(20, 197)
    pdf.MultiCell(479.24,12,tr(UUID),"","C",false)

    //No. de Serie del Certificado del CSD:
    pdf.SetTextColor(0, 0, 0)
    pdf.SetXY(20, 214)
    pdf.MultiCell(479.24,12,tr("No. de Serie del Certificado del CSD:"),"","L",fill)
    pdf.Line(20,214,20,239)
    pdf.Line(20+479.24,214,20+479.24,239)
    pdf.Line(20,239,20+479.24,239)
    pdf.SetTextColor(5, 121, 134)
    pdf.SetXY(20, 227)
    pdf.MultiCell(479.24,12,tr(noCertificado),"","C",false)

//ClaveProdServ=8 NoIdentificacion=3 Cantidad=7 ClaveUnidad=3 Descripcion=20 
//ValorUnitario=10 Importe=10
    // 61!
    //479.24 / 61 = 7.85639344262
    //7.85639344262 *  3 = 23.5691803279
    //7.85639344262 *  8 = 62.851147541
    //7.85639344262 *  7 = 54.9947540983
    //7.85639344262 *  10 = 78.5639344262
    //7.85639344262 *  20 = 157.127868852
    //CONCEPTOS
    pdf.SetFont("Arial", "", 10)
    cantidadFloat, _ := strconv.ParseFloat(cantidad, 64)
      ac := accounting.Accounting{Symbol: "$", Precision: 2}
    
    pdf.SetTextColor(0, 0, 0)
    pdf.SetXY(20, 244)
    pdf.SetFont("Arial", "", 8)
    pdf.MultiCell(62.851147541,12,tr("ClaveProdServ"),"","C",fill)
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(20+62.851147541, 244)
    pdf.MultiCell(23.5691803279,12,tr("N.I."),"","C",fill)
    pdf.SetXY(20+62.851147541+23.5691803279, 244)
    pdf.MultiCell(54.9947540983,12,tr("Cantidad"),"","C",fill)
    pdf.SetXY(20+62.851147541+23.5691803279+54.9947540983, 244)
    pdf.SetFont("Arial", "", 8)
    pdf.MultiCell(23.5691803279,12,tr("C.U."),"","C",fill)
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(20+62.851147541+23.5691803279+54.9947540983+23.5691803279, 244)
    pdf.MultiCell(157.127868852,12,tr("Descripción"),"","C",fill)
    pdf.SetXY(20+62.851147541+23.5691803279+54.9947540983+23.5691803279+157.127868852, 244)
    pdf.MultiCell(78.5639344262,12,tr("Valor unitario"),"","C",fill)
    pdf.SetXY(20+62.851147541+23.5691803279+54.9947540983+23.5691803279+157.127868852+78.5639344262, 244)
    pdf.MultiCell(78.5639344262,12,tr("Importe"),"","C",fill)
    pdf.Line(20,244,20,293)
    pdf.Line(20+62.851147541,244,20+62.851147541,293)
    pdf.Line(20+62.851147541+23.5691803279,244,20+62.851147541+23.5691803279,293)
    pdf.Line(20+62.851147541+23.5691803279+54.9947540983,244,20+62.851147541+23.5691803279+54.9947540983,293)
    pdf.Line(20+62.851147541+23.5691803279+54.9947540983+23.5691803279,244,20+62.851147541+23.5691803279+54.9947540983+23.5691803279,293)
    pdf.Line(20+62.851147541+23.5691803279+54.9947540983+23.5691803279+157.127868852,244,20+62.851147541+23.5691803279+54.9947540983+23.5691803279+157.127868852,293)
    pdf.Line(20+62.851147541+23.5691803279+54.9947540983+23.5691803279+157.127868852+78.5639344262,244,20+62.851147541+23.5691803279+54.9947540983+23.5691803279+157.127868852+78.5639344262,293)
    pdf.Line(20+479.24,244,20+479.24,293)
    pdf.Line(20,293,20+479.24,293)
    pdf.SetTextColor(5, 121, 134)
    pdf.SetXY(20, 257)
    pdf.MultiCell(62.851147541,12,tr(claveConcepto),"","C",false)
    pdf.SetXY(20+62.851147541, 257)
    pdf.MultiCell(23.5691803279,12,tr("777"),"","C",false)
    pdf.SetXY(20+62.851147541+23.5691803279, 257)
    pdf.MultiCell(54.9947540983,12,tr("1.00000"),"","C",false)
    pdf.SetXY(20+62.851147541+23.5691803279+54.9947540983, 257)
    pdf.SetFont("Arial", "", 8)
    pdf.MultiCell(23.5691803279,12,tr(ClaveUnidad),"","C",false)
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(20+62.851147541+23.5691803279+54.9947540983+23.5691803279, 257)
    pdf.MultiCell(157.127868852,12,tr(nombre),"","C",false)
    pdf.SetXY(20+62.851147541+23.5691803279+54.9947540983+23.5691803279+157.127868852, 257)
    pdf.MultiCell(78.5639344262,12,ac.FormatMoney(cantidadFloat),"","C",false)
    pdf.SetXY(20+62.851147541+23.5691803279+54.9947540983+23.5691803279+157.127868852+78.5639344262, 257)
    pdf.MultiCell(78.5639344262,12,ac.FormatMoney(cantidadFloat),"","C",false)
    //94111901|777|1.00000|ACT|`+nombre+`|`+cantidad+`|`+cantidad+`||`)
    
    //LugarDeExpedicion MetodoPago FormaPago TipoDeComprobante 
    //479.24 
    //100  +89.24+ 130 +160     
    pdf.SetTextColor(0, 0, 0)
    pdf.SetXY(20, 298)
    pdf.MultiCell(100,12,tr("LugarExpedicion"),"","C",fill)
    pdf.SetXY(120, 298)
    pdf.MultiCell(89.24,12,tr("MetodoPago"),"","C",fill)
    pdf.SetXY(209.24, 298)
    pdf.MultiCell(130,12,tr("FormaPago"),"","C",fill)
    pdf.SetXY(339.24, 298)
    pdf.MultiCell(160,12,tr("TipoDeComprobante"),"","C",fill)


    pdf.Line(20,298,20,335)
    pdf.Line(120,298,120,335)
    pdf.Line(209.24,298,209.24,335)
    pdf.Line(339.24,298,339.24,335)
    pdf.Line(20+479.24,298,20+479.24,335)
    pdf.Line(20,335,20+479.24,335)

    pdf.SetTextColor(5, 121, 134)
    pdf.SetXY(20, 311)
    pdf.MultiCell(100,12,tr(lugarExpedicion),"","C",false)
    pdf.SetXY(120, 311)
    pdf.MultiCell(89.24,12,tr("PUE"),"","C",false)
    pdf.SetXY(209.24, 311)
    pdf.MultiCell(130,12,tr(metodoDePago+"-"+MetodoDePagoString),"","C",false)
    pdf.SetXY(339.24, 311)
    pdf.MultiCell(160,12,tr("I - Ingreso"),"","C",false)
    //Serie Folio  Moneda  ImporteLetra
    //479.24 
    //70  + 70 + 70 +269.24     
    pdf.SetTextColor(0, 0, 0)
    pdf.SetXY(20, 340)
    pdf.MultiCell(70,12,tr("Serie"),"","C",fill)
    pdf.SetXY(90, 340)
    pdf.MultiCell(70,12,tr("Folio"),"","C",fill)
    pdf.SetXY(160, 340)
    pdf.MultiCell(70,12,tr("Moneda"),"","C",fill)
    pdf.SetXY(230, 340)
    pdf.MultiCell(269.24,12,tr("Importe con letra"),"","C",fill)

    pdf.Line(20,340,20,377)
    pdf.Line(90,340,90,377)
    pdf.Line(160,340,160,377)
    pdf.Line(230,340,230,377)
    pdf.Line(20+479.24,340,20+479.24,377)
    pdf.Line(20,377,20+479.24,377)

    pdf.SetTextColor(5, 121, 134)
    pdf.SetXY(20, 353)
    pdf.MultiCell(70,12,tr("S"),"","C",false)
    pdf.SetXY(90, 353)
    pdf.MultiCell(70,12,tr(strconv.Itoa(folioQueSigue)),"","C",false)
    pdf.SetXY(160.24, 353)
    pdf.MultiCell(70,12,tr(moneda),"","C",false)
    pdf.SetXY(230.24, 353)
    strImporte := FloatToString(importe)
    puntos := strings.Split(strImporte, ".")
    centavos := puntos[1]
    str := numerosAPalabras.Convert(importe)+" "+centavos+"/100 M.N."
    pdf.MultiCell(269.24,12,tr(str),"","C",false)
    key := barcode.RegisterQR(pdf, "?re="+rfcEmisor+"&rr="+rfc+"&id="+UUID, qr.H, qr.Unicode)
    barcode.Barcode(pdf, key, 15, 383, 120, 120, false)

    ex := 423.0

    pdf.Line(150,ex,499.24,ex)
    pdf.SetXY(150, ex)
    pdf.MultiCell(349.24,12,tr("Subtotal:"),"","L",false)
    pdf.SetXY(150, ex)
    pdf.MultiCell(349.24,12,tr(ac.FormatMoney(cantidadFloat)),"","R",false)
    pdf.Line(150,ex,150,ex+36)
    pdf.Line(499.24,ex,499.24,ex+36)
    ex+=12
    pdf.SetXY(150, ex)
    pdf.MultiCell(349.24,12,tr("IVA:"),"","L",false)
    pdf.SetXY(150, ex)
    pdf.MultiCell(349.24,12,tr("$ 0.00"),"","R",false)
    pdf.Line(150,ex,499.24,ex)
    ex+=12
    pdf.SetXY(150, ex)
    pdf.MultiCell(349.24,12,tr("Total:"),"","L",false)
    pdf.SetXY(150, ex)
    pdf.MultiCell(349.24,12,tr(ac.FormatMoney(cantidadFloat)),"","R",false)
    pdf.Line(150,ex,499.24,ex)
    ex+=12
    pdf.Line(150,ex,499.24,ex)
    
    pdf.SetTextColor(0, 0, 0)
    pdf.SetFont("Arial", "", 8)
    ex = 510
    pdf.SetXY(20, ex)
    pdf.MultiCell(479.24,12,tr("Sello Digital del CFDI: "+selloCFD),"","L",false)

    ex+=64
    pdf.SetXY(20, ex)
    pdf.MultiCell(479.24,12,tr("Sello del SAT: "+selloSAT),"","L",false)

    ex+=64
    pdf.SetXY(20, ex)
    pdf.MultiCell(479.24,12,tr("No de serie del Certificado del SAT: "+NoCertificadoSAT),"","L",false)

    ex+=14
    pdf.SetXY(20, ex)
    pdf.MultiCell(479.24,12,tr("Fecha y hora de certificación: "+FechaTimbrado),"","L",false)

    ex+=14
    pdf.SetXY(20, ex)
    pdf.MultiCell(479.24,12,tr("Rfc del proveedor del certificado: "+RfcProvCertif),"","L",false)

    cadenaOriginalSAT := "||1.0|"+UUID+"|"+FechaTimbrado+"|"+sello+"|"+NoCertificadoSAT+"||"
    ex+=14
    pdf.SetXY(20, ex)
    pdf.MultiCell(479.24,12,tr("Cadena original del SAT: "+cadenaOriginalSAT),"","L",false)

    ex+=82
    pdf.SetXY(20, ex)
    pdf.MultiCell(479.24,12,tr("Este documento es una representación impresa de un CFDI                          Versión 3.3"),"","L",false)
    pdf.OutputFileAndClose(nombrePDF)
    if deVerdad == "1" {
      queryZ := `INSERT INTO [Sevenplus].[dbo].[`+BUNIT.(string)+`_zFacturas] (folio,BUNIT,xml,pdf,xmlText,UUID, cantidad)
      VALUES (`+strconv.Itoa(folioQueSigue)+`, '`+BUNIT.(string)+`','`+nombreXML+`','`+nombrePDF+`','`+DocumentObject.StampedDocument+`','`+UUID+`','`+cantidad+`')`
      conn.Exec(queryZ)
      if idBanco == "-1" {
        //select all idbanco de arriba y hacer un insert a cada uno
        idBanco1 := 0
        importe1 := 0.0
        queryDatos = `SELECT  z.importe, z.idBanco
          FROM [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] z
          WHERE z.BUNIT = '`+BUNIT.(string)+`' AND
          SUBSTRING(z.fecha,4,8) = '`+mes+`' AND z.CuentaPropia != 1 AND z.STATUS = 2 AND z.cuenta = '`+cuenta+`'
          AND z.timbrado = 0`
        rowsDatos, _ := conn.Query(queryDatos)
        for rowsDatos.Next()  {
          rowsDatos.Scan(&importe1, &idBanco1)
          cantidad1 := fmt.Sprintf("%.2f", importe1)
          queryD := `INSERT INTO [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] (idBanco,FOLIO_FISCAL,AMOUNT)  VALUES 
          (`+strconv.Itoa(idBanco1)+`, '`+UUID+`', `+cantidad1+`)`
          conn.Exec(queryD)
        }
      } else {
        queryD := `INSERT INTO [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_FISCAL_banco] (idBanco,FOLIO_FISCAL,AMOUNT)  VALUES 
        (`+idBanco+`, '`+UUID+`', `+cantidad+`)`
        conn.Exec(queryD)
      }
      if idBanco == "-1" {
        queryDD := `UPDATE [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] SET timbrado = 1, UUID = '`+UUID+`' WHERE cuenta = '`+cuenta+`'
        AND SUBSTRING(fecha,4,8) = '`+mes+`'  AND CuentaPropia != 1 AND STATUS = 2 AND BUNIT = '`+BUNIT.(string)+`'
        AND timbrado = 0`
        conn.Exec(queryDD)  
      } else {
        queryDD := `UPDATE [Sevenplus].[dbo].[`+BUNIT.(string)+`_zBancos] SET timbrado = 1, UUID = '`+UUID+`' WHERE idBanco = `+idBanco
        conn.Exec(queryDD)  
      }
      

      d := gomail.NewDialer("smtp.gmail.com", 587, "alonsopf@gmail.com", "dank_Gott1863")
        //d.TLSConfig = &tls.Config{InsecureSkipVerify: true}
        m := gomail.NewMessage()
      m.SetHeader("From", "alonsopf@gmail.com")
      correo := c.GetSession("usuario")
      m.SetHeader("To", correo.(string), correoPersona)
      //m.SetAddressHeader("Cc", "dan@example.com", "Dan")
      m.SetHeader("Subject", "Hola, tu factura con Serie S y Folio: "+strconv.Itoa(folioQueSigue))
      m.SetBody("text/html", "Hola! Tu factura con Serie S y Folio "+strconv.Itoa(folioQueSigue)+" esta adjunta en formato PDF y XML. Favor de no responder este correo.")
      m.Attach("C:/work/src/sevenplus/"+nombrePDF)
      m.Attach("C:/work/src/sevenplus/"+nombreXML)

      // Send the email to Bob, Cora and Dan.
      if err := d.DialAndSend(m); err != nil {
          fmt.Println(err)
      }
    }
    

    example := map[string]interface{}{"success" : 1, "pdf" : nombrePDF, "xml" : nombreXML }
    c.Data["json"] = &example
    c.ServeJSON()
    }//else
  }
}
func (c *TimbrarFacturaDeIngresoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    cantidad := c.GetString("cantidad")
    nombre := c.GetString("nombre")
    diario := c.GetString("diario")
    linea := c.GetString("linea")
    RFC := c.GetString("RFC")
    RazonSocial := c.GetString("RazonSocial")
    correoPersona := c.GetString("correo")
    NumCtaPago := c.GetString("NumCtaPago")
    MetodoDePago := c.GetString("MetodoDePago")

    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.Format(time.RFC3339)
    substring := string(dateString[0:10])
    dateStringSubString := string(dateString[0:19])

    if _, err := os.Stat("static/ingresos/"+BUNIT.(string)+"/"+diario+"-"+linea+"/"); os.IsNotExist(err) {
        os.MkdirAll("static/ingresos/"+BUNIT.(string)+"/"+diario+"-"+linea+"/", 0777)
    }
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    queryFolio := "SELECT ISNULL(MAX(folio),0) as folio FROM [Sevenplus].[dbo].["+BUNIT.(string)+"_zFacturas] WHERE BUNIT = '"+BUNIT.(string)+"'"
    rowsFolio, err := conn.Query(queryFolio)
    folioQueSigue := 0
    for rowsFolio.Next()  {
      rowsFolio.Scan(&folioQueSigue)
      folioQueSigue++
    }

    queryDatos := "SELECT rfc, regimen, razonSocial, regPatronal, lugarExpedicion FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '"+BUNIT.(string)+"'"
    rowsDatos, err := conn.Query(queryDatos)
    var rfcEmisor string
    var regimen string
    var razonSocial string
    var regPatronal string
    var lugarExpedicion string
    for rowsDatos.Next()  {
      rowsDatos.Scan(&rfcEmisor, &regimen, &razonSocial, &regPatronal, &lugarExpedicion)
      rfcEmisor = strings.TrimSpace(rfcEmisor)
      regimen = strings.TrimSpace(regimen)
      razonSocial = strings.TrimSpace(razonSocial)
      regPatronal = strings.TrimSpace(regPatronal)
      lugarExpedicion = strings.TrimSpace(lugarExpedicion)
    }

    //var buffer bytes.Buffer
    var cadOriginal bytes.Buffer
    cadOriginal.WriteString(`||3.2|`)
    if Compare(dateStringSubString,"") != 0 {
      cadOriginal.WriteString(dateStringSubString+`|ingreso|Pago en una sola exhibicion|`)
    }
    if Compare(cantidad,"") != 0 {
      cadOriginal.WriteString(cantidad+`|`)
    }
    cadOriginal.WriteString(`1|MXN|`)
    if Compare(cantidad,"") != 0 {
      cadOriginal.WriteString(cantidad+`|`)
    }
    if Compare(MetodoDePago,"") != 0 {
      cadOriginal.WriteString(MetodoDePago+`|`)
    }
    if Compare(lugarExpedicion,"") != 0 {
      cadOriginal.WriteString(lugarExpedicion+`|`)
    }
    if Compare(NumCtaPago,"") != 0 {
      cadOriginal.WriteString(NumCtaPago+`|`)
    }
    cadOriginal.WriteString(``+rfcEmisor+`|`+razonSocial+`|`+regimen+`|`+RFC+`|`+RazonSocial+`|1|No Aplica|`+nombre+`|`+cantidad+`|`+cantidad+`|`)    
    cadOriginal.WriteString(`IVA|0.00|0.00|0.00||`) 
    byteArray := []byte(substring)
    hasher := sha512.New()
      hasher.Write(byteArray)
    cryptoText := base64.StdEncoding.EncodeToString(  []byte(hex.EncodeToString(hasher.Sum(nil))))
    type TypeDocument struct{
      StampedDocument string
    }
    /*type Respuesta struct{
        Success int
        Hash string
        Sello string
        Original string
        CFDI string
        Documento TypeDocument
    }*/
    hc := http.Client{}
      form := url.Values{}
      form.Add("originalCad", cadOriginal.String())
      form.Add("cryptoText", cryptoText)
      form.Add("tipo", "2")//2 = ingresos
      form.Add("cuantosConceptos", "1")
      form.Add("deVerdad", "1")
      form.Add("folio", strconv.Itoa(folioQueSigue))
      form.Add("serie", "S")
      
    req, err := http.NewRequest("POST", "http://miscuentas.adventistasumn.org/timbra.php", strings.NewReader(form.Encode()))
      req.PostForm = form
      req.Header.Add("Content-Type", "application/x-www-form-urlencoded")

      resp, err := hc.Do(req)  
      DocumentObject := TypeDocument {StampedDocument:"hola"}
      //RespuestaObject := Respuesta{Success: -1, Hash: "", Sello: "", Original: ""}
      err = json.NewDecoder(resp.Body).Decode(&DocumentObject)
          
      fmt.Println(DocumentObject)
    if strings.Contains(DocumentObject.StampedDocument, "ErrorCode") || strings.Contains(DocumentObject.StampedDocument, "hola")  {
          example := map[string]interface{}{"success" : -1, "error" :  DocumentObject.StampedDocument, "revisar" : cadOriginal}
      c.Data["json"] = &example
      c.ServeJSON()
        } else {  

    nombreXML := "static/ingresos/"+BUNIT.(string)+"/"+diario+"-"+linea+"/S"+ strconv.Itoa(folioQueSigue)+"_"+BUNIT.(string)+".xml"
    f, err := os.Create(nombreXML)
      check(err)
      defer f.Close()
      n3, err := f.WriteString(DocumentObject.StampedDocument)
      fmt.Printf("wrote %d bytes\n", n3)
      f.Sync()
      indexUUID := strings.Index(DocumentObject.StampedDocument, "UUID")
      UUID := DocumentObject.StampedDocument[indexUUID+6:indexUUID+42]

      selloCFDIndex := strings.Index(DocumentObject.StampedDocument, "selloCFD")
      selloCFDPreview := DocumentObject.StampedDocument[selloCFDIndex+10:]
      selloCFDIndexPrima := strings.Index(selloCFDPreview, "\"")
        selloCFD := selloCFDPreview[:selloCFDIndexPrima]


        selloSATIndex := strings.Index(DocumentObject.StampedDocument, "selloSAT")
      selloSATPreview := DocumentObject.StampedDocument[selloSATIndex+10:]
      selloSATIndexPrima := strings.Index(selloSATPreview, "\"")
        selloSAT := selloSATPreview[:selloSATIndexPrima]

      MetodoDePagoString := ""
      if Compare(MetodoDePago,"01")==0 {
        MetodoDePagoString = "Efectivo"
      }
      if Compare(MetodoDePago,"02")==0 {
        MetodoDePagoString = "Cheque"
      }
      if Compare(MetodoDePago,"03")==0 {
        MetodoDePagoString = "Transferencia"
      }
      if Compare(MetodoDePago,"04")==0 {
        MetodoDePagoString = "Tarjeta de credito"
      }
      if Compare(MetodoDePago,"05")==0 {
        MetodoDePagoString = "Monedero electronico"
      }
      if Compare(MetodoDePago,"06")==0 {
        MetodoDePagoString = "Dinero electronico"
      }
      if Compare(MetodoDePago,"08")==0 {
        MetodoDePagoString = "Vales de despensa"
      }
      if Compare(MetodoDePago,"28")==0 {
        MetodoDePagoString = "Tarjeta de debito"
      }
      if Compare(MetodoDePago,"29")==0 {
        MetodoDePagoString = "Tarjeta de servicio"
      }
      if Compare(MetodoDePago,"99")==0 {
        MetodoDePagoString = "Otros"
      }
    nombrePDF := "static/ingresos/"+BUNIT.(string)+"/"+diario+"-"+linea+"/S"+strconv.Itoa(folioQueSigue)+"_"+BUNIT.(string)+".pdf"

    pdf := gofpdf.New("P", "mm", "A4", "")
    tr := pdf.UnicodeTranslatorFromDescriptor("")
    pdf.SetHeaderFunc(func() {
        
    })
    pdf.SetFooterFunc(func() {
    //  pdf.SetY(-15)
    //  pdf.SetFont("Arial", "I", 8)
    //  pdf.CellFormat(0, 10, fmt.Sprintf("Page %d", pdf.PageNo()),"", 0, "C", false, 0, "")
    })
    pdf.AddPage()
    pdf.Image("logo.png", 10, 3, 30, 0, false, "", 0, "")
    pdf.SetFont("Arial", "", 16)
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(0, 10)
    pdf.CellFormat(0,0,tr("Lugar de expedición: "+lugarExpedicion),"",1,"R",false,0,"")
    pdf.SetXY(0, 14)
    pdf.CellFormat(0,0,tr("Num. Cta. de Pago: "+NumCtaPago),"",1,"R",false,0,"")
    pdf.SetXY(0, 18)
    pdf.CellFormat(0,0,tr("Fecha de generación: "+dateStringSubString),"",1,"R",false,0,"")
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(0, 22)
    pdf.CellFormat(0,0,tr("UUID: "+UUID),"",1,"R",false,0,"")
    pdf.SetXY(0, 26)
    pdf.CellFormat(0,0,tr("RFC Emisor: "+rfcEmisor),"",1,"R",false,0,"")
    pdf.SetXY(0, 30)
    pdf.CellFormat(0,0,tr("Reg Fiscal: "+regimen),"",1,"R",false,0,"")
    pdf.SetFont("Arial", "", 10)
    
    pdf.SetFont("Arial", "", 10)
    pdf.SetXY(140, 7)
    pdf.SetFont("Arial", "", 8)
        
    pdf.SetFont("Arial", "B", 11)
    pdf.SetXY(10, 40)
    pdf.Cell(0, 0, " Tipo de comprobante: ingreso ")
    pdf.SetXY(10, 47)
    pdf.SetFont("Arial", "", 11)
    pdf.Cell(0, 0, "RFC: "+RFC)
    pdf.SetXY(10, 54)
    pdf.Cell(0, 0, "Razon social: "+tr(RazonSocial))
    pdf.SetXY(10, 61)
    pdf.Cell(0, 0, tr("Metodo de pago: "+MetodoDePagoString))
    pdf.SetXY(10, 68)
    pdf.Cell(0, 0, "Serie: S")
    pdf.SetXY(10, 75)
    pdf.Cell(0, 0, "Folio: "+strconv.Itoa(folioQueSigue))
    pdf.SetXY(10, 82)
    ac := accounting.Accounting{Symbol: "$", Precision: 2}
      /*
      pdf.Cell(0, 0, "Tipo de salario: "+TipoContrato)
      pdf.SetFont("Arial", "B", 11)
      pdf.SetXY(0, 40)
      pdf.CellFormat(0,0,tr("Periodo: "+periodo+" "+PeriodicidadPago+"    "+deFecha+"-"+aFecha),"",1,"R",false,0,"")
      pdf.SetXY(0, 47)
      pdf.SetFont("Arial", "", 11)
      pdf.CellFormat(0, 0, tr("Días de pago: "+NumDiasPagados),"",1,"R",false,0,"")
      pdf.SetXY(0, 54)
      pdf.CellFormat(0, 0, "Fecha Pago: "+FechaPago,"",1,"R",false,0,"")
      pdf.SetXY(0, 61)
      pdf.CellFormat(0, 0, "Puesto: (ninguno)" ,"",1,"R",false,0,"")
      pdf.SetXY(10, 68)
      pdf.CellFormat(0, 0, "Departamento: "+Departamento,"",1,"R",false,0,"")
      pdf.SetXY(0, 75)
      pdf.CellFormat(0, 0, "SDI: "+SDIstring,"",1,"R",false,0,"")
      */
    w := []float64{15, 25, 50, 30, 30}
    wSum := 0.0
    for _, v := range w {
        wSum += v
    }
    pdf.SetXY(0, 89)
    pdf.CellFormat(0,0,tr("         Conceptos: "),"",1,"L",false,0,"")
    pdf.Ln(5)
    pdf.CellFormat(0,0,tr("         "),"",1,"L",false,0,"")
    pdf.SetFont("Arial", "", 10)
    pdf.SetFillColor(173, 173, 173)
    pdf.SetTextColor(255, 255, 255)
    pdf.SetDrawColor(128, 0, 0)
    pdf.SetLineWidth(0.3)
    pdf.SetFont("Arial", "B", 0)
      //  Header
      pdf.CellFormat(w[0], 7, "Cantidad", "1", 0, "C", true, 0, "")
      pdf.CellFormat(w[1], 7, "Unidad", "1", 0, "C", true, 0, "")
    pdf.CellFormat(w[2], 7, "Concepto", "1", 0, "C", true, 0, "")
    pdf.CellFormat(w[3], 7, "Valor unitario", "1", 0, "C", true, 0, "")
    pdf.CellFormat(w[4], 7, "Importe", "1", 0, "C", true, 0, "")
    pdf.Ln(-1)
      // Color and font restoration
      pdf.SetFillColor(224, 235, 255)
      pdf.SetTextColor(0, 0, 0)
      pdf.SetFont("", "", 0)
      //  Data
    fill := false
      cantidadFloat, _ := strconv.ParseFloat(cantidad, 64)
      cuantosMeSalto := 6
      pdf.CellFormat(w[0], 6, "1", "LR", 0, "", fill, 0, "")
    pdf.CellFormat(w[1], 6, "No aplica", "LR", 0, "", fill, 0, "")
    pdf.CellFormat(w[2], 6, nombre, "LR", 0, "", fill, 0, "")
    pdf.CellFormat(w[3], 6, ac.FormatMoney(cantidadFloat), "LR", 0, "", fill, 0, "")
    pdf.CellFormat(w[4], 6, ac.FormatMoney(cantidadFloat), "LR", 0, "", fill, 0, "")
    pdf.Ln(-1)
      cuantosMeSalto = cuantosMeSalto + 6
      fill = !fill
    pdf.CellFormat(wSum, 6, "Total: "+ac.FormatMoney(cantidadFloat), "LR", 0, "", fill, 0, "")
    pdf.Ln(-1)
    cuantosMeSalto = cuantosMeSalto + 6
    fill = !fill
    pdf.CellFormat(wSum, 0, "", "T", 0, "", false, 0, "")
      pdf.Ln(5)
      ////////////
      pdf.CellFormat(0,0,tr("Impuestos: "),"",1,"L",false,0,"")
    pdf.Ln(5)
    ww := []float64{30, 30, 30}
    wwSum := 0.0
    for _, v := range ww {
        wwSum += v
    }
    pdf.SetFont("Arial", "", 10)
    pdf.SetFillColor(173, 173, 173)
    pdf.SetTextColor(255, 255, 255)
    pdf.SetDrawColor(128, 0, 0)
    pdf.SetLineWidth(.3)
    pdf.SetFont("Arial", "B", 0)
      //  Header
      pdf.CellFormat(w[0], 7, "Importe", "1", 0, "C", true, 0, "")
      pdf.CellFormat(w[1], 7, "Impuesto", "1", 0, "C", true, 0, "")
    pdf.CellFormat(w[2], 7, "Tasa", "1", 0, "C", true, 0, "")
    pdf.Ln(-1)
      // Color and font restoration
      pdf.SetFillColor(224, 235, 255)
      pdf.SetTextColor(0, 0, 0)
      pdf.SetFont("", "", 0)
      //  Data
    cuantosMeSalto += 6
      pdf.CellFormat(w[0], 6, "$0.00", "LR", 0, "", fill, 0, "")
    pdf.CellFormat(w[1], 6,"IVA", "LR", 0, "", fill, 0, "")
    pdf.CellFormat(w[2], 6,"0 %", "LR", 0, "", fill, 0, "")
    pdf.Ln(-1)
      cuantosMeSalto = cuantosMeSalto + 6
      fill = !fill
    pdf.CellFormat(wwSum, 6, "Total: $0.00", "LR", 0, "", fill, 0, "")
    pdf.Ln(-1)
    pdf.CellFormat(wwSum, 0, "", "T", 0, "", false, 0, "")
      
    cuantosMeSalto = cuantosMeSalto + 6
    fill = !fill
    
    

      cuantosMeSalto = cuantosMeSalto + 6
    cuantosMeSalto = cuantosMeSalto + 6
    cuantosMeSalto = cuantosMeSalto + 6
    cuantosMeSalto = cuantosMeSalto + 6
    cuantosMeSalto = cuantosMeSalto + 6
    nuevoNumero := float64(89.0 + cuantosMeSalto)
    
      pdf.SetXY(0, nuevoNumero)
      key := barcode.RegisterQR(pdf, "?re="+rfcEmisor+"&rr="+RFC+"&id="+UUID, qr.H, qr.Unicode)
    barcode.Barcode(pdf, key, 15, nuevoNumero, 50, 50, false)
    nuevoNumero+=60
    pdf.SetXY(15, nuevoNumero)
    //pdf.SetAutoPageBreak(true, 170.0)
    lineaSello := "Sello digital del CFDI: "+selloCFD
    lengthSello := len(lineaSello)
    terceraParteSello := lengthSello/2
    lineaSello1 := lineaSello[:terceraParteSello]
    lineaSello2 := lineaSello[terceraParteSello:]
    //lineaSello3 := lineaSello[terceraParteSello*2:]

    lineaSelloSAT := "Sello del SAT: "+selloSAT
    lengthSelloSAT := len(lineaSelloSAT)
    terceraParteSelloSAT := lengthSelloSAT/4
    lineaSelloSAT1 := lineaSelloSAT[:terceraParteSelloSAT]
    lineaSelloSAT2 := lineaSelloSAT[terceraParteSelloSAT:terceraParteSelloSAT*2]
    lineaSelloSAT3 := lineaSelloSAT[terceraParteSelloSAT*2:terceraParteSelloSAT*3]
    lineaSelloSAT4 := lineaSelloSAT[terceraParteSelloSAT*3:]
   
      pdf.CellFormat(0,0,tr(lineaSello1),"",1,"L",false,0,"")
      pdf.Ln(4)
      pdf.CellFormat(0,0,tr(lineaSello2),"",2,"L",false,0,"")
      pdf.Ln(4)
    //  pdf.CellFormat(0,0,tr(lineaSello3),"",2,"L",false,0,"")
      pdf.Ln(5)
      pdf.CellFormat(0,0,tr(lineaSelloSAT1),"",1,"L",false,0,"")
      pdf.Ln(4)
      pdf.CellFormat(0,0,tr(lineaSelloSAT2),"",2,"L",false,0,"")
      pdf.Ln(4)
      pdf.CellFormat(0,0,tr(lineaSelloSAT3),"",2,"L",false,0,"")
      pdf.Ln(4)
      pdf.CellFormat(0,0,tr(lineaSelloSAT4),"",2,"L",false,0,"")
      pdf.Ln(5)
      
    pdf.OutputFileAndClose(nombrePDF)
    queryZ := `INSERT INTO [Sevenplus].[dbo].[`+BUNIT.(string)+`_zFacturas] (folio,BUNIT,xml,pdf,xmlText,UUID, cantidad)
    VALUES (`+strconv.Itoa(folioQueSigue)+`, '`+BUNIT.(string)+`','`+nombreXML+`','`+nombrePDF+`','`+DocumentObject.StampedDocument+`','`+UUID+`','`+cantidad+`')`
    conn.Exec(queryZ)

    queryW := `INSERT INTO [SU_FISCAL].[dbo].[FISCAL_xml] (BUNIT, JRNAL_NO, JRNAL_LINE,JRNAL_SOURCE,FOLIO_FISCAL, AMOUNT, STATUS, consecutivo, autoligado)
    VALUES ('`+BUNIT.(string)+`',`+diario+`,`+linea+`,'','`+UUID+`',`+cantidad+`, '2', 1, 0)`
    _, err11 := conn.Exec(queryW)
    if err11 != nil {
      fmt.Println(queryW)
      fmt.Println(err11)
    }
    
    d := gomail.NewDialer("smtp.gmail.com", 587, "alonsopf@gmail.com", "dank_Gott1863")
      //d.TLSConfig = &tls.Config{InsecureSkipVerify: true}
      m := gomail.NewMessage()
    m.SetHeader("From", "alonsopf@gmail.com")
    correo := c.GetSession("usuario")
    m.SetHeader("To", correo.(string), correoPersona)
    //m.SetAddressHeader("Cc", "dan@example.com", "Dan")
    m.SetHeader("Subject", "Hola, tu factura con Serie S y Folio: "+strconv.Itoa(folioQueSigue))
    m.SetBody("text/html", "Hola! Tu factura con Serie S y Folio "+strconv.Itoa(folioQueSigue)+" esta adjunta en formato PDF y XML. Favor de no responder este correo.")
    m.Attach("C:/work/src/sevenplus/"+nombrePDF)
    m.Attach("C:/work/src/sevenplus/"+nombreXML)

    // Send the email to Bob, Cora and Dan.
    if err := d.DialAndSend(m); err != nil {
        fmt.Println(err)
    }

    example := map[string]interface{}{"success" : 1, "pdf" : nombrePDF, "xml" : nombreXML }
    c.Data["json"] = &example
    c.ServeJSON()
    }//else
  }
}


func (c *SubeSSCController) Post() {
  alias := c.GetSession("alias")
  if alias == nil {
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    cad :=  c.GetString("cad")
    soap, err := gosoap.SoapClient("http://localhost:8080/connect/wsdl/SecurityProvider?wsdl","http://localhost:8080/connect/soap/SecurityProvider")
    if err != nil {
      fmt.Errorf("error not expected: %s", err)
    }
    params := gosoap.Params{
      "name": "ZC1",
      "password" : "",
    }
    err = soap.Call("Authenticate", "SecurityProviderAuthenticateRequest", params)
    if err != nil {
      fmt.Println("Error: corre en circulos")
    }
    vaucher := soap.GetResponse()
    fmt.Println(vaucher)
    soapJournal, err := gosoap.SoapClient("http://localhost:8080/connect/wsdl/ComponentExecutor?wsdl","http://localhost:8080/connect/soap/ComponentExecutor")
    if err != nil {
      fmt.Errorf("error not expected: %s", err)
    }
    component := c.GetString("component")
    method := c.GetString("method")
    params = gosoap.Params{
      "authentication": vaucher,
      "licensing" : "",
      "component" : component,
      "method" : method,
      "group" : "",
      "payload" : cad,
    }
    fmt.Println(cad)  

    err = soapJournal.Call("Execute", "ComponentExecutorExecuteRequest", params)
    if err != nil {
      fmt.Errorf("error in soap call: %s", err)
    }

    diarioContabilizado := soapJournal.GetResponse()
    fmt.Println(diarioContabilizado)  

    example := map[string]interface{}{ "success":1, "resultado" : diarioContabilizado}
    c.Data["json"] = &example
    c.ServeJSON()
  }
}



func (c *CargaCosasDeActivoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    BUNIT := c.GetSession("BUNIT")
    DB := c.GetSession("DB")
    type Periodos struct {
      Periodo int
    }
    var (
      PeriodosList map[string]*Periodos
    )
    PeriodosList = make(map[string]*Periodos)

    queryDatos := "SELECT DISTINCT PERIOD FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] ORDER BY PERIOD ASC"
    rowsDatos, err := conn.Query(queryDatos)
    var PERIOD int
    for rowsDatos.Next()  {
      rowsDatos.Scan(&PERIOD)
      PeriodosList[strconv.Itoa(PERIOD)] = &Periodos{PERIOD}
    }

    example := map[string]interface{}{"success" : 1, "periodos": PeriodosList }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *DamePeriodosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    BUNIT := c.GetSession("BUNIT")
    DB := c.GetSession("DB")
    type Periodos struct {
      Periodo int
    }
    var (
      PeriodosList map[string]*Periodos
    )
    PeriodosList = make(map[string]*Periodos)

    queryDatos := "SELECT DISTINCT PERIOD FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] ORDER BY PERIOD ASC"
    rowsDatos, err := conn.Query(queryDatos)
    var PERIOD int
    for rowsDatos.Next()  {
      rowsDatos.Scan(&PERIOD)
      PeriodosList[strconv.Itoa(PERIOD)] = &Periodos{PERIOD}
    }


    queryDatos = "SELECT rfc, regimen, razonSocial, regPatronal, lugarExpedicion FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '"+BUNIT.(string)+"'"
    rowsDatos, err = conn.Query(queryDatos)
    var rfcEmisor string
    var regimen string
    var razonSocial string
    var regPatronal string
    var lugarExpedicion string
    for rowsDatos.Next()  {
      rowsDatos.Scan(&rfcEmisor, &regimen, &razonSocial, &regPatronal, &lugarExpedicion)
      rfcEmisor = strings.TrimSpace(rfcEmisor)
      regimen = strings.TrimSpace(regimen)
      razonSocial = strings.TrimSpace(razonSocial)
      regPatronal = strings.TrimSpace(regPatronal)
      lugarExpedicion = strings.TrimSpace(lugarExpedicion)
    }

    queryD := `SELECT  (COUNT(idCFDINomina)+1) as folio
      FROM [Sevenplus].[dbo].[zNominaFacturas]
      WHERE BUNIT = '`+BUNIT.(string)+`' AND timbrado = 1`
    rowsD, errD := conn.Query(queryD)
    if errD != nil {
      fmt.Println("que paso:", errD.Error())
    }
    folioQueSigue:=1
    for rowsD.Next()  {
      rowsD.Scan(&folioQueSigue)
    }
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.Format(time.RFC3339)
    dateStringSubString := string(dateString[0:19])
    
    example := map[string]interface{}{"success" : 1, "lugarExpedicion" : lugarExpedicion, "regPatronal" : regPatronal, "razonSocial" : razonSocial, "regimen" : regimen, "rfc" : rfcEmisor, "periodos": PeriodosList, "folio" : folioQueSigue, "date" : dateStringSubString }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *DameHashController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.String() 
    substring := string(dateString[0:10])
      byteArray := []byte(substring)
    hasher := sha512.New()
      hasher.Write(byteArray)
    cryptoText := base64.StdEncoding.EncodeToString(  []byte(hex.EncodeToString(hasher.Sum(nil))))
    example := map[string]interface{}{"success" : 1, "hash": cryptoText }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
//hardcode maximus, perdon al que lea esta groseria de código, pero no es mi culpa, es de los contadores que cada campo contabilizan como quieren y administrativamente, contadores mandan a ingenieros, nunca olvides que eres una área de servicio y estas al servicio de la iglesia, ni modo
func (c *GeneraPretimbradoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    periodo := c.GetString("periodo")
    IdCFDINomina := -1
    TipoNomina := c.GetString("TipoNomina")
    metodoDePago := c.GetString("metodoDePago")
    FechaPago := c.GetString("FechaPago")
    esteAnio:= string(periodo[0:4]) 
    esteMes:= string(periodo[5:7])
    mesNumero, _ := strconv.Atoi(esteMes)
    anioNumero, _ := strconv.Atoi(esteAnio)
    diaFinal := "31"
    if mesNumero == 1 {diaFinal = "31"}
    if mesNumero == 2 {
      diaFinal = "28"
      if anioNumero % 4 == 0 {
        diaFinal = "29"
      }
    }
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.Format(time.RFC3339)
    dateStringSubString := string(dateString[0:19])
    if mesNumero == 3 {diaFinal = "31"}
    if mesNumero == 4 {diaFinal = "30"}
    if mesNumero == 5 {diaFinal = "31"}
    if mesNumero == 6 {diaFinal = "30"}
    if mesNumero == 7 {diaFinal = "31"}
    if mesNumero == 8 {diaFinal = "31"}
    if mesNumero == 9 {diaFinal = "30"}
    if mesNumero == 10 {diaFinal = "31"}
    if mesNumero == 11 {diaFinal = "30"}
    if mesNumero == 12 {diaFinal = "31"}

    deFecha := c.GetString("deFecha")
    aFecha := c.GetString("aFecha")
    if _, err := os.Stat("static/manuntencion/"+BUNIT.(string)+"/"+periodo+"/"); os.IsNotExist(err) {
        os.MkdirAll("static/manuntencion/"+BUNIT.(string)+"/"+periodo+"/", 0777)
    }
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    queryDatos := "SELECT rfc, regimen, razonSocial, regPatronal, lugarExpedicion FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '"+BUNIT.(string)+"'"
    rowsDatos, err := conn.Query(queryDatos)
    var rfcEmisor string
    var regimen string
    var razonSocial string
    var regPatronal string
    var lugarExpedicion string
    for rowsDatos.Next()  {
      rowsDatos.Scan(&rfcEmisor, &regimen, &razonSocial, &regPatronal, &lugarExpedicion)
      rfcEmisor = strings.TrimSpace(rfcEmisor)
      regimen = strings.TrimSpace(regimen)
      razonSocial = strings.TrimSpace(razonSocial)
      regPatronal = strings.TrimSpace(regPatronal)
      lugarExpedicion = strings.TrimSpace(lugarExpedicion)
    }

    queryDireccion := "SELECT ADDR_LINE_1,ADDR_LINE_2,ADDR_LINE_3,ADDR_LINE_4,ADDR_LINE_5 FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ADDR] WHERE ADDR_CODE = '0000000000'"
    rowsDireccion, err := conn.Query(queryDireccion)
    var addr1 string
    var addr2 string
    var addr3 string
    var addr4 string
    var addr5 string
    for rowsDireccion.Next()  {
      rowsDireccion.Scan(&addr1,&addr2,&addr3,&addr4,&addr5)
      addr1 = strings.TrimSpace(addr1)
      addr2 = strings.TrimSpace(addr2)
      addr3 = strings.TrimSpace(addr3)
      addr4 = strings.TrimSpace(addr4)
      addr5 = strings.TrimSpace(addr5)
    }
    
    query := `SELECT CuentaBancaria, c_Banco, c_Pais, c_Estado, ER,correo,nombre,rfc,curp,numEmpleado,TipoContrato,TipoJornada,NumSeguridadSocial,FechaInicioRelLaboral,RiesgoPuesto,PeriodicidadPago,Departamento,TipoRegimen,SDI
  FROM [Sevenplus].[dbo].[nomina]
  WHERE BUNIT = '`+BUNIT.(string)+`'
      order by ER asc`
    rows, err := conn.Query(query)
    var ER string
    var CuentaBancaria string
    var correo string
    var nombre string
    var rfc string
    var curp string
    var c_Banco string
    var c_Pais string
    var c_Estado string
    var numEmpleado string
    var TipoContrato string
    var TipoJornada string
    var NumSeguridadSocial string
    var FechaInicioRelLaboral string
    var RiesgoPuesto string
    var PeriodicidadPago string
    var Departamento string
    var TipoRegimen string
    var SDI float64
    var AMOUNT decimal.Dec
    var JRNAL_NO int
    var JRNAL_LINE int
    var lineaSuperior int
    var lineaAnterior int
    var IdRegistro int
    var tipo int
    var TipoSAT string
    var Concepto string
    var GravadoExcento int
    //totalGravadoPercepciones := 0.0
    //totalExentoPercepciones := 0.0
    //totalDeducciones := 0.0
    //totalImpuestosRetenidos := 0.0
    models.ClearManuntencion2()
    models.ClearManuntencion()
    var manuntencionActual models.Manuntencion
    var cedul models.Manuntencion
    var cedul2 models.Manuntencion2

    queryX := `DELETE FROM [Sevenplus].[dbo].[zNominaFacturas] WHERE timbrado = 0 AND BUNIT = '`+BUNIT.(string)+`'`
    conn.Exec(queryX)
    //ERCISMA01
    ACCNT_CODE := ""
    D_C := ""
    DESCRIPTN := ""
    TREFERENCE := ""
    guardaTipoSAT := "000"
    cantidadADisminuir := 0.0
    TipoPoliza := c.GetString("TipoPoliza")
    for rows.Next()  {
      rows.Scan(&CuentaBancaria, &c_Banco, &c_Pais, &c_Estado, &ER, &correo, &nombre, &rfc, &curp, &numEmpleado, &TipoContrato, &TipoJornada, &NumSeguridadSocial, &FechaInicioRelLaboral, &RiesgoPuesto, &PeriodicidadPago, &Departamento, &TipoRegimen, &SDI)
      totalGravadoPercepciones := 0.0
      totalExentoPercepciones := 0.0
      totalDeducciones := 0.0
      totalOtrosPagos := 0.0
      totalImpuestosRetenidos := 0.0
      cantidadADisminuir = 0
      SDIstring := fmt.Sprintf("%.2f", SDI)
      ER = strings.TrimSpace(ER)
      rfc = strings.TrimSpace(rfc)
      nombre = strings.TrimSpace(nombre)
      curp = strings.TrimSpace(curp)

      numEmpleado = strings.TrimSpace(numEmpleado)
      TipoContrato = strings.TrimSpace(TipoContrato)
      TipoJornada = strings.TrimSpace(TipoJornada)
      NumSeguridadSocial = strings.TrimSpace(NumSeguridadSocial)
      FechaInicioRelLaboral = strings.TrimSpace(FechaInicioRelLaboral)
      RiesgoPuesto = strings.TrimSpace(RiesgoPuesto)
      PeriodicidadPago = strings.TrimSpace(PeriodicidadPago)
      Departamento = strings.TrimSpace(Departamento)
      TipoRegimen = strings.TrimSpace(TipoRegimen)
      c_Pais = strings.TrimSpace(c_Pais)
      CuentaBancaria = strings.TrimSpace(CuentaBancaria)
      
      c_Estado = strings.TrimSpace(c_Estado)
      cedul = models.Manuntencion{ER, correo, nombre, rfc, curp, numEmpleado, TipoContrato, TipoJornada, NumSeguridadSocial, FechaInicioRelLaboral, RiesgoPuesto, PeriodicidadPago, Departamento, TipoRegimen, make(map[string]*models.PorConceptos)}
      models.AddManuntencion(cedul, ER)
      queryCuantos := `select count(*) as cuantos
      from
      (SELECT AMOUNT, JRNAL_NO, JRNAL_LINE, ACCNT_CODE, D_C, DESCRIPTN
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE ACCNT_CODE = '`+ER+`' AND TRANS_DATETIME >= '`+deFecha+`' AND TRANS_DATETIME <= '`+aFecha+`'
      AND ALLOCATION != 'C'
        ) newtable`
        rowsCuantos, _ := conn.Query(queryCuantos)
        cuantasFilas := 0
        if rowsCuantos.Next() {
          rowsCuantos.Scan(&cuantasFilas)
      }
      cuantasVan := 0

    
//AND UPPER(DESCRIPTN)  not like '%AYUDA%'
//   AND UPPER(DESCRIPTN)  not like '%DIEZMO%'
          
      query2 := `SELECT AMOUNT, JRNAL_NO, JRNAL_LINE, ACCNT_CODE, D_C, DESCRIPTN, TREFERENCE
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE ACCNT_CODE = '`+ER+`' AND TRANS_DATETIME >= '`+deFecha+`' AND TRANS_DATETIME <= '`+aFecha+`'
      AND ALLOCATION != 'C'   
        order by JRNAL_NO asc, JRNAL_LINE asc`
      rows2, err2 := conn.Query(query2)
      if ER == "ERMARJO01" {
        fmt.Println(query2)
      }

      
      manuntencionActual = models.DameManuntencionPorCodigo(ER)
          
      
      if err2 != nil {
        defer conn.Close()
        fmt.Println(query2)
        fmt.Println("Perdon manuntencion : ", err2.Error())
      }
      subsidioFijo := ""
      saldoGravableChihuahua := 0.0
      primaVacacionalExentaChihuahua := 0.0
      isrSiTieneJubiladoChihuahua := 0.0
      anticiposSiTieneChihuahua := 0.0
      conceptoSolitoManutencionGravada := 0.0
      conceptoSolitoManutencionExenta := 0.0
      conceptoSolitoIMSS:=0.0
      conceptoSolitoRCV:=0.0
      conceptoSolitoISR := 0.0
      conceptoSolitoAnticipos := 0.0
      //cantidadADisminuirDeLaBaseGravableCasoEspecialPercepcion := 0.0
      for rows2.Next() {
        rows2.Scan(&AMOUNT, &JRNAL_NO, &JRNAL_LINE, &ACCNT_CODE, &D_C, &DESCRIPTN, &TREFERENCE)
        ACCNT_CODE = strings.TrimSpace(ACCNT_CODE)
        DESCRIPTN = strings.TrimSpace(DESCRIPTN)
        DESCRIPTN = strings.ToUpper(DESCRIPTN)
        D_C = strings.TrimSpace(D_C)
        amountPrima := AMOUNT.Float64()
        amountPositiva := math.Abs(amountPrima)
        amountInversa := amountPrima * -1
        amountString := fmt.Sprintf("%.3f", amountInversa)
        amountNormal := fmt.Sprintf("%.3f", amountPrima)
        lineaSuperior = JRNAL_LINE + 1
        lineaAnterior = JRNAL_LINE - 1
        entreQuery3 := 0
        cuantasVan++
        IgnorarMovimiento := strings.Contains(DESCRIPTN, "ANTICIPO PRIMA VACACIONAL") || (strings.Contains(DESCRIPTN, "ANTICIPO") && strings.Contains(TREFERENCE, "PVACACIONAL"))
        ApareceQuitarDeLaBaseGravable := strings.Contains(DESCRIPTN, "DIEZMO") || strings.Contains(DESCRIPTN, "AFROUM") || strings.Contains(DESCRIPTN, "25% APORTACION") || strings.Contains(DESCRIPTN, "10% RENTA") //|| strings.Contains(DESCRIPTN, "RAFAEL GRAJEDA SOL")
        if (ER == "ERORTLU01" && (rfcEmisor == "IAS930629FV4" || rfcEmisor == "IAS161024796") ) || (ER == "ERNUÑJO01" && rfcEmisor == "IAS160707U62") {
          //hardcode maximus, perdon al que lea esta groseria de código, pero no es mi culpa, es de los contadores que cada campo contabilizan como quieren y administrativamente, contadores mandan a ingenieros, nunca olvides que eres una área de servicio y estas al servicio de la iglesia, ni modo.. Mayo 2016
          if strings.Contains(DESCRIPTN, "MANUTENCION EXENTA") || strings.Contains(DESCRIPTN, "MANUTENCIÓN EXCENTA")  || strings.Contains(DESCRIPTN, "MANUTENCION EXCENTA") || strings.Contains(DESCRIPTN, "MANUTENCIÓN EXENTA") {
            conceptoSolitoManutencionExenta += amountPositiva
          }
          if strings.Contains(DESCRIPTN, "MANUTENCION GRAVADA") || strings.Contains(DESCRIPTN, "MANUTENCIÓN GRAVADA"){
            conceptoSolitoManutencionGravada += amountPositiva
          }
          if strings.Contains(DESCRIPTN, "CASA GOB") {
            conceptoSolitoManutencionGravada += amountPositiva
          }
          if strings.Contains(DESCRIPTN, "ISR") || strings.Contains(DESCRIPTN, "I.S.R.") || strings.Contains(DESCRIPTN, "I.S.R") {
            conceptoSolitoISR += amountPositiva
          } else {
            if D_C == "D" {
              if strings.Contains(DESCRIPTN, "PAGO PENSION") || strings.Contains(DESCRIPTN, "MANUTENCI") || strings.Contains(DESCRIPTN, "PAGO MES")  {
              } else {
                if strings.Contains(DESCRIPTN, "DIEZMO") {
                  conceptoSolitoManutencionGravada-=amountPositiva
                } else {
                  if strings.Contains(DESCRIPTN, "IMSS") {
                    conceptoSolitoIMSS += amountPositiva
                  } else{
                    if strings.Contains(DESCRIPTN, "RCV") {
                      conceptoSolitoRCV += amountPositiva
                    } else{
                      conceptoSolitoAnticipos += amountPositiva       
                    }
                  }
                }
              }
              
            }
          }
        }
        if len(ER) == 8 && (rfcEmisor == "IAS930629FV4" || rfcEmisor == "IAS161024796")   {//por definicion es jubilado, ejemplo:  RXXXYY01   y es de chihuahua
          if D_C == "C"{
            fmt.Println("sumo: ",amountPositiva)
            if strings.Contains(DESCRIPTN, "PRIMA VACACIONAL EXENTA") {
              primaVacacionalExentaChihuahua += amountPositiva
              } else {
              saldoGravableChihuahua += amountPositiva
            }
          } else {
            if strings.Contains(DESCRIPTN, "PAGO PENSION"){
            } else {
              if strings.Contains(DESCRIPTN, "FEUM") || strings.Contains(DESCRIPTN, "PEDIDO ESCUELA SABATICA") || strings.Contains(DESCRIPTN, "ESCUELA SABATICA 2DO TRIM") || strings.Contains(DESCRIPTN, "RAFAEL GRAJEDA SOL") || strings.Contains(DESCRIPTN, "OLEGARIO RAMIREZ /") || strings.Contains(DESCRIPTN, "MENSAJERIA") {
                anticiposSiTieneChihuahua += amountPositiva
              } else {
                if strings.Contains(DESCRIPTN, "SEGURO AUTO") || strings.Contains(DESCRIPTN, "ANTICIPO") {
                  //saldoGravableChihuahua += amountPositiva
                  anticiposSiTieneChihuahua += amountPositiva
                } else{
                  if strings.Contains(DESCRIPTN, "ISR") || strings.Contains(DESCRIPTN, "I.S.R.") || strings.Contains(DESCRIPTN, "I.S.R") {
                    //isrSiTieneJubiladoChihuahua += amountPositiva
                    //totalImpuestosRetenidos += amountPositiva
                  } else {
                    fmt.Println("resto: ",amountPositiva)
                    saldoGravableChihuahua -= amountPositiva      
                  }
                } 
              }
            }
          }
        } else {
          query3 := `SELECT  TOP 1  b.idRegistro, b.tipo , b.TipoSAT , b.Concepto , b.GravadoExcento 
            FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] a
            INNER JOIN [Sevenplus].[dbo].[nominaConceptos] b on b.ACNT_CODE = a.ACCNT_CODE
            WHERE a.JRNAL_NO = `+strconv.Itoa(JRNAL_NO)+`
            AND b.BUNIT = '`+BUNIT.(string)+`' AND a.AMOUNT in (`+amountString+`, `+amountNormal+`)`
           if TipoPoliza == "1" {
            query3 = query3 + ` AND a.D_C != '`+D_C+`' AND ( a.JRNAL_LINE in (`+strconv.Itoa(lineaAnterior)+`,`+strconv.Itoa(lineaSuperior)+`) OR (a.ANAL_T6 = '`+ER+`')) ` 
          } else {
            query3 = query3 + ` AND a.ANAL_T6 = '`+ER+`'` 
          } 
            
          //query3 = query3 + ` OR a.ANAL_T6 = '`+ER+`')`
          rows3, err3 := conn.Query(query3)
          if err3 != nil {
            defer conn.Close()
            fmt.Println(query3) 
            fmt.Println("Perdon manuntencion 3: ", err3.Error())
          }

          //columnas, _ := rows3.Columns()
          //column := len( columnas )
          if IgnorarMovimiento {
            fmt.Println(ER)
            fmt.Println(DESCRIPTN)
          } else {
            for rows3.Next() {
              rows3.Scan(&IdRegistro, &tipo, &TipoSAT, &Concepto, &GravadoExcento)
              entreQuery3 = 1
              if TipoSAT == "046" && tipo == 1 && strings.Contains(Departamento, "ASOCIADOS") {//si es asimilado sat, pero es asociado, lo ponogo en otros ingresos por salarios! hardcode para contadores flojos , como chihuahua, o bien, deberia decir contadores "muy ocupados" =)
                TipoSAT = "038"//otros ingresos por salarios
              }
              if _, ok := manuntencionActual.ConceptosList[strconv.Itoa(tipo)+"-"+TipoSAT]; ok {
              } else {
                var concepto models.PorConceptos
                concepto = models.PorConceptos{0.0, 0.0, tipo, TipoSAT, Concepto, GravadoExcento, IdRegistro}             
                manuntencionActual.ConceptosList[strconv.Itoa(tipo)+"-"+TipoSAT] = &concepto
              }
              if tipo == 1 {//percepcciones
                if GravadoExcento == 1 {//gravado
                  totalGravadoPercepciones += amountPositiva
                  guardaTipoSAT = TipoSAT
                  manuntencionActual.ConceptosList[strconv.Itoa(tipo)+"-"+TipoSAT].SaldoGravado += amountPositiva
                } else {
                  totalExentoPercepciones += amountPositiva
                  manuntencionActual.ConceptosList[strconv.Itoa(tipo)+"-"+TipoSAT].SaldoExento += amountPositiva
                  if(ER=="ERCISMA01") {
                    fmt.Println(ER+"-"+fmt.Sprintf("%.2f",amountPositiva)+"-"+strconv.Itoa(JRNAL_NO)) 
                    fmt.Println(query3)
                  }
                } 
                  
              } else {
                if tipo == 2 {//deducciones
                  if Compare(TipoSAT, "002") == 0 {//es impuesto retenido ISR !!
                    totalImpuestosRetenidos += amountPositiva
                    isrSiTieneJubiladoChihuahua += amountPositiva
                  }
                  totalDeducciones += amountPositiva
                  manuntencionActual.ConceptosList[strconv.Itoa(tipo)+"-"+TipoSAT].SaldoExento += amountPositiva
                } else {
                  if tipo == 3 {//otros pagos
                    totalOtrosPagos += amountPositiva     
                    manuntencionActual.ConceptosList[strconv.Itoa(tipo)+"-"+TipoSAT].SaldoExento += amountPositiva
                  } 
                }
              }
            }//for rows3
          }
        }//else si es jubilado de chihuahua


        

        

          //totalHastaAhorita := totalExentoPercepciones + totalGravadoPercepciones - totalDeducciones
          ApareceManuntencion := strings.Contains(DESCRIPTN, "MANUTENCI") || strings.Contains(DESCRIPTN, "NOMINA") || strings.Contains(DESCRIPTN, "NÓMINA") || strings.Contains(DESCRIPTN, "PAGO AGUINALDO") || strings.Contains(DESCRIPTN, "PAGO PRIMA") || strings.Contains(DESCRIPTN, "PAGO AGUNALDO") || strings.Contains(DESCRIPTN, "PAGO MES") || strings.Contains(DESCRIPTN, "PAGO AYUDA") || strings.Contains(DESCRIPTN, "AYUDA VIAJES FUERA") || strings.Contains(DESCRIPTN, "AYUDA PASAJES A OFICINA") || strings.Contains(DESCRIPTN, "PAGO PENSION") || strings.Contains(DESCRIPTN, "PAGO MANUTENCION")
          ApareceAnticipo := strings.Contains(DESCRIPTN, "ANTICIPO") || strings.Contains(DESCRIPTN, "CARGO")
          if ApareceAnticipo {
            ApareceManuntencion = false
          }
          if ApareceQuitarDeLaBaseGravable {
            cantidadADisminuir += amountPositiva
          }
          numeroInterno := 0
          
          if entreQuery3 == 0 && D_C == "C"  {
            if strings.Contains(DESCRIPTN, "ESC SAB") {//credito de escuela sabatica, disminuir los anticipos!
              tipo = 2//deducciones
              TipoSAT = "012"
              Concepto = "ANTICIPO"
              numeroInterno = 444
              if _, ok := manuntencionActual.ConceptosList[strconv.Itoa(tipo)+"-"+TipoSAT]; ok {
              } else {
                var concepto models.PorConceptos
                concepto = models.PorConceptos{0.0, 0.0, tipo, TipoSAT, Concepto, 1, numeroInterno}
                manuntencionActual.ConceptosList[strconv.Itoa(tipo)+"-"+TipoSAT] = &concepto          
              }
              totalDeducciones -= amountPositiva
              manuntencionActual.ConceptosList[strconv.Itoa(tipo)+"-"+TipoSAT].SaldoExento -= amountPositiva
            }
            if strings.Contains(DESCRIPTN, "GRATIFICACION ESPOSA") || (strings.Contains(DESCRIPTN, "MANUTENCION AR") && ER == "ERCORGA01") || (strings.Contains(DESCRIPTN, "MANUTENCION ASOCIADOS REL") && ER == "ERCORGA01") {
              tipo = 1
              TipoSAT = "046"
              guardaTipoSAT = "046"
              if strings.Contains(Departamento, "ASOCIADOS") {
                TipoSAT = "038"
                guardaTipoSAT = "038"
              }
              Concepto = "MANUTENCION"
              numeroInterno = 274
              query32 := `SELECT  TOP 1  b.idRegistro
                FROM [Sevenplus].[dbo].[nominaConceptos] b
                WHERE b.tipo = 3 AND b.GravadoExcento = 2
                AND b.BUNIT = '`+BUNIT.(string)+`' AND b.TipoSAT = '`+TipoSAT+`'`
              rows32, err32 := conn.Query(query32)
              if err32 != nil {
                fmt.Println(query32)
                fmt.Println(err32.Error())
              }
              for rows32.Next() {
                rows32.Scan(&numeroInterno)
              }
              if _, ok := manuntencionActual.ConceptosList[strconv.Itoa(tipo)+"-"+TipoSAT]; ok {
              } else {
                var concepto models.PorConceptos
                concepto = models.PorConceptos{0.0, 0.0, tipo, TipoSAT, Concepto, 1, numeroInterno}
                manuntencionActual.ConceptosList[strconv.Itoa(tipo)+"-"+TipoSAT] = &concepto          
              }
              if strings.Contains(DESCRIPTN, "MANUTENCION ASOCIADOS REL") {
                totalExentoPercepciones += amountPositiva
                manuntencionActual.ConceptosList[strconv.Itoa(tipo)+"-"+TipoSAT].SaldoExento += amountPositiva    
              } else {
                totalGravadoPercepciones += amountPositiva
                manuntencionActual.ConceptosList[strconv.Itoa(tipo)+"-"+TipoSAT].SaldoGravado += amountPositiva   
              }
              
            }
            if strings.Contains(DESCRIPTN, "SUBSIDIO PARA EL EMPLEO") {
              tipo = 3
              TipoSAT = "002"
              Concepto = "SUBSIDIO EMPLEO"
              numeroInterno = 126
              query32 := `SELECT  TOP 1  b.idRegistro
                FROM [Sevenplus].[dbo].[nominaConceptos] b
                WHERE b.tipo = 3 AND b.GravadoExcento = 2
                AND b.BUNIT = '`+BUNIT.(string)+`' AND b.TipoSAT = '`+TipoSAT+`'`
              rows32, err32 := conn.Query(query32)
              if err32 != nil {
                fmt.Println(query32)
                fmt.Println(err32.Error())
              }
              for rows32.Next() {
                rows32.Scan(&numeroInterno)
              }
              var concepto models.PorConceptos
              concepto = models.PorConceptos{0.0, 0.0, tipo, TipoSAT, Concepto, 1, numeroInterno}
              manuntencionActual.ConceptosList[strconv.Itoa(tipo)+"-"+TipoSAT] = &concepto          
              totalOtrosPagos += amountPositiva
              manuntencionActual.ConceptosList[strconv.Itoa(tipo)+"-"+TipoSAT].SaldoExento += amountPositiva
            } 
          } 
          //if entreQuery3 == 0 && D_C == "D" && totalHastaAhorita != amountPositiva && !ApareceManuntencion && cuantasVan!=cuantasFilas {
          //&& totalHastaAhorita != amountPositiva
          if !(rfcEmisor == "IAS930629FV4" || rfcEmisor == "IAS161024796") {
            ApareceQuitarDeLaBaseGravable = false
          }          
          if entreQuery3 == 0 && D_C == "D"  && !ApareceManuntencion && !ApareceQuitarDeLaBaseGravable {
            if strings.Contains(DESCRIPTN, "ISR") || strings.Contains(DESCRIPTN, "I.S.R.") || strings.Contains(DESCRIPTN, "I.S.R") || strings.Contains(DESCRIPTN, "RETENCIÓN") || strings.Contains(DESCRIPTN, "RETENCION") {
              tipo = 2
              TipoSAT = "002"
              Concepto = "ISR"
              numeroInterno = 444
              query32 := `SELECT  TOP 1  b.idRegistro
                FROM [Sevenplus].[dbo].[nominaConceptos] b
                WHERE b.tipo = 2 AND b.GravadoExcento = 2
                AND b.BUNIT = '`+BUNIT.(string)+`' AND b.TipoSAT = '`+TipoSAT+`'`
              rows32, err32 := conn.Query(query32)
              if err32 != nil {
                fmt.Println(query32)
                fmt.Println(err32.Error())
              }
              for rows32.Next() {
                rows32.Scan(&numeroInterno)
              }
              isrSiTieneJubiladoChihuahua += amountPositiva
              totalImpuestosRetenidos += amountPositiva
            } else {
              tipo = 2
              TipoSAT = "012"
              Concepto = "ANTICIPO"
              numeroInterno = 444
              if strings.Contains(DESCRIPTN, "INFONAVIT") {
                TipoSAT = "009"
                Concepto = "INFONAVIT"
                numeroInterno = 445
              } else {
                if strings.Contains(DESCRIPTN, "IMSS") {
                  tipo = 2
                  TipoSAT = "001"
                  Concepto = "IMSS"
                  numeroInterno = 444
                  query32 := `SELECT  TOP 1  b.idRegistro
                    FROM [Sevenplus].[dbo].[nominaConceptos] b
                    WHERE b.tipo = 2 AND b.GravadoExcento = 2
                    AND b.BUNIT = '`+BUNIT.(string)+`' AND b.TipoSAT = '`+TipoSAT+`'`
                  rows32, err32 := conn.Query(query32)
                  if err32 != nil {
                    fmt.Println(query32)
                    fmt.Println(err32.Error())
                  }
                  for rows32.Next() {
                    rows32.Scan(&numeroInterno)
                  }
                } else {
                  if strings.Contains(DESCRIPTN, "CESANTIA") {
                    tipo = 2
                    TipoSAT = "003"
                    Concepto = "CESANTIA"
                    numeroInterno = 444
                    query32 := `SELECT  TOP 1  b.idRegistro
                      FROM [Sevenplus].[dbo].[nominaConceptos] b
                      WHERE b.tipo = 2 AND b.GravadoExcento = 2
                      AND b.BUNIT = '`+BUNIT.(string)+`' AND b.TipoSAT = '`+TipoSAT+`'`
                    rows32, err32 := conn.Query(query32)
                    if err32 != nil {
                      fmt.Println(query32)
                      fmt.Println(err32.Error())
                    }
                    for rows32.Next() {
                      rows32.Scan(&numeroInterno)
                    }
                  } 

                }
              }
            }
            if _, ok := manuntencionActual.ConceptosList[strconv.Itoa(tipo)+"-"+TipoSAT]; ok {
            } else {
              var concepto models.PorConceptos
              concepto = models.PorConceptos{0.0, 0.0, tipo, TipoSAT, Concepto, 1, numeroInterno}
              manuntencionActual.ConceptosList[strconv.Itoa(tipo)+"-"+TipoSAT] = &concepto
            }
            totalDeducciones += amountPositiva
            manuntencionActual.ConceptosList[strconv.Itoa(tipo)+"-"+TipoSAT].SaldoExento += amountPositiva
          } 
      }//for rows2
      //hardcode para chihuahua
      /*if cantidadADisminuirDeLaBaseGravableCasoEspecialPercepcion > 0.0 {
        if _, ok := manuntencionActual.ConceptosList["1-"+guardaTipoSAT]; ok {
          gravadoActual := manuntencionActual.ConceptosList["1-"+guardaTipoSAT].SaldoGravado
          exentoActual := manuntencionActual.ConceptosList["1-"+guardaTipoSAT].SaldoGravado
          cantidadADisminuirDeGravado := 0.0
          if cantidadADisminuirDeLaBaseGravableCasoEspecialPercepcion >= gravadoActual {
            cantidadADisminuirDeGravado = gravadoActual
          } else {
            cantidadADisminuirDeGravado = cantidadADisminuirDeLaBaseGravableCasoEspecialPercepcion
          }
          cantidadADisminuirDeLaBaseGravableCasoEspecialPercepcion -= cantidadADisminuirDeGravado
          manuntencionActual.ConceptosList["1-"+guardaTipoSAT].SaldoGravado -= cantidadADisminuirDeGravado
          totalGravadoPercepciones -= cantidadADisminuirDeGravado
          cantidadADisminuirDeExento := 0.0
          if cantidadADisminuirDeLaBaseGravableCasoEspecialPercepcion > 0.0 {
            cantidadADisminuirDeExento = cantidadADisminuirDeLaBaseGravableCasoEspecialPercepcion
          }
        }
      }*/
      if _, ok := manuntencionActual.ConceptosList["1-"+guardaTipoSAT]; ok  {
        if (rfcEmisor == "IAS930629FV4" || rfcEmisor == "IAS161024796") {
          totalGravadoPercepciones -= cantidadADisminuir
          manuntencionActual.ConceptosList["1-"+guardaTipoSAT].SaldoGravado -= cantidadADisminuir 
        }
      } else {
        
          fmt.Println(manuntencionActual.ConceptosList)
          fmt.Println(guardaTipoSAT)    
        
      }
      if (ER == "ERORTLU01" && (rfcEmisor == "IAS930629FV4" || rfcEmisor == "IAS161024796")) || (ER == "ERNUÑJO01" && rfcEmisor == "IAS160707U62") {
        //hardcode maximus, perdon al que lea esta groseria de código, pero no es mi culpa, es de los contadores que cada campo contabilizan como quieren y administrativamente, contadores mandan a ingenieros, nunca olvides que eres una área de servicio y estas al servicio de la iglesia, ni modo
        manuntencionActual.ConceptosList = make(map[string]*models.PorConceptos)
        var concepto models.PorConceptos
        concepto = models.PorConceptos{conceptoSolitoManutencionGravada, conceptoSolitoManutencionExenta, 1, "046", "MANUTENCION", 1, 754}//754 sera jubilados, digo emeritos
        if ER == "ERNUÑJO01" {
          manuntencionActual.ConceptosList["1-038"] = &concepto   
        } else {
          manuntencionActual.ConceptosList["1-046"] = &concepto   
        }
      
        
        totalGravadoPercepciones = conceptoSolitoManutencionGravada
        totalExentoPercepciones  = conceptoSolitoManutencionExenta
        totalOtrosPagos = 0.0
        totalDeducciones = conceptoSolitoISR+conceptoSolitoAnticipos+conceptoSolitoIMSS+conceptoSolitoRCV
        totalImpuestosRetenidos = conceptoSolitoISR
        if conceptoSolitoISR > 0.0 {
          var conceptoISR models.PorConceptos
          conceptoISR = models.PorConceptos{0.0, conceptoSolitoISR, 2, "002", "ISR", 1, 002}
          manuntencionActual.ConceptosList["2-002"] = &conceptoISR
        }
        if conceptoSolitoAnticipos > 0.0 {
          //totalDeducciones+=conceptoSolitoAnticipos
          var conceptoAnticipo models.PorConceptos
          conceptoAnticipo = models.PorConceptos{0.0, conceptoSolitoAnticipos, 2, "012", "ANTICIPO", 1, 444}
          manuntencionActual.ConceptosList["2-012"] = &conceptoAnticipo
        }
        if conceptoSolitoRCV > 0.0 {
          var conceptoAnticipoRCV models.PorConceptos
          conceptoAnticipoRCV = models.PorConceptos{0.0, conceptoSolitoRCV, 2, "003", "RCV", 1, 335}
          manuntencionActual.ConceptosList["2-003"] = &conceptoAnticipoRCV
        }
        if conceptoSolitoIMSS > 0.0 {
          var conceptoAnticipoIMSS models.PorConceptos
          conceptoAnticipoIMSS = models.PorConceptos{0.0, conceptoSolitoIMSS, 2, "001", "IMSS", 1, 338}
          manuntencionActual.ConceptosList["2-001"] = &conceptoAnticipoIMSS
        }
        
        
        
      }
      if len(ER) == 8 && (rfcEmisor == "IAS930629FV4" || rfcEmisor == "IAS161024796") {//por definicion es jubilado, ejemplo:  RXXXYY01   y es de chihuahua
        fmt.Println("ultimo concepto: ",saldoGravableChihuahua)
        manuntencionActual.ConceptosList = make(map[string]*models.PorConceptos)
        parteGravable := 0.0
        parteExenta := 0.0
        cantidadEnPesosExento := 6884.00
        if saldoGravableChihuahua < cantidadEnPesosExento {
          parteExenta = saldoGravableChihuahua
        } else {
          parteExenta = cantidadEnPesosExento
          parteGravable = saldoGravableChihuahua - parteExenta
        }
        var concepto models.PorConceptos
        concepto = models.PorConceptos{parteGravable, parteExenta, 1, "046", "MANUTENCION", 1, 754}//754 sera jubilados, digo emeritos
        manuntencionActual.ConceptosList["1-046"] = &concepto

  /*      var conceptoPrima models.PorConceptos
        conceptoPrima = models.PorConceptos{0.0, primaVacacionalExentaChihuahua, 1, "021", "MANUTENCION", 1, 964}//964 sera jubilados, digo emeritos
        manuntencionActual.ConceptosList["1-021"] = &conceptoPrima
*/

        totalGravadoPercepciones = parteGravable
        totalExentoPercepciones  = parteExenta
        totalOtrosPagos = 0.0
        totalDeducciones = isrSiTieneJubiladoChihuahua
        totalImpuestosRetenidos = isrSiTieneJubiladoChihuahua
        if isrSiTieneJubiladoChihuahua > 0.0 {
          var conceptoISR models.PorConceptos
          conceptoISR = models.PorConceptos{0.0, isrSiTieneJubiladoChihuahua, 2, "002", "ISR", 1, 002}
          manuntencionActual.ConceptosList["2-002"] = &conceptoISR
        }
        if anticiposSiTieneChihuahua > 0.0 {
          totalDeducciones+=anticiposSiTieneChihuahua
          var conceptoAnticipo models.PorConceptos
          conceptoAnticipo = models.PorConceptos{0.0, anticiposSiTieneChihuahua, 2, "012", "ANTICIPO", 1, 444}
          manuntencionActual.ConceptosList["2-012"] = &conceptoAnticipo
        }       
      } 
      //aqui termina hardcode de chihuahua
      subTotal := totalGravadoPercepciones + totalExentoPercepciones + totalOtrosPagos
      subTotalString := fmt.Sprintf("%.2f", subTotal)

      TotalSueldos := totalGravadoPercepciones + totalExentoPercepciones
      TotalSueldosString := fmt.Sprintf("%.2f", TotalSueldos)

      

      
      TotalPercepciones := TotalSueldos
      TotalDeducciones :=  totalDeducciones
      TotalOtrosPagos := totalOtrosPagos
      TotalPercepcionesString := fmt.Sprintf("%.2f", TotalPercepciones)
      TotalDeduccionesString := fmt.Sprintf("%.2f", TotalDeducciones)
      TotalOtrosPagosString := fmt.Sprintf("%.2f", TotalOtrosPagos)


      total := subTotal  - totalDeducciones;
      totalGravadoPercepcionesString := fmt.Sprintf("%.2f", totalGravadoPercepciones)
      totalExentoPercepcionesString := fmt.Sprintf("%.2f", totalExentoPercepciones)
      
    //  totalDeduccionesString := fmt.Sprintf("%.2f", totalDeducciones)
      totalImpuestosRetenidosString := fmt.Sprintf("%.2f", totalImpuestosRetenidos)
      totalString := fmt.Sprintf("%.2f", total)

      var cadOriginal bytes.Buffer
      NumDiasPagados:=diaFinal
      //FechaPago:=esteAnio+`-`+esteMes+`-25`
      esteAnio:= string(FechaPago[6:10])  
      esteMes:= string(FechaPago[0:2])
      esteDia:= string(FechaPago[3:5])
      FechaPago:=esteAnio+`-`+esteMes+`-`+esteDia
      //2016-10-26T11:06:35
      cadOriginal.WriteString(`||3.2|`)
      if Compare(dateStringSubString,"") != 0 {
        cadOriginal.WriteString(dateStringSubString+`|egreso|Pago en una sola exhibicion|`)
      }
      if Compare(subTotalString,"") != 0 {
        cadOriginal.WriteString(subTotalString+`|`)
      }
      if Compare(TotalDeduccionesString,"") != 0 {
        cadOriginal.WriteString(TotalDeduccionesString+`|1|MXN|`)
      }
      if Compare(totalString,"") != 0 {
        cadOriginal.WriteString(totalString+`|`)
      }
      if Compare(metodoDePago,"") != 0 {
        cadOriginal.WriteString(metodoDePago+`|`)
      }
      if Compare(lugarExpedicion,"") != 0 {
        cadOriginal.WriteString(lugarExpedicion+`|`)
      }
      cadOriginal.WriteString(``+rfcEmisor+`|`+razonSocial+`|`+regimen+`|`+rfc+`|`+nombre+`|1|ACT|Pago de nómina|`+subTotalString+`|`+subTotalString)
    //  "2006-01-02T15:04:05.000Z"
      Antiguedad := ""
      TipoRegimenInt, _ := strconv.Atoi(TipoRegimen)
      if TipoRegimenInt == 9  {//ministro
      } else {
        FechaInicioRelLaboralPrima := strings.Replace(FechaInicioRelLaboral, "/", "-", -1)+" 06:00:00"
        FechaPagoPrima := strings.Replace(FechaPago, "/", "-", -1)+" 06:00:00"
        thenPago, err := time.Parse("2006-01-02 15:04:05", FechaPagoPrima)
        if err != nil {
              fmt.Println(err)
              fmt.Println(err)
          }
          thenInicio, err := time.Parse("2006-01-02 15:04:05", FechaInicioRelLaboralPrima)
        if err != nil {
              fmt.Println(err)
              fmt.Println(err)
          }
          diff := thenPago.Sub(thenInicio)
          var semanas int64
          semanas = int64(diff.Hours()/168.0)
          semanasS := strconv.FormatInt(semanas,10)
          Antiguedad = "P"+semanasS+"W"
      }
      
        



      if TipoRegimenInt >= 9  {//ministro
        if TotalDeduccionesString == "0.00" {
          cadOriginal.WriteString(``+`|1.2|`+TipoNomina+`|`+FechaPago+`|`+esteAnio+`-`+esteMes+`-01|`+esteAnio+`-`+esteMes+`-`+diaFinal+`|`+NumDiasPagados+`|`+TotalPercepcionesString+`|`+curp+`|`+TipoContrato+`|`+TipoJornada+`|`+TipoRegimen+`|`+numEmpleado+`|`+Departamento+`|Ninguno|`+PeriodicidadPago+`|`)
        } else {
          cadOriginal.WriteString(``+`|1.2|`+TipoNomina+`|`+FechaPago+`|`+esteAnio+`-`+esteMes+`-01|`+esteAnio+`-`+esteMes+`-`+diaFinal+`|`+NumDiasPagados+`|`+TotalPercepcionesString+`|`+TotalDeduccionesString+`|`+TotalOtrosPagosString+`|`+curp+`|`+TipoContrato+`|`+TipoJornada+`|`+TipoRegimen+`|`+numEmpleado+`|`+Departamento+`|Ninguno|`+PeriodicidadPago+`|`)
        }       
      } else {
        if TotalDeduccionesString == "0.00" {
          cadOriginal.WriteString(``+`|1.2|`+TipoNomina+`|`+FechaPago+`|`+esteAnio+`-`+esteMes+`-01|`+esteAnio+`-`+esteMes+`-`+diaFinal+`|`+NumDiasPagados+`|`+TotalPercepcionesString+`|`+regPatronal+`|`+curp+`|`+NumSeguridadSocial+`|`+FechaInicioRelLaboral+`|`+Antiguedad+`|`+TipoContrato+`|`+TipoJornada+`|`+TipoRegimen+`|`+numEmpleado+`|`+Departamento+`|Ninguno|`+RiesgoPuesto+`|`+PeriodicidadPago+`|`)  
        } else {
          cadOriginal.WriteString(``+`|1.2|`+TipoNomina+`|`+FechaPago+`|`+esteAnio+`-`+esteMes+`-01|`+esteAnio+`-`+esteMes+`-`+diaFinal+`|`+NumDiasPagados+`|`+TotalPercepcionesString+`|`+TotalDeduccionesString+`|`+TotalOtrosPagosString+`|`+regPatronal+`|`+curp+`|`+NumSeguridadSocial+`|`+FechaInicioRelLaboral+`|`+Antiguedad+`|`+TipoContrato+`|`+TipoJornada+`|`+TipoRegimen+`|`+numEmpleado+`|`+Departamento+`|Ninguno|`+RiesgoPuesto+`|`+PeriodicidadPago+`|`) 
        }
      }
      
      esCLABE := len(CuentaBancaria)
      if esCLABE == 18 {
        cadOriginal.WriteString(CuentaBancaria+`|`)
      } else {
        cadOriginal.WriteString(c_Banco+`|`+CuentaBancaria+`|`)       
      }

      if TipoRegimenInt == 9  {//ministro
      } else {
        cadOriginal.WriteString(SDIstring+`|`)
      }


      cadOriginal.WriteString(c_Estado+`|`+TotalSueldosString+`|`+totalGravadoPercepcionesString+`|`+totalExentoPercepcionesString+`|`)
      cuantasPercepciones := 0      
      for _,element := range manuntencionActual.ConceptosList {
        if element.Tipo == 1 {//percepcion
          gravadoString := fmt.Sprintf("%.2f", element.SaldoGravado)
          exentoString := fmt.Sprintf("%.2f", element.SaldoExento)
          indexS := strconv.Itoa(element.IdRegistro)
          if element.IdRegistro < 10 {
            indexS = "00"+strconv.Itoa(element.IdRegistro)
          } else {
            if element.IdRegistro < 100 {
              indexS = "0"+strconv.Itoa(element.IdRegistro)
            }
          }
          if  indexS == "002" {//hardcode
            indexS="777"
          }
          
          cuantasPercepciones++
          cadOriginal.WriteString(``+element.TipoSAT+`|`+indexS+`|`+element.Concepto+`|`+gravadoString+`|`+exentoString+`|`)
        }
      }
      totalDeOtrasDeducciones := totalDeducciones - totalImpuestosRetenidos
      totalDeOtrasDeduccionesString := fmt.Sprintf("%.2f", totalDeOtrasDeducciones)
      if totalDeOtrasDeducciones > 0.009 {//0.009
        cadOriginal.WriteString(``+totalDeOtrasDeduccionesString+`|`)
      } else {
        if totalImpuestosRetenidos > 0.009 {//0.009
          cadOriginal.WriteString(``+totalDeOtrasDeduccionesString+`|`)
        }
      }
      if totalImpuestosRetenidos > 0.009 {//0.009
        cadOriginal.WriteString(totalImpuestosRetenidosString+`|`)  
      }
      
      cuantasDeducciones := 0
      //for i := len(manuntencionActual.ConceptosList)-1; i >= 0; i-- {
      //  element := manuntencionActual.ConceptosList[i]
      for _,element := range manuntencionActual.ConceptosList {
        if element.Tipo == 2 {//deducciones
          exentoString := fmt.Sprintf("%.2f", element.SaldoExento)
          indexS := strconv.Itoa(element.IdRegistro)
          if element.IdRegistro < 10 {
            indexS = "00"+strconv.Itoa(element.IdRegistro)
          } else {
            if element.IdRegistro < 100 {
              indexS = "0"+strconv.Itoa(element.IdRegistro)
            }
          }
          if  indexS == "002" {//hardcode
            indexS="777"
          }
          if  element.TipoSAT == "002" {//deducciones
            indexS="002"
          }
            
          cuantasDeducciones++
          cadOriginal.WriteString(``+element.TipoSAT+`|`+indexS+`|`+element.Concepto+`|`+exentoString+`|`)
        }
      }
      cuantasOtrosPagos := 0
      for _,element := range manuntencionActual.ConceptosList {
        if element.Tipo == 3 {//otros pagos
          //gravadoString := fmt.Sprintf("%.2f", element.SaldoGravado)
          exentoString := fmt.Sprintf("%.2f", element.SaldoExento)
          indexS := strconv.Itoa(element.IdRegistro)
          if element.IdRegistro < 10 {
            indexS = "00"+strconv.Itoa(element.IdRegistro)
          } else {
            if element.IdRegistro < 100 {
              indexS = "0"+strconv.Itoa(element.IdRegistro)
            }
          }
          cuantasOtrosPagos++
          cadOriginal.WriteString(``+element.TipoSAT+`|`+indexS+`|`+element.Concepto+`|`+exentoString+`|`)
          if  element.TipoSAT == "002" {//subsidio
            subsidioFijo = ""
            if totalGravadoPercepciones <= 1768.96 {
              subsidioFijo = "407.02"
            } else {
              if totalGravadoPercepciones <= 2653.38 {
                subsidioFijo = "406.83"
              } else {
                if totalGravadoPercepciones <= 3472.84 {
                  subsidioFijo = "406.62"
                } else {
                  if totalGravadoPercepciones <= 3537.87 {
                    subsidioFijo = "392.77"
                  } else {
                    if totalGravadoPercepciones <= 4446.15 {
                      subsidioFijo = "382.46"
                    } else {
                      if totalGravadoPercepciones <= 4717.18 {
                        subsidioFijo = "354.23"
                      } else {
                        if totalGravadoPercepciones <= 5335.42 {
                          subsidioFijo = "324.87"
                        } else {
                          if totalGravadoPercepciones <= 6224.67 {
                            subsidioFijo = "294.63"
                          } else {
                            if totalGravadoPercepciones <= 7113.9 {
                              subsidioFijo = "253.54"
                            } else {
                              if totalGravadoPercepciones <= 7382.33 {
                                subsidioFijo = "217.61"
                              } else {
                                subsidioFijo = "0"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            cadOriginal.WriteString(subsidioFijo+`|`)
          }
        }
      }
      cadOriginal.WriteString(`|`) 
      t := strconv.FormatInt(currentTime, 10)
      query4 := `SELECT timbrado, timestamp, UUID, cantidad
        FROM [Sevenplus].[dbo].[zNominaFacturas] 
        WHERE periodo = `+periodo+`
        AND ER = '`+ER+`' AND BUNIT = '`+BUNIT.(string)+`' AND manual = 1 AND timbrado = 1`
      rows4, err4 := conn.Query(query4)       
      if err4 != nil {
        defer conn.Close()
          fmt.Println(query4) 
        fmt.Println("Perdon manuntencion 4: ", err4.Error())
      }
      timbrado := 0
      UUIDTimbrado := ""
      var tim int
      var times int
      var cantidadFF float64
      for rows4.Next()  {
        timbrado = 1
        rows4.Scan(&tim, &times, &UUIDTimbrado, &cantidadFF)
        cedul2 = models.Manuntencion2{ nombre, cantidadFF, ER, periodo, strconv.Itoa(times), timbrado, UUIDTimbrado}
        models.AddManuntencion2(cedul2, UUIDTimbrado)
      }
      query4 = `SELECT timbrado, timestamp, UUID, cantidad
        FROM [Sevenplus].[dbo].[zNominaFacturas] 
        WHERE periodo = `+periodo+`
        AND ER = '`+ER+`' AND BUNIT = '`+BUNIT.(string)+`' AND manual = 0 AND timbrado = 1`
      rows4, err4 = conn.Query(query4)        
      if err4 != nil {
        defer conn.Close()
        fmt.Println(query4) 
        fmt.Println("Perdon manuntencion 4: ", err4.Error())
      }


      if rows4.Next() {
        timbrado = 1
        rows4.Scan(&tim, &times, &UUIDTimbrado, &cantidadFF)
        cedul2 = models.Manuntencion2{ nombre, cantidadFF, ER, periodo, strconv.Itoa(times), timbrado, UUIDTimbrado}
        models.AddManuntencion2(cedul2, UUIDTimbrado)
      } else {
        timbrado = 0
        queryW := `INSERT INTO [Sevenplus].[dbo].[zNominaFacturas] (ER, cadOriginal,timestamp,periodo,timbrado,UUID,cantidad,BUNIT, cuantasPercepciones, cuantasDeducciones, cuantasOtrosPagos)
        VALUES ('`+ER+`','`+cadOriginal.String()+`',`+t+`,`+periodo+`,0,'',`+totalString+`, '`+BUNIT.(string)+`', `+strconv.Itoa(cuantasPercepciones)+`, `+strconv.Itoa(cuantasDeducciones)+`, `+strconv.Itoa(cuantasOtrosPagos)+`)`
        result, err11 := conn.Exec(queryW)
        if err11 != nil {
          fmt.Println(queryW)
          fmt.Println(err11)
        }
        afectados, _ := result.RowsAffected()
        if afectados == 1 {
          //time.Sleep(1.0 * time.Second)
          queryDireccion1 := "SELECT SCOPE_IDENTITY()"
          rowsDireccion1, errX := conn.Query(queryDireccion1)
          if errX != nil {
            defer conn.Close()
            fmt.Println("Perdon scope! :", errX.Error())
          }
          if rowsDireccion1.Next()  {
            rowsDireccion1.Scan(&IdCFDINomina)
          }
        }
        cedul2 = models.Manuntencion2{ nombre, total, ER, periodo, t, timbrado, UUIDTimbrado}
        models.AddManuntencion2(cedul2, ER)
      }
      
        
  
    }//for
    example := map[string]interface{}{"success" : 1, "conceptos": models.GetAllManuntencion2(), "conceptos2": models.GetAllManuntencion() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}



func (c *DameOptionSegunTipoConceptoSATDeLaBDController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    tipo := c.GetString("tipo")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := `SELECT DISTINCT MAX(idRegistro)as idRegistro,TipoSAT,Concepto
      FROM [Sevenplus].[dbo].[nominaConceptos]
      WHERE BUNIT = '`+BUNIT.(string)+`' AND tipo = `+tipo+`
      GROUP BY TipoSAT, Concepto`
    rows, err := conn.Query(query)
    var IdRegistro int
    ACNT_CODE :=""
    Tipo , _ := strconv.Atoi(tipo)
    var TipoSAT string
    var Concepto string
    GravadoExcento := 0
    models.ClearNominasConcepto()
    var cedul  models.NominasConcepto
        for rows.Next()  {
      rows.Scan(&IdRegistro, &TipoSAT, &Concepto)
      cedul = models.NominasConcepto{IdRegistro, ACNT_CODE, Tipo, TipoSAT, Concepto, GravadoExcento}
      models.AddNominasConcepto(cedul, strconv.Itoa(IdRegistro))
    }
    example := map[string]interface{}{"success" : 1, "conceptos": models.GetAllNominasConcepto()  }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *ActualizaTablaConceptosDeNominaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := `SELECT idRegistro,ACNT_CODE,tipo,TipoSAT,Concepto,GravadoExcento
      FROM [Sevenplus].[dbo].[nominaConceptos]
      WHERE BUNIT = '`+BUNIT.(string)+`'
      order by idRegistro`
    rows, err := conn.Query(query)
    var IdRegistro int
    var ACNT_CODE string
    var Tipo int
    var TipoSAT string
    var Concepto string
    var GravadoExcento int
    models.ClearNominasConcepto()
    var cedul  models.NominasConcepto
        for rows.Next()  {
      rows.Scan(&IdRegistro, &ACNT_CODE, &Tipo, &TipoSAT, &Concepto, &GravadoExcento)
      cedul = models.NominasConcepto{IdRegistro, ACNT_CODE, Tipo, TipoSAT, Concepto, GravadoExcento}
      models.AddNominasConcepto(cedul, strconv.Itoa(IdRegistro))
    }
    example := map[string]interface{}{"success" : 1, "conceptos": models.GetAllNominasConcepto()  }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *ListaDiariosRetenidosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := `SELECT d.timestamp, COUNT(d.idLinea) as cuantas, MAX(d.usuario) as usuario, MAX(t.nombre) as tipoDiario
      FROM [Sevenplus].[dbo].[DiariosRetenidos] d
      INNER JOIN [Sevenplus].[dbo].[TiposDeDiario] t on d.idTipoDeDiario = t.idTipoDeDiario
      WHERE d.BUNIT = '`+BUNIT.(string)+`'
      GROUP BY timestamp`
    rows, err := conn.Query(query)
    var Timestamp int
    var Cuantas int
    var Usuario string
    var TipoDiario string
    models.ClearDiarioRetenidos()
    var cedul  models.DiarioRetenido
        for rows.Next()  {
      rows.Scan(&Timestamp, &Cuantas, &Usuario, &TipoDiario)
      cedul = models.DiarioRetenido{Timestamp,Cuantas,Usuario,TipoDiario}
      models.AddDiarioRetenido(cedul, strconv.Itoa(Timestamp))
    }
    example := map[string]interface{}{ "diariosRetenidos": models.GetAllDiarioRetenido() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}







func (c *TablaImpuestosDetalleController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    rfc := c.GetString("rfc")
    anio := c.GetString("anio")
    BUNIT := c.GetSession("BUNIT")
    impuesto := c.GetString("impuesto")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := `SELECT folioFiscal, fechaExpedicion, razonSocial
      FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_facturacion_XML]
        WHERE rfcRaiz = '`+rfc+`' 
         AND SUBSTRING(convert(varchar(25), fechaExpedicion, 120),1,4) = '`+anio+`'`
    rows, err := conn.Query(query)
    var FolioFiscal string
    var razonSocial string
    var TRANS_DATETIME time.Time
    var importe float64
    var tipo int
    models.ClearImpuesto()
        for rows.Next()  {
      rows.Scan(&FolioFiscal, &TRANS_DATETIME, &razonSocial)
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      fechaReal := ""
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          }
        }
      }
      query2 := `SELECT impuesto, importe, tipo
            FROM [SU_FISCAL].[dbo].[impuestos]
            WHERE rfcRaiz = '`+rfc+`'
            AND folioFiscal = '`+FolioFiscal+`' AND impuesto = '`+impuesto+`'`
      rows2, _ := conn.Query(query2)
      var TipoImpuestoActual models.TipoImpuesto
      for rows2.Next()  {
        rows2.Scan(&impuesto, &importe, &tipo)
        if _, ok := models.TipoImpuestoList[strconv.Itoa(tipo)]; ok {
          } else {
          var periodD models.TipoImpuesto
          periodD = models.TipoImpuesto{  make(map[string]*models.Impuesto) }
          models.TipoImpuestoList[strconv.Itoa(tipo)] = &periodD
        }
        TipoImpuestoActual = models.DameImpuestoPorCodigo(strconv.Itoa(tipo))
        llave := FolioFiscal+" "+fechaReal+" "+razonSocial
        if _, ok := TipoImpuestoActual.ImpuestosList[llave]; ok {
          } else {
          var periodDD models.Impuesto
          periodDD = models.Impuesto{ 0.0 }
          TipoImpuestoActual.ImpuestosList[llave] = &periodDD
        }

        TipoImpuestoActual.ImpuestosList[llave].Importe += importe
      }
    }
    example := map[string]interface{}{"success" : 1,"anio" : anio, "impuestos": models.GetAllImpuesto() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}



func (c *TablaImpuestosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    BUNIT := c.GetSession("BUNIT")
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    //rfc := "AOVF570308FU9"
    rfc := "IAS9306298H0"
    anio := "2016"
    query := `SELECT folioFiscal
      FROM [SU_FISCAL].[dbo].[`+BUNIT.(string)+`_facturacion_XML]
        WHERE rfcRaiz = '`+rfc+`' 
         AND SUBSTRING(convert(varchar(25), fechaExpedicion, 120),1,4) = '`+anio+`'`
    rows, err := conn.Query(query)
    var FolioFiscal string
    var impuesto string
    var importe float64
    var tipo int
    models.ClearImpuesto()
        for rows.Next()  {
      rows.Scan(&FolioFiscal)
      query2 := `SELECT impuesto, importe, tipo
            FROM [SU_FISCAL].[dbo].[impuestos]
            WHERE rfcRaiz = '`+rfc+`'
            AND folioFiscal = '`+FolioFiscal+`'`
      rows2, _ := conn.Query(query2)
      var TipoImpuestoActual models.TipoImpuesto
      for rows2.Next()  {
        rows2.Scan(&impuesto, &importe, &tipo)
        if _, ok := models.TipoImpuestoList[strconv.Itoa(tipo)]; ok {
          } else {
          var periodD models.TipoImpuesto
          periodD = models.TipoImpuesto{  make(map[string]*models.Impuesto) }
          models.TipoImpuestoList[strconv.Itoa(tipo)] = &periodD
        }
        TipoImpuestoActual = models.DameImpuestoPorCodigo(strconv.Itoa(tipo))
      
        if _, ok := TipoImpuestoActual.ImpuestosList[impuesto]; ok {
          } else {
          var periodDD models.Impuesto
          periodDD = models.Impuesto{ 0.0 }
          TipoImpuestoActual.ImpuestosList[impuesto] = &periodDD
        }

        TipoImpuestoActual.ImpuestosList[impuesto].Importe += importe
      }
    }
    example := map[string]interface{}{"success" : 1,"anio" : anio,"rfc" : rfc, "impuestos": models.GetAllImpuesto() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}



func (c *CargaTiposDeInformeController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosTesoreroIglesia(tipoDeUsuario.(int)) {
    //BUNIT := c.GetSession("BUNIT")
    IdDiezmoConcepto := c.GetString("IdDiezmoConcepto")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := `SELECT idDiezmoLinea, idDiezmoConcepto, orden, nombre, cuenta, esSuma, aparece, D_C, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, deboFacturar , rfc, tipo, DESCRIPTN, TREFERENCE
    FROM [Sevenplus].[dbo].[DiezmoLinea]
    WHERE idDiezmoConcepto = `+IdDiezmoConcepto+` AND aparece = 1 order by orden asc`
    rows, err := conn.Query(query)
    var IdDiezmoLinea int 
    var IdDiezmoConceptoSELECT int
    var Orden int 
    var Nombre string 
    var Cuenta string 
    var EsSuma string 
    var Aparece int 
    var D_C string
    var ANAL_T0 string
    var ANAL_T1 string
    var ANAL_T2 string
    var ANAL_T3 string
    var ANAL_T4 string
    var ANAL_T5 string
    var ANAL_T6 string
    var ANAL_T7 string
    var ANAL_T8 string
    var ANAL_T9 string
    var deboFacturar int 
    var rfc string
    var tipo int
    var DESCRIPTN string
    var TREFERENCE string
    models.ClearDiezmoConceptoLinea()
    var cedul  models.DiezmoConceptoLinea 
        for rows.Next()  {
      rows.Scan(&IdDiezmoLinea, &IdDiezmoConceptoSELECT, &Orden, &Nombre, &Cuenta, &EsSuma, &Aparece, &D_C, &ANAL_T0, &ANAL_T1, &ANAL_T2, &ANAL_T3, &ANAL_T4, &ANAL_T5, &ANAL_T6, &ANAL_T7, &ANAL_T8, &ANAL_T9, &deboFacturar, &rfc, &tipo, &DESCRIPTN, &TREFERENCE)
      cedul = models.DiezmoConceptoLinea{IdDiezmoLinea, IdDiezmoConceptoSELECT, Orden, Nombre, Cuenta, EsSuma, Aparece, D_C, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, deboFacturar, rfc, tipo, DESCRIPTN, TREFERENCE}
      models.AddDiezmoConceptoLinea(cedul, strconv.Itoa(Orden))
    }
    example := map[string]interface{}{"success" : 1, "DiezmoConceptoLinea": models.GetAllDiezmoConceptoLinea() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}




func (c *RevisaNotificacionesController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    //aqui me quede..
    models.ClearNotificaciones()
    
    query := `SELECT i.idInforme
      , i.timestamp
      ,  d.concepto
      ,i.fecha
      ,i.facturado, i.idUsuario
  FROM [SunSystemsData].[dbo].[Informes] i
  INNER JOIN [SunSystemsData].[dbo].[DiezmoConcepto] d on d.idDiezmoConcepto = i.idDiezmoConcepto
  WHERE i.contabilizado  = 0 AND d.BUNIT = 'CEA'
  order by i.timestamp asc`
    rows, err := conn.Query(query)
    var Timestamp int 
    var Accion string
    var Titulo string 
    var Descripcion string

    var idInforme int 
    var timestamp int 
    var concepto string 
    var fecha string 
    var facturado int 
    var idUsuario int 
    var cedul  models.Notificaciones
        for rows.Next()  {
      rows.Scan(&idInforme, &timestamp, &concepto, &fecha, &facturado, &idUsuario)
      Accion = "cargaInformePendiente("+strconv.Itoa(idInforme)+")"
      Timestamp = timestamp
      Descripcion = "Fecha de la ficha: "+fecha
      Titulo = concepto
      cedul = models.Notificaciones{Timestamp, Accion, Titulo, Descripcion}
      models.AddNotificaciones(cedul, strconv.Itoa(idInforme)+"-"+strconv.Itoa(Timestamp)+"-"+strconv.Itoa(idUsuario))
    }
    example := map[string]interface{}{"success" : 1, "notificaciones": models.GetAllNotificaciones() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}




func (c *DamePrepolizaDeInformeController) Post() {
  /*alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    idInforme := c.GetString("idInforme")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := `SELECT DISTINCT
       i.timestamp
      ,  d.concepto
      ,i.fecha
      ,i.facturado, u.usuario, u.nombre as nombreUsuario, u.dimension
      ,dl.nombre, dl.cuenta, dl.esSuma, dl.aparece, dl.D_C
      , dl.ANAL_T0, dl.ANAL_T1, dl.ANAL_T2, dl.ANAL_T3, dl.ANAL_T4, dl.ANAL_T5, dl.ANAL_T6, dl.ANAL_T7, dl.ANAL_T8, dl.ANAL_T9
      , dl.deboFacturar, dl.rfc, dl.tipo, dl.DESCRIPTN, dl.TREFERENCE, dl.idDiezmoLinea
  FROM [SunSystemsData].[dbo].[Informes] i
  INNER JOIN [SunSystemsData].[dbo].[DiezmoConcepto] d on d.idDiezmoConcepto = i.idDiezmoConcepto
  INNER JOIN [SunSystemsData].[dbo].[users] u on u.idUsuario = i.idUsuario
  INNER JOIN [SunSystemsData].[dbo].[DiezmoLinea] dl on dl.idDiezmoConcepto = i.idDiezmoConcepto
  WHERE i.idInforme = `+idInforme+`
  order by i.timestamp asc`
    rows, err := conn.Query(query)
    var Timestamp int 
    var Concepto string
    var Fecha string
    var Facturado int
    var Usuario string 
    var NombreUsuario string 
    var Dimension string 
    var Cuenta string 
    var EsSuma int
    var Aparece int 
    var D_C string
    var ANAL_T0 string
    var ANAL_T1 string
    var ANAL_T2 string
    var ANAL_T3 string
    var ANAL_T4 string
    var ANAL_T5 string
    var ANAL_T6 string
    var ANAL_T7 string
    var ANAL_T8 string
    var ANAL_T9 string
    var deboFacturar int 
    var Rfc string
    var Tipo int
    var DESCRIPTN string
    var TREFERENCE string
    var IdDiezmoLinea int
    models.ClearDiezmoConceptoLinea()
    var cedul  models.DiezmoConceptoLinea
        for rows.Next()  {
       
    var D_C string
    var ANAL_T0 string
    var ANAL_T1 string
    var ANAL_T2 string
    var ANAL_T3 string
    var ANAL_T4 string
    var ANAL_T5 string
    var ANAL_T6 string
    var ANAL_T7 string
    var ANAL_T8 string
    var ANAL_T9 string
    var deboFacturar int 
    var Rfc string
    var Tipo int
    var DESCRIPTN string
    var TREFERENCE string
    var IdDiezmoLinea int
      rows.Scan(&Timestamp, &Concepto, &Fecha, &Facturado, &Usuario, &NombreUsuario, &Dimension, &Cuenta, &EsSuma, &Aparece, &D_C, &ANAL_T0, &ANAL_T1, &ANAL_T2, &ANAL_T3, &ANAL_T4, &ANAL_T5, &ANAL_T6, &ANAL_T7, &ANAL_T8, &ANAL_T9, &deboFacturar, &Rfc, &Tipo, &DESCRIPTN, &TREFERENCE, &IdDiezmoLinea)
      cedul = models.DiezmoConceptoLinea{Timestamp, Concepto, Fecha, Facturado, Usuario, NombreUsuario, Dimension, Cuenta, EsSuma, Aparece, D_C, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, deboFacturar, Rfc, Tipo, DESCRIPTN, TREFERENCE, IdDiezmoLinea}
      models.AddDiezmoConceptoLinea(cedul, strconv.Itoa(IdDiezmoLinea))
    }
    example := map[string]interface{}{ "DiezmoConceptoLinea": models.GetAllDiezmoConceptoLinea() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
  */
}


func (c *ListaLineasInformeDiezmoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    IdDiezmoConcepto := c.GetString("IdDiezmoConcepto")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := `SELECT idDiezmoLinea, idDiezmoConcepto, orden, nombre, cuenta, esSuma, aparece, D_C, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, deboFacturar , rfc, tipo, DESCRIPTN, TREFERENCE
    FROM [SunSystemsData].[dbo].[DiezmoLinea]
    WHERE idDiezmoConcepto = `+IdDiezmoConcepto+` order by orden asc`
    rows, err := conn.Query(query)
    var IdDiezmoLinea int 
    var IdDiezmoConceptoSELECT int
    var Orden int 
    var Nombre string 
    var Cuenta string 
    var EsSuma string 
    var Aparece int 
    var D_C string
    var ANAL_T0 string
    var ANAL_T1 string
    var ANAL_T2 string
    var ANAL_T3 string
    var ANAL_T4 string
    var ANAL_T5 string
    var ANAL_T6 string
    var ANAL_T7 string
    var ANAL_T8 string
    var ANAL_T9 string
    var deboFacturar int 
    var rfc string
    var tipo int
    var DESCRIPTN string
    var TREFERENCE string
    models.ClearDiezmoConceptoLinea()
    var cedul  models.DiezmoConceptoLinea
        for rows.Next()  {
      rows.Scan(&IdDiezmoLinea, &IdDiezmoConceptoSELECT, &Orden, &Nombre, &Cuenta, &EsSuma, &Aparece, &D_C, &ANAL_T0, &ANAL_T1, &ANAL_T2, &ANAL_T3, &ANAL_T4, &ANAL_T5, &ANAL_T6, &ANAL_T7, &ANAL_T8, &ANAL_T9, &deboFacturar, &rfc, &tipo, &DESCRIPTN, &TREFERENCE)
      cedul = models.DiezmoConceptoLinea{IdDiezmoLinea, IdDiezmoConceptoSELECT, Orden, Nombre, Cuenta, EsSuma, Aparece, D_C, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, deboFacturar, rfc, tipo, DESCRIPTN, TREFERENCE}
      models.AddDiezmoConceptoLinea(cedul, strconv.Itoa(Orden))
    }
    example := map[string]interface{}{ "DiezmoConceptoLinea": models.GetAllDiezmoConceptoLinea() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}

func (c *ListaConceptosCedulasController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    idCedula := c.GetString("idCedula")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT idConcepto, idCedula, nombre FROM [SunSystemsData].[dbo].[CedulasConceptos] WHERE idCedula = "+idCedula+" order by idConcepto asc"
    rows, err := conn.Query(query)
    var idConcepto int64
    var idCedulaX int64
    var nombre string
    var cedul  models.CedulasConceptos
        for rows.Next()  {
      rows.Scan(&idConcepto, &idCedulaX, &nombre)
      cedul = models.CedulasConceptos{idConcepto,idCedulaX,nombre}
      models.AddCedulasConceptos(cedul, nombre)
    }
    example := map[string]interface{}{ "cedulasConceptos": models.GetAllCedulasConceptos() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}



func (c *NoIdentificadosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }

    query := `SELECT JRNAL_NO, JRNAL_LINE, PERIOD, TREFERENCE, DESCRIPTN, TRANS_DATETIME, AMOUNT FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] 
    WHERE ALLOCATION !='C' AND D_C = 'D' AND ACCNT_CODE like '%788555%' AND PERIOD >= 2015001 AND PERIOD <= 2016012 order by PERIOD asc, TRANS_DATETIME asc`
    rows, err := conn.Query(query)
    var JRNAL_NO_C int
    var JRNAL_LINE_C int    
    var PERIOD_C int
    
    var JRNAL_NO int
    var JRNAL_LINE int    
    var PERIOD int
    var TREFERENCE string
    var DESCRIPTN string
    var TRANS_DATETIME time.Time
    var AMOUNT decimal.Dec
    models.ClearConciliacionDiarios()
    var cedul  models.ConciliacionDiarios

    var channels []Channel  // an empty list
    
        for rows.Next()  {
      rows.Scan(&JRNAL_NO, &JRNAL_LINE, &PERIOD, &TREFERENCE, &DESCRIPTN, &TRANS_DATETIME, &AMOUNT)
      fechaReal := ""
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      amountPositiva := fmt.Sprintf("%.2f",math.Abs(AMOUNT.Float64()))
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          }
        }
      }
      queryD := `SELECT JRNAL_NO, JRNAL_LINE, PERIOD FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] 
      WHERE ALLOCATION !='C' AND D_C = 'C' AND ACCNT_CODE like '%788555%' AND PERIOD >= 2015001 AND AMOUNT = `+amountPositiva+` order by PERIOD asc, JRNAL_NO asc`
      rowsD, errD := conn.Query(queryD)
      if errD != nil {
        fmt.Println(queryD)
      }
      entre := 0
      cuantasVecesAgregue := 0
      for rowsD.Next() {
        entre = 1
        rowsD.Scan(&JRNAL_NO_C, &JRNAL_LINE_C, &PERIOD_C)
        llaveD := strconv.Itoa(JRNAL_NO_C)+"-"+strconv.Itoa(JRNAL_LINE_C)
        if stringInSlice(llaveD, channels) {
        } else {
          if entre == 1 {
            entre = 2
            channels = append(channels, Channel{name:llaveD})
            cedul = models.ConciliacionDiarios{JRNAL_NO, JRNAL_LINE, math.Abs(AMOUNT.Float64()), fechaReal, TREFERENCE, DESCRIPTN, PERIOD, JRNAL_NO_C, JRNAL_LINE_C, PERIOD_C}  
            cuantasVecesAgregue++
            break
          }
          
        }
        
      } 
      if entre != 2 {
        cedul = models.ConciliacionDiarios{JRNAL_NO, JRNAL_LINE, math.Abs(AMOUNT.Float64()), fechaReal,
        TREFERENCE, DESCRIPTN, PERIOD,-1, -1, -1}
        cuantasVecesAgregue++
      }
      llave := strconv.Itoa(JRNAL_NO)+"-"+strconv.Itoa(JRNAL_LINE)
      models.AddConciliacionDiarios(cedul,llave )
    }
    example := map[string]interface{}{ "success" : 1, "diariosReversiados": models.GetAllConciliacionDiarios() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *DiariosReversiadosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT DISTINCT JRNAL_NO, ALLOC_REF,PERIOD FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE ALLOCATION ='C' order by ALLOC_REF asc, JRNAL_NO asc"
    rows, err := conn.Query(query)
    var JRNAL_NO int
    var ALLOC_REF int   
    var PERIOD int64
    models.ClearDiariosReversiados()
    var cedul  models.DiarioRe
        for rows.Next()  {
      rows.Scan(&JRNAL_NO, &ALLOC_REF, &PERIOD)
      cedul = models.DiarioRe{JRNAL_NO,ALLOC_REF,PERIOD}
      models.AddDiarioReversiado(cedul, strconv.Itoa(JRNAL_NO) )
    }
    example := map[string]interface{}{ "diariosReversiados": models.GetAllDiarioReversiados() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}





func (c *BuscarPorReferenciaDiariosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    referencia := c.GetString("referencia")
    BUNIT := c.GetSession("BUNIT")
    

    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }   
    query := `SELECT JRNAL_NO, JRNAL_LINE, AMOUNT, D_C, TRANS_DATETIME, PERIOD, DESCRIPTN, TREFERENCE FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] WHERE TREFERENCE like '%`+referencia+`%'`
    rows, err2 := conn.Query(query)
    if err2 != nil {
      defer conn.Close()
      fmt.Println("Perdon 7.5! : ", err2.Error())
    }


    var JRNAL_NO int
    var JRNAL_LINE int
    var AMOUNT decimal.Dec
    var D_C string
    var TRANS_DATETIME time.Time
    var PERIOD int
    var DESCRIPTN string
    var TREFERENCE string
    
    models.ClearDiarioBuscarCantidad()
    var cedul  models.DiarioBuscarCantidad
        for rows.Next()  {
      rows.Scan(&JRNAL_NO, &JRNAL_LINE, &AMOUNT, &D_C, &TRANS_DATETIME, &PERIOD, &DESCRIPTN, &TREFERENCE)
      amountPrima := AMOUNT.Float64()
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      fechaReal := ""
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          }
        }
      }
      cedul = models.DiarioBuscarCantidad{JRNAL_NO, JRNAL_LINE, amountPrima, D_C, fechaReal, PERIOD, DESCRIPTN, TREFERENCE}
      llave := strconv.Itoa(JRNAL_NO)+"-"+strconv.Itoa(JRNAL_LINE)
      models.AddDiarioBuscarCantidad(cedul, llave )
    }
    example := map[string]interface{}{ "success" : 1, "diarios": models.GetAllDiarioBuscarCantidad() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
  example := map[string]interface{}{ "success" : 0}
  c.Data["json"] = &example
  c.ServeJSON()
}


func (c *BuscarPorCantidadSumaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    cantidad := c.GetString("cantidad")
    BUNIT := c.GetSession("BUNIT")
    amountString := string(cantidad)
    cantidadFloat, _ := strconv.ParseFloat(amountString, 64)
      
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }   

    query := `SELECT JRNAL_NO, JRNAL_LINE, AMOUNT, D_C, TRANS_DATETIME, PERIOD, DESCRIPTN, TREFERENCE 
    FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] WHERE ACCNT_CODE = '611110' AND
    D_C = 'C' AND PERIOD >= 2016001 AND PERIOD <= 2016012`
    //AND ABS(AMOUNT) = `+amountString
    rows, err2 := conn.Query(query)
    if err2 != nil {
      defer conn.Close()
      fmt.Println("Perdon 7.5! : ", err2.Error())
    }


    var JRNAL_NO int
    var JRNAL_LINE int
    var AMOUNT decimal.Dec
    var D_C string
    var TRANS_DATETIME time.Time
    var PERIOD int
    var DESCRIPTN string
    var TREFERENCE string

    var JRNAL_NO2 int
    var JRNAL_LINE2 int
    var AMOUNT2 decimal.Dec
    var D_C2 string
    var TRANS_DATETIME2 time.Time
    var PERIOD2 int
    var DESCRIPTN2 string
    var TREFERENCE2 string
    
    
    models.ClearDiarioBuscarCantidad()
    var cedul  models.DiarioBuscarCantidad
        for rows.Next()  {
      rows.Scan(&JRNAL_NO, &JRNAL_LINE, &AMOUNT, &D_C, &TRANS_DATETIME, &PERIOD, &DESCRIPTN, &TREFERENCE)

      query2 := `SELECT JRNAL_NO, JRNAL_LINE, AMOUNT, D_C, TRANS_DATETIME, PERIOD, DESCRIPTN, TREFERENCE 
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] WHERE ACCNT_CODE = '611110' AND
      D_C = 'C' AND PERIOD >= 2016001 AND PERIOD <= 2016012 AND JRNAL_NO != `+strconv.Itoa(JRNAL_NO)+` AND 
      JRNAL_LINE != `+strconv.Itoa(JRNAL_LINE)+``
      rows2, err22 := conn.Query(query2)
      if err22 != nil {
        defer conn.Close()
        fmt.Println("Perdon 7.52! : ", err22.Error())
      }
      amountPrima := AMOUNT.Float64()
      for rows2.Next()  {
        rows2.Scan(&JRNAL_NO2, &JRNAL_LINE2, &AMOUNT2, &D_C2, &TRANS_DATETIME2, &PERIOD2, &DESCRIPTN2, &TREFERENCE2)
        amountPrima2 := AMOUNT2.Float64()

        if (amountPrima+amountPrima2) == cantidadFloat {
          mes := int(TRANS_DATETIME.Month())
          dia :=  TRANS_DATETIME.Day()
          fechaReal := ""
          if mes > 9 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            if mes > 9 && dia < 10 {
              fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
            } else {
              if mes < 10 && dia > 9 {
                fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
              } else {
                fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
              }
            }
          }
          cedul = models.DiarioBuscarCantidad{JRNAL_NO, JRNAL_LINE, amountPrima, D_C, fechaReal, PERIOD, DESCRIPTN, TREFERENCE}
          llave := strconv.Itoa(JRNAL_NO)+"-"+strconv.Itoa(JRNAL_LINE)
          models.AddDiarioBuscarCantidad(cedul, llave )

          mes2 := int(TRANS_DATETIME2.Month())
          dia2 :=  TRANS_DATETIME2.Day()
          fechaReal2 := ""
          if mes2 > 9 && dia2 > 9 {
            fechaReal2 = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME2.Year(), mes2, dia2)
          } else {
            if mes2 > 9 && dia2 < 10 {
              fechaReal2 = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME2.Year(), mes2, dia2)
            } else {
              if mes2 < 10 && dia2 > 9 {
                fechaReal2 = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME2.Year(), mes2, dia2)
              } else {
                fechaReal2 = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME2.Year(), mes2, dia2)
              }
            }
          }
          cedul = models.DiarioBuscarCantidad{JRNAL_NO2, JRNAL_LINE2, amountPrima2, D_C2, fechaReal2, PERIOD2, DESCRIPTN2, TREFERENCE2}
          llave2 := strconv.Itoa(JRNAL_NO2)+"-"+strconv.Itoa(JRNAL_LINE2)
          models.AddDiarioBuscarCantidad(cedul, llave2 )
        }
      }

      

      
    }
    example := map[string]interface{}{ "success" : 1, "diarios": models.GetAllDiarioBuscarCantidad() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
  example := map[string]interface{}{ "success" : 0}
  c.Data["json"] = &example
  c.ServeJSON()
}


func (c *BuscarPorCantidadDiariosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    cantidad := c.GetString("cantidad")
    BUNIT := c.GetSession("BUNIT")
    amountString := string(cantidad)

    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }   
    query := "SELECT JRNAL_NO, JRNAL_LINE, AMOUNT, D_C, TRANS_DATETIME, PERIOD, DESCRIPTN, TREFERENCE FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE ABS(AMOUNT) = "+amountString
    rows, err2 := conn.Query(query)
    if err2 != nil {
      defer conn.Close()
      fmt.Println("Perdon 7.5! : ", err2.Error())
    }


    var JRNAL_NO int
    var JRNAL_LINE int
    var AMOUNT decimal.Dec
    var D_C string
    var TRANS_DATETIME time.Time
    var PERIOD int
    var DESCRIPTN string
    var TREFERENCE string
    
    models.ClearDiarioBuscarCantidad()
    var cedul  models.DiarioBuscarCantidad
        for rows.Next()  {
      rows.Scan(&JRNAL_NO, &JRNAL_LINE, &AMOUNT, &D_C, &TRANS_DATETIME, &PERIOD, &DESCRIPTN, &TREFERENCE)
      amountPrima := AMOUNT.Float64()
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      fechaReal := ""
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          }
        }
      }
      cedul = models.DiarioBuscarCantidad{JRNAL_NO, JRNAL_LINE, amountPrima, D_C, fechaReal, PERIOD, DESCRIPTN, TREFERENCE}
      llave := strconv.Itoa(JRNAL_NO)+"-"+strconv.Itoa(JRNAL_LINE)
      models.AddDiarioBuscarCantidad(cedul, llave )
    }
    example := map[string]interface{}{ "success" : 1, "diarios": models.GetAllDiarioBuscarCantidad() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
  example := map[string]interface{}{ "success" : 0}
  c.Data["json"] = &example
  c.ServeJSON()
}

func (c *ListaLineasTiposDeDiarioController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    idTipoDeDiario := c.GetString("idTipoDeDiario")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }   
    query := "SELECT idLinea, Linea, deboFacturar, servicio, cliente, concepto, DESCRIPTN, ACNT_CODE , D_C, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9 FROM [SunSystemsData].[dbo].[TiposDeDiarioLineas] WHERE idTipoDeDiario = "+idTipoDeDiario+" order by Linea asc"
    rows, err := conn.Query(query)
    var idLinea int
    var Linea int
    var deboFacturar int
    var cuenta string
    var cliente string
    var servicio string
    var concepto string
    var DESCRIPTN string
    var D_C string
    var ANAL_T0 string
    var ANAL_T1 string
    var ANAL_T2 string
    var ANAL_T3 string
    var ANAL_T4 string
    var ANAL_T5 string
    var ANAL_T6 string
    var ANAL_T7 string
    var ANAL_T8 string
    var ANAL_T9 string
    models.ClearTiposDeDiarioLineas()
    var cedul  models.TipoDeDiariosLineas
        for rows.Next()  {
      rows.Scan(&idLinea, &Linea, &deboFacturar, &servicio, &cliente, &concepto, &DESCRIPTN, &cuenta, &D_C, &ANAL_T0, &ANAL_T1, &ANAL_T2, &ANAL_T3, &ANAL_T4, &ANAL_T5, &ANAL_T6, &ANAL_T7, &ANAL_T8, &ANAL_T9)
      cedul = models.TipoDeDiariosLineas{idLinea, Linea, deboFacturar, cuenta, cliente, servicio, concepto, DESCRIPTN, D_C, ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8,ANAL_T9}
      models.AddTiposDeDiarioLineas(cedul, strconv.Itoa(idLinea) )
    }
    example := map[string]interface{}{ "tiposDeDiarioLineas": models.GetAllTiposDeDiariosLineas() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}





func (c *CorrigeDiariosDiferenciasController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "UPDATE [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] SET OTHER_AMT = AMOUNT"
    _ , err1 := conn.Exec(query)
    if err1 != nil {
      defer conn.Close()
      fmt.Println("Perdon update dif! : ", err1.Error())
    }
    example := map[string]interface{}{ "success" : 1 }
    c.Data["json"] = &example
    c.ServeJSON()
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}

func (c *TablaDiariosDiferenciasController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT JRNAL_NO, JRNAL_LINE, AMOUNT, DESCRIPTN, OTHER_AMT, ACCNT_CODE, TRANS_DATETIME, PERIOD, TREFERENCE FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] WHERE AMOUNT != OTHER_AMT order by JRNAL_NO asc, JRNAL_LINE asc"
    rows, err := conn.Query(query)
    if err != nil {
      example := map[string]interface{}{ "success" : 0 }
      c.Data["json"] = &example
      c.ServeJSON()
    }
    
    var Diario int
    var Linea int
    var AMOUNT decimal.Dec
    var OTH_AMOUNT decimal.Dec
    var TRANS_DATETIME time.Time
    var PERIOD int
    var DESCRIPTN string
    var TREFERENCE string
    var ACNT_CODE string
    models.ClearDiferencia()
    var cedul  models.Diferencias
        for rows.Next()  {
      rows.Scan(&Diario, &Linea, &AMOUNT, &DESCRIPTN, &OTH_AMOUNT, &ACNT_CODE, &TRANS_DATETIME, &PERIOD, &TREFERENCE)
      amountPrima := AMOUNT.Float64()
      amountPrimaOTH := OTH_AMOUNT.Float64()
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      fechaReal := ""
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          }
        }
      }
      llave := strconv.Itoa(Diario)+"-"+strconv.Itoa(Linea)
      cedul = models.Diferencias{Diario,Linea,amountPrima, amountPrimaOTH, fechaReal, PERIOD, DESCRIPTN, TREFERENCE, ACNT_CODE}
      models.AddDiferencia(cedul, llave)
    }
    example := map[string]interface{}{ "success" : 1 , "diferencias": models.GetAllDiferencias() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}

func (c *DameListaDeCamposController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT idCampo, nombre, url FROM [SunSystemsData].[dbo].[zCampos] order by idCampo asc"
    rows, err := conn.Query(query)
    if err != nil {
      example := map[string]interface{}{ "success" : 0 }
      c.Data["json"] = &example
      c.ServeJSON()
    }
    var idCampo int
    var nombre string
    var url string
    models.ClearOtrosCampos()
    var cedul  models.OtrosCampos
        for rows.Next()  {
      rows.Scan(&idCampo, &nombre, &url)
      cedul = models.OtrosCampos{idCampo,nombre,url}
      models.AddOtrosCampos(cedul, strconv.Itoa(idCampo) )
    }
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.String() 
    substring := string(dateString[0:10])
      byteArray := []byte(substring)
    hasher := sha512.New()
      hasher.Write(byteArray)
    cryptoText := base64.StdEncoding.EncodeToString(  []byte(hex.EncodeToString(hasher.Sum(nil))))
    example := map[string]interface{}{ "success" : 1 , "otrosCampos": models.GetAllOtrosCampos(), "hash" : cryptoText, "BUNIT" : BUNIT.(string) }
    c.Data["json"] = &example
    c.ServeJSON()
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}


func (c *ChecaOtrosCamposController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT idCampo, nombre, url FROM [SunSystemsData].[dbo].[zCampos] order by idCampo asc"
    rows, err := conn.Query(query)
    if err != nil {
      example := map[string]interface{}{ "success" : 0 }
      c.Data["json"] = &example
      c.ServeJSON()
    }
    var idCampo int
    var nombre string
    var url string
    models.ClearOtrosCampos()
    var cedul  models.OtrosCampos
        for rows.Next()  {
      rows.Scan(&idCampo, &nombre, &url)
      cedul = models.OtrosCampos{idCampo,nombre,url}
      models.AddOtrosCampos(cedul, strconv.Itoa(idCampo) )
    }
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.String() 
    substring := string(dateString[0:10])
      byteArray := []byte(substring)
    hasher := sha512.New()
      hasher.Write(byteArray)
    cryptoText := base64.StdEncoding.EncodeToString(  []byte(hex.EncodeToString(hasher.Sum(nil))))
    example := map[string]interface{}{ "success" : 1 , "otrosCampos": models.GetAllOtrosCampos(), "hash" : cryptoText, "BUNIT" : BUNIT.(string) }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
func (c *ListaLineasCedulasController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    IdConcepto := c.GetString("IdConcepto")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT NumCtaPago, MetodoDePago, correo, rfc, razonSocial, idLinea, idConcepto, cuenta, D_C_Tipo, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9 FROM [SunSystemsData].[dbo].[CedulasLinea] WHERE idConcepto = "+IdConcepto+" order by idLinea asc"
    rows, err := conn.Query(query)
    var idLinea int
    var idConceptoX int64   
    var cuenta string
    var D_C_Tipo int64
    var Correo string
    var ANAL_T0 string
    var ANAL_T1 string
    var ANAL_T2 string
    var ANAL_T3 string
    var ANAL_T4 string
    var ANAL_T5 string
    var ANAL_T6 string
    var ANAL_T7 string
    var ANAL_T8 string
    var ANAL_T9 string
    var RFC string
    var RazonSocial string
    var NumCtaPago string
    var MetodoDePago string
    models.ClearCedulasLineas()
    var cedul  models.CedulasLineas
        for rows.Next()  {
      rows.Scan(&NumCtaPago, &MetodoDePago, &Correo, &RFC, &RazonSocial,&idLinea, &idConceptoX, &cuenta, &D_C_Tipo, &ANAL_T0, &ANAL_T1, &ANAL_T2, &ANAL_T3, &ANAL_T4, &ANAL_T5, &ANAL_T6, &ANAL_T7, &ANAL_T8, &ANAL_T9)
      cedul = models.CedulasLineas{idLinea,idConceptoX,cuenta,D_C_Tipo,ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8,ANAL_T9,RFC, RazonSocial, Correo, MetodoDePago, NumCtaPago}
      models.AddCedulasLineas(cedul, strconv.Itoa(idLinea) )
    }
    example := map[string]interface{}{ "cedulasLineas": models.GetAllCedulasLineas() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *VeDetalleSegundoNivelController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    subdetalle := c.GetString("subdetalle")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    PERIOD := c.GetString("PERIOD")
    
      query1 := ""

    if Compare(subdetalle,"1")==0 {//Cajas y bancos
        //1 - 109, fondo 10, CAJAS Y BANCOS
      query1 = `SELECT SUM(AMOUNT) as amount, ACCNT_CODE
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
        WHERE SUBSTRING(ACCNT_CODE,1,3) in('100','101','102','103','104','105','106','107','108','109')
        AND PERIOD <= `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'
         GROUP BY ACCNT_CODE
        order by ACCNT_CODE`
    }
    if Compare(subdetalle,"2")==0 {//INVERSIONES
      //11 - 119, fondo 10, INVERSIONES
      query1 = `SELECT SUM(AMOUNT) as amount, ACCNT_CODE
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
        WHERE SUBSTRING(ACCNT_CODE,1,3) in('110','111','112','113','114','115','116','117','118','119')
        AND PERIOD <= `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10' GROUP BY ACCNT_CODE
        order by ACCNT_CODE`
    }
    rows1, err1 := conn.Query(query1)
    if err1 != nil {
      fmt.Println(err1)
    }
    var AMOUNT decimal.Dec
    var cuenta string
    models.ClearLineaDetalle()
    ///var cedul  models.LineaDetalle
       
    for rows1.Next()  {
      rows1.Scan(&AMOUNT, &cuenta)
      cuenta = strings.TrimSpace(cuenta)
      cuenta = Subsana(cuenta)
      amountPrima := AMOUNT.Float64()*-1
      cedul := models.LineaDetalle{1, cuenta, amountPrima}
      nuevoString := "cuenta"+cuenta
      models.LineaDetalleList[nuevoString] = &cedul
      //models.AddLineaDetalle(cedul, "Hola"+strconv.Itoa(i))
      
    }
  

    fmt.Println(models.LineaDetalleList)
    //fmt.Println(models.LineaDetalleList["102160"])
    example := map[string]interface{}{ "success" : 1, "lineas": models.GetAllLineaDetalle() }
    //example := map[string]interface{}{ "success" : 1}
    c.Data["json"] = &example
    c.ServeJSON()
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}

func (c *VeDetallePrimerNivelController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    tipo := c.GetString("tipo")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    PERIOD := c.GetString("PERIOD")
    anio:=string(PERIOD[0:4]) 
    mes:=string(PERIOD[5:7])  
    PERIOD_ANTERIOR :=""
    mesNumero, _ := strconv.Atoi(mes)
    if mesNumero == 1 {
      mesS := "12"
      anioAnterior, _ := strconv.Atoi(anio)
      anioAnterior--
      PERIOD_ANTERIOR = strconv.Itoa(anioAnterior)+"0"+mesS
    } else {
      mesNumero--
      mesS := strconv.Itoa(mesNumero)
      if mesNumero < 10 {
        mesS = "0"+mesS
      }
      PERIOD_ANTERIOR = anio+"0"+mesS
    }
    
  

    if Compare(tipo,"1")==0 {//ACTIVOS CORRIENTES
        //1 - 109, fondo 10, CAJAS Y BANCOS
      models.ClearLineaDetalle()
      var cedul  models.LineaDetalle
       
      query1 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
        WHERE SUBSTRING(ACCNT_CODE,1,3) in('100','101','102','103','104','105','106','107','108','109')
        AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
      rows1, err1 := conn.Query(query1)
      if err1 != nil {
        fmt.Println(err1)
      }
      var AMOUNT_CAJA_BANCOS decimal.Dec
      if rows1.Next()  {
        rows1.Scan(&AMOUNT_CAJA_BANCOS)
        amountPrima := math.Abs(AMOUNT_CAJA_BANCOS.Float64())
        cedul = models.LineaDetalle{1,"Caja y bancos",amountPrima}
        models.AddLineaDetalle(cedul,"caja")
      }

      //11 - 119, fondo 10, INVERSIONES
    
      query2 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
        WHERE SUBSTRING(ACCNT_CODE,1,3) in('110','111','112','113','114','115','116','117','118','119')
        AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
      rows2, err2 := conn.Query(query2)
      if err2 != nil {
        fmt.Println(err2)
      }
      var AMOUNT_INVERSIONES decimal.Dec
      if rows2.Next()  {
        rows2.Scan(&AMOUNT_INVERSIONES)
        amountPrima := math.Abs(AMOUNT_INVERSIONES.Float64())
        cedul = models.LineaDetalle{2,"Inversiones",amountPrima}
        models.AddLineaDetalle(cedul,"inversiones")
      }

      //139, fondo 10, CUENTAS X COBRAR
      //12, 14, 131,132,133,134,135,136,137,138, CUENTAS X COBRAR
      //3 - 349, fondo 10, CUENTAS X COBRAR
      var AMOUNT_CUENTAS_POR_COBRAR decimal.Dec
      acumulador := 0.0
      
      
      query3_A := `SELECT ISNULL(SUM(AMOUNT),0) as amount
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
        WHERE SUBSTRING(ACCNT_CODE,1,3) in('139')
        AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
      rows3_A, err3_A := conn.Query(query3_A)
      if err3_A != nil {
        fmt.Println(err3_A)
      }
      if rows3_A.Next()  {
        rows3_A.Scan(&AMOUNT_CUENTAS_POR_COBRAR)
        amountPrima := math.Abs(AMOUNT_CUENTAS_POR_COBRAR.Float64())
        acumulador=acumulador+amountPrima
      }
      var ACNT_CODE string

      query3_BB := `SELECT ACNT_CODE FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT]
       WHERE ISNUMERIC( SUBSTRING(ACNT_CODE,1,1))<>1 OR (SUBSTRING(ACNT_CODE,1,2) in('12','14','30','31','32','33','34') OR SUBSTRING(ACNT_CODE,1,3) in('130','131','132','133','134','135','136','137','138'))`
      rows3_BB, err3_BB := conn.Query(query3_BB)
      if err3_BB != nil {
        fmt.Println(err3_BB)
      }
      for rows3_BB.Next()  {
        rows3_BB.Scan(&ACNT_CODE)
        query3_B := `SELECT ISNULL(SUM(AMOUNT),0) as amount
          FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
          WHERE ACCNT_CODE = '`+ACNT_CODE+`'
          AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
        rows3_B, err3_B := conn.Query(query3_B)
        if err3_B != nil {
          fmt.Println(err3_B)
        }
        if rows3_B.Next()  {
          rows3_B.Scan(&AMOUNT_CUENTAS_POR_COBRAR)
          amountPrima1 := AMOUNT_CUENTAS_POR_COBRAR.Float64()
          if amountPrima1 < 0 {
            amountPrima := math.Abs(AMOUNT_CUENTAS_POR_COBRAR.Float64())
            acumulador=acumulador+amountPrima 
          }
        }
      }

      cedul = models.LineaDetalle{3,"Cuentas por cobrar",acumulador}
      models.AddLineaDetalle(cedul,"Cuentas por cobrar")
      //16- 169, fondo10, INVENTARIOS
    

      query4 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
        WHERE SUBSTRING(ACCNT_CODE,1,2) in('16')
        AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
      rows4, err4 := conn.Query(query4)
      if err4 != nil {
        fmt.Println(err4)
      }
      var AMOUNT_INVENTARIO decimal.Dec
      if rows4.Next()  {
        rows4.Scan(&AMOUNT_INVENTARIO)
        amountPrima := math.Abs(AMOUNT_INVENTARIO.Float64())
        cedul = models.LineaDetalle{4,"Inventario",amountPrima}
        models.AddLineaDetalle(cedul,"Inventario")
      }
      //17- 189, fondo10, Pagos anticipados
      
      query5 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
        WHERE SUBSTRING(ACCNT_CODE,1,2) in('17','18')
        AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
      rows5, err5 := conn.Query(query5)
      if err5 != nil {
        fmt.Println(err5)
      }
      var AMOUNT_PAGOS_ANTICIPADOS decimal.Dec
      if rows5.Next()  {
        rows5.Scan(&AMOUNT_PAGOS_ANTICIPADOS)
        amountPrima := math.Abs(AMOUNT_PAGOS_ANTICIPADOS.Float64())
        cedul = models.LineaDetalle{5,"Pagos anticipados",amountPrima}
        models.AddLineaDetalle(cedul,"pagosAnticipados")
      }

      //19, fondo 10, cuentas por cobrar entre fondos
      
      query6 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
        WHERE SUBSTRING(ACCNT_CODE,1,2) in('19')
        AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
      rows6, err6 := conn.Query(query6)
      if err6 != nil {
        fmt.Println(err6)
      }
      var AMOUNT_ENTRE_FONDOS decimal.Dec
      if rows6.Next()  {
        rows6.Scan(&AMOUNT_ENTRE_FONDOS)
        amountPrima := math.Abs(AMOUNT_ENTRE_FONDOS.Float64())
        cedul = models.LineaDetalle{6,"Cuentas por cobrar entre fondos",amountPrima}
        models.AddLineaDetalle(cedul,"entreFondos")
      }

      //15- 159, fondo10, Documentos y prestamos x pagar
      

      query7 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
        WHERE SUBSTRING(ACCNT_CODE,1,2) in('15')
        AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
      rows7, err7 := conn.Query(query7)
      if err7 != nil {
        fmt.Println(err7)
      }
      var AMOUNT_DOCUMENTOS decimal.Dec
      if rows7.Next()  {
        rows7.Scan(&AMOUNT_DOCUMENTOS)
        amountPrima := math.Abs(AMOUNT_DOCUMENTOS.Float64())
        cedul = models.LineaDetalle{7,"Documentos",amountPrima}
        models.AddLineaDetalle(cedul,"Documentos y prestamos x pagar")
      }
    } else {
      if Compare(tipo,"2")==0 {//PASIVOS CORRIENTES
          //1 - 109, fondo 10, CAJAS Y BANCOS
        models.ClearLineaDetalle()
        var cedul  models.LineaDetalle
         
        var AMOUNT_CUENTAS_POR_PAGAR decimal.Dec
        acumulador := 0.0
        var ACNT_CODE string

        query3_BB := `SELECT ACNT_CODE FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT]
         WHERE ISNUMERIC( SUBSTRING(ACNT_CODE,1,1))<>1 OR (SUBSTRING(ACNT_CODE,1,2) in('12','14','30','31','32','33','34') OR SUBSTRING(ACNT_CODE,1,3) in('130','131','132','133','134','135','136','137','138'))`
        rows3_BB, err3_BB := conn.Query(query3_BB)
        if err3_BB != nil {
          fmt.Println(err3_BB)
        }
        for rows3_BB.Next()  {
          rows3_BB.Scan(&ACNT_CODE)
          query3_B := `SELECT ISNULL(SUM(AMOUNT),0) as amount
            FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
            WHERE ACCNT_CODE = '`+ACNT_CODE+`'
            AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
          rows3_B, err3_B := conn.Query(query3_B)
          if err3_B != nil {
            fmt.Println(err3_B)
          }
          if rows3_B.Next()  {
            rows3_B.Scan(&AMOUNT_CUENTAS_POR_PAGAR)
            amountPrima1 := AMOUNT_CUENTAS_POR_PAGAR.Float64()
            if amountPrima1 > 0 {
              amountPrima := math.Abs(AMOUNT_CUENTAS_POR_PAGAR.Float64())
              acumulador=acumulador+amountPrima 
            }
          }
        }

        cedul = models.LineaDetalle{1,"Cuentas por pagar",acumulador}
        models.AddLineaDetalle(cedul,"Cuentas por pagar")
        
        query7 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
          FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
          WHERE SUBSTRING(ACCNT_CODE,1,2) in('35')
          AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
        rows7, err7 := conn.Query(query7)
        if err7 != nil {
          fmt.Println(err7)
        }
        var AMOUNT_DOCUMENTOS decimal.Dec
        if rows7.Next()  {
          rows7.Scan(&AMOUNT_DOCUMENTOS)
          amountPrima := math.Abs(AMOUNT_DOCUMENTOS.Float64())
          cedul = models.LineaDetalle{2,"Documentos",amountPrima}
          models.AddLineaDetalle(cedul,"Documentos x pagar")
        }

        query1 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
          FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
          WHERE SUBSTRING(ACCNT_CODE,1,2) in('36')
          AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
        rows1, err1 := conn.Query(query1)
        if err1 != nil {
          fmt.Println(err1)
        }
        var AMOUNT_FONDOS_CONFIADOS decimal.Dec
        if rows1.Next()  {
          rows1.Scan(&AMOUNT_FONDOS_CONFIADOS)
          amountPrima := math.Abs(AMOUNT_FONDOS_CONFIADOS.Float64())
          cedul = models.LineaDetalle{3,"Fondos",amountPrima}
          models.AddLineaDetalle(cedul,"Fondos confiados y de agencia")
        }

        query2 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
          FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
          WHERE SUBSTRING(ACCNT_CODE,1,2) in('37','38')
          AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
        rows2, err2 := conn.Query(query2)
        if err2 != nil {
          fmt.Println(err2)
        }
        var AMOUNT_OTROS_PASIVOS_CORRIENTES decimal.Dec
        if rows2.Next()  {
          rows2.Scan(&AMOUNT_OTROS_PASIVOS_CORRIENTES)
          amountPrima := math.Abs(AMOUNT_OTROS_PASIVOS_CORRIENTES.Float64())
          cedul = models.LineaDetalle{4,"Otros pasivos corrientes",amountPrima}
          models.AddLineaDetalle(cedul,"Otros pasivos corrientes")
        }

      
        acumulador = 0.0
        query4_BB := `SELECT ACNT_CODE FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT]
         WHERE SUBSTRING(ACNT_CODE,1,2) in('19')`
        rows4_BB, err4_BB := conn.Query(query4_BB)
        if err4_BB != nil {
          fmt.Println(err4_BB)
        }
        for rows4_BB.Next()  {
          rows4_BB.Scan(&ACNT_CODE)
          query4_B := `SELECT ISNULL(SUM(AMOUNT),0) as amount
            FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
            WHERE ACCNT_CODE = '`+ACNT_CODE+`'
            AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 = '10'`
          rows4_B, err4_B := conn.Query(query4_B)
          if err4_B != nil {
            fmt.Println(err4_B)
          }
          if rows4_B.Next()  {
            rows4_B.Scan(&AMOUNT_CUENTAS_POR_PAGAR)
            amountPrima1 := AMOUNT_CUENTAS_POR_PAGAR.Float64()
            if amountPrima1 > 0 {
              amountPrima := math.Abs(AMOUNT_CUENTAS_POR_PAGAR.Float64())
              acumulador=acumulador+amountPrima 
            }
          }
        }
        cedul = models.LineaDetalle{5,"Cuentas por pagar entre fondos",acumulador}
        models.AddLineaDetalle(cedul,"Cuentas por pagar entre fondos")
      } else {
      if Compare(tipo,"3")==0 {//CGASTOS OPERATIVOS
          

            models.ClearLineaDetalle()
            var cedul  models.LineaDetalle

            esteAnio:=string(PERIOD[0:4]) 
            PERIOD_INICIO := esteAnio+"001"

            anteriorAnio, _ := strconv.Atoi(esteAnio)
            anteriorAnio--
            anteriorAnioS := strconv.Itoa(anteriorAnio)

            //PERIOD_INICIO_ANTERIOR := anteriorAnioS+"001"
            PERIOD_ANTERIOR := anteriorAnioS+string(PERIOD[4:7])
            acumulador := 0.0
             
            
            //AND  SUBSTRING( CAST(PERIOD AS NVARCHAR(11)),1,4)  = '`+esteAnio+`'

            query7 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
              FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
              WHERE (SUBSTRING(ACCNT_CODE,1,2) in('80','81','82','85','86','87','88','89','90','91','92','93','94','95','98') OR
              SUBSTRING(ACCNT_CODE,1,3) in('978') )
              AND PERIOD >= `+PERIOD_INICIO+` AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
              AND ANAL_T3 >= 'AFO'`
            rows7, err7 := conn.Query(query7)
            if err7 != nil {
              fmt.Println(err7)
            }
            var AMOUNT_ESTE_ANO decimal.Dec
            if rows7.Next()  {
              rows7.Scan(&AMOUNT_ESTE_ANO)
              amountPrima := math.Abs(AMOUNT_ESTE_ANO.Float64())
              acumulador = acumulador + amountPrima
              cedul = models.LineaDetalle{1,"Este año",amountPrima}
              models.AddLineaDetalle(cedul,"Este año")
            }
            
            query1 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
              FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
              WHERE (SUBSTRING(ACCNT_CODE,1,2) in('80','81','82','85','86','87','88','89','90','91','92','93','94','95','98') OR
              SUBSTRING(ACCNT_CODE,1,3) in('978') )
               AND PERIOD >= `+PERIOD_ANTERIOR+` AND PERIOD < `+PERIOD_INICIO+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
               AND ANAL_T3 >= 'AFO'`
              
            
            rows1, err1 := conn.Query(query1)
            if err1 != nil {
              fmt.Println(err1)
            }
            var AMOUNT_FONDOS_CONFIADOS decimal.Dec
            if rows1.Next()  {
              rows1.Scan(&AMOUNT_FONDOS_CONFIADOS)
              amountPrima := math.Abs(AMOUNT_FONDOS_CONFIADOS.Float64())
              acumulador = acumulador + amountPrima
              cedul = models.LineaDetalle{2,"Más el año anterior",amountPrima}
              models.AddLineaDetalle(cedul,"Más el año anterior")
            }

            query8 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
              FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
              WHERE ACCNT_CODE = '878777'
              AND PERIOD >= `+PERIOD_INICIO+` AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
              AND ANAL_T3 >= 'AFO'`
            rows8, err8 := conn.Query(query8)
            if err8 != nil {
              fmt.Println(err8)
            }
            var AMOUNT_DIEZMO_UNION decimal.Dec
            if rows8.Next()  {
              rows8.Scan(&AMOUNT_DIEZMO_UNION)
              amountPrima := math.Abs(AMOUNT_DIEZMO_UNION.Float64())
              acumulador = acumulador - amountPrima
              cedul = models.LineaDetalle{3,"Menos diezmo a unión",amountPrima}
              models.AddLineaDetalle(cedul,"Menos diezmo a unión")
            }

            query88 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
              FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
              WHERE ACCNT_CODE = '878777'
              AND PERIOD >= `+PERIOD_ANTERIOR+` AND PERIOD < `+PERIOD_INICIO+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
              AND ANAL_T3 >= 'AFO'`
            rows88, err88 := conn.Query(query88)
            if err88 != nil {
              fmt.Println(err88)
            }
            if rows88.Next()  {
              rows88.Scan(&AMOUNT_DIEZMO_UNION)
              amountPrima := math.Abs(AMOUNT_DIEZMO_UNION.Float64())
              acumulador = acumulador - amountPrima
              cedul = models.LineaDetalle{4,"Menos diezmo a unión - año pasado",amountPrima}
              models.AddLineaDetalle(cedul,"Menos diezmo a unión - año pasado")
            }

            query9 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
              FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
              WHERE ACCNT_CODE = '878555'
              AND PERIOD >= `+PERIOD_INICIO+` AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
              AND ANAL_T3 >= 'AFO'`
            rows9, err9 := conn.Query(query9)
            if err9 != nil {
              fmt.Println(err9)
            }
            var AMOUNT_DIEZMO_TAM decimal.Dec
            if rows9.Next()  {
              rows9.Scan(&AMOUNT_DIEZMO_TAM)
              amountPrima := math.Abs(AMOUNT_DIEZMO_TAM.Float64())
              acumulador = acumulador - amountPrima
              cedul = models.LineaDetalle{5,"Menos diezmo a TAM",amountPrima}
              models.AddLineaDetalle(cedul,"Menos diezmo a TAM")
            }

            query99 := `SELECT ISNULL(SUM(AMOUNT),0) as amount
              FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
              WHERE ACCNT_CODE = '878555'
              AND PERIOD >= `+PERIOD_ANTERIOR+` AND PERIOD < `+PERIOD_INICIO+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
              AND ANAL_T3 >= 'AFO'`
            rows99, err99 := conn.Query(query99)
            if err99 != nil {
              fmt.Println(err99)
            }
            if rows99.Next()  {
              rows99.Scan(&AMOUNT_DIEZMO_TAM)
              amountPrima := math.Abs(AMOUNT_DIEZMO_TAM.Float64())
              acumulador = acumulador - amountPrima
              cedul = models.LineaDetalle{6,"Menos diezmo a TAM - año pasado",amountPrima}
              models.AddLineaDetalle(cedul,"Menos diezmo a TAM - año pasado")
            }

            
            queryA := `SELECT ISNULL(SUM(AMOUNT),0) as amount
              FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
              WHERE (SUBSTRING(ACCNT_CODE,1,2) in('80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','98') OR
              SUBSTRING(ACCNT_CODE,1,3) in('978') )
               AND PERIOD >= `+PERIOD_INICIO+` AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
               AND ANAL_T3 = 'AFOMISIO01'`
              
            rowsA, errA := conn.Query(queryA)
            if errA != nil {
              fmt.Println(errA)
            }
            var AMOUNT_AFOMISIO01 decimal.Dec
            if rowsA.Next()  {
              rowsA.Scan(&AMOUNT_AFOMISIO01)
              amountPrima := math.Abs(AMOUNT_AFOMISIO01.Float64())
              acumulador = acumulador - amountPrima
              cedul = models.LineaDetalle{7,"Menos Ofrenda AFOMISIO01",amountPrima}
              models.AddLineaDetalle(cedul,"Menos Ofrenda AFOMISIO01")
            }

            queryAA := `SELECT ISNULL(SUM(AMOUNT),0) as amount
              FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
              WHERE (SUBSTRING(ACCNT_CODE,1,2) in('80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','98') OR
              SUBSTRING(ACCNT_CODE,1,3) in('978') )
               AND PERIOD >= `+PERIOD_ANTERIOR+` AND PERIOD < `+PERIOD_INICIO+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
               AND ANAL_T3 = 'AFOMISIO01'`
              
            rowsAA, errAA := conn.Query(queryAA)
            if errAA != nil {
              fmt.Println(errAA)
            }
            if rowsAA.Next()  {
              rowsAA.Scan(&AMOUNT_AFOMISIO01)
              amountPrima := math.Abs(AMOUNT_AFOMISIO01.Float64())
              acumulador = acumulador - amountPrima
              cedul = models.LineaDetalle{8,"Menos Ofrenda AFOMISIO01 - año pasado",amountPrima}
              models.AddLineaDetalle(cedul,"Menos Ofrenda AFOMISIO01 - año pasado")
            }

            queryB := `SELECT ISNULL(SUM(AMOUNT),0) as amount
              FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
              WHERE (SUBSTRING(ACCNT_CODE,1,2) in('80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','98') OR
              SUBSTRING(ACCNT_CODE,1,3) in('978') )
               AND PERIOD >= `+PERIOD_INICIO+` AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
               AND ANAL_T3 = 'AFOAG1111G'`
              
            rowsB, errB := conn.Query(queryB)
            if errB != nil {
              fmt.Println(errB)
            }
            var AMOUNT_AFOAG1111G decimal.Dec
            if rowsB.Next()  {
              rowsB.Scan(&AMOUNT_AFOAG1111G)
              amountPrima := math.Abs(AMOUNT_AFOAG1111G.Float64())
              acumulador = acumulador - amountPrima
              cedul = models.LineaDetalle{9,"Menos Ofrenda AFOAG1111G",amountPrima}
              models.AddLineaDetalle(cedul,"Menos Ofrenda AFOAG1111G")
            }

            queryBB := `SELECT ISNULL(SUM(AMOUNT),0) as amount
              FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
              WHERE (SUBSTRING(ACCNT_CODE,1,2) in('80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','98') OR
              SUBSTRING(ACCNT_CODE,1,3) in('978') )
               AND PERIOD >= `+PERIOD_ANTERIOR+` AND PERIOD < `+PERIOD_INICIO+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
               AND ANAL_T3 = 'AFOAG1111G'`
              
            rowsBB, errBB := conn.Query(queryBB)
            if errBB != nil {
              fmt.Println(errBB)
            }
            if rowsBB.Next()  {
              rowsBB.Scan(&AMOUNT_AFOAG1111G)
              amountPrima := math.Abs(AMOUNT_AFOAG1111G.Float64())
              acumulador = acumulador - amountPrima
              cedul = models.LineaDetalle{10,"Menos Ofrenda AFOAG1111G - año pasado",amountPrima}
              models.AddLineaDetalle(cedul,"Menos Ofrenda AFOAG1111G - año pasado")
            }

            queryC := `SELECT ISNULL(SUM(AMOUNT),0) as amount
              FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
              WHERE (SUBSTRING(ACCNT_CODE,1,2) in('80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','98') OR
              SUBSTRING(ACCNT_CODE,1,3) in('978') )
               AND PERIOD >= `+PERIOD_INICIO+` AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
               AND ANAL_T3 = 'AFOAG1111D'`
              
            rowsC, errC := conn.Query(queryC)
            if errC != nil {
              fmt.Println(errC)
            }
            var AMOUNT_AFOAG1111GD decimal.Dec
            if rowsC.Next()  {
              rowsC.Scan(&AMOUNT_AFOAG1111GD)
              amountPrima := math.Abs(AMOUNT_AFOAG1111GD.Float64())
              acumulador = acumulador - amountPrima
              cedul = models.LineaDetalle{11,"Menos Plan de Desarrollo AFOAG1111D",amountPrima}
              models.AddLineaDetalle(cedul,"Menos Plan de Desarrollo AFOAG1111D")
            }

            queryCC := `SELECT ISNULL(SUM(AMOUNT),0) as amount
              FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
              WHERE (SUBSTRING(ACCNT_CODE,1,2) in('80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','98') OR
              SUBSTRING(ACCNT_CODE,1,3) in('978') )
               AND PERIOD >= `+PERIOD_ANTERIOR+` AND PERIOD < `+PERIOD_INICIO+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10','20') 
               AND ANAL_T3 = 'AFOAG1111D'`
              
            rowsCC, errCC := conn.Query(queryCC)
            if errCC != nil {
              fmt.Println(errC)
            }
            if rowsCC.Next()  {
              rowsCC.Scan(&AMOUNT_AFOAG1111GD)
              amountPrima := math.Abs(AMOUNT_AFOAG1111GD.Float64())
              acumulador = acumulador - amountPrima
              cedul = models.LineaDetalle{12,"Menos Plan de Desarrollo AFOAG1111D - año pasado",amountPrima}
              models.AddLineaDetalle(cedul,"Menos Plan de Desarrollo AFOAG1111D - año pasado")
            }

            cedul = models.LineaDetalle{13,"Igual a gastos operativos para el cálculo",acumulador}
            models.AddLineaDetalle(cedul,"Igual1")
            pcent := 0.2
            if Compare(beego.AppConfig.String("TipoCampo"),"2")==0 {
              pcent = 0.3
            }
            if Compare(beego.AppConfig.String("TipoCampo"),"1")==0 {
              pcent = 0.2
            }
            numero := int(pcent*100)
            
            cedul = models.LineaDetalle{14,""+ strconv.Itoa(numero)+ "% ",acumulador*pcent}
            models.AddLineaDetalle(cedul,"Igual2")
        } else {
          if Compare(tipo,"4")==0 {//FONDOS ASIGNADOS

            models.ClearLineaDetalle()
            var cedul  models.LineaDetalle

            queryC := `SELECT ISNULL(SUM(AMOUNT),0) as amount
              FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
              WHERE SUBSTRING(ACCNT_CODE,1,1) in('5','6','7','8','9')
               AND PERIOD < `+PERIOD+` AND ALLOCATION != 'C' AND ANAL_T2 in ('10') 
               AND SUBSTRING(ANAL_T3,1,2)  in ('AF')`
              
            rowsC, errC := conn.Query(queryC)
            if errC != nil {
              fmt.Println(errC)
            }
            var AMOUNT_FONDOS_ASIGNADOS decimal.Dec
            if rowsC.Next()  {
              rowsC.Scan(&AMOUNT_FONDOS_ASIGNADOS)
              amountPrima := math.Abs(AMOUNT_FONDOS_ASIGNADOS.Float64())
              cedul = models.LineaDetalle{1,"Fondos asignados",amountPrima}
              models.AddLineaDetalle(cedul,"Fondos asignados")
            }
          
          }
        }//else fondos asignados
      }
    } 
    example := map[string]interface{}{ "success" : 1,"periodoAnterior":PERIOD_ANTERIOR, "lineas": models.GetAllLineaDetalle() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}



func (c *GetConfigController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
  

    query := `SELECT  ISNULL(base,0),
     ISNULL(PCENT_AFROUMN,0),
     ISNULL(PCENT_SALUD,0),
     ISNULL(Parte_Exenta,0),
     periodoTimbrado, idConfig, Empresa, pass, tipoDimension, rfc , rfcAnterior, regimen ,razonSocial ,regPatronal ,lugarExpedicion FROM [Sevenplus].[dbo].[zConfig] 
      WHERE BUNIT = '`+BUNIT.(string)+`'`
    rows, err := conn.Query(query)
    if err != nil {
      fmt.Println(err)
    }
    var PCENT_AFROUMN float64
    var PCENT_SALUD float64
    var Parte_Exenta float64
    queryPeriodos := "SELECT DISTINCT PERIOD FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] order by PERIOD asc"
    rowsPeriodos, _ := conn.Query(queryPeriodos)
    var PERIOD string
    var periodo models.Periodo
        _ = periodo
        models.ClearPeriodos()
        for rowsPeriodos.Next()  {
      rowsPeriodos.Scan(&PERIOD)
      periodo := models.Periodo{PERIOD}
      models.AddPeriodo(periodo, PERIOD)
    }


    var idConfig int
    var Empresa string
    var pass string
    var tipoDimension int
    var periodoTimbrado int
    var base float64
    var rfc string
    var rfcAnterior string
    var regimen string
    var razonSocial string
    var regPatronal string
    var lugarExpedicion string
    example := map[string]interface{}{ "success" : 1,"periodos" : models.GetAllPeriodos(),   "periodoTimbrado":0, "idConfig":0, "Empresa": "", "pass" : "", "tipoDimension": 4, "rfc":"", "rfcAnterior" : "", "razonSocial": "", "regimen": "", "regPatronal": "", "lugarExpedicion": "", "base" : 0, "afroumn" : 0, "salud" : 0, "exenta" : 0}
    if rows.Next()  {
      rows.Scan(&base, &PCENT_AFROUMN, &PCENT_SALUD, &Parte_Exenta,  &periodoTimbrado, &idConfig, &Empresa, &pass, &tipoDimension, &rfc , &rfcAnterior, &regimen ,&razonSocial ,&regPatronal ,&lugarExpedicion)
      uDec, errorx := base64.StdEncoding.DecodeString(pass)
      if errorx != nil {
        fmt.Println(errorx)
      }
      uDecS := string(uDec) 
      example = map[string]interface{}{ "success" : 1, "periodos" : models.GetAllPeriodos(),"periodoTimbrado":periodoTimbrado, "rfc": rfc, "rfcAnterior" : rfcAnterior, "razonSocial": razonSocial, "regimen": regimen, "regPatronal": regPatronal, "lugarExpedicion": lugarExpedicion, "idConfig":idConfig, "Empresa": Empresa, "pass" : uDecS, "tipoDimension": tipoDimension, "base" : base, "afroumn" : PCENT_AFROUMN, "salud" : PCENT_SALUD, "exenta" : Parte_Exenta}
    }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
func (c *VeDetalleController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    busqueda := c.GetString("busqueda")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    currentTime := int64(time.Now().Unix())
    tm := time.Unix(currentTime, 0)
    dateString := tm.String() 
    substring := string(dateString[0:10]) 
    anio:=string(substring[0:4])  
    mes:=string(substring[5:7]) 
    PERIOD_ACTUAL := anio+"0"+mes
    anioAnterior, _ := strconv.Atoi(anio)
    anioAnterior--
    PERIOD_ANTERIOR := strconv.Itoa(anioAnterior)+"0"+mes
  

    query := `SELECT JRNAL_NO, JRNAL_LINE, AMOUNT, D_C, ACCNT_CODE, DESCRIPTN, PERIOD, JRNAL_SRCE, JRNAL_TYPE, TRANS_DATETIME FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] 
      WHERE SUBSTRING(ACCNT_CODE,1,1) in (`+busqueda+`)
      AND PERIOD >= `+PERIOD_ANTERIOR+` AND PERIOD < `+PERIOD_ACTUAL+` AND ALLOCATION != 'C'
      order by JRNAL_NO asc, JRNAL_LINE asc`
    rows, err := conn.Query(query)
    if err != nil {
      fmt.Println(err)
    }
    var JRNAL_NO int
    var JRNAL_LINE int
    var AMOUNT decimal.Dec
    var D_C string
    var ACNT_CODE string
    var DESCRIPTN string
    var PERIOD int
    var JRNAL_SRCE string
    var JRNAL_TYPE string
    var TRANS_DATETIME time.Time
    models.ClearLineaDeUnDiario()
    var cedul  models.LineaDeUnDiario
        for rows.Next()  {
      rows.Scan(&JRNAL_NO, &JRNAL_LINE, &AMOUNT, &D_C, &ACNT_CODE, &DESCRIPTN, &PERIOD, &JRNAL_SRCE, &JRNAL_TYPE, &TRANS_DATETIME)
      amountPrima := math.Abs(AMOUNT.Float64())
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      fechaReal := ""
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          }
        }
      }
      cedul = models.LineaDeUnDiario{JRNAL_NO,JRNAL_LINE,amountPrima,D_C,ACNT_CODE, DESCRIPTN, PERIOD, JRNAL_SRCE, JRNAL_TYPE,fechaReal}
      index:= strconv.Itoa(JRNAL_NO)+"-"+ strconv.Itoa(JRNAL_LINE)
      models.AddLineaDeUnDiario(cedul,index)
    }
    example := map[string]interface{}{ "success" : 1,"periodoAnterior":PERIOD_ANTERIOR, "periodoActual": PERIOD_ACTUAL, "lineas": models.GetAllLineaDeUnDiario() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
func (c *ListaActivosFijosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT ASSET_CODE,STATUS,ASSET_STATUS,DESCR,START_PERD,END_PERD,LAST_PERD,DISPOSAL_PERD,DISPOSED,BASE_GROSS,BASE_DEP,BASE_NET,BASE_PCENT,TXN_GROSS,TXN_DEP,TXN_NET,TXN_PCENT FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ASSET] order by ASSET_CODE asc"
    rows, err := conn.Query(query)

    var ASSET_CODE string
    var STATUS int
    var ASSET_STATUS int
    var DESCR string
    var START_PERIOD int
    var END_PERIOD int
    var ULTIMO_PERIOD int
    var DISPOSAL_PERIOD int
    var DISPOSED int
    var BASE_GROSS decimal.Dec
    var BASE_DEP float64
    var BASE_NET float64
    var BASE_PCENT float64
    var TXN_GROSS float64
    var TXN_DEP float64
    var TXN_NET float64
    var TXN_PCENT float64
    models.ClearActivosFijos()
    var cedul  models.ActivoFijo
        for rows.Next()  {
      rows.Scan(&ASSET_CODE, &STATUS, &ASSET_STATUS, &DESCR, &START_PERIOD, &END_PERIOD, &ULTIMO_PERIOD, &DISPOSAL_PERIOD, &DISPOSED, &BASE_GROSS, &BASE_DEP, &BASE_NET, &BASE_PCENT,&TXN_GROSS, &TXN_DEP, &TXN_NET, &TXN_PCENT)
    //  BASE_G := math.Abs(BASE_GROSS.Float64())
      cedul = models.ActivoFijo{ASSET_CODE, STATUS, ASSET_STATUS, DESCR, START_PERIOD, END_PERIOD, ULTIMO_PERIOD, DISPOSAL_PERIOD, DISPOSED, BASE_GROSS.Float64(), BASE_DEP, BASE_NET, BASE_PCENT,TXN_GROSS, TXN_DEP, TXN_NET, TXN_PCENT}
      models.AddActivoFijo(cedul, ASSET_CODE )
    }
    example := map[string]interface{}{"success":1, "activos": models.GetAllActivosFijos() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
  example := map[string]interface{}{ "success":0}
  c.Data["json"] = &example
  c.ServeJSON()
}




func (c *DashboardFiscalistaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosFiscalista(tipoDeUsuario.(int)) {
    idUsuario := c.GetSession("idUsuario")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    idUsuarioS := strconv.Itoa(idUsuario.(int))
    query := "SELECT  ISNULL(caducidad,0) as caducidad FROM [SunSystemsData].[dbo].[users] WHERE idUsuario = "+idUsuarioS
    rows, err := conn.Query(query)
    caducidad := 0
        if rows.Next()  {
      rows.Scan(&caducidad)
    }
    example := map[string]interface{}{ "success" : 1 ,  "caducidad" : caducidad }
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}
func CedulaCuentasBancosFunction (c *GenerarCedulaCuentasBancosController){
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  hash := c.GetString("hash")
  currentTime := int64(time.Now().Unix())
  tm := time.Unix(currentTime, 0)
  dateString := tm.String() 
  substring := string(dateString[0:10])
    byteArray := []byte(substring)
  hasher := sha512.New()
    hasher.Write(byteArray)
  cryptoText := base64.StdEncoding.EncodeToString(  []byte(hex.EncodeToString(hasher.Sum(nil))))
  esAPI := 0
  if Compare(cryptoText,hash)==0 {
    tipoDeUsuario = 4
    esAPI = 1
  }
  if tienePermisosFiscalista(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    delPeriodo := c.GetString("delPeriodo")
    alPeriodo := c.GetString("alPeriodo")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT  DISTINCT ACNT_CODE, DESCR FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ACNT] WHERE SUBSTRING(ACNT_CODE,1,3) = '102' AND LEN(ACNT_CODE) > 3"
    rows, err := conn.Query(query)
    var ACNT_CODE string
    var DESCR string
    delPeriodoI, _ := strconv.Atoi(delPeriodo)
    alPeriodoI, _ := strconv.Atoi(alPeriodo)
    query2:=""
    var SaldoInicial decimal.Dec
    var SaldoDepositos decimal.Dec
    var SaldoRetiros decimal.Dec
    
  
    models.ClearCedulaCuentasBancos()
    var cedul  models.CedulaCuentasBancos

        for rows.Next()  {
      rows.Scan(&ACNT_CODE, &DESCR)
      ACNT_CODE = strings.TrimSpace(ACNT_CODE)
      DESCR = strings.TrimSpace(DESCR)
      cedul = models.CedulaCuentasBancos{DESCR,ACNT_CODE,make(map[string]*models.PorPeriodoBancos)}
      models.AddCedulaCuentasBancos(cedul, ACNT_CODE)
      cedul  = models.DameCedulaCuentasBancosPorCodigo(ACNT_CODE)
      for i := delPeriodoI; i <= alPeriodoI; i++ {
        periodoS := strconv.Itoa(i)
        ultimos2 := string(periodoS[5:7])
        if Compare(ultimos2,"13") == 0 {
          i = i + 988
          periodoS = strconv.Itoa(i)
        }
        query2 = `SELECT  ISNULL(SUM(AMOUNT),0) as AMOUNT
          FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
          WHERE ACCNT_CODE = '`+ACNT_CODE+`' AND PERIOD < `+periodoS+`
          AND ALLOCATION != 'C'`
        rows2, err2 := conn.Query(query2)
        if err2 != nil {
          fmt.Println(err2)
        }
        if rows2.Next()  {
          rows2.Scan(&SaldoInicial)
        }
        SaldoInicialPrima := math.Abs(SaldoInicial.Float64())
      

        query2 = `SELECT  ISNULL(SUM(AMOUNT),0) as AMOUNT
          FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
          WHERE ACCNT_CODE = '`+ACNT_CODE+`' AND PERIOD = `+periodoS+` AND D_C = 'D'
          AND ALLOCATION != 'C'`
        rows2, err2 = conn.Query(query2)
        if err2 != nil {
          fmt.Println(err2)
        }
        if rows2.Next()  {
          rows2.Scan(&SaldoDepositos)
        }
        SaldoDepositosPrima := math.Abs(SaldoDepositos.Float64())
      

        query2 = `SELECT ISNULL(SUM(AMOUNT),0) as AMOUNT
          FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
          WHERE ACCNT_CODE = '`+ACNT_CODE+`' AND PERIOD = `+periodoS+` AND D_C = 'C'
          AND ALLOCATION != 'C'`
        rows2, err2 = conn.Query(query2)
        if err2 != nil {
          fmt.Println(err2)
        }
        if rows2.Next()  {
          rows2.Scan(&SaldoRetiros)
        }
        SaldoRetirosPrima := math.Abs(SaldoRetiros.Float64())
        SaldoFinal :=  SaldoInicialPrima + SaldoDepositosPrima - SaldoRetirosPrima
        if _, ok := cedul.PeriodosList[periodoS]; ok {
          } else {
          var PERIODM models.PorPeriodoBancos
          PERIODM = models.PorPeriodoBancos{ SaldoInicialPrima, SaldoDepositosPrima, SaldoRetirosPrima, SaldoFinal }
          cedul.PeriodosList[periodoS] = &PERIODM
        }
        cedul.PeriodosList[periodoS].SaldoInicial = SaldoInicialPrima
        cedul.PeriodosList[periodoS].Depositos = SaldoDepositosPrima
        cedul.PeriodosList[periodoS].Retiros = SaldoRetirosPrima
        cedul.PeriodosList[periodoS].SaldoFinal = SaldoFinal
      }
    }



    query2 = `SELECT b.DESCR, a.ACCNT_CODE, a.TRANS_DATETIME, a.DESCRIPTN,a.JRNAL_NO,a.JRNAL_LINE,a.AMOUNT,a.D_C
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] a
      INNER JOIN [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT] b
      on b.ACNT_CODE = a.ACCNT_CODE 
      WHERE SUBSTRING(ACCNT_CODE,1,3) = '102'
      order by a.TRANS_DATETIME asc, a.JRNAL_NO asc, a.JRNAL_LINE asc, a.ACCNT_CODE asc`
    rows2, err2 := conn.Query(query2)
    if err2 != nil {
      fmt.Println(err2)
    }
    var TRANS_DATETIME time.Time
    var JRNAL_NO int
    var JRNAL_LINE int 
    var AMOUNT decimal.Dec
    var cuentaActual string
    var cuentaAnterior string
    var diarioActual int
    var D_C string
    var D_CAnterior string
    var D_CActual string
    var DESCR_Cuenta string
    var DESCR_Cuenta_Anterior string
    var DESCR_Cuenta_Actual string
    diarioAnterior :=0
    diferencia := 1.0
    primeroDelDiario := true
    models.ClearCuentasPropias()
    var cedul2  models.CuentasPropias
    contador := 0
    for rows2.Next()  {
      rows2.Scan(&DESCR_Cuenta, &ACNT_CODE, TRANS_DATETIME,DESCR, JRNAL_NO, JRNAL_LINE, AMOUNT, D_C)
      diarioActual = JRNAL_NO
      if diarioActual == diarioAnterior {
        if primeroDelDiario {
          cuentaAnterior = ACNT_CODE  
          DESCR_Cuenta_Anterior = DESCR_Cuenta
          D_CAnterior = D_C
          primeroDelDiario = false
          diferencia = math.Abs(AMOUNT.Float64())
        } else {
          cuentaActual = ACNT_CODE
          DESCR_Cuenta_Actual = DESCR_Cuenta
          D_CActual = D_C
          if Compare(cuentaAnterior,cuentaActual) != 0 {
            cantidad := math.Abs(AMOUNT.Float64())
            if Compare(D_CActual, D_CAnterior) != 0 {
              d := diferencia - cantidad
              if d == 0 {
                primeroDelDiario = true
                mes := int(TRANS_DATETIME.Month())
                dia :=  TRANS_DATETIME.Day()
                fechaReal := ""
                if mes > 9 && dia > 9 {
                  fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
                } else {
                  if mes > 9 && dia < 10 {
                    fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
                  } else {
                    if mes < 10 && dia > 9 {
                      fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
                    } else {
                      fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
                    }
                  }
                }
                cuentaSalida := DESCR_Cuenta_Anterior
                importeSalida := diferencia
                cuentaEntrada := DESCR_Cuenta_Actual
                importeEntrada := cantidad
                if Compare(D_CActual,"C")==0 {
                  cuentaSalida = DESCR_Cuenta_Actual
                  importeSalida = cantidad
                  cuentaEntrada = DESCR_Cuenta_Anterior
                  importeEntrada = diferencia
                } 
                cedul2 = models.CuentasPropias{fechaReal,cuentaSalida,importeSalida, cuentaEntrada, importeEntrada, DESCR }
                models.AddCuentasPropias(cedul2, strconv.Itoa(contador))
                contador++
              }
            }
            
          }
        }
      } else {
        primeroDelDiario = true
        cuentaAnterior = ""
      }
      diarioAnterior = JRNAL_NO
    }


    example := map[string]interface{}{ "success" : 1 , "propias" : models.GetAllCuentasPropias(),  "cuentas" : models.GetAllCedulaCuentasBancos() }
    if esAPI == 0 {
      c.Data["json"] = &example
      c.ServeJSON()
    } else {
      c.Data["jsonp"] = &example
      c.ServeJSONP()
    }
    return
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}

func (c *GenerarCedulaCuentasBancosController) Post() {
  CedulaCuentasBancosFunction(c)
} 

func (c *GenerarCedulaCuentasBancosController) Get() {
  CedulaCuentasBancosFunction(c)
} 


func (c *DetalleIglesiaSabanaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    
    mes := c.GetString("mes")
    cuenta := c.GetString("cuenta")
    iglesia := c.GetString("iglesia")
    periodo := c.GetString("periodo")
    anio := c.GetString("anio")
    auxiliar , _ := strconv.Atoi(anio)
    anioSiguiente := strconv.Itoa(auxiliar+1)
    delPeriodo := anio
    mesInt, _ := strconv.Atoi(mes)
    detalle := ""

    if mesInt == 1 {
      detalle = "PENE"
      if Compare(BUNIT.(string),"ADV") == 0 {//Hardcode
        detalle = "MENERO"
      }
    }
    if mesInt == 2 {
      detalle = "PFEB"
      if Compare(BUNIT.(string),"ADV") == 0 {//Hardcode
        detalle = "MFEBRE"
      }
    }
    if mesInt == 3 {
      detalle = "PMAR"
      if Compare(BUNIT.(string),"ADV") == 0 {//Hardcode
        detalle = "MMARZO"
      }
    }
    if mesInt == 4 {
      detalle = "PABR"
      if Compare(BUNIT.(string),"ADV") == 0 {//Hardcode
        detalle = "MABRIL"
      }
    }
    if mesInt == 5 {
      detalle = "PMAY"
      if Compare(BUNIT.(string),"ADV") == 0 {//Hardcode
        detalle = "PMAYO"
      }
    }
    if mesInt == 6 {
      detalle = "PJUN"
      if Compare(BUNIT.(string),"ADV") == 0 {//Hardcode
        detalle = "MJUNIO"
      }
    }
    if mesInt == 7 {
      detalle = "PJUL"
      if Compare(BUNIT.(string),"ADV") == 0 {//Hardcode
        detalle = "MJULIO"
      }
    }
    if mesInt == 8 {
      detalle = "PAGO"
      if Compare(BUNIT.(string),"ADV") == 0 {//Hardcode
        detalle = "MAGOST"
      }
    }
    if mesInt == 9 {
      detalle = "PSEP"
      if Compare(BUNIT.(string),"ADV") == 0 {//Hardcode
        detalle = "MSEPTI"
      }
    }
    if mesInt == 10 {
      detalle = "POCT"
      if Compare(BUNIT.(string),"ADV") == 0 {//Hardcode
        detalle = "MOCTUB"
      }
    }
    if mesInt == 11 {
      detalle = "PNOV"
      if Compare(BUNIT.(string),"ADV") == 0 {//Hardcode
        detalle = "MNOVIE"
      }
    }
    if mesInt == 12 {
      detalle = "PDIC"
      if Compare(BUNIT.(string),"ADV") == 0 {//Hardcode
        detalle = "MDICIE"
      }
    }


    


    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    

    query := ` SELECT DISTINCT a.ACCNT_CODE, b.DESCR, c.NAME as Distrito, d.NAME as Iglesia, a.JRNAL_NO, a.JRNAL_LINE, a.AMOUNT,a.DESCRIPTN, a.D_C, a.PERIOD, a.TRANS_DATETIME, 
        a.ANAL_T0, a.ANAL_T1, a.ANAL_T2, a.ANAL_T3, a.ANAL_T4, a.ANAL_T5, a.ANAL_T6, a.ANAL_T7, a.ANAL_T8, a.ANAL_T9, a.TREFERENCE
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] a
        INNER JOIN [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT] b on b.ACNT_CODE = a.ACCNT_CODE
        INNER JOIN [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE] c on c.ANL_CODE = a.ANAL_T3
      INNER JOIN [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE] d on d.ANL_CODE = a.ANAL_T5
      WHERE SUBSTRING(CAST(a.PERIOD AS NVARCHAR(11)) ,1,4) in ('`+delPeriodo+`','`+anioSiguiente+`')
        AND D_C = 'C' AND a.ANAL_T5 = '`+iglesia+`' AND a.ACCNT_CODE = '`+cuenta+`'
        AND a.ALLOCATION != 'C'
        order by a.PERIOD asc`

  
    rows2, err2 := conn.Query(query)
    if err2 != nil {
      defer conn.Close()
      fmt.Println("Perdon 7.7! : ", err2.Error())
    }


    models.ClearDiarioBuscarCantidad()
    var cedul  models.DiarioBuscarCantidad

    var Cuenta string
    var TREFERENCE string
    var NCuenta string
    var DistritoS string
    var IglesiaS string
    var JRNAL_NO int
    var JRNAL_LINE int
    var AMOUNT decimal.Dec
    var D_C string
    var TRANS_DATETIME time.Time
    var PERIOD int
    var DESCRIPTN string
    var ANAL_T0 string
    var ANAL_T1 string
    var ANAL_T2 string
    var ANAL_T3 string
    var ANAL_T4 string
    var ANAL_T5 string
    var ANAL_T6 string
    var ANAL_T7 string
    var ANAL_T8 string
    var ANAL_T9 string
    var puedoEntrar int
    var mesDelDetalle int
    for rows2.Next()  {
      rows2.Scan(&Cuenta, &NCuenta, &DistritoS, &IglesiaS, &JRNAL_NO, &JRNAL_LINE, &AMOUNT, &DESCRIPTN, &D_C, &PERIOD, &TRANS_DATETIME, &ANAL_T0, &ANAL_T1, &ANAL_T2, &ANAL_T3, &ANAL_T4, &ANAL_T5, &ANAL_T6, &ANAL_T7, &ANAL_T8, &ANAL_T9, &TREFERENCE)
      ANAL_T0 = strings.TrimSpace(ANAL_T0)
      ANAL_T1 = strings.TrimSpace(ANAL_T1)
      ANAL_T2 = strings.TrimSpace(ANAL_T2)
      ANAL_T3 = strings.TrimSpace(ANAL_T3)
      ANAL_T4 = strings.TrimSpace(ANAL_T4)
      ANAL_T5 = strings.TrimSpace(ANAL_T5)
      ANAL_T6 = strings.TrimSpace(ANAL_T6)
      ANAL_T7 = strings.TrimSpace(ANAL_T7)
      ANAL_T8 = strings.TrimSpace(ANAL_T8)
      ANAL_T9 = strings.TrimSpace(ANAL_T9)
      TREFERENCE = strings.TrimSpace(TREFERENCE)
      Cuenta = strings.TrimSpace(Cuenta)
      amountPrima := AMOUNT.Float64()
      PERIODString := strconv.Itoa(PERIOD)
      anioPeriodo := string(PERIODString[0:4])
      mesPeriodo := string(PERIODString[5:7])

        mesFecha := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      fechaReal := ""
      if mesFecha > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mesFecha, dia)
      } else {
        if mesFecha > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mesFecha, dia)
        } else {
          if mesFecha < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mesFecha, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mesFecha, dia)
          }
        }
      }
      puedoEntrar = 0
      mesDelDetalle = 0
      if Compare(ANAL_T9,"PENE") == 0 || Compare(ANAL_T9,"MENERO") == 0 {
        mesDelDetalle = 1
      }
      if Compare(ANAL_T9,"PFEB") == 0 || Compare(ANAL_T9,"MFEBRE") == 0 {
        mesDelDetalle = 2
      }
      if Compare(ANAL_T9,"PMAR") == 0 || Compare(ANAL_T9,"MMARZO") == 0 {
        mesDelDetalle = 3
      }
      if Compare(ANAL_T9,"PABR") == 0 || Compare(ANAL_T9,"MABRIL") == 0 {
        mesDelDetalle = 4
      }
      if Compare(ANAL_T9,"PMAY") == 0 || Compare(ANAL_T9,"MMAYO") == 0 {
        mesDelDetalle = 5
      }
      if Compare(ANAL_T9,"PJUN") == 0 || Compare(ANAL_T9,"MJUNIO") == 0 {
        mesDelDetalle = 6
      }
      if Compare(ANAL_T9,"PJUL") == 0 || Compare(ANAL_T9,"MJULIO") == 0 {
        mesDelDetalle = 7
      }
      if Compare(ANAL_T9,"PAGO") == 0 || Compare(ANAL_T9,"MAGOST") == 0 {
        mesDelDetalle = 8
      }
      if Compare(ANAL_T9,"PSEP") == 0 || Compare(ANAL_T9,"MSEPTI") == 0 {
        mesDelDetalle = 9
      }
      if Compare(ANAL_T9,"POCT") == 0 || Compare(ANAL_T9,"MOCTUB") == 0 {
        mesDelDetalle = 10
      }
      if Compare(ANAL_T9,"PNOV") == 0 || Compare(ANAL_T9,"MNOVIE") == 0 {
        mesDelDetalle = 11
      }
      if Compare(ANAL_T9,"PDIC") == 0 || Compare(ANAL_T9,"MDICIE") == 0 {
        mesDelDetalle = 12
      }
      mesPeriodoInt, _ := strconv.Atoi(mesPeriodo)
        
      if Compare(anioPeriodo,delPeriodo)==0 {
        if Compare(ANAL_T9,"")==0 && Compare(PERIODString, periodo)==0 {
          puedoEntrar = 1
        } else {
          if mesDelDetalle <= mesPeriodoInt {
            if Compare(ANAL_T9,detalle)==0 {
              puedoEntrar = 1
            }
          }
        }
      }
      if Compare(anioPeriodo,anioSiguiente)==0 {
        if mesDelDetalle > mesPeriodoInt {
          if Compare(ANAL_T9,detalle)==0 {
            puedoEntrar = 1
          }
        }
      }
      if puedoEntrar == 1 {
        cedul = models.DiarioBuscarCantidad{JRNAL_NO, JRNAL_LINE, amountPrima, D_C, fechaReal, PERIOD, DESCRIPTN, TREFERENCE}
        llave := strconv.Itoa(JRNAL_NO)+"-"+strconv.Itoa(JRNAL_LINE)
        models.AddDiarioBuscarCantidad(cedul, llave )
      }
    }
    example := map[string]interface{}{ "success" : 1, "diarios": models.GetAllDiarioBuscarCantidad() }
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}

func (c *ArreglarOccidenteDetalleIglesiaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
      connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    var Nombre string
    var Codigo string
    DT := "DT"
    T := "T"
    if Compare(BUNIT.(string),"ADV")==0{//Hardcode
      DT = "DS"
      T = "C"
    }
    query := "SELECT NAME, ANL_CODE FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CODE] WHERE ANL_CAT_ID = '04' AND SUBSTRING(ANL_CODE,1,2) = '"+DT+"'"
    rows, err := conn.Query(query)
    models.ClearistritoD()
    var cedul  models.DistritoD
        for rows.Next()  {
      rows.Scan(&Nombre, &Codigo)
      Nombre = strings.TrimSpace(Nombre)
      Codigo = strings.TrimSpace(Codigo)
      cedul = models.DistritoD{Nombre,make(map[string]*models.PorIglesiaD)}
      models.AddDistritoD(cedul, Codigo)
    }
    var distritoActual models.DistritoD
    query3 := "SELECT DISTINCT a.ANAL_T5, a.ANAL_T3, d.NAME as Iglesia FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] a INNER JOIN [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CODE] d on d.ANL_CODE = a.ANAL_T5 WHERE SUBSTRING(a.ANAL_T5,1,1) = '"+T+"' AND SUBSTRING( a.ANAL_T3,1,2) = '"+DT+"'"
    rows3, err3 := conn.Query(query3)
    if err3 != nil {
      fmt.Println("disculpa:", err3.Error())
    }
    var ANAL_T3 string
    var ANAL_T5 string
    var IglesiaS string
    
    for rows3.Next()  {
      rows3.Scan(&ANAL_T5, &ANAL_T3, &IglesiaS)
      ANAL_T3 = strings.TrimSpace(ANAL_T3)
      ANAL_T5 = strings.TrimSpace(ANAL_T5)
      IglesiaS = strings.TrimSpace(IglesiaS)
      distritoActual = models.DameDistritoDPorCodigo(ANAL_T3)
      if _, ok := distritoActual.IglesiaList[ANAL_T5]; ok {
        } else {
        var Iglesia models.PorIglesiaD
        Iglesia = models.PorIglesiaD{IglesiaS, make(map[string]*models.PorCuentaD) }
        distritoActual.IglesiaList[ANAL_T5] = &Iglesia
      }
    }



    query2 := `SELECT ACCNT_CODE, TREFERENCE, ANAL_T5,JRNAL_NO, JRNAL_LINE, ANAL_T3 FROM 
   [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
  WHERE 
  ACCNT_CODE in('611110', '635140') 
   AND D_C = 'C'
  order by JRNAL_NO asc, JRNAL_LINE asc`
    rows2, err2 := conn.Query(query2)
    if err2 != nil {
      fmt.Println(err2)
    }
    
    var Cuenta string
    var TREFERENCE string
    var JRNAL_NO int
    var JRNAL_LINE int
    for rows2.Next()  {
      rows2.Scan(&Cuenta, &TREFERENCE, &ANAL_T5, &JRNAL_NO, &JRNAL_LINE, &ANAL_T3)
      ANAL_T3 = strings.TrimSpace(ANAL_T3)//distrito
      ANAL_T5 = strings.TrimSpace(ANAL_T5)//iglesia
      t := string(ANAL_T5[0:1])
      Cuenta = strings.TrimSpace(Cuenta)
      if Compare(t,"T") == 0 {
        mm := models.GetAllDistritoD()
        yaEntre := 0
        for k, _ := range mm {
          distritoActual = models.DameDistritoDPorCodigo(k); 
            for kk, _ := range distritoActual.IglesiaList { 
              if Compare(ANAL_T5,kk)==0 {
                ANAL_T3 = k
                query1 := `UPDATE [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] SET ANAL_T1 = '`+ANAL_T3+`'  WHERE JRNAL_NO  = `+strconv.Itoa(JRNAL_NO)+`
AND JRNAL_LINE = `+strconv.Itoa(JRNAL_LINE)+``
              conn.Exec(query1)
                yaEntre=1
                break
              }
            }
            if yaEntre == 1 {
              break
            }
        }     
      }
    }
    example := map[string]interface{}{ "success" : 1 }
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}
func (c *ArreglarOccidenteDetalleController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := ` SELECT DESCRIPTN, JRNAL_NO, JRNAL_LINE, ACCNT_CODE, ANAL_T9, PERIOD
      FROM 
      [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE 
      ACCNT_CODE = '611110' AND D_C = 'C'
      order by JRNAL_NO asc, JRNAL_LINE asc`
    rows, err2 := conn.Query(query)
    if err2 != nil {
      defer conn.Close()
      fmt.Println("Perdon 7.5! : ", err2.Error())
    }
    var JRNAL_NO int
    var JRNAL_LINE int
    var ACNT_CODE string
    var PERIOD int
    var DESCRIPTN string
    var ANAL_T9 string
    var ANAL_T99 string
    models.ClearDiarioOccidente()
    var cedul  models.DiarioOccidente
        for rows.Next()  {
      rows.Scan(&DESCRIPTN, &JRNAL_NO, &JRNAL_LINE, &ACNT_CODE, &ANAL_T9, &PERIOD)
      DESCRIPTN = strings.TrimSpace(DESCRIPTN)
      x := strings.Split(DESCRIPTN, " ")
      palabra := x[len(x)-1]
      y := strings.Split(palabra, "-")
      mes := y[0]
      /*if len(y)>1 {
        anio := y[1]
      }*/
      ANAL_T99 = ""
      if Compare(mes,"ENE") == 0 {
        ANAL_T99 = "PENE"
      }
      if Compare(mes,"FEB") == 0 {
        ANAL_T99 = "PFEB"
      }
      if Compare(mes,"MAR") == 0 {
        ANAL_T99 = "PMAR"
      }
      if Compare(mes,"ABR") == 0 {
        ANAL_T99 = "PABR"
      }
      if Compare(mes,"MAY") == 0 {
        ANAL_T99 = "PMAY"
      }
      if Compare(mes,"JUN") == 0 {
        ANAL_T99 = "PJUN"
      }
      if Compare(mes,"JUL") == 0 {
        ANAL_T99 = "PJUL"
      }
      if Compare(mes,"AGS") == 0 {
        ANAL_T99 = "PAGO"
      }
      if Compare(mes,"AGO") == 0 {
        ANAL_T99 = "PAGO"
      }
      if Compare(mes,"SEP") == 0 {
        ANAL_T99 = "PSEP"
      }
      if Compare(mes,"OCT") == 0 {
        ANAL_T99 = "POCT"
      }
      if Compare(mes,"NOV") == 0 {
        ANAL_T99 = "PNOV"
      }
      if Compare(mes,"DIC") == 0 {
        ANAL_T99 = "PDIC"
      }
      if Compare(ANAL_T99,"") != 0 {
        query1 := `UPDATE [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] SET ANAL_T9 = '`+ANAL_T99+`'  WHERE JRNAL_NO  = `+strconv.Itoa(JRNAL_NO)+`
AND JRNAL_LINE = `+strconv.Itoa(JRNAL_LINE)+``
        conn.Exec(query1)
        cedul = models.DiarioOccidente{JRNAL_NO, JRNAL_LINE, PERIOD, DESCRIPTN, ACNT_CODE, ANAL_T99, ANAL_T99}
        llave := strconv.Itoa(JRNAL_NO)+"-"+strconv.Itoa(JRNAL_LINE)
        models.AddDiarioOccidente(cedul, llave )
      }
      
    }
    example := map[string]interface{}{ "success" : 1, "diarios": models.GetAllDiarioOccidente() }
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}


func (c *ArreglarInventarioDetalleController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := ` SELECT DESCRIPTN, JRNAL_NO, JRNAL_LINE, ACCNT_CODE, ANAL_T9, PERIOD, TRANS_DATETIME
      FROM 
      [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE 
      DESCRIPTN like '%Corte dia%'
      order by JRNAL_NO asc, JRNAL_LINE asc`
    rows, err2 := conn.Query(query)
    if err2 != nil {
      defer conn.Close()
      fmt.Println("Perdon 7.5! : ", err2.Error())
    }
    var JRNAL_NO int
    var JRNAL_LINE int
    var ACNT_CODE string
    var PERIOD int
    var DESCRIPTN string
    var ANAL_T9 string
    var ANAL_T99 string
    var TRANS_DATETIME time.Time
    models.ClearDiarioOccidente()
    var cedul  models.DiarioOccidente
        for rows.Next()  {
      rows.Scan(&DESCRIPTN, &JRNAL_NO, &JRNAL_LINE, &ACNT_CODE, &ANAL_T9, &PERIOD, &TRANS_DATETIME)
      DESCRIPTN = strings.TrimSpace(DESCRIPTN)


      x := strings.Split(DESCRIPTN, " ")
      palabra := x[len(x)-1]
      y := strings.Split(palabra, "-")
      fechaDESCRIPTN := y[0]

      //diaD := fechaDESCRIPTN[0:2]
      //mesD := fechaDESCRIPTN[3:5]
      //anioD := fechaDESCRIPTN[6:10]

      mesFecha := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      fechaReal := ""
      if mesFecha > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d%d%d", dia, mesFecha,TRANS_DATETIME.Year())
      } else {
        if mesFecha > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("0%d%d%d", dia, mesFecha,TRANS_DATETIME.Year())
        } else {
          if mesFecha < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d0%d%d", dia, mesFecha,TRANS_DATETIME.Year())
          } else {
            fechaReal = fmt.Sprintf("0%d0%d0%d", dia, mesFecha,TRANS_DATETIME.Year())
          }
        }
      }
      if Compare(fechaReal,fechaDESCRIPTN) == 0 {

      } else {

        query1 := `UPDATE [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] 
        SET TRANS_DATETIME = '`+strconv.Itoa(TRANS_DATETIME.Year())+`-`+strconv.Itoa(mesFecha)+`-`+strconv.Itoa(dia)+`' 
         WHERE JRNAL_NO  = `+strconv.Itoa(JRNAL_NO)+`
        AND JRNAL_LINE = `+strconv.Itoa(JRNAL_LINE)+``
              conn.Exec(query1)

              ANAL_T9 = fechaReal     
      ANAL_T99 = fechaDESCRIPTN
      cedul = models.DiarioOccidente{JRNAL_NO, JRNAL_LINE, PERIOD, DESCRIPTN, ACNT_CODE, ANAL_T9, ANAL_T99}
      llave := strconv.Itoa(JRNAL_NO)+"-"+strconv.Itoa(JRNAL_LINE)
      models.AddDiarioOccidente(cedul, llave )

      } 
      
    }
    example := map[string]interface{}{ "success" : 1, "diarios": models.GetAllDiarioOccidente() }
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}

func (c *GenerarInventarioDetalleController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := ` SELECT DESCRIPTN, JRNAL_NO, JRNAL_LINE, ACCNT_CODE, ANAL_T9, PERIOD, TRANS_DATETIME
      FROM 
      [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE 
      DESCRIPTN like '%Corte dia%'
      order by JRNAL_NO asc, JRNAL_LINE asc`
    rows, err2 := conn.Query(query)
    if err2 != nil {
      defer conn.Close()
      fmt.Println("Perdon 7.5! : ", err2.Error())
    }
    var JRNAL_NO int
    var JRNAL_LINE int
    var ACNT_CODE string
    var PERIOD int
    var DESCRIPTN string
    var ANAL_T9 string
    var ANAL_T99 string
    var TRANS_DATETIME time.Time
    
    models.ClearDiarioOccidente()
    var cedul  models.DiarioOccidente
        for rows.Next()  {
      rows.Scan(&DESCRIPTN, &JRNAL_NO, &JRNAL_LINE, &ACNT_CODE, &ANAL_T9, &PERIOD, &TRANS_DATETIME)
      DESCRIPTN = strings.TrimSpace(DESCRIPTN)


      x := strings.Split(DESCRIPTN, " ")
      palabra := x[len(x)-1]
      y := strings.Split(palabra, "-")
      fechaDESCRIPTN := y[0]

      //diaD := fechaDESCRIPTN[0:2]
      //mesD := fechaDESCRIPTN[3:5]
      //anioD := fechaDESCRIPTN[6:10]

      mesFecha := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      fechaReal := ""
      if mesFecha > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d%d%d", dia, mesFecha,TRANS_DATETIME.Year())
      } else {
        if mesFecha > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("0%d%d%d", dia, mesFecha,TRANS_DATETIME.Year())
        } else {
          if mesFecha < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d0%d%d", dia, mesFecha,TRANS_DATETIME.Year())
          } else {
            fechaReal = fmt.Sprintf("0%d0%d0%d", dia, mesFecha,TRANS_DATETIME.Year())
          }
        }
      }
      
      if Compare(fechaReal,fechaDESCRIPTN) == 0 {
      } else {
        ANAL_T9 = fechaReal     
        ANAL_T99 = fechaDESCRIPTN
        cedul = models.DiarioOccidente{JRNAL_NO, JRNAL_LINE, PERIOD, DESCRIPTN, ACNT_CODE, ANAL_T9, ANAL_T99}
        llave := strconv.Itoa(JRNAL_NO)+"-"+strconv.Itoa(JRNAL_LINE)
        models.AddDiarioOccidente(cedul, llave )
      } 
    }
    example := map[string]interface{}{ "success" : 1, "diarios": models.GetAllDiarioOccidente() }
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}


func (c *GenerarOccidenteDetalleController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := ` SELECT DESCRIPTN, JRNAL_NO, JRNAL_LINE, ACCNT_CODE, ANAL_T9, PERIOD
      FROM 
      [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG]
      WHERE 
      ACCNT_CODE = '611110' AND D_C = 'C'
      order by JRNAL_NO asc, JRNAL_LINE asc`
    rows, err2 := conn.Query(query)
    if err2 != nil {
      defer conn.Close()
      fmt.Println("Perdon 7.5! : ", err2.Error())
    }
    var JRNAL_NO int
    var JRNAL_LINE int
    var ACNT_CODE string
    var PERIOD int
    var DESCRIPTN string
    var ANAL_T9 string
    var ANAL_T99 string
    models.ClearDiarioOccidente()
    var cedul  models.DiarioOccidente
        for rows.Next()  {
      rows.Scan(&DESCRIPTN, &JRNAL_NO, &JRNAL_LINE, &ACNT_CODE, &ANAL_T9, &PERIOD)
      DESCRIPTN = strings.TrimSpace(DESCRIPTN)
      x := strings.Split(DESCRIPTN, " ")
      palabra := x[len(x)-1]
      y := strings.Split(palabra, "-")
      mes := y[0]
      /*if len(y)>1 {
        anio := y[1]
      }*/
      ANAL_T99 = ""
      if Compare(mes,"ENE") == 0 {
        ANAL_T99 = "PENE"
      }
      if Compare(mes,"FEB") == 0 {
        ANAL_T99 = "PFEB"
      }
      if Compare(mes,"MAR") == 0 {
        ANAL_T99 = "PMAR"
      }
      if Compare(mes,"ABR") == 0 {
        ANAL_T99 = "PABR"
      }
      if Compare(mes,"MAY") == 0 {
        ANAL_T99 = "PMAY"
      }
      if Compare(mes,"JUN") == 0 {
        ANAL_T99 = "PJUN"
      }
      if Compare(mes,"JUL") == 0 {
        ANAL_T99 = "PJUL"
      }
      if Compare(mes,"AGS") == 0 {
        ANAL_T99 = "PAGO"
      }
      if Compare(mes,"AGO") == 0 {
        ANAL_T99 = "PAGO"
      }
      if Compare(mes,"SEP") == 0 {
        ANAL_T99 = "PSEP"
      }
      if Compare(mes,"OCT") == 0 {
        ANAL_T99 = "POCT"
      }
      if Compare(mes,"NOV") == 0 {
        ANAL_T99 = "PNOV"
      }
      if Compare(mes,"DIC") == 0 {
        ANAL_T99 = "PDIC"
      }
      cedul = models.DiarioOccidente{JRNAL_NO, JRNAL_LINE, PERIOD, DESCRIPTN, ACNT_CODE, ANAL_T9, ANAL_T99}
      llave := strconv.Itoa(JRNAL_NO)+"-"+strconv.Itoa(JRNAL_LINE)
      models.AddDiarioOccidente(cedul, llave )
    }
    example := map[string]interface{}{ "success" : 1, "diarios": models.GetAllDiarioOccidente() }
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}


func (c *DetalleSabanaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    delPeriodo := c.GetString("delPeriodo")
    alPeriodo := c.GetString("alPeriodo")
    er := c.GetString("er")


    llave := c.GetString("llave")

    arreglo := strings.Split(llave, "-")
    cuenta := arreglo[0]
    tfww := arreglo[1]
    fondo := arreglo[2]
    funcion := arreglo[3]
    rstr := arreglo[4]
    orgid := arreglo[5]
    flag := arreglo[6]
    project := arreglo[7]
    detalle := arreglo[8]

    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := `SELECT JRNAL_NO, JRNAL_LINE, AMOUNT, D_C, TRANS_DATETIME, PERIOD, DESCRIPTN, TREFERENCE 
    FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] 
    WHERE PERIOD >= `+delPeriodo+` AND PERIOD <= `+alPeriodo+` AND ANAL_T6 = '`+er+`' AND ACCNT_CODE = '`+cuenta+`' 
    AND ANAL_T6 = '`+er+`'
    AND ANAL_T1 = '`+tfww+`'
    AND ANAL_T2 = '`+fondo+`'
    AND ANAL_T3 = '`+funcion+`'
    AND ANAL_T4 = '`+rstr+`'
    AND ANAL_T5 = '`+orgid+`'
    AND ANAL_T7 = '`+flag+`'
    AND ANAL_T8 = '`+project+`'
    AND ANAL_T9 = '`+detalle+`'`
    rows, err2 := conn.Query(query)
    if err2 != nil {
      defer conn.Close()
      fmt.Println("Perdon 7.5! : ", err2.Error())
    }


    var JRNAL_NO int
    var JRNAL_LINE int
    var AMOUNT decimal.Dec
    var D_C string
    var TRANS_DATETIME time.Time
    var PERIOD int
    var DESCRIPTN string
    var TREFERENCE string
    
    models.ClearDiarioBuscarCantidad()
    var cedul  models.DiarioBuscarCantidad
        for rows.Next()  {
      rows.Scan(&JRNAL_NO, &JRNAL_LINE, &AMOUNT, &D_C, &TRANS_DATETIME, &PERIOD, &DESCRIPTN, &TREFERENCE)
      amountPrima := AMOUNT.Float64()
      mes := int(TRANS_DATETIME.Month())
      dia :=  TRANS_DATETIME.Day()
      fechaReal := ""
      if mes > 9 && dia > 9 {
        fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
      } else {
        if mes > 9 && dia < 10 {
          fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes < 10 && dia > 9 {
            fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          }
        }
      }
      cedul = models.DiarioBuscarCantidad{JRNAL_NO, JRNAL_LINE, amountPrima, D_C, fechaReal, PERIOD, DESCRIPTN, TREFERENCE}
      llave := strconv.Itoa(JRNAL_NO)+"-"+strconv.Itoa(JRNAL_LINE)
      models.AddDiarioBuscarCantidad(cedul, llave )
    }
    example := map[string]interface{}{ "success" : 1, "diarios": models.GetAllDiarioBuscarCantidad() }
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}

func (c *GenerarReporteBalanzaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    delPeriodo := c.GetString("delPeriodo")
    delPeriodoAnterior := c.GetString("delPeriodoAnterior")
    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }

    query := `SELECT ISNULL(SUM(AMOUNT),0)
          FROM `+BUNIT.(string)+`_A_SALFLDG
          WHERE PERIOD <= `+delPeriodoAnterior+`
          AND (SUBSTRING(ACCNT_CODE,1,1) in ('1','2','3','4')
          OR SUBSTRING(ACCNT_CODE,1,1) not in ('5','6','7','8','9'))`
    rows, err := conn.Query(query)


    var SaldoInicialAssets float64
    if rows.Next()  {
      rows.Scan(&SaldoInicialAssets)
      SaldoInicialAssets*=-1
    }

    query = `SELECT ISNULL(SUM(AMOUNT),0)
          FROM `+BUNIT.(string)+`_A_SALFLDG
          WHERE PERIOD <= `+delPeriodoAnterior+`
          AND SUBSTRING(ACCNT_CODE,1,1)  in ('5','6','7','8','9')
          AND ANAL_T3 like 'AF%'`
    rows, err = conn.Query(query)
    var SaldoInicialAllocatedFund float64
    if rows.Next()  {
      rows.Scan(&SaldoInicialAllocatedFund)
      SaldoInicialAllocatedFund*=-1
    }

    query = `SELECT ISNULL(SUM(AMOUNT),0)
          FROM `+BUNIT.(string)+`_A_SALFLDG
          WHERE PERIOD <= `+delPeriodoAnterior+`
          AND SUBSTRING(ACCNT_CODE,1,1)  in ('5','6','7','8','9')
          AND ANAL_T3 >= 'AG%'`
    rows, err = conn.Query(query)
    var SaldoInicialUnallocatedFund float64
    if rows.Next()  {
      rows.Scan(&SaldoInicialUnallocatedFund)
      SaldoInicialUnallocatedFund*=-1
    }

    query = `SELECT ISNULL(SUM(AMOUNT),0)
          FROM `+BUNIT.(string)+`_A_SALFLDG
          WHERE PERIOD <= `+delPeriodoAnterior+`
          AND SUBSTRING(ACCNT_CODE,1,1)  in ('6','7','8','9')
          AND ANAL_T3 >= 'AG%'`
    rows, err = conn.Query(query)
    var SaldoInicialIncomeANDExpenses float64
    if rows.Next()  {
      rows.Scan(&SaldoInicialIncomeANDExpenses)
      SaldoInicialIncomeANDExpenses*=-1
    }

    query = `SELECT ISNULL(SUM(AMOUNT),0)
          FROM `+BUNIT.(string)+`_A_SALFLDG
          WHERE PERIOD > `+delPeriodoAnterior+` AND PERIOD <= `+delPeriodo+`
        AND (SUBSTRING(ACCNT_CODE,1,1) in ('1','2','3','4')
        OR SUBSTRING(ACCNT_CODE,1,1) not in ('5','6','7','8','9'))
        AND D_C = 'D'`
    rows, err = conn.Query(query)
    var totalDebitosAssets float64
    if rows.Next()  {
      rows.Scan(&totalDebitosAssets)
      totalDebitosAssets*=-1
    }

    query = `SELECT ISNULL(SUM(AMOUNT),0)
          FROM `+BUNIT.(string)+`_A_SALFLDG
          WHERE PERIOD > `+delPeriodoAnterior+` AND PERIOD <= `+delPeriodo+`
        AND (SUBSTRING(ACCNT_CODE,1,1) in ('1','2','3','4')
        OR SUBSTRING(ACCNT_CODE,1,1) not in ('5','6','7','8','9'))
        AND D_C = 'C'`
    rows, err = conn.Query(query)
    var totalCreditosAssets float64
    if rows.Next()  {
      rows.Scan(&totalCreditosAssets)
      totalCreditosAssets*=-1
    }

    query = `SELECT ISNULL(SUM(AMOUNT),0)
          FROM `+BUNIT.(string)+`_A_SALFLDG
          WHERE PERIOD > `+delPeriodoAnterior+` AND PERIOD <= `+delPeriodo+`
          AND SUBSTRING(ACCNT_CODE,1,1)  in ('5','6','7','8','9')
          AND ANAL_T3 like 'AF%' 
          AND D_C = 'D'`
    rows, err = conn.Query(query)
    var AllocatedDebitos float64
    if rows.Next()  {
      rows.Scan(&AllocatedDebitos)
      AllocatedDebitos*=-1
    }

    query = `SELECT ISNULL(SUM(AMOUNT),0)
          FROM `+BUNIT.(string)+`_A_SALFLDG
          WHERE PERIOD > `+delPeriodoAnterior+` AND PERIOD <= `+delPeriodo+`
          AND SUBSTRING(ACCNT_CODE,1,1)  in ('5','6','7','8','9')
          AND ANAL_T3 like 'AF%' 
          AND D_C = 'C'`
    rows, err = conn.Query(query)
    var AllocatedCreditos float64
    if rows.Next()  {
      rows.Scan(&AllocatedCreditos)
      AllocatedCreditos*=-1
    }

    query = `SELECT ISNULL(SUM(AMOUNT),0)
          FROM `+BUNIT.(string)+`_A_SALFLDG
          WHERE PERIOD > `+delPeriodoAnterior+` AND PERIOD <= `+delPeriodo+`
          AND SUBSTRING(ACCNT_CODE,1,1)  in ('5','6','7','8','9')
          AND ANAL_T3 >= 'AG%'
          AND D_C = 'D'`
    rows, err = conn.Query(query)
    var UnallocatedDebitos float64
    if rows.Next()  {
      rows.Scan(&UnallocatedDebitos)
      UnallocatedDebitos*=-1
    }

    query = `SELECT ISNULL(SUM(AMOUNT),0)
          FROM `+BUNIT.(string)+`_A_SALFLDG
          WHERE PERIOD > `+delPeriodoAnterior+` AND PERIOD <= `+delPeriodo+`
          AND SUBSTRING(ACCNT_CODE,1,1)  in ('5','6','7','8','9')
          AND ANAL_T3 >= 'AG%'
          AND D_C = 'C'`
    rows, err = conn.Query(query)
    var UnallocatedCreditos float64
    if rows.Next()  {
      rows.Scan(&UnallocatedCreditos)
      UnallocatedCreditos*=-1
    }

    query = `SELECT ISNULL(SUM(AMOUNT),0)
          FROM `+BUNIT.(string)+`_A_SALFLDG
          WHERE PERIOD > `+delPeriodoAnterior+` AND PERIOD <= `+delPeriodo+`
          AND SUBSTRING(ACCNT_CODE,1,1)  in ('6','7','8','9')
          AND ANAL_T3 >= 'AG%'
          AND D_C = 'D'`
    rows, err = conn.Query(query)
    var IncomeANDExpensesDebitos float64
    if rows.Next()  {
      rows.Scan(&IncomeANDExpensesDebitos)
      IncomeANDExpensesDebitos*=-1
    }

    query = `SELECT ISNULL(SUM(AMOUNT),0)
          FROM `+BUNIT.(string)+`_A_SALFLDG
          WHERE PERIOD > `+delPeriodoAnterior+` AND PERIOD <= `+delPeriodo+`
          AND SUBSTRING(ACCNT_CODE,1,1)  in ('6','7','8','9')
          AND ANAL_T3 >= 'AG%'
          AND D_C = 'C'`
    rows, err = conn.Query(query)
    var IncomeANDExpensesCreditos float64
    if rows.Next()  {
      rows.Scan(&IncomeANDExpensesCreditos)
      IncomeANDExpensesCreditos*=-1
    }
    query = `SELECT ISNULL(SUM(AMOUNT),0)
          FROM `+BUNIT.(string)+`_A_SALFLDG
          WHERE PERIOD > `+delPeriodoAnterior+` AND PERIOD <= `+delPeriodo+`
          AND SUBSTRING(ACCNT_CODE,1,1)  in ('5')
          `
    rows, err = conn.Query(query)
    var OutOfBalance float64
    if rows.Next()  {
      rows.Scan(&OutOfBalance)
      OutOfBalance*=-1
    }



    example := map[string]interface{}{ "success" : 1 , "SaldoInicialAssets": SaldoInicialAssets, "SaldoInicialAllocatedFund": SaldoInicialAllocatedFund, "SaldoInicialUnallocatedFund": SaldoInicialUnallocatedFund, "SaldoInicialIncomeANDExpenses": SaldoInicialIncomeANDExpenses, "totalDebitosAssets": totalDebitosAssets, "totalCreditosAssets": totalCreditosAssets, "AllocatedDebitos": AllocatedDebitos, "AllocatedCreditos": AllocatedCreditos, "UnallocatedDebitos": UnallocatedDebitos, "UnallocatedCreditos": UnallocatedCreditos , "IncomeANDExpensesDebitos": IncomeANDExpensesDebitos, "IncomeANDExpensesCreditos": IncomeANDExpensesCreditos, "OutOfBalance": OutOfBalance }
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}

func (c *GenerarReporteDeMATSabanaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    delPeriodo := c.GetString("delPeriodo")
    alPeriodo := c.GetString("alPeriodo")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT NAME, ANL_CODE FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CODE] WHERE SUBSTRING(ANL_CODE,1,2) = 'ER' AND LEN(RTRIM(ANL_CODE)) = 9"
    rows, err := conn.Query(query)
    var Nombre string
    var Codigo string
    //var PeriodosList map[string]*PorPeriodo
    models.ClearSabana()
    var cedul  models.Sabana
        for rows.Next()  {
      rows.Scan(&Nombre, &Codigo)
      Nombre = strings.TrimSpace(Nombre)
      Codigo = strings.TrimSpace(Codigo)
      cedul = models.Sabana{Nombre,make(map[string]*models.PorConcepto)}
      models.AddSabana(cedul, Codigo)
    }
    query2 := `SELECT a.JRNAL_NO, a.JRNAL_LINE, a.AMOUNT,  a.ACCNT_CODE, b.DESCR, a.ANAL_T1, a.ANAL_T2, a.ANAL_T3, a.ANAL_T4, a.ANAL_T5, a.ANAL_T6, a.ANAL_T7, a.ANAL_T8, a.ANAL_T9 
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] a
      INNER JOIN [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT] b on b.ACNT_CODE = a.ACCNT_CODE
      WHERE SUBSTRING(ANAL_T6,1,2) = 'ER' AND PERIOD >= `+delPeriodo+` AND PERIOD <= `+alPeriodo+`
      order by a.ACCNT_CODE asc`
    rows2, err2 := conn.Query(query2)
    if err2 != nil {
      fmt.Println(err2)
    }
    
    var JRNAL_NO int
    var JRNAL_LINE int
    var AMOUNT decimal.Dec
    var ACNT_CODE string
    var DESCR string
    var ANAL_T1 string
    var ANAL_T2 string
    var ANAL_T3 string
    var ANAL_T4 string
    var ANAL_T5 string
    var ANAL_T6 string
    var ANAL_T7 string
    var ANAL_T8 string
    var ANAL_T9 string
    var personaActual models.Sabana
    llave := ""
    for rows2.Next()  {
      rows2.Scan(&JRNAL_NO, &JRNAL_LINE, &AMOUNT, &ACNT_CODE, &DESCR, &ANAL_T1, &ANAL_T2, &ANAL_T3, &ANAL_T4, &ANAL_T5, &ANAL_T6, &ANAL_T7, &ANAL_T8, &ANAL_T9)
      ACNT_CODE = strings.TrimSpace(ACNT_CODE)
      DESCR = strings.TrimSpace(DESCR)
      ANAL_T1 = strings.TrimSpace(ANAL_T1)
      ANAL_T2 = strings.TrimSpace(ANAL_T2)
      ANAL_T3 = strings.TrimSpace(ANAL_T3)
      ANAL_T4 = strings.TrimSpace(ANAL_T4)
      ANAL_T5 = strings.TrimSpace(ANAL_T5)
      ANAL_T6 = strings.TrimSpace(ANAL_T6)
      ANAL_T7 = strings.TrimSpace(ANAL_T7)
      ANAL_T8 = strings.TrimSpace(ANAL_T8)
      ANAL_T9 = strings.TrimSpace(ANAL_T9)
      amountPrima := AMOUNT.Float64()
      personaActual = models.DameSabanaPorCodigo(ANAL_T6)
      llave = ACNT_CODE+"-"+ANAL_T1+"-"+ANAL_T2+"-"+ANAL_T3+"-"+ANAL_T4+"-"+ANAL_T5+"-"+ANAL_T7+"-"+ANAL_T8+"-"+ANAL_T9+"-"
      if _, ok := personaActual.PorConcepto[llave]; ok {
        } else {
        var concepto models.PorConcepto
        concepto = models.PorConcepto{0.0,DESCR }
        personaActual.PorConcepto[llave] = &concepto
      }
      personaActual.PorConcepto[llave].Saldo += amountPrima 
    }
    example := map[string]interface{}{ "success" : 1 , "sabana": models.GetAllSabana() }
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}

func (c *GenerarReporteDeMATController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    delPeriodo := c.GetString("delPeriodo")
    alPeriodo := c.GetString("alPeriodo")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT NAME, ANL_CODE FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CODE] WHERE SUBSTRING(ANL_CODE,1,2) = 'ER' AND LEN(RTRIM(ANL_CODE)) = 9"
    rows, err := conn.Query(query)
    var Nombre string
    var Codigo string
    //var PeriodosList map[string]*PorPeriodo
    models.ClearIglesias()
    var cedul  models.Iglesias
        for rows.Next()  {
      rows.Scan(&Nombre, &Codigo)
      Nombre = strings.TrimSpace(Nombre)
      Codigo = strings.TrimSpace(Codigo)
      cedul = models.Iglesias{Nombre,Codigo,make(map[string]*models.PorPeriodo)}
      models.AddIglesias(cedul, Codigo)
    }
    query2 := `SELECT DISTINCT a.ACCNT_CODE, b.DESCR
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] a
      INNER JOIN [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT] b on b.ACNT_CODE = a.ACCNT_CODE
      WHERE SUBSTRING(ANAL_T6,1,2) = 'ER' AND PERIOD >= `+delPeriodo+` AND PERIOD <= `+alPeriodo+`
      order by a.ACCNT_CODE asc`
    rows2, err2 := conn.Query(query2)
    if err2 != nil {
      fmt.Println(err2)
    }
    var cuentaActual models.Cuenta
  
    var Cuenta string
    var NCuenta string
    models.ClearCuentas()
    for rows2.Next()  {
      rows2.Scan(&Cuenta, &NCuenta)
      Cuenta = strings.TrimSpace(Cuenta)
      NCuenta = strings.TrimSpace(NCuenta)
      cuentaActual = models.Cuenta{Cuenta,NCuenta}
      models.AddCuenta(cuentaActual, Cuenta)
    }
    models.ClearPeriodos()
    var PERIODActual models.Periodo
    

    query1 := `SELECT a.ANAL_T6, a.ANAL_T9, b.DESCR, a.ACCNT_CODE, a.PERIOD, a.AMOUNT
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] a
      INNER JOIN [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT] b on b.ACNT_CODE = a.ACCNT_CODE
      WHERE SUBSTRING(ANAL_T6,1,2) = 'ER' AND PERIOD >= `+delPeriodo+` AND PERIOD <= `+alPeriodo+`
      order by PERIOD asc, a.ANAL_T3 asc`
    rows1, err1 := conn.Query(query1)
    if err1 != nil {
      fmt.Println(err1)
    }
    var ORG_ID string
    var FNCT string
    var DESCR string
    var ACNT_CODE string
    var PERIOD int
    var AMOUNT decimal.Dec
    var iglesiaActual models.Iglesias
    for rows1.Next()  {
      rows1.Scan(&ORG_ID, &FNCT, &DESCR, &ACNT_CODE, &PERIOD, &AMOUNT)
      ORG_ID = strings.TrimSpace(ORG_ID)
      FNCT = strings.TrimSpace(FNCT)
      DESCR = strings.TrimSpace(DESCR)
      ACNT_CODE = strings.TrimSpace(ACNT_CODE)
      amountPrima := AMOUNT.Float64()
      iglesiaActual = models.DameIglesiaPorCodigo(ORG_ID)
      PERIODString := strconv.Itoa(PERIOD)
      PERIODActual = models.Periodo{PERIODString}
      models.AddPeriodo(PERIODActual, PERIODString)
      if _, ok := iglesiaActual.PeriodosList[PERIODString]; ok {
        } else {
        var PERIODM models.PorPeriodo
        PERIODM = models.PorPeriodo{PERIOD, FNCT, make(map[string]*models.PorCuenta) }
        iglesiaActual.PeriodosList[PERIODString] = &PERIODM
      }
      iglesiaActual.PeriodosList[PERIODString].PERIOD = PERIOD
      if Compare(FNCT,"") != 0 {
        iglesiaActual.PeriodosList[PERIODString].Distrito = FNCT
      }
      if _, ok := iglesiaActual.PeriodosList[PERIODString].CuentasList[ACNT_CODE]; ok {
      } else {
        var Cuenta models.PorCuenta
        Cuenta = models.PorCuenta{ACNT_CODE,0.0,DESCR}
        iglesiaActual.PeriodosList[PERIODString].CuentasList[ACNT_CODE] = &Cuenta

      }
      iglesiaActual.PeriodosList[PERIODString].CuentasList[ACNT_CODE].Saldo += amountPrima  
    }
    example := map[string]interface{}{ "success" : 1 , "diezmos": models.GetAllIglesias(), "cuentas" : models.GetAllCuentas(), "periodos" : models.GetAllPeriodos() }
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}


func (c *GenerarReporteDeIglesiasDiezmosEnExcelController) Get() {
  //nc serveSheet(w http.ResponseWriter, r *http.Request) {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    delPeriodo := c.GetString("delPeriodo")
    auxiliar , _ := strconv.Atoi(delPeriodo)
    anioSiguiente := strconv.Itoa(auxiliar+1)
    //alPeriodo := c.GetString("alPeriodo")
    c.Ctx.Output.ContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    c.Ctx.Output.Header("Content-Disposition", "attachment; filename=Diezmos"+delPeriodo+".xlsx")
    var file *xlsx.File
      var sheet *xlsx.Sheet
      var row *xlsx.Row
      var cell *xlsx.Cell
    /*  var sheetPrima *xlsx.Sheet
      var rowPrima *xlsx.Row
      var cellPrima *xlsx.Cell
     */
      var errEx error
      file = xlsx.NewFile()
      sheet, errEx = file.AddSheet("Diezmos")
      if errEx != nil {
          fmt.Printf(errEx.Error())
      }
     /* sheet, errEx = file.AddSheet("Soporte")
      if errEx != nil {
          fmt.Printf(errEx.Error())
      }*/
     


      connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    var Nombre string
    var Codigo string
    DT := "DT"
    T := "T"
    if Compare(BUNIT.(string),"ADV")==0{//Hardcode
      DT = "DS"
      T = "C"
    }
    query := "SELECT NAME, ANL_CODE FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CODE] WHERE ANL_CAT_ID = '04' AND SUBSTRING(ANL_CODE,1,2) = '"+DT+"'"
    rows, err := conn.Query(query)
    models.ClearistritoD()
    var cedul  models.DistritoD
        for rows.Next()  {
      rows.Scan(&Nombre, &Codigo)
      Nombre = strings.TrimSpace(Nombre)
      Codigo = strings.TrimSpace(Codigo)
      cedul = models.DistritoD{Nombre,make(map[string]*models.PorIglesiaD)}
      models.AddDistritoD(cedul, Codigo)
    }
    var distritoActual models.DistritoD
    query3 := "SELECT DISTINCT a.ANAL_T5, a.ANAL_T3, d.NAME as Iglesia FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] a INNER JOIN [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CODE] d on d.ANL_CODE = a.ANAL_T5 WHERE SUBSTRING(a.ANAL_T5,1,1) = '"+T+"' AND SUBSTRING( a.ANAL_T3,1,2) = '"+DT+"'"
    rows3, err3 := conn.Query(query3)
    if err3 != nil {
      fmt.Println("disculpa:", err3.Error())
    }
    var ANAL_T3 string
    var ANAL_T5 string
    var IglesiaS string
    
    for rows3.Next()  {
      rows3.Scan(&ANAL_T5, &ANAL_T3, &IglesiaS)
      ANAL_T3 = strings.TrimSpace(ANAL_T3)
      ANAL_T5 = strings.TrimSpace(ANAL_T5)
      IglesiaS = strings.TrimSpace(IglesiaS)
      distritoActual = models.DameDistritoDPorCodigo(ANAL_T3)
      if _, ok := distritoActual.IglesiaList[ANAL_T5]; ok {
        } else {
        var Iglesia models.PorIglesiaD
        Iglesia = models.PorIglesiaD{IglesiaS, make(map[string]*models.PorCuentaD) }
        distritoActual.IglesiaList[ANAL_T5] = &Iglesia
      }
    }



    query2 := ` SELECT DISTINCT a.ACCNT_CODE, b.DESCR, c.NAME as Distrito, d.NAME as Iglesia, a.JRNAL_NO, a.JRNAL_LINE, a.AMOUNT,a.DESCRIPTN, a.D_C, a.PERIOD, a.TRANS_DATETIME, 
        a.ANAL_T0, a.ANAL_T1, a.ANAL_T2, a.ANAL_T3, a.ANAL_T4, a.ANAL_T5, a.ANAL_T6, a.ANAL_T7, a.ANAL_T8, a.ANAL_T9
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] a
        INNER JOIN [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT] b on b.ACNT_CODE = a.ACCNT_CODE
        INNER JOIN [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE] c on c.ANL_CODE = a.ANAL_T3
      INNER JOIN [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE] d on d.ANL_CODE = a.ANAL_T5
      WHERE  SUBSTRING(CAST(a.PERIOD AS NVARCHAR(11)) ,1,4) in ('`+delPeriodo+`','`+anioSiguiente+`')
        AND D_C = 'C' AND SUBSTRING(a.ANAL_T5,1,1) = '`+T+`' AND SUBSTRING(a.ACCNT_CODE,1,1) != '1'
        AND a.ALLOCATION != 'C'
        order by  a.ACCNT_CODE asc, a.PERIOD asc`
    rows2, err2 := conn.Query(query2)
    if err2 != nil {
      fmt.Println(err2)
    }
    //primero leo el periodo, lo separo por año y mes
    //despues leo el detalle, lo convierto a mes
    //si el año es delPeriodo, entonces acepto las que el detalle sea igual o menor
    //si el año es el siguiente, entonces acepto las que el detalle sea mayor, 
    // las que acepto las asigno al mes del año del periodo

    var Cuenta string
    var NCuenta string
    var DistritoS string
    var JRNAL_NO int
    var JRNAL_LINE int
    var AMOUNT decimal.Dec
    var D_C string
    var TRANS_DATETIME string
    var PERIOD int
    var DESCRIPTN string
    var ANAL_T0 string
    var ANAL_T1 string
    var ANAL_T2 string
    var ANAL_T4 string
    var ANAL_T6 string
    var ANAL_T7 string
    var ANAL_T8 string
    var ANAL_T9 string
    var puedoEntrar int
    var mesAMeter int
    var mesDelDetalle int
    for rows2.Next()  {
      rows2.Scan(&Cuenta, &NCuenta, &DistritoS, &IglesiaS, &JRNAL_NO, &JRNAL_LINE, &AMOUNT, &DESCRIPTN, &D_C, &PERIOD, &TRANS_DATETIME, &ANAL_T0, &ANAL_T1, &ANAL_T2, &ANAL_T3, &ANAL_T4, &ANAL_T5, &ANAL_T6, &ANAL_T7, &ANAL_T8, &ANAL_T9)
      ANAL_T0 = strings.TrimSpace(ANAL_T0)
      ANAL_T1 = strings.TrimSpace(ANAL_T1)
      ANAL_T2 = strings.TrimSpace(ANAL_T2)
      ANAL_T3 = strings.TrimSpace(ANAL_T3)
      ANAL_T4 = strings.TrimSpace(ANAL_T4)
      ANAL_T5 = strings.TrimSpace(ANAL_T5)
      ANAL_T6 = strings.TrimSpace(ANAL_T6)
      ANAL_T7 = strings.TrimSpace(ANAL_T7)
      ANAL_T8 = strings.TrimSpace(ANAL_T8)
      ANAL_T9 = strings.TrimSpace(ANAL_T9)
      Cuenta = strings.TrimSpace(Cuenta)
      amountPrima := AMOUNT.Float64()
      PERIODString := strconv.Itoa(PERIOD)
      primerasDos := string(ANAL_T5[0:2])
      if Compare(primerasDos,DT)!=0 {//si es un AFO, busco el que corresponde!
        mm := models.GetAllDistritoD()
        yaEntre := 0
        for k, _ := range mm {
          distritoActual = models.DameDistritoDPorCodigo(k); 
            for kk, _ := range distritoActual.IglesiaList { 
              if Compare(ANAL_T5,kk)==0 {
                ANAL_T3 = k
                yaEntre=1
                break
              }
            }
            if yaEntre == 1 {
              break
            }
        }     
      }
      distritoActual = models.DameDistritoDPorCodigo(ANAL_T3)
      anioPeriodo := string(PERIODString[0:4])
      mesPeriodo := string(PERIODString[5:7])

      puedoEntrar = 0
      mesAMeter = 0
      mesDelDetalle = 0
      if Compare(ANAL_T9,"PENE") == 0 || Compare(ANAL_T9,"MENERO") == 0 {
        mesDelDetalle = 1
      }
      if Compare(ANAL_T9,"PFEB") == 0 || Compare(ANAL_T9,"MFEBRE") == 0 {
        mesDelDetalle = 2
      }
      if Compare(ANAL_T9,"PMAR") == 0 || Compare(ANAL_T9,"MMARZO") == 0 {
        mesDelDetalle = 3
      }
      if Compare(ANAL_T9,"PABR") == 0 || Compare(ANAL_T9,"MABRIL") == 0 {
        mesDelDetalle = 4
      }
      if Compare(ANAL_T9,"PMAY") == 0 || Compare(ANAL_T9,"MMAYO") == 0 {
        mesDelDetalle = 5
      }
      if Compare(ANAL_T9,"PJUN") == 0 || Compare(ANAL_T9,"MJUNIO") == 0 {
        mesDelDetalle = 6
      }
      if Compare(ANAL_T9,"PJUL") == 0 || Compare(ANAL_T9,"MJULIO") == 0 {
        mesDelDetalle = 7
      }
      if Compare(ANAL_T9,"PAGO") == 0 || Compare(ANAL_T9,"MAGOST") == 0 {
        mesDelDetalle = 8
      }
      if Compare(ANAL_T9,"PSEP") == 0 || Compare(ANAL_T9,"MSEPTI") == 0 {
        mesDelDetalle = 9
      }
      if Compare(ANAL_T9,"POCT") == 0 || Compare(ANAL_T9,"MOCTUB") == 0 {
        mesDelDetalle = 10
      }
      if Compare(ANAL_T9,"PNOV") == 0 || Compare(ANAL_T9,"MNOVIE") == 0 {
        mesDelDetalle = 11
      }
      if Compare(ANAL_T9,"PDIC") == 0 || Compare(ANAL_T9,"MDICIE") == 0 {
        mesDelDetalle = 12
      }
      mesPeriodoInt, _ := strconv.Atoi(mesPeriodo)
        
      if Compare(anioPeriodo,delPeriodo)==0 {
        if Compare(ANAL_T9,"")==0 {
          mesAMeter = mesPeriodoInt
          puedoEntrar = 1
        } else {
          if mesDelDetalle <= mesPeriodoInt {
            puedoEntrar = 1
            mesAMeter = mesDelDetalle
          }
        }
      }
      if Compare(anioPeriodo,anioSiguiente)==0 {
        if mesDelDetalle > mesPeriodoInt {
          puedoEntrar = 1
          mesAMeter = mesDelDetalle
        }
      }
      if puedoEntrar == 1 {
        if _, ok := distritoActual.IglesiaList[ANAL_T5]; ok {
        } else {
          var Iglesia models.PorIglesiaD
          Iglesia = models.PorIglesiaD{IglesiaS, make(map[string]*models.PorCuentaD) }
          distritoActual.IglesiaList[ANAL_T5] = &Iglesia
        }
        if _, ok := distritoActual.IglesiaList[ANAL_T5].CuentaList[Cuenta]; ok {
          } else {
          var cuentaD models.PorCuentaD
          cuentaD = models.PorCuentaD{NCuenta, make(map[string]*models.PorPeriodoD) }
          distritoActual.IglesiaList[ANAL_T5].CuentaList[Cuenta] = &cuentaD
        }
        if mesAMeter == 1 {
          PERIODString = delPeriodo+"001"
        }
        if mesAMeter == 2 {
          PERIODString = delPeriodo+"002"
        }
        if mesAMeter == 3 {
          PERIODString = delPeriodo+"003"
        }
        if mesAMeter == 4 {
          PERIODString = delPeriodo+"004"
        }
        if mesAMeter == 5 {
          PERIODString = delPeriodo+"005"
        }
        if mesAMeter == 6 {
          PERIODString = delPeriodo+"006"
        }
        if mesAMeter == 7 {
          PERIODString = delPeriodo+"007"
        }
        if mesAMeter == 8 {
          PERIODString = delPeriodo+"008"
        }
        if mesAMeter == 9 {
          PERIODString = delPeriodo+"009"
        }
        if mesAMeter == 10 {
          PERIODString = delPeriodo+"010"
        }
        if mesAMeter == 11 {
          PERIODString = delPeriodo+"011"
        }
        if mesAMeter == 12 {
          PERIODString = delPeriodo+"012"
        }
        if _, ok := distritoActual.IglesiaList[ANAL_T5].CuentaList[Cuenta].PeriodoList[PERIODString]; ok {
          } else {
          var periodD models.PorPeriodoD
          periodD = models.PorPeriodoD{ 0.0 }
          distritoActual.IglesiaList[ANAL_T5].CuentaList[Cuenta].PeriodoList[PERIODString] = &periodD
        }

        distritoActual.IglesiaList[ANAL_T5].CuentaList[Cuenta].PeriodoList[PERIODString].Saldo += amountPrima
      }     
    }
    m := models.GetAllDistritoD()
    primero:=1
    for k, _ := range m {
      distritoActual = models.DameDistritoDPorCodigo(k); 
      row = sheet.AddRow()
      row = sheet.AddRow()
       
        cell = row.AddCell()
        font := xlsx.NewFont(16, "Arial Black")
            style := xlsx.NewStyle()
            style.Font = *font                    
            cell.SetStyle(style)  
            
        cell.Value = "Distrito: "+distritoActual.Nombre
        for kk, _ := range distritoActual.IglesiaList {
          row = sheet.AddRow()
          row = sheet.AddRow()
          cell = row.AddCell()
          font := xlsx.NewFont(14, "Arial Black")
              style := xlsx.NewStyle()
              style.Font = *font                    
              cell.SetStyle(style)  
          cell.Value = distritoActual.IglesiaList[kk].Nombre    
          primero=1
          for kkk, _ := range distritoActual.IglesiaList[kk].CuentaList {
            //burbuja
/*
            for kkkk, _ := range distritoActual.IglesiaList[kk].CuentaList[kkk].PeriodoList {
              for jjjj, _ := range distritoActual.IglesiaList[kk].CuentaList[kkk].PeriodoList {
                PERIODK, _ := strconv.Atoi(kkkk)
                PERIODJ, _ := strconv.Atoi(jjjj)
                if PERIODK > PERIODJ {
                  auxX := distritoActual.IglesiaList[kk].CuentaList[kkk].PeriodoList[jjjj]
                  distritoActual.IglesiaList[kk].CuentaList[kkk].PeriodoList[jjjj] = distritoActual.IglesiaList[kk].CuentaList[kkk].PeriodoList[kkkk]
                  distritoActual.IglesiaList[kk].CuentaList[kkk].PeriodoList[kkkk] = auxX
                }
            }
          }*/

            if primero == 1 {
            primero = 0
            row = sheet.AddRow()
            cell = row.AddCell()
            font := xlsx.NewFont(12, "Arial Black")
                  style := xlsx.NewStyle()
                  style.Font = *font                    
                  cell.SetStyle(style)  
              cell.Value = "Concepto"
              cell = row.AddCell()
            cell.SetStyle(style)  
              cell.Value = "Enero"
            cell = row.AddCell()
            cell.SetStyle(style)  
              cell.Value = "Febrero"
              cell = row.AddCell()
            cell.SetStyle(style)  
              cell.Value = "Marzo"
              
              cell = row.AddCell()
            cell.SetStyle(style)  
              cell.Value = "Abril"
              
              cell = row.AddCell()
            cell.SetStyle(style)  
              cell.Value = "Mayo"
              
              cell = row.AddCell()
            cell.SetStyle(style)  
              cell.Value = "Junio"
              
              cell = row.AddCell()
            cell.SetStyle(style)  
              cell.Value = "Julio"
              
              cell = row.AddCell()
            cell.SetStyle(style)  
              cell.Value = "Agosto"
              
              cell = row.AddCell()
            cell.SetStyle(style)  
              cell.Value = "Septiembre"
              
              cell = row.AddCell()
            cell.SetStyle(style)  
              cell.Value = "Octubre"
              
              cell = row.AddCell()
            cell.SetStyle(style)  
              cell.Value = "Noviembre"
              
              cell = row.AddCell()
            cell.SetStyle(style)  
              cell.Value = "Diciembre"
              
                 
          }
          row = sheet.AddRow()
          cell = row.AddCell()
            cell.Value = distritoActual.IglesiaList[kk].CuentaList[kkk].DESCR
            cell01 := row.AddCell()
            cell02 := row.AddCell()
            cell03 := row.AddCell()
            cell04 := row.AddCell()
            cell05 := row.AddCell()
            cell06 := row.AddCell()
            cell07 := row.AddCell()
            cell08 := row.AddCell()
            cell09 := row.AddCell()
            cell10 := row.AddCell()
            cell11 := row.AddCell()
            cell12 := row.AddCell()
              

          for kkkk, _ := range distritoActual.IglesiaList[kk].CuentaList[kkk].PeriodoList {
            nuevoNumero := string(kkkk[5:7])
            mesActual, _ := strconv.Atoi(nuevoNumero)
            amountString := fmt.Sprintf("%.2f", distritoActual.IglesiaList[kk].CuentaList[kkk].PeriodoList[kkkk].Saldo)
            if mesActual == 1 {
              cell01.SetFloatWithFormat(distritoActual.IglesiaList[kk].CuentaList[kkk].PeriodoList[kkkk].Saldo,"0.00")
            }
            if mesActual == 2 {
              cell02.Value = amountString
            }
            if mesActual == 3 {
              cell03.Value = amountString
            }
            if mesActual == 4 {
              cell04.Value = amountString
            }
            if mesActual == 5 {
              cell05.Value = amountString
            }
            if mesActual == 6 {
              cell06.Value = amountString
            }
            if mesActual == 7 {
              cell07.Value = amountString
            }
            if mesActual == 8 {
              cell08.Value = amountString
            }
            if mesActual == 9 {
              cell09.Value = amountString
            }
            if mesActual == 10 {
              cell10.Value = amountString
            }
            if mesActual == 11 {
              cell11.Value = amountString
            }
            if mesActual == 12 {
              cell12.Value = amountString
            }


              
          }
        }
        }
    }
    



    errEx = file.Save("MyXLSXFile.xlsx")
      if errEx != nil {
          fmt.Printf(errEx.Error())
      }
      errEx = file.Write(c.Ctx.ResponseWriter)
      if errEx != nil {
          fmt.Printf(errEx.Error())
      }
    return
    
    example := map[string]interface{}{ "success" : 1 , "diezmos": models.GetAllDistritoD()}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}


func (c *DueDateArreglarController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }

    query2 := ` SELECT ANAL_T9, JRNAL_NO, JRNAL_LINE, PERIOD
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] a
        WHERE  ACCNT_CODE in ('361DESAR01', '361MISIO01','611110','635110','635120',
        '635130','635555','635777')`
    rows2, err2 := conn.Query(query2)
    if err2 != nil {
      fmt.Println(err2)
    }
    ANAL_T9 := ""
    JRNAL_NO := 0
    JRNAL_LINE := 0
    PERIOD := 0
    fechaAMeter := ""
    mesDelPeriodo := 0
    mesDelDetalle := 0
    for rows2.Next()  {
      rows2.Scan(&ANAL_T9, &JRNAL_NO, &JRNAL_LINE, &PERIOD)
      ANAL_T9 = strings.TrimSpace(ANAL_T9)
      mesS := strconv.Itoa(PERIOD)
      mesDelPeriodo , _ = strconv.Atoi(mesS[4:])
      anioS := mesS[0:4]
      anioDelPeriodo , _ := strconv.Atoi(anioS)
      
      if ANAL_T9=="PENE" {
        mesDelDetalle = 1
      }
      if ANAL_T9=="PFEB" {
        mesDelDetalle = 2
      }
      if ANAL_T9=="PMAR" {
        mesDelDetalle = 3
      }
      if ANAL_T9=="PABR" {
        mesDelDetalle = 4
      }
      if ANAL_T9=="PMAY" {
        mesDelDetalle = 5
      }
      if ANAL_T9=="PJUN" {
        mesDelDetalle = 6
      }
      if ANAL_T9=="PJUL" {
        mesDelDetalle = 7
      }
      if ANAL_T9=="PAGO" {
        mesDelDetalle = 8
      }
      if ANAL_T9=="PSEP" {
        mesDelDetalle = 9
      }
      if ANAL_T9=="POCT" {
        mesDelDetalle = 10
      }
      if ANAL_T9=="PNOV" {
        mesDelDetalle = 11
      }
      if ANAL_T9=="PDIC" {
        mesDelDetalle = 12
      }
      if mesDelDetalle == 0 {
        //fmt.Println(strconv.Itoa(JRNAL_NO)+"-"+strconv.Itoa(JRNAL_LINE))
      } else {
        if mesDelDetalle > mesDelPeriodo {
          anioDelPeriodo--
        }
        anioSS := strconv.Itoa(anioDelPeriodo)
        mesSS := strconv.Itoa(mesDelDetalle)
        if mesDelDetalle < 10 {
          mesSS = "0"+strconv.Itoa(mesDelDetalle)
        }
        fechaAMeter = anioSS+"-"+mesSS+"-28"
        query1 := `UPDATE [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] 
          SET DUE_DATETIME = '`+fechaAMeter+`' 
           WHERE JRNAL_NO  = `+strconv.Itoa(JRNAL_NO)+`
          AND JRNAL_LINE = `+strconv.Itoa(JRNAL_LINE)+``
        conn.Exec(query1)
        //fmt.Println(query1)
      }
    }
    example := map[string]interface{}{ "success" : 1 }
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}

func (c *GenerarReporteDeIglesiasDiezmosEnPaginaDetalleController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    delDistrito := c.GetString("delDistrito")
    delTipoDeIngreso := c.GetString("delTipoDeIngreso")
    alPeriodo := c.GetString("alPeriodo")
    delPeriodo := c.GetString("delPeriodo")
    deLaIglesia := c.GetString("deLaIglesia")
    
    dueDateDelPeriodo := delPeriodo[0:4]+"-"+delPeriodo[5:]+"-01"
    dueDateAlPeriodo := alPeriodo[0:4]+"-"+alPeriodo[5:]+"-28"

    

    
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    var distritoActual models.DistritoD
    query3 := "SELECT DISTINCT a.ANAL_T5, a.ANAL_T3, d.NAME as Iglesia FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] a INNER JOIN [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CODE] d on d.ANL_CODE = a.ANAL_T5 WHERE ANAL_T5 = '"+deLaIglesia+"' AND SUBSTRING( a.ANAL_T3,1,2) = 'DT' AND ANAL_T3 = '"+delDistrito+"'"
    rows3, err3 := conn.Query(query3)
    if err3 != nil {
      fmt.Println("disculpa:", err3.Error())
    }
    var ANAL_T3 string
    var ANAL_T5 string
    var IglesiaS string
    Nombre := ""
    Codigo := ""
    queryX := "SELECT NAME, ANL_CODE FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CODE] WHERE ANL_CAT_ID = '04' AND ANL_CODE = '"+delDistrito+"'"
    rowsX, _ := conn.Query(queryX)    
    models.ClearistritoD()
    var cedulX  models.DistritoD
        for rowsX.Next()  {
      rowsX.Scan(&Nombre, &Codigo)
      Nombre = strings.TrimSpace(Nombre)
      Codigo = strings.TrimSpace(Codigo)
      cedulX = models.DistritoD{Nombre,make(map[string]*models.PorIglesiaD)}
      models.AddDistritoD(cedulX, Codigo)
    }

    for rows3.Next()  {
      rows3.Scan(&ANAL_T5, &ANAL_T3, &IglesiaS)
      ANAL_T3 = strings.TrimSpace(ANAL_T3)//distrito
      ANAL_T5 = strings.TrimSpace(ANAL_T5)//iglesia!
      IglesiaS = strings.TrimSpace(IglesiaS)
      distritoActual = models.DameDistritoDPorCodigo(ANAL_T3)
      if _, ok := distritoActual.IglesiaList[ANAL_T5]; ok {
        } else {
        var Iglesia models.PorIglesiaD
        Iglesia = models.PorIglesiaD{IglesiaS, make(map[string]*models.PorCuentaD) }
        distritoActual.IglesiaList[ANAL_T5] = &Iglesia
      }
    }
    var enCurso decimal.Dec
    //var anterior decimal.Dec
    for iglesia, _ := range distritoActual.IglesiaList {
      var porCuenta models.PorCuentaD
      porCuenta = models.PorCuentaD{distritoActual.IglesiaList[iglesia].Nombre, make(map[string]*models.PorPeriodoD) }
      distritoActual.IglesiaList[iglesia].CuentaList[delTipoDeIngreso] = &porCuenta
  
      query2 := ` SELECT SUM(AMOUNT)
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] 
        WHERE DUE_DATETIME >= '`+dueDateDelPeriodo+`' AND DUE_DATETIME <= '`+dueDateAlPeriodo+`'
        AND D_C = 'C' AND ANAL_T5 = '`+iglesia+`' AND ACCNT_CODE = '`+delTipoDeIngreso+`'
        AND ALLOCATION != 'C'
        `
        //distritoActual.IglesiaList[iglesia].Nombre
        rows2, err2 := conn.Query(query2)
        check(err2)
        for rows2.Next()  {
        rows2.Scan(&enCurso)
      }
    

      var porPeriodo models.PorPeriodoD
      porPeriodo = models.PorPeriodoD{ enCurso.Float64()}
      distritoActual.IglesiaList[iglesia].CuentaList[delTipoDeIngreso].PeriodoList[delPeriodo] = &porPeriodo

    } 
    example := map[string]interface{}{ "success" : 1 , "diezmos": models.GetAllDistritoD()}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}


func (c *GenerarReporteDeIglesiasDiezmosEnPaginaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    delDistrito := c.GetString("delDistrito")
    delTipoDeIngreso := c.GetString("delTipoDeIngreso")
    alPeriodo := c.GetString("alPeriodo")
    delPeriodo := c.GetString("delPeriodo")
    auxiliar , _ := strconv.Atoi(delPeriodo[0:4])
    anioAnterior := strconv.Itoa(auxiliar-1)
    delPeriodoMes := delPeriodo[4:]
    alPeriodoMes := alPeriodo[4:]
    
    dueDateDelPeriodo := delPeriodo[0:4]+"-"+delPeriodo[5:]+"-01"
    dueDateAlPeriodo := alPeriodo[0:4]+"-"+alPeriodo[5:]+"-28"

    delPeriodoAnterior := anioAnterior+delPeriodoMes  
    alPeriodoAnterior := anioAnterior+alPeriodoMes


    dueDateDelPeriodoAnterior := delPeriodoAnterior[0:4]+"-"+delPeriodoAnterior[5:]+"-01"
    dueDateAlPeriodoAnterior := alPeriodoAnterior[0:4]+"-"+alPeriodoAnterior[5:]+"-28"

    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    var distritoActual models.DistritoD
    query3 := "SELECT DISTINCT a.ANAL_T5, a.ANAL_T3, d.NAME as Iglesia FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] a INNER JOIN [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CODE] d on d.ANL_CODE = a.ANAL_T5 WHERE SUBSTRING(a.ANAL_T5,1,1) = 'T' AND SUBSTRING( a.ANAL_T3,1,2) = 'DT' AND ANAL_T3 = '"+delDistrito+"'"
    rows3, err3 := conn.Query(query3)
    if err3 != nil {
      fmt.Println("disculpa:", err3.Error())
    }
    var ANAL_T3 string
    var ANAL_T5 string
    var IglesiaS string
    Nombre := ""
    Codigo := ""
    queryX := "SELECT NAME, ANL_CODE FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CODE] WHERE ANL_CAT_ID = '04' AND ANL_CODE = '"+delDistrito+"'"
    rowsX, _ := conn.Query(queryX)    
    models.ClearistritoD()
    var cedulX  models.DistritoD
        for rowsX.Next()  {
      rowsX.Scan(&Nombre, &Codigo)
      Nombre = strings.TrimSpace(Nombre)
      Codigo = strings.TrimSpace(Codigo)
      cedulX = models.DistritoD{Nombre,make(map[string]*models.PorIglesiaD)}
      models.AddDistritoD(cedulX, Codigo)
    }

    for rows3.Next()  {
      rows3.Scan(&ANAL_T5, &ANAL_T3, &IglesiaS)
      ANAL_T3 = strings.TrimSpace(ANAL_T3)//distrito
      ANAL_T5 = strings.TrimSpace(ANAL_T5)//iglesia!
      IglesiaS = strings.TrimSpace(IglesiaS)
      distritoActual = models.DameDistritoDPorCodigo(ANAL_T3)
      if _, ok := distritoActual.IglesiaList[ANAL_T5]; ok {
        } else {
        var Iglesia models.PorIglesiaD
        Iglesia = models.PorIglesiaD{IglesiaS, make(map[string]*models.PorCuentaD) }
        distritoActual.IglesiaList[ANAL_T5] = &Iglesia
      }
    }
    var enCurso decimal.Dec
    var anterior decimal.Dec
    for iglesia, _ := range distritoActual.IglesiaList {
      var porCuenta models.PorCuentaD
      porCuenta = models.PorCuentaD{distritoActual.IglesiaList[iglesia].Nombre, make(map[string]*models.PorPeriodoD) }
      distritoActual.IglesiaList[iglesia].CuentaList[delTipoDeIngreso] = &porCuenta
  
      query2 := ` SELECT SUM(AMOUNT)
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] 
        WHERE DUE_DATETIME >= '`+dueDateDelPeriodo+`' AND DUE_DATETIME <= '`+dueDateAlPeriodo+`'
        AND D_C = 'C' AND ANAL_T5 = '`+iglesia+`' AND ACCNT_CODE = '`+delTipoDeIngreso+`'
        AND ALLOCATION != 'C'
        `
        //distritoActual.IglesiaList[iglesia].Nombre
        rows2, err2 := conn.Query(query2)
        check(err2)
        for rows2.Next()  {
        rows2.Scan(&enCurso)
      }
      query2 = ` SELECT SUM(AMOUNT)
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] 
        WHERE DUE_DATETIME >= '`+dueDateDelPeriodoAnterior+`' AND DUE_DATETIME <= '`+dueDateAlPeriodoAnterior+`'
        AND D_C = 'C' AND ANAL_T5 = '`+iglesia+`' AND ACCNT_CODE = '`+delTipoDeIngreso+`'
        AND ALLOCATION != 'C'
        `
          rows2, err2 = conn.Query(query2)
        check(err2)
        for rows2.Next()  {
        rows2.Scan(&anterior)
      }

      var porPeriodo models.PorPeriodoD
      porPeriodo = models.PorPeriodoD{ enCurso.Float64()}
      distritoActual.IglesiaList[iglesia].CuentaList[delTipoDeIngreso].PeriodoList[delPeriodo] = &porPeriodo

      var porPeriodoAnterior models.PorPeriodoD
      porPeriodoAnterior = models.PorPeriodoD{ anterior.Float64()}
      distritoActual.IglesiaList[iglesia].CuentaList[delTipoDeIngreso].PeriodoList[delPeriodoAnterior] = &porPeriodoAnterior
    } 
    example := map[string]interface{}{ "success" : 1 , "diezmos": models.GetAllDistritoD()}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}

func (c *GenerarReporteDeIglesiasDiezmosController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    delPeriodo := c.GetString("delPeriodo")
    auxiliar , _ := strconv.Atoi(delPeriodo)
    anioSiguiente := strconv.Itoa(auxiliar+1)
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }

    var Nombre string
    var Codigo string
    DT := "DT"
    T := "T"
    if Compare(BUNIT.(string),"ADV")==0{//Hardcode
      DT = "DS"
      T = "C"
    }
    query := "SELECT NAME, ANL_CODE FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CODE] WHERE ANL_CAT_ID = '04' AND SUBSTRING(ANL_CODE,1,2) = '"+DT+"'"
    rows, err := conn.Query(query)
    models.ClearistritoD()
    var cedul  models.DistritoD
        for rows.Next()  {
      rows.Scan(&Nombre, &Codigo)
      Nombre = strings.TrimSpace(Nombre)
      Codigo = strings.TrimSpace(Codigo)
      cedul = models.DistritoD{Nombre,make(map[string]*models.PorIglesiaD)}
      models.AddDistritoD(cedul, Codigo)
    }
    var distritoActual models.DistritoD
    query3 := "SELECT DISTINCT a.ANAL_T5, a.ANAL_T3, d.NAME as Iglesia FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] a INNER JOIN [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CODE] d on d.ANL_CODE = a.ANAL_T5 WHERE SUBSTRING(a.ANAL_T5,1,1) = '"+T+"' AND SUBSTRING( a.ANAL_T3,1,2) = '"+DT+"'"
    rows3, err3 := conn.Query(query3)
    if err3 != nil {
      fmt.Println("disculpa:", err3.Error())
    }
    var ANAL_T3 string
    var ANAL_T5 string
    var IglesiaS string
    
    for rows3.Next()  {
      rows3.Scan(&ANAL_T5, &ANAL_T3, &IglesiaS)
      ANAL_T3 = strings.TrimSpace(ANAL_T3)
      ANAL_T5 = strings.TrimSpace(ANAL_T5)
      IglesiaS = strings.TrimSpace(IglesiaS)
      distritoActual = models.DameDistritoDPorCodigo(ANAL_T3)
      if _, ok := distritoActual.IglesiaList[ANAL_T5]; ok {
        } else {
        var Iglesia models.PorIglesiaD
        Iglesia = models.PorIglesiaD{IglesiaS, make(map[string]*models.PorCuentaD) }
        distritoActual.IglesiaList[ANAL_T5] = &Iglesia
      }
    }



    query2 := ` SELECT DISTINCT a.ACCNT_CODE, b.DESCR, c.NAME as Distrito, d.NAME as Iglesia, a.JRNAL_NO, a.JRNAL_LINE, a.AMOUNT,a.DESCRIPTN, a.D_C, a.PERIOD, a.TRANS_DATETIME, 
        a.ANAL_T0, a.ANAL_T1, a.ANAL_T2, a.ANAL_T3, a.ANAL_T4, a.ANAL_T5, a.ANAL_T6, a.ANAL_T7, a.ANAL_T8, a.ANAL_T9
        FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] a
        INNER JOIN [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT] b on b.ACNT_CODE = a.ACCNT_CODE
        INNER JOIN [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE] c on c.ANL_CODE = a.ANAL_T3
      INNER JOIN [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE] d on d.ANL_CODE = a.ANAL_T5
      WHERE  SUBSTRING(CAST(a.PERIOD AS NVARCHAR(11)) ,1,4) in ('`+delPeriodo+`','`+anioSiguiente+`')
        AND D_C = 'C' AND SUBSTRING(a.ANAL_T5,1,1) = '`+T+`' AND SUBSTRING(a.ACCNT_CODE,1,1) != '1'
        AND a.ALLOCATION != 'C'
        order by  a.ACCNT_CODE asc, a.PERIOD asc`
    rows2, err2 := conn.Query(query2)
    if err2 != nil {
      fmt.Println(err2)
    }
    var Cuenta string
    var NCuenta string
    var DistritoS string
    var JRNAL_NO int
    var JRNAL_LINE int
    var AMOUNT decimal.Dec
    var D_C string
    var TRANS_DATETIME string
    var PERIOD int
    var DESCRIPTN string
    var ANAL_T0 string
    var ANAL_T1 string
    var ANAL_T2 string
    var ANAL_T4 string
    var ANAL_T6 string
    var ANAL_T7 string
    var ANAL_T8 string
    var ANAL_T9 string
    var puedoEntrar int
    var mesAMeter int
    var mesDelDetalle int
  
    for rows2.Next()  {
      rows2.Scan(&Cuenta, &NCuenta, &DistritoS, &IglesiaS, &JRNAL_NO, &JRNAL_LINE, &AMOUNT, &DESCRIPTN, &D_C, &PERIOD, &TRANS_DATETIME, &ANAL_T0, &ANAL_T1, &ANAL_T2, &ANAL_T3, &ANAL_T4, &ANAL_T5, &ANAL_T6, &ANAL_T7, &ANAL_T8, &ANAL_T9)
      ANAL_T0 = strings.TrimSpace(ANAL_T0)
      ANAL_T1 = strings.TrimSpace(ANAL_T1)
      ANAL_T2 = strings.TrimSpace(ANAL_T2)
      ANAL_T3 = strings.TrimSpace(ANAL_T3)
      ANAL_T4 = strings.TrimSpace(ANAL_T4)
      ANAL_T5 = strings.TrimSpace(ANAL_T5)
      ANAL_T6 = strings.TrimSpace(ANAL_T6)
      ANAL_T7 = strings.TrimSpace(ANAL_T7)
      ANAL_T8 = strings.TrimSpace(ANAL_T8)
      ANAL_T9 = strings.TrimSpace(ANAL_T9)
      Cuenta = strings.TrimSpace(Cuenta)
      amountPrima := AMOUNT.Float64()
      PERIODString := strconv.Itoa(PERIOD)
      primerasDos := string(ANAL_T5[0:2])

      
      if Compare(primerasDos,DT)!=0 {//si es un AFO, busco el que corresponde!
        mm := models.GetAllDistritoD()
        yaEntre := 0
        for k, _ := range mm {
          distritoActual = models.DameDistritoDPorCodigo(k); 
            for kk, _ := range distritoActual.IglesiaList { 
              if Compare(ANAL_T5,kk)==0 {
                ANAL_T3 = k
                yaEntre=1
                break
              }
            }
            if yaEntre == 1 {
              break
            }
        }     
      }
      distritoActual = models.DameDistritoDPorCodigo(ANAL_T3)
      anioPeriodo := string(PERIODString[0:4])
      mesPeriodo := string(PERIODString[5:7])

      puedoEntrar = 0
      mesAMeter = 0
      mesDelDetalle = 0
      if Compare(ANAL_T9,"PENE") == 0 || Compare(ANAL_T9,"MENERO") == 0 {
        mesDelDetalle = 1
      }
      if Compare(ANAL_T9,"PFEB") == 0 || Compare(ANAL_T9,"MFEBRE") == 0 {
        mesDelDetalle = 2
      }
      if Compare(ANAL_T9,"PMAR") == 0 || Compare(ANAL_T9,"MMARZO") == 0 {
        mesDelDetalle = 3
      }
      if Compare(ANAL_T9,"PABR") == 0 || Compare(ANAL_T9,"MABRIL") == 0 {
        mesDelDetalle = 4
      }
      if Compare(ANAL_T9,"PMAY") == 0 || Compare(ANAL_T9,"MMAYO") == 0 {
        mesDelDetalle = 5
      }
      if Compare(ANAL_T9,"PJUN") == 0 || Compare(ANAL_T9,"MJUNIO") == 0 {
        mesDelDetalle = 6
      }
      if Compare(ANAL_T9,"PJUL") == 0 || Compare(ANAL_T9,"MJULIO") == 0 {
        mesDelDetalle = 7
      }
      if Compare(ANAL_T9,"PAGO") == 0 || Compare(ANAL_T9,"MAGOST") == 0 {
        mesDelDetalle = 8
      }
      if Compare(ANAL_T9,"PSEP") == 0 || Compare(ANAL_T9,"MSEPTI") == 0 {
        mesDelDetalle = 9
      }
      if Compare(ANAL_T9,"POCT") == 0 || Compare(ANAL_T9,"MOCTUB") == 0 {
        mesDelDetalle = 10
      }
      if Compare(ANAL_T9,"PNOV") == 0 || Compare(ANAL_T9,"MNOVIE") == 0 {
        mesDelDetalle = 11
      }
      if Compare(ANAL_T9,"PDIC") == 0 || Compare(ANAL_T9,"MDICIE") == 0 {
        mesDelDetalle = 12
      }
      mesPeriodoInt, _ := strconv.Atoi(mesPeriodo)
        
      if Compare(anioPeriodo,delPeriodo)==0 {
        if Compare(ANAL_T9,"")==0 {
          mesAMeter = mesPeriodoInt
          puedoEntrar = 1
        } else {
          if mesDelDetalle <= mesPeriodoInt {
            puedoEntrar = 1
            mesAMeter = mesDelDetalle
          }
        }
      }
      if Compare(anioPeriodo,anioSiguiente)==0 {
        if mesDelDetalle > mesPeriodoInt {
          puedoEntrar = 1
          mesAMeter = mesDelDetalle
        }
      }
      if puedoEntrar == 1 {





        if _, ok := distritoActual.IglesiaList[ANAL_T5]; ok {
          } else {
          var Iglesia models.PorIglesiaD
          Iglesia = models.PorIglesiaD{IglesiaS, make(map[string]*models.PorCuentaD) }
          distritoActual.IglesiaList[ANAL_T5] = &Iglesia
        }
        if _, ok := distritoActual.IglesiaList[ANAL_T5].CuentaList[Cuenta]; ok {
          } else {
          var cuentaD models.PorCuentaD
          cuentaD = models.PorCuentaD{NCuenta, make(map[string]*models.PorPeriodoD) }
          distritoActual.IglesiaList[ANAL_T5].CuentaList[Cuenta] = &cuentaD
        }
        if mesAMeter == 1 {
          PERIODString = delPeriodo+"001"
        }
        if mesAMeter == 2 {
          PERIODString = delPeriodo+"002"
        }
        if mesAMeter == 3 {
          PERIODString = delPeriodo+"003"
        }
        if mesAMeter == 4 {
          PERIODString = delPeriodo+"004"
        }
        if mesAMeter == 5 {
          PERIODString = delPeriodo+"005"
        }
        if mesAMeter == 6 {
          PERIODString = delPeriodo+"006"
        }
        if mesAMeter == 7 {
          PERIODString = delPeriodo+"007"
        }
        if mesAMeter == 8 {
          PERIODString = delPeriodo+"008"
        }
        if mesAMeter == 9 {
          PERIODString = delPeriodo+"009"
        }
        if mesAMeter == 10 {
          PERIODString = delPeriodo+"010"
        }
        if mesAMeter == 11 {
          PERIODString = delPeriodo+"011"
        }
        if mesAMeter == 12 {
          PERIODString = delPeriodo+"012"
        }
        if _, ok := distritoActual.IglesiaList[ANAL_T5].CuentaList[Cuenta].PeriodoList[PERIODString]; ok {
          } else {
          var periodD models.PorPeriodoD
          periodD = models.PorPeriodoD{ 0.0 }
          distritoActual.IglesiaList[ANAL_T5].CuentaList[Cuenta].PeriodoList[PERIODString] = &periodD
        }
        distritoActual.IglesiaList[ANAL_T5].CuentaList[Cuenta].PeriodoList[PERIODString].Saldo += amountPrima
      }
    }
    example := map[string]interface{}{ "success" : 1 , "diezmos": models.GetAllDistritoD()}
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}

func (c *GenerarReporteDeIglesiasController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    delPeriodo := c.GetString("delPeriodo")
    alPeriodo := c.GetString("alPeriodo")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT NAME, ANL_CODE FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CODE] WHERE SUBSTRING(ANL_CODE,1,1) = 'T'"
    rows, err := conn.Query(query)
    var Nombre string
    var Codigo string
    //var PeriodosList map[string]*PorPeriodo
    models.ClearIglesias()
    var cedul  models.Iglesias
        for rows.Next()  {
      rows.Scan(&Nombre, &Codigo)
      Nombre = strings.TrimSpace(Nombre)
      Codigo = strings.TrimSpace(Codigo)
      cedul = models.Iglesias{Nombre,Codigo,make(map[string]*models.PorPeriodo)}
      models.AddIglesias(cedul, Codigo)
    }
    query2 := `SELECT DISTINCT a.ACCNT_CODE, b.DESCR
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] a
      INNER JOIN [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT] b on b.ACNT_CODE = a.ACCNT_CODE
      WHERE SUBSTRING(ANAL_T5,1,1) = 'T' AND PERIOD >= `+delPeriodo+` AND PERIOD <= `+alPeriodo+`
      order by a.ACCNT_CODE asc`
    rows2, err2 := conn.Query(query2)
    if err2 != nil {
      fmt.Println(err2)
    }
    var cuentaActual models.Cuenta
  
    var Cuenta string
    var NCuenta string
    models.ClearCuentas()
    for rows2.Next()  {
      rows2.Scan(&Cuenta, &NCuenta)
      Cuenta = strings.TrimSpace(Cuenta)
      NCuenta = strings.TrimSpace(NCuenta)
      cuentaActual = models.Cuenta{Cuenta,NCuenta}
      models.AddCuenta(cuentaActual, Cuenta)
    }
    models.ClearPeriodos()
    var PERIODActual models.Periodo
    

    query1 := `SELECT a.ANAL_T5, a.ANAL_T3, b.DESCR, a.ACCNT_CODE, a.PERIOD, a.AMOUNT
      FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] a
      INNER JOIN [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ACNT] b on b.ACNT_CODE = a.ACCNT_CODE
      WHERE SUBSTRING(ANAL_T5,1,1) = 'T' AND PERIOD >= `+delPeriodo+` AND PERIOD <= `+alPeriodo+`
      order by PERIOD asc, a.ANAL_T3 asc, a.ANAL_T5 asc`
    rows1, err1 := conn.Query(query1)
    if err1 != nil {
      fmt.Println(err1)
    }
    var ORG_ID string
    var FNCT string
    var DESCR string
    var ACNT_CODE string
    var PERIOD int
    var AMOUNT decimal.Dec
    var iglesiaActual models.Iglesias
    for rows1.Next()  {
      rows1.Scan(&ORG_ID, &FNCT, &DESCR, &ACNT_CODE, &PERIOD, &AMOUNT)
      ORG_ID = strings.TrimSpace(ORG_ID)
      FNCT = strings.TrimSpace(FNCT)
      DESCR = strings.TrimSpace(DESCR)
      ACNT_CODE = strings.TrimSpace(ACNT_CODE)
      amountPrima := AMOUNT.Float64()
      iglesiaActual = models.DameIglesiaPorCodigo(ORG_ID)
      PERIODString := strconv.Itoa(PERIOD)
      PERIODActual = models.Periodo{PERIODString}
      models.AddPeriodo(PERIODActual, PERIODString)
      if _, ok := iglesiaActual.PeriodosList[PERIODString]; ok {
        } else {
        var PERIODM models.PorPeriodo
        PERIODM = models.PorPeriodo{PERIOD, FNCT, make(map[string]*models.PorCuenta) }
        iglesiaActual.PeriodosList[PERIODString] = &PERIODM
      }
      iglesiaActual.PeriodosList[PERIODString].PERIOD = PERIOD
      if Compare(FNCT,"") != 0 {
        iglesiaActual.PeriodosList[PERIODString].Distrito = FNCT
      }
      if _, ok := iglesiaActual.PeriodosList[PERIODString].CuentasList[ACNT_CODE]; ok {
      } else {
        var Cuenta models.PorCuenta
        Cuenta = models.PorCuenta{ACNT_CODE,0.0,DESCR}
        iglesiaActual.PeriodosList[PERIODString].CuentasList[ACNT_CODE] = &Cuenta

      }
      iglesiaActual.PeriodosList[PERIODString].CuentasList[ACNT_CODE].Saldo += amountPrima  
    }
    example := map[string]interface{}{ "success" : 1 , "diezmos": models.GetAllIglesias(), "cuentas" : models.GetAllCuentas(), "periodos" : models.GetAllPeriodos() }
    c.Data["json"] = &example
    c.ServeJSON()
    return
  }
  example := map[string]interface{}{ "success" : 0 }
  c.Data["json"] = &example
  c.ServeJSON()
}

func (c *ListaDistritosPresupuestoController) Post() {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }

    query := `SELECT ANL_CODE, NAME
  FROM [SunSystemsData].[dbo].[`+BUNIT.(string)+`_ANL_CODE]
  WHERE PROHIBIT_POSTING = '0' AND ANL_CODE like 'DT%'
  AND LEN(ANL_CODE) >3`
    rows, err := conn.Query(query)
    type Distritos struct {
      DT string
      Name string
    }
    DistritosList := make(map[string]*Distritos)

    var ANL_CODE string
    var Nombre string
    models.ClearTiposDeDiario()
    for rows.Next()  {
      rows.Scan(&ANL_CODE, &Nombre)
      DistritosList[ANL_CODE] = &Distritos{ANL_CODE,Nombre}
      
    }
    example := map[string]interface{}{"success" : 1, "distritos": DistritosList }
    c.Data["json"] = &example
    c.ServeJSON()
  
}


func (c *ListaTiposDeDiarioController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT idTipoDeDiario, Codigo, nombre FROM [SunSystemsData].[dbo].[TiposDeDiario] WHERE BUNIT = '"+BUNIT.(string)+"' order by idTipoDeDiario asc"
    rows, err := conn.Query(query)
    var idTipoDeDiario int
    var Codigo string
    var Nombre string
    models.ClearTiposDeDiario()
    var cedul  models.TiposDD
        for rows.Next()  {
      rows.Scan(&idTipoDeDiario, &Codigo, &Nombre)
      cedul = models.TiposDD{idTipoDeDiario,Codigo,Nombre}
      models.AddTiposDeDiariop(cedul, strconv.Itoa(idTipoDeDiario) )
    }
    example := map[string]interface{}{ "tiposDeDiario": models.GetAllTiposDeDiario() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *ListaDiezmoConceptoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosTesoreroIglesia(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := `SELECT idDiezmoConcepto,concepto,activo
        FROM [SunSystemsData].[dbo].[DiezmoConcepto]
        WHERE BUNIT = '`+BUNIT.(string)+`'`
    rows, err := conn.Query(query)
    var Concepto string
    var IdDiezmoConcepto int
    var Activo int
    models.ClearDiezmoConcepto()
    var cedul models.DiezmoConcepto
        for rows.Next()  {
      rows.Scan(&IdDiezmoConcepto, &Concepto, &Activo)
      cedul = models.DiezmoConcepto{Concepto, IdDiezmoConcepto, Activo}
      models.AddDiezmoConcepto(cedul, strconv.Itoa(IdDiezmoConcepto))
    }
    example := map[string]interface{}{ "success" : 1 , "DiezmoConcepto": models.GetAllDiezmoConcepto() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
func (c *ListaPreviaDeTimbradoController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    BUNITs := BUNIT.(string)
    PERIOD := ""
    queryB := `SELECT periodoTimbrado FROM [Sevenplus].[dbo].[zConfig] WHERE BUNIT = '`+BUNITs+`'`
    rowsIglesia, _ := conn.Query(queryB)
    for rowsIglesia.Next()  {
      rowsIglesia.Scan(&PERIOD)
    }
    query := `SELECT  l.idLinea
      ,l.cuenta
      ,l.D_C_Tipo
      ,l.ANAL_T0
      ,l.ANAL_T1
      ,l.ANAL_T2
      ,l.ANAL_T3
      ,l.ANAL_T4
      ,l.ANAL_T5
      ,l.ANAL_T6
      ,l.ANAL_T7
      ,l.ANAL_T8
      ,l.ANAL_T9
      ,l.rfc
      ,l.razonSocial
      ,l.correo
      ,l.NumCtaPago
      ,l.MetodoDePago
      ,c.nombre
  FROM [SunSystemsData].[dbo].[CedulasLinea] l
  INNER JOIN [SunSystemsData].[dbo].[CedulasConceptos] c on c.idConcepto = l.idConcepto
  INNER JOIN [SunSystemsData].[dbo].[Cedulas] ce on ce.idCedula = c.idCedula
  WHERE ce.BUNIT = '`+BUNITs+`'`
    rows, err := conn.Query(query)
    var IdLinea int
    var Cuenta string
    var D_C string
    var ANAL_T0 string
    var ANAL_T1 string
    var ANAL_T2 string
    var ANAL_T3 string
    var ANAL_T4 string
    var ANAL_T5 string
    var ANAL_T6 string
    var ANAL_T7 string
    var ANAL_T8 string
    var ANAL_T9 string
    var RFC string
    var RazonSocial string
    var Correo string
    var NumCtaPago string
    var MetodoDePago string
    var Nombre string

    var JRNAL_NO int
    var JRNAL_LINE int
    var AMOUNT decimal.Dec
    var AMOUNT_FISCAL decimal.Dec
    var PERIOD_Conta int
    var TRANS_DATETIME time.Time
    var DESCRIPTN string
    models.ClearCandidatosTimbrado()
    var cedul models.CandidatosTimbrado
       
    for rows.Next()  {
      rows.Scan(&IdLinea, &Cuenta,&D_C,&ANAL_T0,&ANAL_T1,&ANAL_T2,&ANAL_T3,&ANAL_T4,&ANAL_T5,&ANAL_T6,&ANAL_T7,&ANAL_T8, &ANAL_T9, &RFC, &RazonSocial, &Correo, &NumCtaPago, &MetodoDePago, &Nombre)
      Cuenta = strings.TrimSpace(Cuenta)
      D_C = strings.TrimSpace(D_C)
      ANAL_T0 = strings.TrimSpace(ANAL_T0)
      ANAL_T1 = strings.TrimSpace(ANAL_T1)
      ANAL_T2 = strings.TrimSpace(ANAL_T2)
      ANAL_T3 = strings.TrimSpace(ANAL_T3)
      ANAL_T4 = strings.TrimSpace(ANAL_T4)
      ANAL_T5 = strings.TrimSpace(ANAL_T5)
      ANAL_T6 = strings.TrimSpace(ANAL_T6)
      ANAL_T7 = strings.TrimSpace(ANAL_T7)
      ANAL_T8 = strings.TrimSpace(ANAL_T8)
      ANAL_T9 = strings.TrimSpace(ANAL_T9)
      D_C_CAD := `'C'`
      if Compare("1", D_C )==0 {
        D_C_CAD = `'D'`
      }
      if Compare("4", D_C )==0 {
        D_C_CAD = `'D','C'`
      }
      var queryDimensiones bytes.Buffer
      queryDimensiones.WriteString(``)
      if Compare(ANAL_T0,"")!=0 {
        queryDimensiones.WriteString(` AND a.ANAL_T0 = '`+ANAL_T0+`' `) 
      }
      if Compare(ANAL_T1,"")!=0 {
        queryDimensiones.WriteString(` AND a.ANAL_T1 = '`+ANAL_T1+`' `) 
      }
      if Compare(ANAL_T2,"")!=0 {
        queryDimensiones.WriteString(` AND a.ANAL_T2 = '`+ANAL_T2+`' `) 
      }
      if Compare(ANAL_T3,"")!=0 {
        queryDimensiones.WriteString(` AND a.ANAL_T3 = '`+ANAL_T3+`' `) 
      }
      if Compare(ANAL_T4,"")!=0 {
        queryDimensiones.WriteString(` AND a.ANAL_T4 = '`+ANAL_T4+`' `) 
      }
      if Compare(ANAL_T5,"")!=0 {
        queryDimensiones.WriteString(` AND a.ANAL_T5 = '`+ANAL_T5+`' `) 
      }
      if Compare(ANAL_T6,"")!=0 {
        queryDimensiones.WriteString(` AND a.ANAL_T6 = '`+ANAL_T6+`' `) 
      }
      if Compare(ANAL_T7,"")!=0 {
        queryDimensiones.WriteString(` AND a.ANAL_T7 = '`+ANAL_T7+`' `) 
      }
      if Compare(ANAL_T8,"")!=0 {
        queryDimensiones.WriteString(` AND a.ANAL_T8 = '`+ANAL_T8+`' `) 
      }
      if Compare(ANAL_T9,"")!=0 {
        queryDimensiones.WriteString(` AND a.ANAL_T9 = '`+ANAL_T9+`' `) 
      }
      
    

      
      queryConta := `SELECT a.JRNAL_NO, a.JRNAL_LINE, a.AMOUNT, a.PERIOD, a.TRANS_DATETIME, a.DESCRIPTN
  FROM [SunSystemsData].[dbo].[`+BUNITs+`_A_SALFLDG] a
  WHERE a.D_C in (`+D_C_CAD+`) AND a.ACCNT_CODE = '`+Cuenta+`' AND a.ALLOCATION != 'C'
  AND a.PERIOD >= `+PERIOD+` `+queryDimensiones.String()+` order by TRANS_DATETIME desc`
  fmt.Println(queryConta)
        rowsConta, err := conn.Query(queryConta)
        if err!=nil {
          fmt.Println(err)
        }
        for rowsConta.Next()  {
          rowsConta.Scan(&JRNAL_NO, &JRNAL_LINE, &AMOUNT, &PERIOD_Conta, &TRANS_DATETIME, &DESCRIPTN)
          fechaReal := ""
          mes := int(TRANS_DATETIME.Month())
        dia :=  TRANS_DATETIME.Day()
        if mes > 9 && dia > 9 {
          fechaReal = fmt.Sprintf("%d-%d-%d", TRANS_DATETIME.Year(), mes, dia)
        } else {
          if mes > 9 && dia < 10 {
            fechaReal = fmt.Sprintf("%d-%d-0%d", TRANS_DATETIME.Year(), mes, dia)
          } else {
            if mes < 10 && dia > 9 {
              fechaReal = fmt.Sprintf("%d-0%d-%d", TRANS_DATETIME.Year(), mes, dia)
            } else {
              fechaReal = fmt.Sprintf("%d-0%d-0%d", TRANS_DATETIME.Year(), mes, dia)
            }
          }
        }
          amountPrima := math.Abs(AMOUNT.Float64())
          queryXML := `SELECT AMOUNT
  FROM [SU_FISCAL].[dbo].[FISCAL_xml] 
  WHERE JRNAL_NO = `+strconv.Itoa(JRNAL_NO)+` AND JRNAL_LINE = `+strconv.Itoa(JRNAL_LINE)+` AND BUNIT = '`+BUNITs+`'`
          rowsXML, err := conn.Query(queryXML)
          //fmt.Println(queryXML)
          if err!=nil {
            fmt.Println(err)
          }
          for rowsXML.Next()  {
            rowsXML.Scan(&AMOUNT_FISCAL)
            amountFiscalPrima := math.Abs(AMOUNT_FISCAL.Float64())
            amountPrima = amountPrima - amountFiscalPrima
          }
          if amountPrima>0.0 {
          cedul = models.CandidatosTimbrado{JRNAL_NO, JRNAL_LINE, amountPrima, RFC, RazonSocial, Correo, NumCtaPago, MetodoDePago, Nombre, PERIOD_Conta, fechaReal, DESCRIPTN}
          models.AddCandidatosTimbrado(cedul, strconv.Itoa(JRNAL_NO)+"-"+strconv.Itoa(JRNAL_LINE))
          }
      }
    }
    example := map[string]interface{}{ "success" : 1 , "CandidatosTimbrado": models.GetAllCandidatosTimbrado() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
func (c *ListaUsuariosIglesiasController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    BUNITs := BUNIT.(string)
    query := `SELECT usuario, tipoDeUsuario, idUsuario, dimension, nombre, iglesia, activo
        FROM [SunSystemsData].[dbo].[users]
        WHERE BUNIT = '`+BUNIT.(string)+`' AND tipoDeUsuario = 5`
    rows, err := conn.Query(query)
    queryB := ""
    var ANL_CODE string
    var NAME string
    
    if Compare(BUNITs, "FOP") == 0 {
      queryB = `SELECT ANL_CODE,NAME FROM [SunSystemsData].[dbo].[`+BUNITs+`_ANL_CODE] WHERE ANL_CAT_ID= '10' AND SUBSTRING( ANL_CODE,1,1) = 'P' order by ANL_CODE asc`
    } else {
      queryB = `SELECT ANL_CODE,NAME FROM [SunSystemsData].[dbo].[`+BUNITs+`_ANL_CODE] WHERE ANL_CAT_ID= '06' AND SUBSTRING( ANL_CODE,1,1) = 'T' order by ANL_CODE asc`
    }
    rowsIglesia, _ := conn.Query(queryB)
    models.ClearDimensionesList()
    var cedulB models.Dimensiones
        for rowsIglesia.Next()  {
      rowsIglesia.Scan(&ANL_CODE, &NAME)
      cedulB = models.Dimensiones{ANL_CODE, NAME, NAME}
      models.AddDimension(cedulB, ANL_CODE)
    }
    

    var Usuario string
    var TipoDeUsuario int
    var IdUsuario int
    var Dimension string
    var Nombre string
    var Iglesia string
    var Activo int
    models.ClearUsuariosIglesias()
    var cedul models.UsuariosIglesias
        for rows.Next()  {
      rows.Scan(&Usuario, &TipoDeUsuario, &IdUsuario, &Dimension, &Nombre, &Iglesia, &Activo)
      cedul = models.UsuariosIglesias{Usuario, TipoDeUsuario, IdUsuario, Dimension, Nombre, Iglesia, Activo}
      models.AddUsuariosIglesias(cedul, strconv.Itoa(IdUsuario))
    }
    example := map[string]interface{}{ "success" : 1 , "UsuariosIglesias": models.GetAllUsuariosIglesias(), "iglesias": models.GetAllDimensiones() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
func (c *ListaCedulasController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    CedulaList := make(map[string]*Cedula)
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT nombre, idCedula FROM [SunSystemsData].[dbo].[Cedulas] WHERE BUNIT = '"+BUNIT.(string)+"' order by idCedula asc"
    rows, err := conn.Query(query)
    var nombre1 string
    var idCedula int64
    var cedul Cedula
       for rows.Next()  {
      rows.Scan(&nombre1, &idCedula)
      cedul = Cedula{nombre1,idCedula}
      //hardcode, checar despues!
      nombre := nombre1+"|"+strconv.FormatInt(idCedula,10)
      CedulaList[nombre] = &cedul
    }
    example := map[string]interface{}{ "cedulas": CedulaList }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
func (c *TipoDeDimensionesController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT ANL_CAT_ID, S_HEAD, DESCR FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CAT] order by ANL_CAT_ID asc"
    rows, err := conn.Query(query)
    var ANL_CAT_ID string
    var S_HEAD string
    var DESCR string
    //err = nil
    var dimen models.Dimensiones
        //_ = cuenta
      for rows.Next()  {
      rows.Scan(&ANL_CAT_ID, &S_HEAD, &DESCR)
      dimen = models.Dimensiones{ANL_CAT_ID,S_HEAD,DESCR}
      models.AddDimension(dimen, ANL_CAT_ID)
    }
    example := map[string]interface{}{ "dimensiones": models.GetAllDimensiones() }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}
func (c *CambiarUnidadDeNegocioController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    query := "SELECT BU_CODE FROM [SU_DOMAINDB].[dbo].[DOMN_BU_DSRCE_LINK] order by BU_CODE asc"
    rows, err := conn.Query(query)
    var BU_CODE string
    //err = nil
    var unit models.Unidad
        //_ = cuenta
      for rows.Next()  {
      rows.Scan(&BU_CODE)
      unit = models.Unidad{BU_CODE}
      models.AddUnidadDeNegocio(unit, BU_CODE)
    }
    example := map[string]interface{}{ "unidades": models.GetAllUnidadDeNegocio(), "BUNIT" : BUNIT.(string)  }
    c.Data["json"] = &example
    c.ServeJSON()
  }
}


func (c *ConfigInicialLineasTiposDeDiarioController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }

    queryCedulas := "SELECT idTipoDeDiario, Codigo, nombre FROM [SunSystemsData].[dbo].[TiposDeDiario] WHERE BUNIT = '"+BUNIT.(string)+"' order by idTipoDeDiario asc"
    rowsCedulas, _ := conn.Query(queryCedulas)
    var idTipoDeDiario int
    var Codigo string
    var Nombre string
    models.ClearTiposDeDiario()
    var cedul  models.TiposDD
        for rowsCedulas.Next()  {
      rowsCedulas.Scan(&idTipoDeDiario, &Codigo, &Nombre)
      cedul = models.TiposDD{idTipoDeDiario,Codigo,Nombre}
      models.AddTiposDeDiariop(cedul, strconv.Itoa(idTipoDeDiario) )
    }
    






    query := "SELECT ACNT_CODE, DESCR FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ACNT] order by ACNT_CODE asc"
    rows, err := conn.Query(query)
    var ACNT_CODE string
    var DESCR string
    err = nil
    var cuenta models.Cuenta
        _ = cuenta
      for rows.Next()  {
      rows.Scan(&ACNT_CODE, &DESCR)
      cuenta := models.Cuenta{ACNT_CODE, DESCR}
      models.AddCuenta(cuenta, ACNT_CODE)
    }
    queryPeriodos := "SELECT DISTINCT PERIOD FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] order by PERIOD asc"
    rowsPeriodos, err := conn.Query(queryPeriodos)
    var PERIOD string
    err = nil
    var periodo models.Periodo
        _ = periodo
        for rowsPeriodos.Next()  {
      rowsPeriodos.Scan(&PERIOD)
      periodo := models.Periodo{PERIOD}
      models.AddPeriodo(periodo, PERIOD)
    }

    queryDimensiones := "SELECT ANL_CAT_ID, ENTRY_NUM, S_HEAD FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ANL_ENT_ID = 901 order by ENTRY_NUM asc"
    rowsDimensiones, errDimensiones := conn.Query(queryDimensiones)
    if errDimensiones != nil {
      fmt.Println("que paso:", errDimensiones.Error())
    }
    var ANL_CAT_ID string
    var ENTRY_NUM int64

    var STATUS int64
    var ANL_CODE string
    var S_HEAD string

    var S_HEAD1 string
    var S_HEAD2 string
    var S_HEAD3 string
    var S_HEAD4 string
    var S_HEAD5 string
    var S_HEAD6 string
    var S_HEAD7 string
    var S_HEAD8 string
    var S_HEAD9 string
    var S_HEAD10 string
    
    var PROHIBIT_POSTING int64
    var NAME string
    var dimen models.DimensionLite
        
    for rowsDimensiones.Next()  {
      rowsDimensiones.Scan(&ANL_CAT_ID, &ENTRY_NUM, &S_HEAD)
      queryD := "SELECT c.ANL_CODE, c.NAME, c.STATUS, c.PROHIBIT_POSTING, a.DESCR FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CODE] c INNER JOIN [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CAT] a on a.ANL_CAT_ID = c.ANL_CAT_ID WHERE c.ANL_CAT_ID = '"+ANL_CAT_ID+"' order by c.ANL_CODE asc"
      rowsD, errD := conn.Query(queryD)
      if errD != nil {
        fmt.Println("que paso:", errD.Error())
      }
      for rowsD.Next()  {
        rowsD.Scan(&ANL_CODE, &NAME, &STATUS, &PROHIBIT_POSTING, &DESCR)
        dimen = models.DimensionLite{ANL_CAT_ID,ANL_CODE,ENTRY_NUM, STATUS, PROHIBIT_POSTING,NAME, DESCR}
        if ENTRY_NUM == 1 {
          models.AddDimensionU1(dimen,ANL_CODE);
          S_HEAD1 = S_HEAD
        }
        if ENTRY_NUM == 2 {
          models.AddDimensionU2(dimen,ANL_CODE);
          S_HEAD2 = S_HEAD
        }
        if ENTRY_NUM == 3 {
          models.AddDimensionU3(dimen,ANL_CODE);
          S_HEAD3 = S_HEAD
        }
        if ENTRY_NUM == 4 {
          models.AddDimensionU4(dimen,ANL_CODE);
          S_HEAD4 = S_HEAD
        }
        if ENTRY_NUM == 5 {
          models.AddDimensionU5(dimen,ANL_CODE);
          S_HEAD5 = S_HEAD
        }
        if ENTRY_NUM == 6 {
          models.AddDimensionU6(dimen,ANL_CODE);
          S_HEAD6 = S_HEAD
        }
        if ENTRY_NUM == 7 {
          models.AddDimensionU7(dimen,ANL_CODE);
          S_HEAD7 = S_HEAD
        }
        if ENTRY_NUM == 8 {
          models.AddDimensionU8(dimen,ANL_CODE);
          S_HEAD8 = S_HEAD
        }
        if ENTRY_NUM == 9 {
          models.AddDimensionU9(dimen,ANL_CODE);
          S_HEAD9 = S_HEAD
        }
        if ENTRY_NUM == 10 {
          models.AddDimensionU10(dimen,ANL_CODE);
          S_HEAD10 = S_HEAD
        }
      }
    }
    currentTime := int64(time.Now().Unix())
    example := map[string]interface{}{ "time" : currentTime, "D1" : S_HEAD1,"D2" : S_HEAD2, "D3" : S_HEAD3, "D4" : S_HEAD4,"D5" : S_HEAD5,"D6" : S_HEAD6,"D7" : S_HEAD7,"D8" : S_HEAD8,"D9" : S_HEAD9,"D10" : S_HEAD10, "tiposDeDiario": models.GetAllTiposDeDiario(), "cuentas": models.GetAllCuentas(), "periodos": models.GetAllPeriodos(), "ANAL_T0": models.GetAllDimension1(), "ANAL_T1": models.GetAllDimension2(), "ANAL_T2": models.GetAllDimension3(), "ANAL_T3": models.GetAllDimension4(), "ANAL_T4": models.GetAllDimension5(), "ANAL_T5": models.GetAllDimension6(), "ANAL_T6": models.GetAllDimension7(), "ANAL_T7": models.GetAllDimension8(), "ANAL_T8": models.GetAllDimension9(), "ANAL_T9": models.GetAllDimension10()}
    c.Data["json"] = &example
    c.ServeJSON() 
  }         
} 

func (c *ConfigInicialLineasInformesController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }

    queryCedulas := `SELECT idDiezmoConcepto,concepto,activo
        FROM [SunSystemsData].[dbo].[DiezmoConcepto] 
      WHERE BUNIT = '`+BUNIT.(string)+`' AND activo = 1 order by idDiezmoConcepto asc`
    rowsCedulas, _ := conn.Query(queryCedulas)
    var Concepto string
    var IdDiezmoConcepto int
    var Activo int
    models.ClearDiezmoConcepto()
    var cedul models.DiezmoConcepto
        for rowsCedulas.Next()  {
      rowsCedulas.Scan(&IdDiezmoConcepto, &Concepto, &Activo)
      cedul = models.DiezmoConcepto{Concepto, IdDiezmoConcepto, Activo}
      models.AddDiezmoConcepto(cedul, strconv.Itoa(IdDiezmoConcepto))
    }

    query := "SELECT ACNT_CODE, DESCR FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ACNT] order by ACNT_CODE asc"
    rows, err := conn.Query(query)
    var ACNT_CODE string
    var DESCR string
    err = nil
    var cuenta models.Cuenta
        _ = cuenta
      for rows.Next()  {
      rows.Scan(&ACNT_CODE, &DESCR)
      cuenta := models.Cuenta{ACNT_CODE, DESCR}
      models.AddCuenta(cuenta, ACNT_CODE)
    }
    queryPeriodos := "SELECT DISTINCT PERIOD FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] order by PERIOD asc"
    rowsPeriodos, err := conn.Query(queryPeriodos)
    var PERIOD string
    err = nil
    var periodo models.Periodo
        _ = periodo
        for rowsPeriodos.Next()  {
      rowsPeriodos.Scan(&PERIOD)
      periodo := models.Periodo{PERIOD}
      models.AddPeriodo(periodo, PERIOD)
    }

    queryDimensiones := "SELECT ANL_CAT_ID, ENTRY_NUM, S_HEAD FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ANL_ENT_ID = 901 order by ENTRY_NUM asc"
    rowsDimensiones, errDimensiones := conn.Query(queryDimensiones)
    if errDimensiones != nil {
      fmt.Println("que paso:", errDimensiones.Error())
    }
    var ANL_CAT_ID string
    var ENTRY_NUM int64

    var STATUS int64
    var ANL_CODE string
    var S_HEAD string

    var S_HEAD1 string
    var S_HEAD2 string
    var S_HEAD3 string
    var S_HEAD4 string
    var S_HEAD5 string
    var S_HEAD6 string
    var S_HEAD7 string
    var S_HEAD8 string
    var S_HEAD9 string
    var S_HEAD10 string
    
    var PROHIBIT_POSTING int64
    var NAME string
    var dimen models.DimensionLite
        
    for rowsDimensiones.Next()  {
      rowsDimensiones.Scan(&ANL_CAT_ID, &ENTRY_NUM, &S_HEAD)
      queryD := "SELECT c.ANL_CODE, c.NAME, c.STATUS, c.PROHIBIT_POSTING, a.DESCR FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CODE] c INNER JOIN [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CAT] a on a.ANL_CAT_ID = c.ANL_CAT_ID WHERE c.ANL_CAT_ID = '"+ANL_CAT_ID+"' order by c.ANL_CODE asc"
      rowsD, errD := conn.Query(queryD)
      if errD != nil {
        fmt.Println("que paso:", errD.Error())
      }
      for rowsD.Next()  {
        rowsD.Scan(&ANL_CODE, &NAME, &STATUS, &PROHIBIT_POSTING, &DESCR)
        dimen = models.DimensionLite{ANL_CAT_ID,ANL_CODE,ENTRY_NUM, STATUS, PROHIBIT_POSTING,NAME, DESCR}
        if ENTRY_NUM == 1 {
          models.AddDimensionU1(dimen,ANL_CODE);
          S_HEAD1 = S_HEAD
        }
        if ENTRY_NUM == 2 {
          models.AddDimensionU2(dimen,ANL_CODE);
          S_HEAD2 = S_HEAD
        }
        if ENTRY_NUM == 3 {
          models.AddDimensionU3(dimen,ANL_CODE);
          S_HEAD3 = S_HEAD
        }
        if ENTRY_NUM == 4 {
          models.AddDimensionU4(dimen,ANL_CODE);
          S_HEAD4 = S_HEAD
        }
        if ENTRY_NUM == 5 {
          models.AddDimensionU5(dimen,ANL_CODE);
          S_HEAD5 = S_HEAD
        }
        if ENTRY_NUM == 6 {
          models.AddDimensionU6(dimen,ANL_CODE);
          S_HEAD6 = S_HEAD
        }
        if ENTRY_NUM == 7 {
          models.AddDimensionU7(dimen,ANL_CODE);
          S_HEAD7 = S_HEAD
        }
        if ENTRY_NUM == 8 {
          models.AddDimensionU8(dimen,ANL_CODE);
          S_HEAD8 = S_HEAD
        }
        if ENTRY_NUM == 9 {
          models.AddDimensionU9(dimen,ANL_CODE);
          S_HEAD9 = S_HEAD
        }
        if ENTRY_NUM == 10 {
          models.AddDimensionU10(dimen,ANL_CODE);
          S_HEAD10 = S_HEAD
        }
      }
    }
    example := map[string]interface{}{ "D1" : S_HEAD1,"D2" : S_HEAD2, "D3" : S_HEAD3, "D4" : S_HEAD4,"D5" : S_HEAD5,"D6" : S_HEAD6,"D7" : S_HEAD7,"D8" : S_HEAD8,"D9" : S_HEAD9,"D10" : S_HEAD10, "DiezmoConcepto": models.GetAllDiezmoConcepto(), "cuentas": models.GetAllCuentas(), "periodos": models.GetAllPeriodos(), "ANAL_T0": models.GetAllDimension1(), "ANAL_T1": models.GetAllDimension2(), "ANAL_T2": models.GetAllDimension3(), "ANAL_T3": models.GetAllDimension4(), "ANAL_T4": models.GetAllDimension5(), "ANAL_T5": models.GetAllDimension6(), "ANAL_T6": models.GetAllDimension7(), "ANAL_T7": models.GetAllDimension8(), "ANAL_T8": models.GetAllDimension9(), "ANAL_T9": models.GetAllDimension10()}
    c.Data["json"] = &example
    c.ServeJSON() 
  }         
} 
func (c *ConfigInicialLineasCedulasController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }

    CedulaList := make(map[string]*Cedula)
    queryCedulas := "SELECT nombre, idCedula FROM [SunSystemsData].[dbo].[Cedulas] WHERE BUNIT = '"+BUNIT.(string)+"' order by idCedula asc"
    rowsCedulas, _ := conn.Query(queryCedulas)
    var nombre1 string
    var idCedula int64
    var cedul Cedula
        for rowsCedulas.Next()  {
      rowsCedulas.Scan(&nombre1, &idCedula)
      cedul = Cedula{nombre1,idCedula}
      //hardcode, checar despues!
      nombre := nombre1+"|"+strconv.FormatInt(idCedula,10)
      CedulaList[nombre] = &cedul
    }
    






    query := "SELECT ACNT_CODE, DESCR FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ACNT] order by ACNT_CODE asc"
    rows, err := conn.Query(query)
    var ACNT_CODE string
    var DESCR string
    err = nil
    var cuenta models.Cuenta
        _ = cuenta
      for rows.Next()  {
      rows.Scan(&ACNT_CODE, &DESCR)
      cuenta := models.Cuenta{ACNT_CODE, DESCR}
      models.AddCuenta(cuenta, ACNT_CODE)
    }
    queryPeriodos := "SELECT DISTINCT PERIOD FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_A_SALFLDG] order by PERIOD asc"
    rowsPeriodos, err := conn.Query(queryPeriodos)
    var PERIOD string
    err = nil
    var periodo models.Periodo
        _ = periodo
        for rowsPeriodos.Next()  {
      rowsPeriodos.Scan(&PERIOD)
      periodo := models.Periodo{PERIOD}
      models.AddPeriodo(periodo, PERIOD)
    }

    queryDimensiones := "SELECT ANL_CAT_ID, ENTRY_NUM, S_HEAD FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ANL_ENT_ID = 901 order by ENTRY_NUM asc"
    rowsDimensiones, errDimensiones := conn.Query(queryDimensiones)
    if errDimensiones != nil {
      fmt.Println("que paso:", errDimensiones.Error())
    }
    var ANL_CAT_ID string
    var ENTRY_NUM int64

    var STATUS int64
    var ANL_CODE string
    var S_HEAD string

    var S_HEAD1 string
    var S_HEAD2 string
    var S_HEAD3 string
    var S_HEAD4 string
    var S_HEAD5 string
    var S_HEAD6 string
    var S_HEAD7 string
    var S_HEAD8 string
    var S_HEAD9 string
    var S_HEAD10 string
    
    var PROHIBIT_POSTING int64
    var NAME string
    var dimen models.DimensionLite
        
    for rowsDimensiones.Next()  {
      rowsDimensiones.Scan(&ANL_CAT_ID, &ENTRY_NUM, &S_HEAD)
      queryD := "SELECT c.ANL_CODE, c.NAME, c.STATUS, c.PROHIBIT_POSTING, a.DESCR FROM [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CODE] c INNER JOIN [SunSystemsData].[dbo].["+BUNIT.(string)+"_ANL_CAT] a on a.ANL_CAT_ID = c.ANL_CAT_ID WHERE c.ANL_CAT_ID = '"+ANL_CAT_ID+"' order by c.ANL_CODE asc"
      rowsD, errD := conn.Query(queryD)
      if errD != nil {
        fmt.Println("que paso:", errD.Error())
      }
      for rowsD.Next()  {
        rowsD.Scan(&ANL_CODE, &NAME, &STATUS, &PROHIBIT_POSTING, &DESCR)
        dimen = models.DimensionLite{ANL_CAT_ID,ANL_CODE,ENTRY_NUM, STATUS, PROHIBIT_POSTING,NAME, DESCR}
        if ENTRY_NUM == 1 {
          models.AddDimensionU1(dimen,ANL_CODE);
          S_HEAD1 = S_HEAD
        }
        if ENTRY_NUM == 2 {
          models.AddDimensionU2(dimen,ANL_CODE);
          S_HEAD2 = S_HEAD
        }
        if ENTRY_NUM == 3 {
          models.AddDimensionU3(dimen,ANL_CODE);
          S_HEAD3 = S_HEAD
        }
        if ENTRY_NUM == 4 {
          models.AddDimensionU4(dimen,ANL_CODE);
          S_HEAD4 = S_HEAD
        }
        if ENTRY_NUM == 5 {
          models.AddDimensionU5(dimen,ANL_CODE);
          S_HEAD5 = S_HEAD
        }
        if ENTRY_NUM == 6 {
          models.AddDimensionU6(dimen,ANL_CODE);
          S_HEAD6 = S_HEAD
        }
        if ENTRY_NUM == 7 {
          models.AddDimensionU7(dimen,ANL_CODE);
          S_HEAD7 = S_HEAD
        }
        if ENTRY_NUM == 8 {
          models.AddDimensionU8(dimen,ANL_CODE);
          S_HEAD8 = S_HEAD
        }
        if ENTRY_NUM == 9 {
          models.AddDimensionU9(dimen,ANL_CODE);
          S_HEAD9 = S_HEAD
        }
        if ENTRY_NUM == 10 {
          models.AddDimensionU10(dimen,ANL_CODE);
          S_HEAD10 = S_HEAD
        }
      }
    }

    example := map[string]interface{}{ "D1" : S_HEAD1,"D2" : S_HEAD2, "D3" : S_HEAD3, "D4" : S_HEAD4,"D5" : S_HEAD5,"D6" : S_HEAD6,"D7" : S_HEAD7,"D8" : S_HEAD8,"D9" : S_HEAD9,"D10" : S_HEAD10, "cedulas": CedulaList, "cuentas": models.GetAllCuentas(), "periodos": models.GetAllPeriodos(), "ANAL_T0": models.GetAllDimension1(), "ANAL_T1": models.GetAllDimension2(), "ANAL_T2": models.GetAllDimension3(), "ANAL_T3": models.GetAllDimension4(), "ANAL_T4": models.GetAllDimension5(), "ANAL_T5": models.GetAllDimension6(), "ANAL_T6": models.GetAllDimension7(), "ANAL_T7": models.GetAllDimension8(), "ANAL_T8": models.GetAllDimension9(), "ANAL_T9": models.GetAllDimension10()}
    c.Data["json"] = &example
    c.ServeJSON() 
  }         
}

func (c *EstadosDeCuentaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    DB := c.GetSession("DB")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    DT := "DT"
  //  T := "T"
    if Compare(BUNIT.(string),"ADV")==0{//Hardcode
      DT = "DS"
  //    T = "C"
    }
    queryDD := "SELECT NAME, ANL_CODE FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_ANL_CODE] WHERE ANL_CAT_ID = '04' AND SUBSTRING(ANL_CODE,1,2) = '"+DT+"'"
    rowsDD, _ := conn.Query(queryDD)
    models.ClearistritoD()
    var cedul  models.DistritoD
    Codigo := ""
    Nombre := ""
        for rowsDD.Next()  {
      rowsDD.Scan(&Nombre, &Codigo)
      Nombre = strings.TrimSpace(Nombre)
      Codigo = strings.TrimSpace(Codigo)
      cedul = models.DistritoD{Nombre,make(map[string]*models.PorIglesiaD)}
      models.AddDistritoD(cedul, Codigo)
    }


    queryDD = `SELECT  DISTINCT a.ACCNT_CODE, aa.DESCR
    FROM [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] a
    INNER JOIN [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_ACNT] aa on a.ACCNT_CODE = aa.ACNT_CODE
    WHERE a.ANAL_T9 = 'PENE' AND SUBSTRING(a.ACCNT_CODE,1,1) not in ( '8','3')`
    rowsDD, _ = conn.Query(queryDD)
    type Archivos struct {
      Nombre string
      Completo string
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)

//    models.ClearArchivos()
//    var archi models.Archivos
    aux1 := ""
    aux2 := ""
    for rowsDD.Next()  {
      rowsDD.Scan(&aux1, &aux2)
      aux1 = strings.TrimSpace(aux1)
      aux2 = strings.TrimSpace(aux2)
      ArchivosList[aux1] = &Archivos{aux1, aux2}
      //archi = models.Archivos{aux1, aux2}
      //models.AddArchivos(archi, aux1)
    }
    
    

    query := "SELECT ACNT_CODE, DESCR FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_ACNT] order by ACNT_CODE asc"
    rows, err := conn.Query(query)
    var ACNT_CODE string
    var DESCR string
    err = nil
    
      

        type Cuenta struct {
      ACNT_CODE string
      DESCR string
    }
    CuentasList := make(map[string]*Cuenta)
      for rows.Next()  {
      rows.Scan(&ACNT_CODE, &DESCR)
      CuentasList[ACNT_CODE] = &Cuenta{ACNT_CODE, DESCR}
    }
    type PeriodoNew struct {
      PERIOD string
    }
    PeriodoNewList := make(map[string]*PeriodoNew)
    queryPeriodos := "SELECT DISTINCT PERIOD FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] order by PERIOD asc"
    rowsPeriodos, err := conn.Query(queryPeriodos)
    var PERIOD string
    err = nil
    //var periodo models.Periodo
        //_ = periodo
        for rowsPeriodos.Next()  {
      rowsPeriodos.Scan(&PERIOD)
      PeriodoNewList[PERIOD] = &PeriodoNew{PERIOD}
      //periodo := models.Periodo{PERIOD}
      //models.AddPeriodo(periodo, PERIOD)
    }

    queryDimensiones := "SELECT ANL_CAT_ID, ENTRY_NUM FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ANL_ENT_ID = 901 order by ENTRY_NUM asc"
    rowsDimensiones, errDimensiones := conn.Query(queryDimensiones)
    if errDimensiones != nil {
      fmt.Println("que paso:", errDimensiones.Error())
    }
    var ANL_CAT_ID string
    var ENTRY_NUM int64

    var STATUS int64
    var ANL_CODE string
    var PROHIBIT_POSTING int64
    var NAME string
    //var dimen models.DimensionLite

    type DimensionLite struct {
      ANL_CAT_ID string
      ANL_CODE string
      ENTRY_NUM int64
      STATUS int64
      PROHIBIT_POSTING int64
      NAME string
      DESCR string
    }
    DimensionList1 := make(map[string]*DimensionLite)
    DimensionList2 := make(map[string]*DimensionLite)
    DimensionList3 := make(map[string]*DimensionLite)
    DimensionList4 := make(map[string]*DimensionLite)
    DimensionList5 := make(map[string]*DimensionLite)
    DimensionList6 := make(map[string]*DimensionLite)
    DimensionList7 := make(map[string]*DimensionLite)
    DimensionList8 := make(map[string]*DimensionLite)
    DimensionList9 := make(map[string]*DimensionLite)
    DimensionList10 := make(map[string]*DimensionLite)
        
    for rowsDimensiones.Next()  {
      rowsDimensiones.Scan(&ANL_CAT_ID, &ENTRY_NUM)
      queryD := "SELECT c.ANL_CODE, c.NAME, c.STATUS, c.PROHIBIT_POSTING, a.DESCR FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_ANL_CODE] c INNER JOIN ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_ANL_CAT] a on a.ANL_CAT_ID = c.ANL_CAT_ID WHERE c.ANL_CAT_ID = '"+ANL_CAT_ID+"' order by c.ANL_CODE asc"
      rowsD, errD := conn.Query(queryD)
      if errD != nil {
        fmt.Println("que paso:", errD.Error())
      }
      for rowsD.Next()  {
        rowsD.Scan(&ANL_CODE, &NAME, &STATUS, &PROHIBIT_POSTING, &DESCR)
        NAME = ANL_CODE+" - "+NAME
        DESCR = ANL_CODE+" - "+DESCR
        dimen := DimensionLite{ANL_CAT_ID,ANL_CODE,ENTRY_NUM, STATUS, PROHIBIT_POSTING,NAME, DESCR}
        //_ = dimen
        if ENTRY_NUM == 1 {
          DimensionList1[ANL_CODE] = &dimen
          //models.AddDimensionU1(dimen,ANL_CODE);
        }
        if ENTRY_NUM == 2 {
          DimensionList2[ANL_CODE] = &dimen
          //models.AddDimensionU2(dimen,ANL_CODE);
        }
        if ENTRY_NUM == 3 {
          DimensionList3[ANL_CODE] = &dimen
          //models.AddDimensionU3(dimen,ANL_CODE);
        }
        if ENTRY_NUM == 4 {
          DimensionList4[ANL_CODE] = &dimen
          //models.AddDimensionU4(dimen,ANL_CODE);
        }
        if ENTRY_NUM == 5 {
          DimensionList5[ANL_CODE] = &dimen
          //models.AddDimensionU5(dimen,ANL_CODE);
        }
        if ENTRY_NUM == 6 {
          DimensionList6[ANL_CODE] = &dimen
          //models.AddDimensionU6(dimen,ANL_CODE);
        }
        if ENTRY_NUM == 7 {
          DimensionList7[ANL_CODE] = &dimen
          //models.AddDimensionU7(dimen,ANL_CODE);
        }
        if ENTRY_NUM == 8 {
          DimensionList8[ANL_CODE] = &dimen
          //models.AddDimensionU8(dimen,ANL_CODE);
        }
        if ENTRY_NUM == 9 {
          DimensionList9[ANL_CODE] = &dimen
          //models.AddDimensionU9(dimen,ANL_CODE);
        }
        if ENTRY_NUM == 10 {
          DimensionList10[ANL_CODE] = &dimen
          //models.AddDimensionU10(dimen,ANL_CODE);
        }
      }
    }
    example := map[string]interface{}{"success" : 1, "cuentas": CuentasList, "periodos": PeriodoNewList, "ANAL_T0": DimensionList1, "ANAL_T1": DimensionList2, "ANAL_T2": DimensionList3, "ANAL_T3": DimensionList4, "ANAL_T4": DimensionList5, "ANAL_T5": DimensionList6, "ANAL_T6": DimensionList7, "ANAL_T7": DimensionList8, "ANAL_T8": DimensionList9, "ANAL_T9": DimensionList10, "distritos" : models.GetAllDistritoD(), "cuentasIngreso" : ArchivosList}
    c.Data["json"] = &example
    c.ServeJSON() 
  }         
} 

/*  
func (c *EstadosDeCuentaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    BUNIT := c.GetSession("BUNIT")
    DB := c.GetSession("DB")
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    DT := "DT"
  //  T := "T"
    if Compare(BUNIT.(string),"ADV")==0{//Hardcode
      DT = "DS"
  //    T = "C"
    }
    queryDD := "SELECT NAME, ANL_CODE FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_ANL_CODE] WHERE ANL_CAT_ID = '04' AND SUBSTRING(ANL_CODE,1,2) = '"+DT+"'"
    rowsDD, _ := conn.Query(queryDD)
    models.ClearistritoD()
    var cedul  models.DistritoD
    Codigo := ""
    Nombre := ""
        for rowsDD.Next()  {
      rowsDD.Scan(&Nombre, &Codigo)
      Nombre = strings.TrimSpace(Nombre)
      Codigo = strings.TrimSpace(Codigo)
      cedul = models.DistritoD{Nombre,make(map[string]*models.PorIglesiaD)}
      models.AddDistritoD(cedul, Codigo)
    }


    queryDD = `SELECT  DISTINCT a.ACCNT_CODE, aa.DESCR
    FROM [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_A_SALFLDG] a
    INNER JOIN [`+DB.(string)+`].[dbo].[`+BUNIT.(string)+`_ACNT] aa on a.ACCNT_CODE = aa.ACNT_CODE
    WHERE a.ANAL_T9 = 'PENE' AND SUBSTRING(a.ACCNT_CODE,1,1) not in ( '8','3')`
    rowsDD, _ = conn.Query(queryDD)
    type Archivos struct {
      Nombre string
      Completo string
    }
    var (
      ArchivosList map[string]*Archivos
    )
    ArchivosList = make(map[string]*Archivos)

//    models.ClearArchivos()
//    var archi models.Archivos
    aux1 := ""
    aux2 := ""
    for rowsDD.Next()  {
      rowsDD.Scan(&aux1, &aux2)
      aux1 = strings.TrimSpace(aux1)
      aux2 = strings.TrimSpace(aux2)
      ArchivosList[aux1] = &Archivos{aux1, aux2}
      //archi = models.Archivos{aux1, aux2}
      //models.AddArchivos(archi, aux1)
    }
    
    

    query := "SELECT ACNT_CODE, DESCR FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_ACNT] order by ACNT_CODE asc"
    rows, err := conn.Query(query)
    var ACNT_CODE string
    var DESCR string
    err = nil
    var cuenta models.Cuenta
        _ = cuenta
      for rows.Next()  {
      rows.Scan(&ACNT_CODE, &DESCR)
      cuenta := models.Cuenta{ACNT_CODE, DESCR}
      models.AddCuenta(cuenta, ACNT_CODE)
    }
    queryPeriodos := "SELECT DISTINCT PERIOD FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_A_SALFLDG] order by PERIOD asc"
    rowsPeriodos, err := conn.Query(queryPeriodos)
    var PERIOD string
    err = nil
    var periodo models.Periodo
        _ = periodo
        for rowsPeriodos.Next()  {
      rowsPeriodos.Scan(&PERIOD)
      periodo := models.Periodo{PERIOD}
      models.AddPeriodo(periodo, PERIOD)
    }

    queryDimensiones := "SELECT ANL_CAT_ID, ENTRY_NUM FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_ANL_ENT_DEFN] WHERE ANL_ENT_ID = 901 order by ENTRY_NUM asc"
    rowsDimensiones, errDimensiones := conn.Query(queryDimensiones)
    if errDimensiones != nil {
      fmt.Println("que paso:", errDimensiones.Error())
    }
    var ANL_CAT_ID string
    var ENTRY_NUM int64

    var STATUS int64
    var ANL_CODE string
    var PROHIBIT_POSTING int64
    var NAME string
    type DimensionLite struct {
      ANL_CAT_ID string
      ANL_CODE string
      ENTRY_NUM int64
      STATUS int64
      PROHIBIT_POSTING int64
      NAME string
      DESCR string
    }
    var dimen DimensionLite
        
        type Dimension1 struct {
      ANL_CAT_ID string
      ANL_CODE string
      ENTRY_NUM int64
      STATUS int64
      PROHIBIT_POSTING int64
      NAME string
      DESCR string
    }
    var (
      DimensionList1 map[string]*DimensionLite
    )
    DimensionList1 = make(map[string]*DimensionLite)
    var (
      DimensionList2 map[string]*DimensionLite
    )
    DimensionList2 = make(map[string]*DimensionLite)
    var (
      DimensionList3 map[string]*DimensionLite
    )
    DimensionList3 = make(map[string]*DimensionLite)
    var (
      DimensionList4 map[string]*DimensionLite
    )
    DimensionList4 = make(map[string]*DimensionLite)
    var (
      DimensionList5 map[string]*DimensionLite
    )
    DimensionList5 = make(map[string]*DimensionLite)
    var (
      DimensionList6 map[string]*DimensionLite
    )
    DimensionList6 = make(map[string]*DimensionLite)
    var (
      DimensionList7 map[string]*DimensionLite
    )
    DimensionList7 = make(map[string]*DimensionLite)
    var (
      DimensionList8 map[string]*DimensionLite
    )
    DimensionList8 = make(map[string]*DimensionLite)
    var (
      DimensionList9 map[string]*DimensionLite
    )
    DimensionList9 = make(map[string]*DimensionLite)
    var (
      DimensionList10 map[string]*DimensionLite
    )
    DimensionList10 = make(map[string]*DimensionLite)
  

  
  
    for rowsDimensiones.Next()  {
      rowsDimensiones.Scan(&ANL_CAT_ID, &ENTRY_NUM)
      queryD := "SELECT c.ANL_CODE, c.NAME, c.STATUS, c.PROHIBIT_POSTING, a.DESCR FROM ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_ANL_CODE] c INNER JOIN ["+DB.(string)+"].[dbo].["+BUNIT.(string)+"_ANL_CAT] a on a.ANL_CAT_ID = c.ANL_CAT_ID WHERE c.ANL_CAT_ID = '"+ANL_CAT_ID+"' order by c.ANL_CODE asc"
      rowsD, errD := conn.Query(queryD)
      if errD != nil {
        fmt.Println("que paso:", errD.Error())
      }
      for rowsD.Next()  {
        rowsD.Scan(&ANL_CODE, &NAME, &STATUS, &PROHIBIT_POSTING, &DESCR)
        NAME = ANL_CODE+" - "+NAME
        DESCR = ANL_CODE+" - "+DESCR
        dimen = DimensionLite{ANL_CAT_ID,ANL_CODE,ENTRY_NUM, STATUS, PROHIBIT_POSTING,NAME, DESCR}
        if ENTRY_NUM == 1 {
          DimensionList1[ANL_CODE] = &DimensionList1{dimen}
        }
        if ENTRY_NUM == 2 {
          DimensionList2[ANL_CODE] = &DimensionList2{dimen}
          //models.AddDimensionU2(dimen,ANL_CODE);
        }
        if ENTRY_NUM == 3 {
          DimensionList3[ANL_CODE] = &DimensionList3{dimen}
        //  models.AddDimensionU3(dimen,ANL_CODE);
        }
        if ENTRY_NUM == 4 {
          DimensionList4[ANL_CODE] = &DimensionList4{dimen}
          //models.AddDimensionU4(dimen,ANL_CODE);
        }
        if ENTRY_NUM == 5 {
          DimensionList5[ANL_CODE] = &DimensionList5{dimen}
          //models.AddDimensionU5(dimen,ANL_CODE);
        }
        if ENTRY_NUM == 6 {
          DimensionList6[ANL_CODE] = &DimensionList6{dimen}
        }
        if ENTRY_NUM == 7 {
          DimensionList7[ANL_CODE] = &DimensionList7{dimen}
          //models.AddDimensionU7(dimen,ANL_CODE);
        }
        if ENTRY_NUM == 8 {
          DimensionList8[ANL_CODE] = &DimensionList8{dimen}
        }
        if ENTRY_NUM == 9 {
          DimensionList9[ANL_CODE] = &DimensionList9{dimen}
        }
        if ENTRY_NUM == 10 {
          DimensionList10[ANL_CODE] = &DimensionList10{dimen}
        }
      }
    }
    example := map[string]interface{}{"success" : 1, "cuentas": models.GetAllCuentas(), "periodos": models.GetAllPeriodos(), "ANAL_T0": DimensionList1, "ANAL_T1": DimensionList2, "ANAL_T2": DimensionList3, "ANAL_T3": DimensionList4, "ANAL_T4": DimensionList5, "ANAL_T5": DimensionList6, "ANAL_T6": DimensionList7, "ANAL_T7": DimensionList8, "ANAL_T8": DimensionList9, "ANAL_T9": DimensionList10, "distritos" : models.GetAllDistritoD(), "cuentasIngreso" : ArchivosList}
    c.Data["json"] = &example
    c.ServeJSON() 
  }         
} 
*/


func (c *CambiarContrasenaController) Post() {
  alias := c.GetSession("alias")
  if alias == nil{
    return
  }
  tipoDeUsuario := c.GetSession("tipoDeUsuario")
  if tienePermisosContador(tipoDeUsuario.(int)) {
    contraAnterior := c.GetString("contraAnterior")
    contraNueva := c.GetString("contraNueva")
    idUsuario := c.GetSession("idUsuario")
    idUsuarioS := strconv.Itoa(idUsuario.(int))
    passwordPrimoAnterior := []byte(contraAnterior)
    hasher := sha512.New()
      hasher.Write(passwordPrimoAnterior)
    cryptoText := base64.StdEncoding.EncodeToString(hasher.Sum(nil))
    flag.Parse() // parse the command line args
    connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
    conn, err := sql.Open("mssql", connString2) 
    defer conn.Close()
    if err != nil {
      fmt.Println("Open connection failed:", err.Error())
    }
    defer conn.Close()
    stmt, err := conn.Prepare("SELECT TOP 1  usuario, pass,activo, alias, BUNIT, tipoDeUsuario FROM [Sevenplus].[dbo].[users] WHERE idUsuario = '"+idUsuarioS+"'")
    if err != nil {
      fmt.Println("Prepare failed 1:", err.Error())
    }
    row := stmt.QueryRow()
    var activo int
    var usuario string
    var pass string
    var alias string
    var BUNIT string
    var tipoDeUsuario int
    err = row.Scan( &usuario, &pass, &activo,&alias,&BUNIT,&tipoDeUsuario)
    if err != nil {
      fmt.Println(err)
    }
    if Compare(pass, cryptoText) ==0 { //vamos a grabar el nuevo password
      passwordPrimoNuevo := []byte(contraNueva)
      hasher1 := sha512.New()
        hasher1.Write(passwordPrimoNuevo)
      cryptoTextNuevo := base64.StdEncoding.EncodeToString(hasher1.Sum(nil))
      flag.Parse() // parse the command line args
      

      query1 := "UPDATE [Sevenplus].[dbo].[users] SET pass = '"+cryptoTextNuevo+"'  WHERE idUsuario  = "+idUsuarioS
      
      _ , err1 := conn.Exec(query1)
      if err1 != nil {
        defer conn.Close()
        fmt.Println("Perdon update dif! : ", err1.Error())
      }
      example := map[string]interface{}{ "success" : 1 }
      c.Data["json"] = &example
      c.ServeJSON()

    } else {
      example := map[string]interface{}{ "success":  2}
      c.Data["json"] = &example
      c.ServeJSON()
    }
  }
}
func (c *LoginController) Post() {
  correo := c.GetString("correo")
  password := c.GetString("password")
  c.Data["correo"] = correo
  c.Data["password"] = password
  passwordPrimo := []byte(password)
  hasher := sha512.New()
    hasher.Write(passwordPrimo)
  cryptoText := base64.StdEncoding.EncodeToString(hasher.Sum(nil))
  flag.Parse() // parse the command line args
  connString2 := "Database=Sevenplus;Data Source="+beego.AppConfig.String("mssqlurls")+";Integrated Security=False;User ID="+beego.AppConfig.String("mssqluser")+";Password="+beego.AppConfig.String("mssqlpass")+";connect timeout = 1000; encrypt=disable;";
  conn, err := sql.Open("mssql", connString2) 
  defer conn.Close()
  if err != nil {
    fmt.Println("Open connection failed:", err.Error())
  }
  defer conn.Close()
  stmt, err := conn.Prepare("SELECT TOP 1 DB, idUsuario, usuario, pass,activo, alias, BUNIT, tipoDeUsuario FROM [Sevenplus].[dbo].[users] WHERE usuario = '"+correo+"'")
  if err != nil {
    fmt.Println("Prepare failed 2: ", err.Error())
  }
  defer stmt.Close()
  row := stmt.QueryRow()
  var activo int
  var idUsuario int
  var usuario string
  var pass string
  var alias string
  var BUNIT string
  var DB string
  var tipoDeUsuario int
  err = row.Scan(&DB, &idUsuario, &usuario, &pass, &activo,&alias,&BUNIT,&tipoDeUsuario)
  if err != nil {
    //fmt.Println("Scan failed:", err.Error())
    c.Data["mensaje"] = "contraseña incorrecta bd"
    c.TplName = "index.tpl"
  }
    fmt.Println("lo que escribiste:"+cryptoText)
    
fmt.Println("bd: "+pass)
    
  if Compare(cryptoText,pass)==0{
      c.SetSession("tipoDeUsuario",tipoDeUsuario)
      c.SetSession("alias", alias)
      if tipoDeUsuario==5 {//tesorero
      c.SetSession("alias", usuario)
      }
      c.SetSession("usuario", usuario)
      c.SetSession("idUsuario", idUsuario)
      c.SetSession("BUNIT", BUNIT)
      c.SetSession("DB", DB)
fmt.Println("DB session: "+DB)
fmt.Println("correo: "+usuario)
      c.Data["alias"] = alias
      c.Data["BUNIT"] = BUNIT
      c.Data["DB"] = DB
      c.Data["tipoDeUsuario"] = tipoDeUsuario
      ayudame := "menu"+strconv.Itoa(tipoDeUsuario)+".tpl"
    c.Layout = "seven.tpl"
    c.Data["mensaje"] = ""
      c.TplName = "vacio.tpl"
      c.LayoutSections = make(map[string]string)
      c.LayoutSections["menu"] = ayudame
      c.LayoutSections["contenido"] = "nada.tpl"
  }else{
    c.Data["mensaje"] = "contraseña incorrecta"
    c.TplName = "index.tpl"
   }
}

func Compare(a, b string) int {
  if a == b {
    return 0
  }
  if a < b {
    return -1
  }
  return +1
} 

// how many digit's groups to process
const groups_number int = 4

var _smallNumbers = []string{
  "cero", "uno", "dos", "tres", "cuatro",
  "cinco", "seis", "siete", "ocho", "nueve",
  "diez", "once", "doce", "trece", "catorce",
  "quince", "dieciseis", "diecisiete", "dieciocho", "diecinueve",
}
var _tens = []string{
  "", "", "veinte", "treinta", "cuarenta", "cincuenta",
  "sesenta", "setenta", "ochenta", "noventa",
}
var _scaleNumbers = []string{
  "", "mil", "millon", "billon",
}

type digitGroup int


func Convert(number float64) string {
  // Zero rule
  if number == 0 {
    return _smallNumbers[0]
  }

  // Divide into three-digits group
  var groups [groups_number]digitGroup
  positive := math.Abs(float64(number))

  // Form three-digit groups
  for i := 0; i < groups_number; i++ {
    groups[i] = digitGroup(math.Mod(positive, 1000))
    positive /= 1000
  }

  var textGroup [groups_number]string
  for i := 0; i < groups_number; i++ {
    textGroup[i] = digitGroup2Text(groups[i])
  }
  combined := textGroup[0]

  for i := 1; i < groups_number; i++ {
    if groups[i] != 0 {
      prefix := textGroup[i] + " " + _scaleNumbers[i]

      if len(combined) != 0 {
        prefix += " "
      }

      combined = prefix + combined
    }
  }

  if number < 0 {
    combined = "minus " + combined
  }

  return combined
}

func intMod(x, y int) int {
  return int(math.Mod(float64(x), float64(y)))
}

func digitGroup2Text(group digitGroup) (ret string) {
  hundreds := group / 100
  tensUnits := intMod(int(group), 100)

  if hundreds != 0 {
    ret += _smallNumbers[hundreds] + " cien"

    if tensUnits != 0 {
      ret += " "
    }
  }

  tens := tensUnits / 10
  units := intMod(tensUnits, 10)

  if tens >= 2 {
    ret += _tens[tens]

    if units != 0 {
      ret += " " + _smallNumbers[units]
    }
  } else if tensUnits != 0 {
    ret += _smallNumbers[tensUnits]
  }

  return
}
func has(input string, words []string) (bool, string) {
         for _, word := range words {
                 if strings.Index(input, word) > -1 {
                         return true, word
                         break
                 }
         }
         return false, ""
 }

 func initUniDoc(licenseKey string) error {
  if len(licenseKey) > 0 {
    err := unilicense.SetLicenseKey(licenseKey)
    if err != nil {
      return err
    }
  }

  // To make the library log we just have to initialise the logger which satisfies
  // the unicommon.Logger interface, unicommon.DummyLogger is the default and
  // does not do anything. Very easy to implement your own.
  unicommon.SetLogger(unicommon.DummyLogger{})

  return nil
}
func mergePdf(inputPaths []string, outputPath string) error {
  pdfWriter := unipdf.NewPdfWriter()

  for _, inputPath := range inputPaths {
    f, err := os.Open(inputPath)
    if err != nil {
      return err
    }

    defer f.Close()

    pdfReader, err := unipdf.NewPdfReader(f)
    if err != nil {
      return err
    }

    isEncrypted, err := pdfReader.IsEncrypted()
    if err != nil {
      return err
    }

    if isEncrypted {
      _, err = pdfReader.Decrypt([]byte(""))
      if err != nil {
        return err
      }
    }

    numPages, err := pdfReader.GetNumPages()
    if err != nil {
      return err
    }

    for i := 0; i < numPages; i++ {
      pageNum := i + 1

      page, err := pdfReader.GetPage(pageNum)
      if err != nil {
        return err
      }

      err = pdfWriter.AddPage(page)
      if err != nil {
        return err
      }
    }
  }

  fWrite, err := os.Create(outputPath)
  if err != nil {
    return err
  }

  defer fWrite.Close()

  err = pdfWriter.Write(fWrite)
  if err != nil {
    return err
  }

  return nil
}